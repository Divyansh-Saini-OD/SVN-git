#! /usr/bin/ksh
FTPUSER=prodftp
FTPPASSWD=ftpprod
user_name=`(echo $FCP_LOGIN | cut -f1 -d'/')`       ### Sep2011: $1 was replaced by $FCP_LOGIN because conc secure option was changed to ENCRYPT 
password=`(echo $FCP_LOGIN | cut -f2 -d'/')`        ### This was a SOX reqmt. See Defect#13862.
mfdatafile=$XXCRM_DATA/inbound/tops/$6
logfilemfload=$XXCRM_DATA/outbound/load_sales_terms`date '+%d%m%Y%H%M'`.log

## Bring the sales data over from the mainframe
date '+DATE: %m/%d/%y%nTIME:%H:%M:%S' >> $logfilemfload
echo "STEP1 Bring the sales data over from the mainframe" >> $logfilemfload
ftp -n mfsysa << SCRIPT1
user $FTPUSER $FTPPASSWD
EBCDIC
cd ..
get $5 $XXCRM_DATA/inbound/tops/$6
bye
SCRIPT1

if [ -f $mfdatafile ]
then
   echo "FTP from mainframe completed $?" >> $logfilemfload
else
  echo "FTP completed $?. File not found. Aborting....." >> $logfilemfload
  exit 1 
fi    


## Delete the sales terms before loading them
echo "STEP2 Delete the sales terms before loading them" >> $logfilemfload

sqlplus $user_name/$password  << SCRIPT2
SET SERVEROUTPUT ON SIZE 5000
@$XXCRM_DATA/outbound/delete_sales_terms.sql
commit;
quit
SCRIPT2
echo "STEP2 Completed the Delete of the sales terms" >> $logfilemfload

# 2011 March.After TERADATA Fastexport upgrade, mainframe started sending data with trailing NULLS ie right-padded with nulls, causing SQL Loader
# to error on TRANSACTION_ID column, because it is the last column in this variable length record. 
nullcount=-1
echo "STEP2 Checking for presence of NULLS in $mfdatafile" >> $logfilemfload
nullcount=`od $mfdatafile |  grep ' 000' | wc -l`
echo "STEP2 Found $nullcount NULL chars in file. Status $?  [0 means success]" >> $logfilemfload
if [ "$nullcount" -gt 0 ]
then
    echo "STEP2 Since NULL chars were found, starting to remove them from file" >> $logfilemfload    
    sed -i 's/\x0//g' $mfdatafile
    echo "STEP2 Removed NULL chars from file. Status $?  [0 means success]" >> $logfilemfload
else
   echo "STEP2 No NULL chars found, so good to got to STEP3.  nullcount= $nullcount" >> $logfilemfload
fi

## Need to return status to host program according to failures encountered.
actualerrors=0
loadedrows=0
echo "STEP3 SQL loader to be invoked to read $mfdatafile " >> $logfilemfload

sqlldr  $user_name/$password  readsize=10000000 bindsize=10000000 control=$XXCRM_TOP/bin/XX_LOAD_SALES_TERMS.ctl data=$mfdatafile log=$XXCRM_DATA/outbound/load_sales_terms.out
retstatus=$?  
echo "STEP3 SQL loader returned status = $retstatus  ### 0: Successful  1: Unrecoverable failure  2: At least one row rejected 3: OS Errors"  >> $logfilemfload

ls -l $XXCRM_DATA/outbound/load_sales_terms.out >> $logfilemfload 
cat $XXCRM_DATA/outbound/load_sales_terms.out >> $logfilemfload 
cat $XXCRM_DATA/outbound/load_sales_terms.out

##Checking if we need to pass error status to host program, so that it is marked as failed in ESP
if [ $retstatus -eq 2 -o $retstatus -eq 0 ]
then
  echo "STEP3 Checking errors in sqlldr log" >> $logfilemfload
  actualerrors=`cat $XXCRM_DATA/outbound/load_sales_terms.out | grep 'Rows not loaded due to data errors' | awk '{printf $1}' `
  loadedrows=`cat $XXCRM_DATA/outbound/load_sales_terms.out | grep 'Rows successfully loaded' | awk '{printf $1}' `
 
  if [ "$loadedrows" -gt 0 ]
  then 
     echo "STEP3 Proceeding to next step, because $loadedrows rows were loaded. Number of rows failed to load = $actualerrors"  >> $logfilemfload
  else
      echo "STEP3 Aborting because no rows were loaded [$loadedrows]. Number of rows failed to load = $actualerrors" >> $logfilemfload
      exit 1 ;   # next step of Update sales-terms table should not happen, and conc job should error out
  fi 
else
    echo "STEP3 Aborting because sqlldr has failed i.e. return status is = $retstatus" >> $logfilemfload
    exit 1 ;   # next step of Update sales-terms table should not happen, and conc job should error out
fi


# Update the sales terms last update date
echo "STEP4 Update the sales terms last update date" >> $logfilemfload
sqlplus $user_name/$password  << SCRIPT3
SET SERVEROUTPUT ON SIZE 5000
@$XXCRM_DATA/outbound/update_sales_terms.sql
commit;
quit
SCRIPT3
echo "STEP4 Completed the Update to the sales terms last update date" >> $logfilemfload