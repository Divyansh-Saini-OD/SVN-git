#! /usr/bin/ksh
#-- +=======================================================================+
#-- |               Office Depot - Project Simplify                         |
#-- |             Oracle NAIO Consulting Organization                       |
#-- +=======================================================================+
#-- | Name            : XXCRMTLIGNLOAD.prog                                 |
#-- | Rice ID         : I0405_Territories                                   |
#-- | Description     : Shell script to load the XX_JTF_TERR_QUAL_TLIGN_INT |
#-- |                   table                                               |
#-- |                                                                       |
#-- |Change History:                                                        |
#-- |---------------                                                        |
#-- |                                                                       |
#-- |Version  Date        Author                Remarks                     |
#-- |-------  ----------- -----------------     --------------------------  |
#-- |Draft 1A 22-OCT-2007 Mohan Kalyanasundaram Initial Draft version       |
#-- |1.0      08-JAN-2008 Hema Chikkanna        Included parameters         |
#-- |1.1      24-JAN-2008 Hema Chikkanna        Modified the code to get the| 
#-- |                                           Source path                 |
#-- |1.2      30-JAN-2008 Hema Chikkanna        Modified the code as per    | 
#-- |                                           change in ftp path          |
#-- |1.3      16-FEB-2008 Hema Chikkanna        Modified the code to fix the| 
#-- |                                           Execution Logging           |
#-- +=======================================================================+

#Shell Script for fetching the data files and loading them into the staging table.

tempfile="/tmp/tempfile.$$"
trap "rm -f $tempfile" 0 1 15  # zap tempfile on exit

#Apps default parameters
FCP_REQID=$4

echo "================================================================================" >> $tempfile
echo "Start Time          : `date`"                               >> $tempfile
echo "Program Name        : OD: Terralign Detail File Generation" >> $tempfile
echo "================================================================================" >> $tempfile

lc_custom_top="$XXCRM_DATA"
ftp_path="$lc_custom_top/ftp/in/terralign/"
source_path="$lc_custom_top/inbound/terralign/"
error_path="$lc_custom_top/error/terralign/"
archive_path="$lc_custom_top/archive/inbound/terralign/"

echo "Copying from FTP Directory: $ftp_path" >> $tempfile
cp -f "$ftp_path"* "$source_path."

rc="$?"

 if [ "rc" -ne "0" ] && [ "rc" -ne "2" ]; then
 
   echo "Copying of Files from Internal FTP server to Terralign directory failed! - return code = " ${rc} >> $tempfile
   cat $tempfile >> $APPLCSF/$APPLLOG/l${FCP_REQID}.req
   exit 0
 else
   echo "Successfully copied files from FTP diecrtory to Terralign folder" >> $tempfile
 fi


echo "Source Path : " ${source_path}     >> $tempfile

#Search for the File in the Source Path
ls -X -1 "$source_path"*header* "$source_path"*HEADER*

ls -X -1 "$source_path"*header* "$source_path"*HEADER* | awk '{ print $NF }'|while read obj
do

echo "================================================================================" >> $tempfile

headerfile="$obj"

hdrname=`echo $headerfile  | cut -f8 -d"/"`
   
echo "Processing File: $hdrname" >> $tempfile

export headerfile

inputline=""
linecnt=0
echo "\n" >>$headerfile


   while read inputline
   do
     
     (( linecnt = linecnt + 1 ))
     
     echo "Line#: $linecnt"          >> $tempfile
     echo "Header Line: $inputline"  >> $tempfile
     
     if [ "$linecnt" -lt 2 ]
     then
       echo "Line skipped"           >> $tempfile       
       continue
     fi
     
     if [ "$linecnt" -eq 2 ]
     then
     
		 mapname=`echo $inputline  | cut -f1 -d","` 
		 unittype=`echo $inputline | cut -f2 -d","` 
		 numrecs=`echo $inputline  | cut -f3 -d","` 
		 updfilex=`echo $inputline | cut -f4 -d","`
		 updfile=`echo $updfilex   | cut -f2 -d'"'`

		 echo "MapName: $mapname"       >> $tempfile
		 echo "UnitType: $unittype"     >> $tempfile
		 echo "Numrecs: $numrecs"       >> $tempfile
		 echo "Update file: $updfile"   >> $tempfile

		 newpattern=","$mapname","$unittype","$updfile","$numrecs","

		 lc_data_file="XXCRMTLIGNLOAD.csv"

		 export lc_data_file

		 sedoutfile="$source_path$lc_data_file"

		 sedinfile="$source_path$updfile"

		 oldpattern=","

     
		 if [ -f "$sedinfile" ]
		 then
		   echo "Detail File Found for replace: $updfile"            >> $tempfile  
		 else
		   echo "Detail File Not Found for replace: $updfile"        >> $tempfile
		   echo "Moving Header File from Source to Error Directory"  >> $tempfile
		   mv ${headerfile} ${error_path}
		   echo "Program aborting...."                               >> $tempfile
		   break 
		 fi
		 
	 else
	        echo "Line skipped"           >> $tempfile       
	        continue
     fi

     echo "Starting Data file Processing : `date`" >> $tempfile  
     
     sed -e "1d" -e "s/$oldpattern/$newpattern/1" "$sedinfile" > "$sedoutfile"
     
     echo "The Data file created $lc_data_file"  >> $tempfile
     
     echo "End of Data file Processing"  >> $tempfile  
     
   done < "$headerfile"

 # Program to load the Detail file to the XX_JTF_TERR_QUAL_TLIGN_INT
 
 #Data File and Control File Name
 lc_control_file="XX_JTF_TERR_QUAL_TLIGN.ctl"
 lc_log_file="XXCRMTLIGNLOAD.log"
 lc_bad_file="XXCRMTLIGNLOAD.bad"
 
 
 echo "================================================================================" >> $tempfile
 echo "Start Time          : `date`"                                       >> $tempfile
 echo "Program Name        : OD: Load Terralign Territory Qualifiers Data" >> $tempfile
 echo "Data File Name      : " ${lc_data_file}                             >> $tempfile
 echo "Control File Name   : " ${lc_control_file}                          >> $tempfile
 echo "================================================================================" >> $tempfile
  
 
 
 #validating the source file
 if [ -f  ${source_path}${lc_data_file} ]
 then
   echo "" >> $tempfile
   echo "The Data File Exist" >> $tempfile
   echo "" >> $tempfile
   
 else
   echo "The Data File does not Exist" >> $tempfile
   if [ -f ${headerfile} ]
   then
     echo "Moving Header File from Source to Error Directory"  >> $tempfile
     mv ${headerfile} ${error_path}
   fi  
   echo "Program aborting...." >> $tempfile
   echo " " >> $tempfile
   echo " " >> $tempfile
   continue 
 fi
 
 lc_ctl_file="$XXCRM_TOP"
 
 control_path="$lc_ctl_file/bin/"
 echo "Control File Path : " ${control_path}  >> $tempfile
 
 #validating the control file
 if [ -f  ${control_path}${lc_control_file} ]
 then
   echo "" >> $tempfile
   echo "The Control File Exist" >> $tempfile
   echo "" >> $tempfile
   
 else
   echo "The Control File does not Exist" >> $tempfile
   echo "Program aborting...." >> $tempfile
   exit 1
 fi
 
 
 #Start SQL*Loader script
 
 sqlldr parfile=$HOME/.parfile.XXCRM control=${control_path}${lc_control_file} data=${source_path}${lc_data_file} log=${error_path}${lc_log_file} bad=${error_path}${lc_bad_file} silent=HEADER,FEEDBACK,DISCARDS,PARTITIONS errors=20000
 
 rc="$?"
  
 if [ "rc" -ne "0" ] && [ "rc" -ne "2" ]; then
   echo "sqlldr failed! - return code = " ${rc} >> $tempfile
   continue
 fi
 
 #Add the SQL*Loader Logfile to the standard Oracle Applications Logfile
 cat ${error_path}${lc_log_file} >> $tempfile
 
 #Move the data file from the incoming directory to the archive directory
 echo " " >> $tempfile
 echo "Moving files from Source Directory to Archive Directory" >> $tempfile
 echo " " >> $tempfile

 echo "Moving ${lc_data_file} from ${source_path} to ${archive_path}" >> $tempfile
 mv ${source_path}${lc_data_file} ${archive_path}
 
 echo "Moving ${updfile} from ${source_path} to ${archive_path}"      >> $tempfile
 mv ${source_path}${updfile} ${archive_path}

 
 echo "Moving ${hdrname} from ${source_path} to ${archive_path}"      >> $tempfile
 mv ${headerfile} ${archive_path}
 
 
done

echo "Removing Files from ${ftp_path}" >> $tempfile
rm ${ftp_path}*.* 
cat $tempfile >> $APPLCSF/$APPLLOG/l${FCP_REQID}.req

exit 0
