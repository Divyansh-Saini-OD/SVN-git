# +===================================================================+
# |                  Office Depot - Project Simplify                  |
# |      			WIPRO 				                |
# +===================================================================+
# | Name  : 	   XXCOMFTP   	                                  |
# | Description:   This program does the following                    |
# |             1) FTP the file from $souce to $dest in the $server.Th|
# |                -e $server is connected to using $user and $passwor|
# |                -d. The filename is picked from $filename passed as|
# |                a parameter to the concurrent program.             |
# |                                                                   |
# |                All the other values are fetched from translation  |
# |                tables. The translation definition is OD_FTP_PROCE-|
# |                SSES.                                              |
# |                                                                   |
# |             2) Ensure that the login.sql file for the instance has|
# |                the set termout off command.Otherwise the program  |
# |                errors out.                                        |
# |Change Record:                                                     |
# |===============                                                    |
# |Version   Date        Author           Remarks                     |
# |=======   ==========  =============    ============================|
# |DRAFT 1A 23-JAN-2008  Afan Sheriff     Initial draft version       |
# |      2  29-OCT-2008  Subbu Pillai     Defect 12210				  |
# | 3.0      09-SEP-2016    Praveen Vanga Defect 39261       		  |
# | 3.1      01-SEP-2017    Madhu Bolli   Result filesuccess strig is corrected  |
# +===================================================================+

# Displaying program arguments

echo $XXFIN_DATA
   
EXECFILE=$XXFIN_DATA/COM_FTP.$$      #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$EXECFILE;chmod 600 $EXECFILE

TMPFILE=$XXFIN_DATA/COM_FTP_TMP.$$   #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$TMPFILE;chmod 600 $TMPFILE

ARCHFILE1=$XXFIN_DATA/ARCHFILE1.$$   #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$ARCHFILE1;chmod 600 $ARCHFILE1

ARCHFILE2=$XXFIN_DATA/ARCHFILE2.$$   #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$ARCHFILE2;chmod 600 $ARCHFILE2

ARCHEXEC=$XXFIN_DATA/ARCHEXEC.$$     #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$ARCHEXEC;chmod 600 $ARCHEXEC


rm tmpfile3
rm tmpfile4


tmpfile3=$XXFIN_DATA/tmpfile3.$$     #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$tmpfile3;chmod 600 $tmpfile3

tmpfile4=$XXFIN_DATA/tmpfile4.$$     #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$tmpfile4;chmod 600 $tmpfile4


EXIT=0


 echo "1 st argument = username/password"
 echo "2 nd argument = $2"
 echo "3 rd argument = $3"
 echo "4 th argument = $4"
 echo "5 th argument = $5"
 echo "6 th argument = $6"
 echo "7 th argument = $7"
 echo "8 th argument = $8"
 
# Fetching Process Name and filename.

 translationsource=$5 
 filename=$6
 destfile=$7
 delete_src_file=$8
 
export SQLPATH=$APPL_TOP
 
 
 # Copying source file to destination. 
 # Optionally changing source string to destination string.

V_RESULT=`sqlplus -s /nolog <<EOF
set pagesize 0
set linesize 255
set sqlprompt " "
set serveroutput on 
set verify off
      select 
            xftv.Target_Value1 
            || '|' || xftv.Target_Value2
            || '|' || xftv.Target_Value3
            || '|' || xftv.Target_Value4
            || '|' || xftv.Target_Value5
            || '|' || xftv.Target_Value6
            || '|' || xftv.Target_Value7
      from  
            xx_fin_translatedefinition xftd,
            xx_fin_translatevalues     xftv
      where 
            xftd.translation_name   ='OD_FTP_PROCESSES'
            and xftv.source_value1  ='$translationsource' 
            and xftd.translate_id   =xftv.translate_id;
exit
EOF`

server=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[1] }'`
user=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[2] }'`
passwd=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[3] }'`
source1=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[4] }'`
dest1=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[5] }'`
mframeflag=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[6] }'`
archive1=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[7] }'`

eval source=$source1
eval dest=$dest1
eval archive=$archive1

echo $archive >> tmpfile3
perl -pe 's/\//\\\//g' tmpfile3 >> tmpfile4
archive_internal=`cat tmpfile4`



 echo " "
 echo " "
 echo "Translationsource                      = $translationsource"
 echo "Server                                 = $server "
 echo "User name                              = $user"
 #echo "Password                              = $passwd"
 echo "Source Directory                       = $source"
 echo "Destination Directory                  = $dest"
 echo "source filename                        = $filename"
 echo "destination filename                   = $destfile"

echo "verbose" >> $EXECFILE
echo "open $server" >> $EXECFILE
echo "quote USER $user" >> $EXECFILE
echo "quote PASS $passwd" >> $EXECFILE
echo "lcd $dest" >> $EXECFILE
echo "prompt off" >> $EXECFILE

if [ "$mframeflag" = "Y" ]               # For ftp to Mainframes
 then
     echo "get '$filename' $destfile" >> $EXECFILE
elif [ "$destfile" != "" ]               # For ftp with a different destination file name
 then
     echo "cd $source" >> $EXECFILE
     echo "get  $filename $destfile" >> $EXECFILE
else                                     # For ftp with destination filename parameter blank, multiple files can be sent.
     echo "cd $source" >> $EXECFILE
     echo "mget $filename" >> $EXECFILE
fi

echo "quit" >> $EXECFILE
 

ftp -n < $EXECFILE > $TMPFILE

Server_check=`grep 'Not connected' $TMPFILE`
User_passwd=`grep 'Please login with USER and PASS'  $TMPFILE`
Local_directory_error=`grep '550 Failed to change directory' $TMPFILE`
Success=`grep 'File send OK'  $TMPFILE`
Filesuccess=`grep '226 Transfer complete'  $TMPFILE`
Mframesuccess=`grep 'Transfer completed successfully'  $TMPFILE`

if [ "$Server_check" != "" ]
then
    echo " "
    echo "ERROR: Please check the server. Server provided is $server."
    rm $TMPFILE
    rm $EXECFILE
    rm $ARCHFILE1
    rm $ARCHFILE2
    rm $ARCHEXEC
	 rm $tmpfile3  # Added for Defect 12210
    rm $tmpfile4  # Added for Defect 12210	 
    exit 1

elif [ "$User_passwd" != "" ]
then
    echo " "
    echo "ERROR: Please provide appropriate username and password."
    rm $TMPFILE
    rm $EXECFILE
    rm $ARCHFILE1
    rm $ARCHFILE2
    rm $ARCHEXEC
	 rm $tmpfile3  # Added for Defect 12210
    rm $tmpfile4  # Added for Defect 12210	 
    exit 1

elif [ "$Local_directory_error" != "" ]
then
    echo " "
    echo "ERROR: Cannot change to $dest"
    rm $TMPFILE
    rm $EXECFILE
    rm $ARCHFILE1
    rm $ARCHFILE2
    rm $ARCHEXEC
	 rm $tmpfile3  # Added for Defect 12210
    rm $tmpfile4  # Added for Defect 12210	 
    exit 1

elif [ "$Success" != "" ]
then 
    echo " "
    echo "SUCCESS: Successful transmission"
    rm $TMPFILE
    rm $EXECFILE
    cd $dest
    if [ "$destfile" != "" ]
    then 
        ls -l $destfile > ARCHFILE1
    else
        ls -l $filename > ARCHFILE1
    fi
    perl -pe 's/-/'$archive_internal" "'/' ARCHFILE1 > ARCHFILE2
    if [ "$archive" != "" ]
    then
            cat ARCHFILE2 | awk '{ split($0,MODULE," "); print "cp " ,MODULE[10],MODULE[1] "/" MODULE[10] strftime("%y%m%d%H%M%S") }' >> $ARCHEXEC 
    fi
    
    sh $ARCHEXEC
    rm $ARCHFILE1
    rm $ARCHFILE2
    rm $ARCHEXEC
	 rm $tmpfile3  # Added for Defect 12210
    rm $tmpfile4  # Added for Defect 12210	 
    exit 0

elif [ "$Mframesuccess" != "" ]
then 
    echo " "
    echo "SUCCESS: Successful transmission from Mainframe"
    rm $TMPFILE
    rm $EXECFILE
    cd $dest
    if [ "$destfile" != "" ]
    then 
        ls -l $destfile > ARCHFILE1
    else
        ls -l $filename > ARCHFILE1
    fi
    perl -pe 's/-/'$archive_internal" "'/' ARCHFILE1 > ARCHFILE2
    if [ "$archive" != "" ]
    then
           cat ARCHFILE2 | awk '{ split($0,MODULE," "); print "cp " ,MODULE[10],MODULE[1] "/" MODULE[10] strftime("%y%m%d%H%M%S") }' >> $ARCHEXEC 
    fi
    sh $ARCHEXEC
    rm $ARCHFILE1
    rm $ARCHFILE2
    rm $ARCHEXEC
	 rm $tmpfile3  # Added for Defect 12210
    rm $tmpfile4  # Added for Defect 12210	 
    exit 0

elif [ "$Filesuccess" != "" ]
then 
    echo " "
    echo "SUCCESS: Successful transmission of File"
    rm $TMPFILE
    rm $EXECFILE
    cd $dest
    if [ "$destfile" != "" ]
    then 
        ls -l $destfile > ARCHFILE1
    else
        ls -l $filename > ARCHFILE1
    fi
    perl -pe 's/-/'$archive_internal" "'/' ARCHFILE1 > ARCHFILE2
    if [ "$archive" != "" ]
    then
            cat ARCHFILE2 | awk '{ split($0,MODULE," "); print "cp " ,MODULE[10],MODULE[1] "/" MODULE[10] strftime("%y%m%d%H%M%S") }' >> $ARCHEXEC 
    fi
    sh $ARCHEXEC
	cat $ARCHEXEC
    rm ARCHFILE1
    rm ARCHFILE2
    rm $ARCHEXEC
	 rm $tmpfile3  # Added for Defect 12210
    rm $tmpfile4  # Added for Defect 12210	 
    exit 0	

fi

echo "ERROR: Please refer below for error details"
cat $TMPFILE
rm $TMPFILE
rm $EXECFILE
rm $ARCHFILE1
rm $ARCHFILE2
rm $ARCHEXEC
rm $tmpfile3  # Added for Defect 12210
rm $tmpfile4  # Added for Defect 12210
exit 1

