package od.tdmatch.model.reports.am;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Types;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.HashMap;

import java.util.List;

import od.tdmatch.model.lov.POInquiryHeaderVOImpl;
import od.tdmatch.model.lov.POInquiryHeaderVORowImpl;
import od.tdmatch.model.lov.SKULovVOImpl;
import od.tdmatch.model.lov.SKULovVORowImpl;
import od.tdmatch.model.reports.am.common.ODTradeMatchReportsAM;
import od.tdmatch.model.reports.vo.ConsignmentRTVSearchVOImpl;
import od.tdmatch.model.reports.vo.ConsignmentRTVSearchVORowImpl;
import od.tdmatch.model.reports.vo.ConsignmentRTVTotalVOImpl;
import od.tdmatch.model.reports.vo.ConsignmentRTVVOImpl;
import od.tdmatch.model.reports.vo.PoInquiryDetailsVOImpl;
import od.tdmatch.model.reports.vo.PoInquiryInvPopVOImpl;
import od.tdmatch.model.reports.vo.PoInquiryMainVOImpl;
import od.tdmatch.model.reports.vo.PoInquiryRecPopVOImpl;
import od.tdmatch.model.reports.vo.PoInquirySearchVOImpl;
import od.tdmatch.model.reports.vo.PoInquirySearchVORowImpl;
import od.tdmatch.model.reports.vo.PoInquiryWrtoffPopVOImpl;
import od.tdmatch.model.reports.vo.XxApChargeBackDtlVoImpl;
import od.tdmatch.model.reports.vo.XxApChargeBackMainVOImpl;
import od.tdmatch.model.reports.vo.XxApChargeBackSearchVOImpl;
import od.tdmatch.model.reports.vo.XxApChargeBackSearchVORowImpl;
import od.tdmatch.model.reports.vo.XxApDropDeducNonDedInqDtlVOImpl;
import od.tdmatch.model.reports.vo.XxApDropDeducNonDedInqSearchVOImpl;
import od.tdmatch.model.reports.vo.XxApDropDeducNonDedInqSearchVORowImpl;
import od.tdmatch.model.reports.vo.XxApDropDeducNonDedInqSumVOImpl;
import od.tdmatch.model.reports.vo.XxApInvoicePaymentInquiryHDummyVOImpl;
import od.tdmatch.model.reports.vo.XxApInvoicePaymentInquiryHeaderVOImpl;
import od.tdmatch.model.reports.vo.XxApInvoicePaymentInquiryItemVOImpl;
import od.tdmatch.model.reports.vo.XxApInvoicePaymentInquirySearchVOImpl;
import od.tdmatch.model.reports.vo.XxApInvoicePaymentInquirySearchVORowImpl;
import od.tdmatch.model.reports.vo.XxApMatchRateDataAllFinalizedVOImpl;
import od.tdmatch.model.reports.vo.XxApMatchRateDataDueDaysVOImpl;
import od.tdmatch.model.reports.vo.XxApMatchRateDataFirstPassVOImpl;
import od.tdmatch.model.reports.vo.XxApMatchRateDataPaymtDueVOImpl;
import od.tdmatch.model.reports.vo.XxApMatchRateDataTrueMatchVOImpl;
import od.tdmatch.model.reports.vo.XxApMatchRateDataVOImpl;
import od.tdmatch.model.reports.vo.XxApMatchRateDefaultDataVOImpl;
import od.tdmatch.model.reports.vo.XxApMatchRateDefaultDataVORowImpl;
import od.tdmatch.model.reports.vo.XxApMatchRateVOImpl;
import od.tdmatch.model.reports.vo.XxApMatchRateVORowImpl;
import od.tdmatch.model.reports.vo.XxApNonDedInqResultVOImpl;
import od.tdmatch.model.reports.vo.XxApNonDedInqSearchVOImpl;
import od.tdmatch.model.reports.vo.XxApNonDedInqSearchVORowImpl;
import od.tdmatch.model.reports.vo.XxApRTVReconCAVOImpl;
import od.tdmatch.model.reports.vo.XxApRTVReconTotalVOImpl;
import od.tdmatch.model.reports.vo.XxApRTVReconUSVOImpl;
import od.tdmatch.model.reports.vo.XxApRTVReconciliationSearchVOImpl;
import od.tdmatch.model.reports.vo.XxApRTVReconciliationSearchVORowImpl;
import od.tdmatch.model.reports.vo.XxApReasonCodeDetailVOImpl;
import od.tdmatch.model.reports.vo.XxApReasonCodeSearchVOImpl;
import od.tdmatch.model.reports.vo.XxApReasonCodeSearchVORowImpl;
import od.tdmatch.model.reports.vo.XxApReasonCodeSummaryVOImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailInquirySearchVOImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailInquirySearchVORowImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailSummVOImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailSummaryVOImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailTempTotalVOImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailTempVOImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailTotalLOVImpl;
import od.tdmatch.model.reports.vo.XxApTradeMatchSearchVOImpl;
import od.tdmatch.model.reports.vo.XxApTradeMatchSearchVORowImpl;
import od.tdmatch.model.reports.vo.XxApVendMatchAnaDummVOImpl;
import od.tdmatch.model.reports.vo.XxApVendorMatchAnaEmpVOImpl;
import od.tdmatch.model.reports.vo.XxApVendorMatchAnaVendVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaManager;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 11 14:26:24 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ODTradeMatchReportsAMImpl extends ApplicationModuleImpl implements ODTradeMatchReportsAM {
    /**
     * This is the default constructor (do not remove).
     */
    public ODTradeMatchReportsAMImpl() {
    }

    private static ADFLogger logger = ADFLogger.createADFLogger(ODTradeMatchReportsAMImpl.class);


    /**
     * @param trMaCashBkSearchMap
     * @return
     */
    public String searchTraMatChargebk(HashMap trMaCashBkSearchMap) {
        String outString = "";


        logger.info("searchTraMatChargebk called.");


        ViewObjectImpl xxApChargeBack = this.getXxApChargeBackMainVO();

        XxApChargeBackSearchVORowImpl row = (XxApChargeBackSearchVORowImpl) getXxApChargeBackSearchVO().getCurrentRow();

        if (trMaCashBkSearchMap != null && row != null) {
            logger.info(">>>>>>>>>>>>>>>>VendorAssistant>>>>>>>>>." + trMaCashBkSearchMap.get("VendorAssistant"));
            logger.info(">>>>>>>>>>>>>>>>getSuppliername>>>>>>>>>." + trMaCashBkSearchMap.get("Suppliername"));
            logger.info(">>>>>>>>>>>>>>>>getSuppliersiteno>>>>>>>>>." + trMaCashBkSearchMap.get("Suppliersiteno"));
            logger.info(">>>>>>>>>>>>>>>>getSku>>>>>>>>>." + trMaCashBkSearchMap.get("Sku"));
            logger.info(">>>>>>>>>>>>>>>>getInvoicedatefrom>>>>>>>>>." + trMaCashBkSearchMap.get("InvoiceDateFrom"));
            logger.info(">>>>>>>>>>>>>>>>getInvoicedateto>>>>>>>>>." + trMaCashBkSearchMap.get("InvoiceDateTo"));
            xxApChargeBack.setWhereClause(null);
            xxApChargeBack.clearViewCriterias();
            xxApChargeBack.setNamedWhereClauseParam("bindAssistCode", row.getAssistantCode());
            xxApChargeBack.setNamedWhereClauseParam("bindFromDate", trMaCashBkSearchMap.get("InvoiceDateFrom"));
            xxApChargeBack.setNamedWhereClauseParam("bindToDate", trMaCashBkSearchMap.get("InvoiceDateTo"));
            xxApChargeBack.setNamedWhereClauseParam("bindSupSiteId", row.getSupplierSiteId());
            xxApChargeBack.setNamedWhereClauseParam("bindOrgId", trMaCashBkSearchMap.get("orgId"));
            xxApChargeBack.setNamedWhereClauseParam("bindPrcExcep", trMaCashBkSearchMap.get("prcExce"));
            xxApChargeBack.setNamedWhereClauseParam("bindQtyExcep", trMaCashBkSearchMap.get("qtyExce"));
            xxApChargeBack.setNamedWhereClauseParam("bindOthExcep", trMaCashBkSearchMap.get("othExce"));
            xxApChargeBack.setNamedWhereClauseParam("bindInvItemId", row.getInvItemId());
            logger.info("Query value ::::" + xxApChargeBack.getQuery());
            xxApChargeBack.executeQuery();


        }
        return outString;
    }

    /**
     * Container's getter for XxApChargeBackMainVO1.
     * @return XxApChargeBackMainVO1
     */
    public XxApChargeBackMainVOImpl getXxApChargeBackMainVO() {
        return (XxApChargeBackMainVOImpl) findViewObject("XxApChargeBackMainVO");
    }


    /**
     * @param trMaCashBkSearchMap
     * @return
     */
    public String searchDrillDownChargebk(HashMap trMaCashBkSearchMap) {
        String outString = "";
        logger.info("searchDrillDownChargebk called.");
        ViewObjectImpl xxApChargeBackDtl = this.getXxApChargeBackSupVO();

        XxApChargeBackSearchVORowImpl row = (XxApChargeBackSearchVORowImpl) getXxApChargeBackSearchVO().getCurrentRow();
        if (trMaCashBkSearchMap != null && row != null) {

            logger.info(">>>>>>>>>>>>>>>>VendorAssistant>>>>>>>>>." + trMaCashBkSearchMap.get("VendorAssistant"));
            logger.info(">>>>>>>>>>>>>>>>getSuppliername>>>>>>>>>." + trMaCashBkSearchMap.get("Suppliername"));
            logger.info(">>>>>>>>>>>>>>>>getSuppliersiteno>>>>>>>>>." + trMaCashBkSearchMap.get("Suppliersiteno"));

            logger.info(">>>>>>>>>>>>>>>>getSku>>>>>>>>>." + trMaCashBkSearchMap.get("Sku"));
            logger.info(">>>>>>>>>>>>>>>>getInvoicedatefrom>>>>>>>>>." + trMaCashBkSearchMap.get("InvoiceDateFrom"));
            logger.info(">>>>>>>>>>>>>>>>getInvoicedateto>>>>>>>>>." + trMaCashBkSearchMap.get("InvoiceDateTo"));
            xxApChargeBackDtl.setWhereClause(null);
            xxApChargeBackDtl.clearViewCriterias();

            xxApChargeBackDtl.setNamedWhereClauseParam("bindAssistCode",trMaCashBkSearchMap.get("VendorAssistantCode"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindSupId", row.getSupplierId());
            xxApChargeBackDtl.setNamedWhereClauseParam("bindFromDate", trMaCashBkSearchMap.get("InvoiceDateFrom"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindToDate", trMaCashBkSearchMap.get("InvoiceDateTo"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindPrcExcep", trMaCashBkSearchMap.get("prcExce"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindQtyExcep", trMaCashBkSearchMap.get("qtyExce"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindOthExcep", trMaCashBkSearchMap.get("othExce"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindOrgId", trMaCashBkSearchMap.get("orgId"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindSupSiteId", row.getSupplierSiteId());
            xxApChargeBackDtl.setNamedWhereClauseParam("bindInvItemId", row.getInvItemId());
            xxApChargeBackDtl.executeQuery();
            logger.info("Query value Drill Down ::::" + xxApChargeBackDtl.getQuery());


        }
        return outString;
    }

    /**
     * Container's getter for XxApChargeBackSupVO1.
     * @return XxApChargeBackSupVO1
     */
    public ViewObjectImpl getXxApChargeBackSupVO() {
        return (ViewObjectImpl) findViewObject("XxApChargeBackSupVO");
    }


    /**
     * Container's getter for XxApChargeBackSearchVO1.
     * @return XxApChargeBackSearchVO1
     */
    public XxApChargeBackSearchVOImpl getXxApChargeBackSearchVO() {
        return (XxApChargeBackSearchVOImpl) findViewObject("XxApChargeBackSearchVO");
    }

    /**
     * Container's getter for XxApChargeBackDtlVo1.
     * @return XxApChargeBackDtlVo1
     */
    public XxApChargeBackDtlVoImpl getXxApChargeBackDtlVO() {
        return (XxApChargeBackDtlVoImpl) findViewObject("XxApChargeBackDtlVO");
    }


    public String searchDtlChargebk(HashMap trMaCashBkSearchMap) {
        logger.info("searchDtlChargebk called.");
        String outString = "";

        ViewObjectImpl xxApChargeBackDtl = this.getXxApChargeBackDtlVO();
        XxApChargeBackSearchVORowImpl row = (XxApChargeBackSearchVORowImpl) getXxApChargeBackSearchVO().getCurrentRow();
        if (trMaCashBkSearchMap != null && row != null) {
            xxApChargeBackDtl.setWhereClause(null);
            xxApChargeBackDtl.clearViewCriterias();

            System.err.println("trMaCashBkSearchMap.get(\"supId\")" + trMaCashBkSearchMap.get("supId"));

            xxApChargeBackDtl.setNamedWhereClauseParam("bindAssistCode", row.getAssistantCode());
            xxApChargeBackDtl.setNamedWhereClauseParam("bindSupId", trMaCashBkSearchMap.get("supId"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindFromDate", trMaCashBkSearchMap.get("InvoiceDateFrom"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindToDate", trMaCashBkSearchMap.get("InvoiceDateTo"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindInvItemId", row.getInvItemId());

            xxApChargeBackDtl.setNamedWhereClauseParam("bindSupSiteId", trMaCashBkSearchMap.get("supSiteId"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindOrgId", trMaCashBkSearchMap.get("orgId"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindPrcExcep", trMaCashBkSearchMap.get("prcExce"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindQtyExcep", trMaCashBkSearchMap.get("qtyExce"));
            xxApChargeBackDtl.setNamedWhereClauseParam("bindOthExcep", trMaCashBkSearchMap.get("othExce"));

                logger.info("Query value ::::" + xxApChargeBackDtl.getQuery());
            xxApChargeBackDtl.executeQuery();
            System.out.println("xxApChargeBackDtl getEstimatedRowCount>>>>>"+xxApChargeBackDtl.getEstimatedRowCount());
        }
                System.out.println("xxApChargeBackDtl.hasNext()?????????????"+xxApChargeBackDtl.hasNext());

        if (xxApChargeBackDtl.getEstimatedRowCount()>0)
            outString = "SUCCESS";

        return outString;
    }


    public String searchRTVRecon() {
        String outString = "";


        logger.info("searchRTVRecon called.");


        ViewObjectImpl xxApRTVReconCAImpl = this.getXxApRTVReconCAVO();
        ViewObjectImpl xxApRTVReconUSImpl = this.getXxApRTVReconUSVO();
        ViewObjectImpl xxApRTVReconTotImpl = this.getXxApRTVReconTotalVO();
        XxApRTVReconciliationSearchVORowImpl row =
            (XxApRTVReconciliationSearchVORowImpl) getXxApRTVReconciliationSearchVO().getCurrentRow();

        if (row != null) {
            logger.info(">>>>>>>>>>>>>>>>inside row is not null>>>>>>>>>");
            logger.info(">>>>>>>>>>>>>>>>getPeriodRangeFrom>>>>>>>>>." + row.getPeriodRangeFrom());
            logger.info(">>>>>>>>>>>>>>>>getPeriodRangeTo>>>>>>>>>." + row.getPeriodRangeTo());


            logger.info(">>>>>>>>>>>>>>>>getInvoiceDateRangeFrom>>>>>>>>>." + row.getInvoiceDateRangeFrom());
            logger.info(">>>>>>>>>>>>>>>>getInvoiceDateRangeTo>>>>>>>>>." + row.getInvoiceDateRangeTo());


            xxApRTVReconCAImpl.clearViewCriterias();
            xxApRTVReconUSImpl.clearViewCriterias();
            xxApRTVReconTotImpl.clearViewCriterias();


            xxApRTVReconCAImpl.setNamedWhereClauseParam("bindInvFromDate", row.getInvoiceDateRangeFrom());
            xxApRTVReconCAImpl.setNamedWhereClauseParam("bindInvToDate", row.getInvoiceDateRangeTo());
            xxApRTVReconCAImpl.setNamedWhereClauseParam("bindPeriodFrom", row.getPeriodRangeFrom());
            xxApRTVReconCAImpl.setNamedWhereClauseParam("bindPeriodTo", row.getPeriodRangeTo());


            xxApRTVReconCAImpl.executeQuery();
            logger.info("Query value  RTV Reconsilation ::::" + xxApRTVReconCAImpl.getQuery());


            xxApRTVReconUSImpl.setNamedWhereClauseParam("bindInvFromDate", row.getInvoiceDateRangeFrom());
            xxApRTVReconUSImpl.setNamedWhereClauseParam("bindInvToDate", row.getInvoiceDateRangeTo());
            xxApRTVReconUSImpl.setNamedWhereClauseParam("bindPeriodFrom", row.getPeriodRangeFrom());
            xxApRTVReconUSImpl.setNamedWhereClauseParam("bindPeriodTo", row.getPeriodRangeTo());


            xxApRTVReconUSImpl.executeQuery();
            logger.info("Query value RTV Reconsilation US Query ::::" + xxApRTVReconUSImpl.getQuery());

            xxApRTVReconTotImpl.setNamedWhereClauseParam("bindInvFromDate", row.getInvoiceDateRangeFrom());
            xxApRTVReconTotImpl.setNamedWhereClauseParam("bindInvToDate", row.getInvoiceDateRangeTo());
            xxApRTVReconTotImpl.setNamedWhereClauseParam("bindPeriodFrom", row.getPeriodRangeFrom());
            xxApRTVReconTotImpl.setNamedWhereClauseParam("bindPeriodTo", row.getPeriodRangeTo());


            xxApRTVReconTotImpl.executeQuery();


        }
        return outString;
    }

    /**
     * Container's getter for XxApRTVReconCAVO1.
     * @return XxApRTVReconCAVO1
     */
    public XxApRTVReconCAVOImpl getXxApRTVReconCAVO() {
        return (XxApRTVReconCAVOImpl) findViewObject("XxApRTVReconCAVO");
    }

    /**
     * Container's getter for XxApRTVReconciliationSearchVO1.
     * @return XxApRTVReconciliationSearchVO1
     */
    public XxApRTVReconciliationSearchVOImpl getXxApRTVReconciliationSearchVO() {
        return (XxApRTVReconciliationSearchVOImpl) findViewObject("XxApRTVReconciliationSearchVO");
    }

    /**
     * Container's getter for XxApRTVReconTotalVO1.
     * @return XxApRTVReconTotalVO1
     */
    public XxApRTVReconTotalVOImpl getXxApRTVReconTotalVO() {
        return (XxApRTVReconTotalVOImpl) findViewObject("XxApRTVReconTotalVO");
    }

    /**
     * Container's getter for XxApRTVReconUSVO1.
     * @return XxApRTVReconUSVO1
     */
    public od.tdmatch.model.reports.vo.XxApRTVReconUSVOImpl getXxApRTVReconUSVO() {
        return (od.tdmatch.model.reports.vo.XxApRTVReconUSVOImpl) findViewObject("XxApRTVReconUSVO");
    }


    /**
     * @param trMaInvoicePaymentMap
     * @return
     */
    public String searchInvoicePaymentInq(HashMap trMaInvoicePaymentMap) {
        String outString = "";


        logger.info("searchInvoicePaymentInq called.");


        ViewObjectImpl xxApInvoicePaymentHdr = this.getXxApInvoicePaymentInquiryHeaderVO();

        XxApInvoicePaymentInquirySearchVORowImpl row =
            (XxApInvoicePaymentInquirySearchVORowImpl) getXxApInvoicePaymentInquirySearchVO().getCurrentRow();

        if (trMaInvoicePaymentMap != null && row != null) {


            xxApInvoicePaymentHdr.setWhereClause(null);
            xxApInvoicePaymentHdr.clearViewCriterias();


            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindInvDateFrom", row.getInvoiceDateRangeFrom());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindInvDateTo", row.getInvoiceDateRangeTo());

            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindGlDateFrom", row.getGlDateRangeFrom());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindGlDateTo", row.getGlDateRangeTo());

            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindPoDateFrom", row.getPoDateRangeFrom());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindPoDateTo", row.getPoDateRangeTo());

            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindSupId", row.getSupplierId());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindSupSiteId", row.getSupplierStieId());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindAssCode", row.getVendAssCode());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindPoHdrId", row.getPoHdrId());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindOrgId", trMaInvoicePaymentMap.get("orgId"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindInvSrc", row.getInvoiceSource());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindInvTyp", row.getInvoiceTypeCode());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindInvStatus", row.getInvoiceValidated());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindPayNum", row.getPaymentNum());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindInvNum", row.getInvoiceNum());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindPayStatus", row.getPaymentStatus());
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindDropship", trMaInvoicePaymentMap.get("poTypeDropShip"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindFrontDoor",trMaInvoicePaymentMap.get("poTypeFrontDoor"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindNoncode", trMaInvoicePaymentMap.get("poTypeNonCode"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindConsignment", trMaInvoicePaymentMap.get("poTypeCons"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindTrade", trMaInvoicePaymentMap.get("poTypeTrade"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindNewStore", trMaInvoicePaymentMap.get("poTypeNewStore"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindReplenishment", trMaInvoicePaymentMap.get("poTypeReplen"));

            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindDirectImport",trMaInvoicePaymentMap.get("poTypeDirectImport"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindFre", trMaInvoicePaymentMap.get("freight"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindTax", trMaInvoicePaymentMap.get("tax"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindChargeback",trMaInvoicePaymentMap.get("chargebackStatus"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindExcepPricing", trMaInvoicePaymentMap.get("priceExce"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindExceQty", trMaInvoicePaymentMap.get("qtyExce"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindExcepFreight", trMaInvoicePaymentMap.get("freightExce"));
            xxApInvoicePaymentHdr.setNamedWhereClauseParam("bindExcepOth", trMaInvoicePaymentMap.get("otherExce"));


            logger.info("Query value ::::" + xxApInvoicePaymentHdr.getQuery());
            xxApInvoicePaymentHdr.executeQuery();
            outString ="success";
            System.err.println("Row count >>>>>>>>"+xxApInvoicePaymentHdr.getEstimatedRowCount());


        }
        return outString;
    }


    /**
     * @param trMaInvoicePaymentMap
     * @return
     */
    public String searchInvoicePaymentInqItem(HashMap trMaInvoicePaymentMap) {
        String outString = "";


        logger.info("searchInvoicePaymentInqItem called.");


        ViewObjectImpl xxApInvoicePaymentItem = this.getXxApInvoicePaymentInquiryItemVO();

        XxApInvoicePaymentInquirySearchVORowImpl row =
            (XxApInvoicePaymentInquirySearchVORowImpl) getXxApInvoicePaymentInquirySearchVO().getCurrentRow();

        if (trMaInvoicePaymentMap != null && row != null) {




            xxApInvoicePaymentItem.setWhereClause(null);
            xxApInvoicePaymentItem.clearViewCriterias();


            


            xxApInvoicePaymentItem.setNamedWhereClauseParam("bindInvoiceId", trMaInvoicePaymentMap.get("invNum"));
            xxApInvoicePaymentItem.setNamedWhereClauseParam("bindChargeback",trMaInvoicePaymentMap.get("chargebackStatus"));
        


            logger.info("Query value ::::" + xxApInvoicePaymentItem.getQuery());
            xxApInvoicePaymentItem.executeQuery();


            outString = "success";

        }
        return outString;
    }

    /**
     * Container's getter for XxApInvoicePaymentInquiryHDummyVO1.
     * @return XxApInvoicePaymentInquiryHDummyVO1
     */
    public XxApInvoicePaymentInquiryHDummyVOImpl getXxApInvoicePaymentInquiryHDummyVO() {
        return (XxApInvoicePaymentInquiryHDummyVOImpl) findViewObject("XxApInvoicePaymentInquiryHDummyVO");
    }


    /**
     * Container's getter for XxApInvoicePaymentInquiryHeaderVO1.
     * @return XxApInvoicePaymentInquiryHeaderVO1
     */
    public XxApInvoicePaymentInquiryHeaderVOImpl getXxApInvoicePaymentInquiryHeaderVO() {
        return (XxApInvoicePaymentInquiryHeaderVOImpl) findViewObject("XxApInvoicePaymentInquiryHeaderVO");
    }

    /**
     * Container's getter for XxApInvoicePaymentInquiryItemVO1.
     * @return XxApInvoicePaymentInquiryItemVO1
     */
    public XxApInvoicePaymentInquiryItemVOImpl getXxApInvoicePaymentInquiryItemVO() {
        return (XxApInvoicePaymentInquiryItemVOImpl) findViewObject("XxApInvoicePaymentInquiryItemVO");
    }

    /**
     * Container's getter for XxApInvoicePaymentInquirySearchVO1.
     * @return XxApInvoicePaymentInquirySearchVO1
     */
    public XxApInvoicePaymentInquirySearchVOImpl getXxApInvoicePaymentInquirySearchVO() {
        return (XxApInvoicePaymentInquirySearchVOImpl) findViewObject("XxApInvoicePaymentInquirySearchVO");
    }

    /**
     * @param trMaMatchAnalysisMap
     * @return
     */
    public String searchMatchAnalysis(HashMap trMaMatchAnalysisMap) {
        String outString = "";


        logger.info("searchMatchAnasis called.");


        ViewObjectImpl xxApMatchAnalysis = this.getXxApVendorMatchAnaVendVO();

        XxApTradeMatchSearchVORowImpl row = (XxApTradeMatchSearchVORowImpl) getXxApTradeMatchSearchVO().getCurrentRow();

        if (trMaMatchAnalysisMap != null && row != null) {


            logger.info(">>>>>>>>>>>>>>>>getDaterangefrom>>>>>>>>>." + row.getDaterangefrom());
            logger.info(">>>>>>>>>>>>>>>>getSuppliersiteno>>>>>>>>>." + trMaMatchAnalysisMap.get("Suppliersiteno"));

            logger.info(">>>>>>>>>>>>>>>>getDaterangeto>>>>>>>>>." + row.getDaterangeto());
            logger.info(">>>>>>>>>>>>>>>>getInvoicedatefrom>>>>>>>>>." + trMaMatchAnalysisMap.get("InvoiceDateFrom"));
            logger.info(">>>>>>>>>>>>>>>>getInvoicedateto>>>>>>>>>." + trMaMatchAnalysisMap.get("InvoiceDateTo"));

            System.err.println("ReportOption>>>>>>" + trMaMatchAnalysisMap.get("ReportOption"));
            xxApMatchAnalysis.setWhereClause(null);
            xxApMatchAnalysis.clearViewCriterias();


            xxApMatchAnalysis.setNamedWhereClauseParam("bindFromDate", row.getDaterangefrom());
            xxApMatchAnalysis.setNamedWhereClauseParam("bindToDate", row.getDaterangeto());

            xxApMatchAnalysis.setNamedWhereClauseParam("bindSupName", row.getSuppNo());

            xxApMatchAnalysis.setNamedWhereClauseParam("bindOrgName", trMaMatchAnalysisMap.get("orgId"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindPeriodFrom", trMaMatchAnalysisMap.get("Periodrangefrom"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindPeriodTo", trMaMatchAnalysisMap.get("Periodrangeto"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindVenAssi", trMaMatchAnalysisMap.get("VendorAssistant"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindDropShip", trMaMatchAnalysisMap.get("DropShip"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindSupSiteNo", row.getSupSiteCode());

            xxApMatchAnalysis.setNamedWhereClauseParam("bindReportOption", trMaMatchAnalysisMap.get("ReportOption"));
            logger.info("Query value ::::" + xxApMatchAnalysis.getQuery());
            xxApMatchAnalysis.executeQuery();


            outString = "success";

        }
        return outString;
    }


    /**
     * @param trMaMatchAnalysisMap
     * @return
     */
    public String searchMatchAnalysisEmp(HashMap trMaMatchAnalysisMap) {
        String outString = "";


        logger.info("searchMatchAnasis called.");


        ViewObjectImpl xxApMatchAnalysis = this.getXxApVendorMatchAnaEmpVO();

        XxApTradeMatchSearchVORowImpl row = (XxApTradeMatchSearchVORowImpl) getXxApTradeMatchSearchVO().getCurrentRow();

        if (trMaMatchAnalysisMap != null && row != null) {


            logger.info(">>>>>>>>>>>>>>>>row.getDaterangefrom()>>>>>>>>>." + row.getDaterangefrom());
            logger.info(">>>>>>>>>>>>>>>>row.getDaterangeto()>>>>>>>>>." + row.getDaterangeto());

            logger.info(">>>>>>>>>>>>>>>>getSku>>>>>>>>>." + trMaMatchAnalysisMap.get("Daterangeto"));
            logger.info(">>>>>>>>>>>>>>>>getInvoicedatefrom>>>>>>>>>." + trMaMatchAnalysisMap.get("InvoiceDateFrom"));
            logger.info(">>>>>>>>>>>>>>>>orgId>>>>>>>>>." + trMaMatchAnalysisMap.get("orgId"));
            logger.info(">>>>>>>>>>>>>>>>getSuppNo>>>>>>>>>." + row.getSuppNo());

            System.err.println("ReportOption>>>>>>" + trMaMatchAnalysisMap.get("ReportOption"));


            xxApMatchAnalysis.setWhereClause(null);
            xxApMatchAnalysis.clearViewCriterias();


            xxApMatchAnalysis.setNamedWhereClauseParam("bindFromDate", row.getDaterangefrom());
            xxApMatchAnalysis.setNamedWhereClauseParam("bindToDate", row.getDaterangeto());

            xxApMatchAnalysis.setNamedWhereClauseParam("bindSupName", row.getSuppNo());

            xxApMatchAnalysis.setNamedWhereClauseParam("bindOrgName", trMaMatchAnalysisMap.get("orgId"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindPeriodFrom", trMaMatchAnalysisMap.get("Periodrangefrom"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindPeriodTo", trMaMatchAnalysisMap.get("Periodrangeto"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindVenAssi", trMaMatchAnalysisMap.get("VendorAssistant"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindDropShip", trMaMatchAnalysisMap.get("DropShip"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindSupSiteNo", row.getSupSiteCode());
            xxApMatchAnalysis.setNamedWhereClauseParam("bindReportOption", trMaMatchAnalysisMap.get("ReportOption"));
            logger.info("Query value ::::" + xxApMatchAnalysis.getQuery());
            //  xxApMatchAnalysis.executeQuery();


            outString = "success";


        }
        return outString;
    }


    /**
     * @param trMaMatchAnalysisMap
     * @return
     */
    public String searchMatchAnalysisVendAss(HashMap trMaMatchAnalysisMap) {
        String outString = "";


        logger.info("searchMatchAnasis called.");


        ViewObjectImpl xxApMatchAnalysis = this.getXxApVendorMatchAnaVendVO();

        XxApTradeMatchSearchVORowImpl row = (XxApTradeMatchSearchVORowImpl) getXxApTradeMatchSearchVO().getCurrentRow();

        if (trMaMatchAnalysisMap != null && row != null) {


            logger.info(">>>>>>>>>>>>>>>>getDaterangefrom>>>>>>>>>." + row.getDaterangefrom());
            logger.info(">>>>>>>>>>>>>>>>getSuppliersiteno>>>>>>>>>." + trMaMatchAnalysisMap.get("Suppliersiteno"));

            logger.info(">>>>>>>>>>>>>>>>getDaterangeto>>>>>>>>>." + row.getDaterangeto());
            logger.info(">>>>>>>>>>>>>>>>getInvoicedatefrom>>>>>>>>>." + trMaMatchAnalysisMap.get("InvoiceDateFrom"));
            logger.info(">>>>>>>>>>>>>>>>getInvoicedateto>>>>>>>>>." + trMaMatchAnalysisMap.get("InvoiceDateTo"));


            xxApMatchAnalysis.setWhereClause(null);
            xxApMatchAnalysis.clearViewCriterias();


            xxApMatchAnalysis.setNamedWhereClauseParam("bindFromDate", row.getDaterangefrom());
            xxApMatchAnalysis.setNamedWhereClauseParam("bindToDate", row.getDaterangeto());

            xxApMatchAnalysis.setNamedWhereClauseParam("bindSupName", row.getSuppNo());

            xxApMatchAnalysis.setNamedWhereClauseParam("bindOrgName", trMaMatchAnalysisMap.get("orgId"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindPeriodFrom", trMaMatchAnalysisMap.get("Periodrangefrom"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindPeriodTo", trMaMatchAnalysisMap.get("Periodrangeto"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindVenAssi", trMaMatchAnalysisMap.get("VendorAssistant"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindDropShip", trMaMatchAnalysisMap.get("DropShip"));
            xxApMatchAnalysis.setNamedWhereClauseParam("bindSupSiteNo", row.getSupSiteCode());
            xxApMatchAnalysis.setNamedWhereClauseParam("bindReportOption", trMaMatchAnalysisMap.get("ReportOption"));


            logger.info("Query value ::::" + xxApMatchAnalysis.getQuery());
            xxApMatchAnalysis.executeQuery();


            outString = "success";

        }
        return outString;
    }

    /**
     * Container's getter for XxApVendMatchAnaDummVO1.
     * @return XxApVendMatchAnaDummVO1
     */
    public XxApVendMatchAnaDummVOImpl getXxApVendMatchAnaDummVO() {
        return (XxApVendMatchAnaDummVOImpl) findViewObject("XxApVendMatchAnaDummVO");
    }


    /**
     * Container's getter for XxApVendorMatchAnaEmpVO1.
     * @return XxApVendorMatchAnaEmpVO1
     */
    public XxApVendorMatchAnaEmpVOImpl getXxApVendorMatchAnaEmpVO() {
        return (XxApVendorMatchAnaEmpVOImpl) findViewObject("XxApVendorMatchAnaEmpVO");
    }


    /**
     * Container's getter for XxApVendorMatchAnaVendVO1.
     * @return XxApVendorMatchAnaVendVO1
     */
    public XxApVendorMatchAnaVendVOImpl getXxApVendorMatchAnaVendVO() {
        return (XxApVendorMatchAnaVendVOImpl) findViewObject("XxApVendorMatchAnaVendVO");
    }

    /**
     * Container's getter for XxApTradeMatchSearchVO1.
     * @return XxApTradeMatchSearchVO1
     */
    public XxApTradeMatchSearchVOImpl getXxApTradeMatchSearchVO() {
        return (XxApTradeMatchSearchVOImpl) findViewObject("XxApTradeMatchSearchVO");
    }

    public String searchConsignRTV(String sku) {
        String outString = "";


        logger.info("searchConsignRTV called.");

        ViewObjectImpl skuValuel = this.getSKULovVO1();
        ViewCriteriaManager vcm = skuValuel.getViewCriteriaManager();
        ViewCriteria vc = vcm.getViewCriteria("SKULovVOCriteria");
        VariableValueManager vvm = vc.ensureVariableManager();

        ViewObjectImpl ConsignmentRTVVOImpl = this.getConsignmentRTVVO();
     
        ConsignmentRTVSearchVORowImpl row = (ConsignmentRTVSearchVORowImpl) getConsignmentRTVSearchVO().getCurrentRow();

        if (row != null) {
            skuValuel.clearViewCriterias();
            skuValuel.setWhereClause(null);
            skuValuel.setOrderByClause(null);
            
            oracle.jbo.domain.Number skuVal = null;
            if(sku!=null){
            System.out.println("the value of SKU is : : " + sku);
            vvm.setVariableValue("bindSku", sku);
            skuValuel.applyViewCriteria(vc);
            skuValuel.executeQuery();
            
            if (skuValuel.hasNext()) {
                SKULovVORowImpl row1 = (SKULovVORowImpl) getSKULovVO1().first();
                skuVal =  (oracle.jbo.domain.Number)row1.getAttribute("InventoryItemId");
            }
            }

            logger.info(">>>>>>>>>>>>>>>>inside row is not null>>>>>>>>>");
            logger.info(">>>>>>>>>>>>>>>>getVendor>>>>>>>>>." + row.getSuppliername() + "---" + row.getVendorIdValue());
            logger.info(">>>>>>>>>>>>>>>>getVendor Site>>>>>>>>>." + row.getSuppliersiteno() + "---" +
                        row.getVendorSiteIdValue());
            logger.info(">>>>>>>>>>>>>>>>getSKU>>>>>>>>>.sku" + "---" + skuVal); //row.getItemIdValue());
            //logger.info(">>>>>>>>>>>>>>>>getRTV>>>>>>>>>." + row.getRtvno());
            logger.info(">>>>>>>>>>>>>>>>getDate>>>>>>>>>." + row.getTransactiondatefrom() + "---" +
                        row.getTransactiondateto());
            logger.info(">>>>>>>>>>>>>>>>getPeriod>>>>>>>>>." + row.getTransactionperiodfrom() + "---" +
                        row.getTransactionperiodto());
            logger.info(">>>>>>>>>>>>>>>>getRGA>>>>>>>>>." + row.getRgano());
            logger.info(">>>>>>>>>>>>>>>>getLocation>>>>>>>>>." + row.getLocation() + "---" + row.getLocationIdValue());
            logger.info(">>>>>>>>>>>>>>>>getOrg>>>>>>>>>." + row.getOrgid() + "---" + row.getOrgIdValue());

            ConsignmentRTVVOImpl.clearViewCriterias();
         
            //ViewCriteria criteria=getInvoicesNotValidatedVO1().getViewCriteria("InvoicesNotValidatedVOCriteria");

            // xxApChargeBackDtl.setNamedWhereClauseParam("bindSearchStatus", 1);
            ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindVendId", row.getVendorIdValue());
            ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindVendSiteId", row.getVendorSiteIdValue());
            ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindItemId", skuVal); //  row.getItemIdValue());
            //ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindRTV", row.getRtvno());
            ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindFromDate", row.getTransactiondatefrom());
            ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindToDate", row.getTransactiondateto());
            ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindRGA", row.getRgano());
            ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindLocId", row.getLocationIdValue());
            ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindPeriodFrom", row.getTransactionperiodfrom());
            ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindPeriodTo", row.getTransactionperiodto());
            ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindOrgId", row.getOrgIdValue());
            ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindOrgRTV", row.getOrgRtv());


            ConsignmentRTVVOImpl.executeQuery();
            logger.info("Query value Consignment RTV ::::" + ConsignmentRTVVOImpl.getQuery());


           


        }
        return outString;
    }

    /**
     * Container's getter for ConsignmentRTVSearchVO1.
     * @return ConsignmentRTVSearchVO1
     */
    public od.tdmatch.model.reports.vo.ConsignmentRTVSearchVOImpl getConsignmentRTVSearchVO() {
        return (od.tdmatch.model.reports.vo.ConsignmentRTVSearchVOImpl) findViewObject("ConsignmentRTVSearchVO");
    }


    /**
     * Container's getter for ConsignmentRTVTotalVO1.
     * @return ConsignmentRTVTotalVO1
     */
    public ConsignmentRTVTotalVOImpl getConsignmentRTVTotalVO() {
        return (ConsignmentRTVTotalVOImpl) findViewObject("ConsignmentRTVTotalVO");
    }

    /**
     * Container's getter for ConsignmentRTVVO1.
     * @return ConsignmentRTVVO1
     */
    public ConsignmentRTVVOImpl getConsignmentRTVVO() {
        return (ConsignmentRTVVOImpl) findViewObject("ConsignmentRTVVO");
    }

    public String searchReasonCodeSumm(String sku) {

        // String outString = "";


        logger.info("Reason Code called.");


        ViewObjectImpl ReasonCodeSumm = this.getXxApReasonCodeSummaryVO();
        XxApReasonCodeSearchVORowImpl row = (XxApReasonCodeSearchVORowImpl) getXxApReasonCodeSearchVO().getCurrentRow();
        // ReasonCodeSumm.executeEmptyRowSet();
        ViewObjectImpl skuValuel = this.getSKULovVO1();
        
        
       
        ViewCriteriaManager vcm = skuValuel.getViewCriteriaManager();
        ViewCriteria vc = vcm.getViewCriteria("SKULovVOCriteria");
        VariableValueManager vvm = vc.ensureVariableManager();
       
        if (row != null) {
            logger.info(">>>>>>>>>>>>>>>>inside row is not null>>>>>>>>>");
            logger.info(">>>>>>>>>>>>>>>>getVendor>>>>>>>>>." + row.getSupplier() + "---" + row.getSuppliername());
            logger.info(">>>>>>>>>>>>>>>>getVendor Site>>>>>>>>>." + row.getSuppliersiteno() + "---" + row.getSku());
            logger.info(">>>>>>>>>>>>>>>>getSKU>>>>>>>>>." + row.getDropship() + "---" + row.getGldaterangefrom());
            //logger.info(">>>>>>>>>>>>>>>>getRTV>>>>>>>>>." + row.getRtvno());
            logger.info(">>>>>>>>>>>>>>>>getDate>>>>>>>>>." + row.getGldaterangeto() + "---" +
                        row.getPeriodrangefrom());
            logger.info(">>>>>>>>>>>>>>>>getPeriod>>>>>>>>>." + row.getPeriodrangeto() + "---" + row.getReasoncode());
            logger.info(">>>>>>>>>>>>>>>>getRGA>>>>>>>>>." + row.getReportOption());
            logger.info(">>>>>>>>>>>>>>>>getLocation>>>>>>>>>." + row.getDropship() + "---" + row.getVendorassistant());
            logger.info(">>>>>>>>>>>>>>>>getOrg>>>>>>>>>." + row.getOrgIdVal());
            String dropship = null;
            if (row.getDropship() != null && row.getDropship().equals("Y"))
                dropship = "Y";
            else
                dropship = "N";


            ReasonCodeSumm.clearViewCriterias();
            ReasonCodeSumm.setWhereClause(null);
            ReasonCodeSumm.setOrderByClause(null);
            skuValuel.clearViewCriterias();
            skuValuel.setWhereClause(null);
            skuValuel.setOrderByClause(null);
            String skuVal = null;
            if(sku!=null){
            System.out.println("the value of SKU is : : " + sku);
            vvm.setVariableValue("bindSku", sku);
            skuValuel.applyViewCriteria(vc);
            skuValuel.executeQuery();
           
            if (skuValuel.hasNext()) {
                SKULovVORowImpl row1 = (SKULovVORowImpl) getSKULovVO1().first();
                skuVal =  row1.getAttribute("InventoryItemId").toString();
            }
            }
            //(String) skuValuel.getCurrentRow().getAttribute("InventoryItemId");
            System.out.println("skuVal value is : : ; : : : : : " + skuVal);
            ReasonCodeSumm.setNamedWhereClauseParam("bindReasonCode", row.getReasoncode());
            ReasonCodeSumm.setNamedWhereClauseParam("bindItemId", skuVal);
            ReasonCodeSumm.setNamedWhereClauseParam("bindVendorId", row.getVendorId());
            //ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindRTV", row.getRtvno());
            ReasonCodeSumm.setNamedWhereClauseParam("bindFromDate", row.getGldaterangefrom());
            ReasonCodeSumm.setNamedWhereClauseParam("bindToDate", row.getGldaterangeto());
            // ReasonCodeSumm.setNamedWhereClauseParam("bindVendorId", row.getSuppliername());
            ReasonCodeSumm.setNamedWhereClauseParam("bindVendSiteId", row.getVendorSiteValue());
            ReasonCodeSumm.setNamedWhereClauseParam("bindPeriodFrom", row.getPeriodrangefrom());
            ReasonCodeSumm.setNamedWhereClauseParam("bindPeriodTo", row.getPeriodrangeto());
            ReasonCodeSumm.setNamedWhereClauseParam("bindOrgId", row.getOrgIdVal());
            ReasonCodeSumm.setNamedWhereClauseParam("bindVendAssCode", row.getVendorAsstValue());
            ReasonCodeSumm.setNamedWhereClauseParam("bindDropship", dropship);
            //                    logger.info("Dropship is true");
            //                     String whereClause =
            //                         "UPPER(QRSLT.drop_ship) in ('DROPSHIP NON-CODESPL ORDER', 'DROPSHIP VW', 'NON-CODE DROPSHIP')";
            //                     ReasonCodeSumm.addWhereClause(whereClause);
            //
            //                    logger.info("get query : : " + ReasonCodeSumm.getQuery());
            //     }
            String orderBy = "QRSLT.Supplier_Name, QRSLT.Supplier_Site, QRSLT.Invoice, QRSLT.Reason_Code";
            ReasonCodeSumm.addOrderByClause(orderBy);
            ReasonCodeSumm.executeQuery();
        }
        return null;
    }

    public String searchReasonCodeDtl(String sku) {
        ViewObjectImpl ReasonCodeDtl = this.getXxApReasonCodeDetailVO();
        XxApReasonCodeSearchVORowImpl row = (XxApReasonCodeSearchVORowImpl) getXxApReasonCodeSearchVO().getCurrentRow();
        //  ReasonCodeDtl.executeEmptyRowSet();
        ViewObjectImpl skuValuel = this.getSKULovVO1();
        if (row != null) {
            logger.info(">>>>>>>>>>>>>>>>inside row is not null>>>>>>>>>");
            logger.info(">>>>>>>>>>>>>>>>getVendor>>>>>>>>>." + row.getSupplier() + "---" + row.getSuppliername());
            logger.info(">>>>>>>>>>>>>>>>getVendor Site>>>>>>>>>." + row.getSuppliersiteno() + "---" + row.getSku());
            logger.info(">>>>>>>>>>>>>>>>getSKU>>>>>>>>>." + row.getDropship() + "---" + row.getGldaterangefrom());
            //logger.info(">>>>>>>>>>>>>>>>getRTV>>>>>>>>>." + row.getRtvno());
            logger.info(">>>>>>>>>>>>>>>>getDate>>>>>>>>>." + row.getGldaterangeto() + "---" +
                        row.getPeriodrangefrom());
            logger.info(">>>>>>>>>>>>>>>>getPeriod>>>>>>>>>." + row.getPeriodrangeto() + "---" + row.getReasoncode());
            logger.info(">>>>>>>>>>>>>>>>getRGA>>>>>>>>>." + row.getReportOption());
            logger.info(">>>>>>>>>>>>>>>>getLocation>>>>>>>>>." + row.getDropship() + "---" + row.getVendorassistant());
            logger.info(">>>>>>>>>>>>>>>>getOrg>>>>>>>>>." + row.getOrgIdVal());
            String dropship = null;
            if (row.getDropship() != null && row.getDropship().equals("Y"))
                dropship = "Y";
            else
                dropship = "N";
            skuValuel.clearViewCriterias();
            skuValuel.setWhereClause(null);
            skuValuel.setOrderByClause(null);
            System.out.println("the value of SKU is : : " + sku);
            ViewCriteriaManager vcm = skuValuel.getViewCriteriaManager();
            ViewCriteria vc = vcm.getViewCriteria("SKULovVOCriteria");
            VariableValueManager vvm = vc.ensureVariableManager();
            
            oracle.jbo.domain.Number skuVal =null;
            if(sku!=null){
            System.out.println("the value of SKU is : : " + sku);
            vvm.setVariableValue("bindSku", sku);
            skuValuel.applyViewCriteria(vc);
            skuValuel.executeQuery();
            
            if (skuValuel.hasNext()) {
                SKULovVORowImpl row1 = (SKULovVORowImpl) getSKULovVO1().first();
                skuVal = (oracle.jbo.domain.Number)row1.getAttribute("InventoryItemId");
            }
            }
            
            
            //(String) skuValuel.getCurrentRow().getAttribute("InventoryItemId");
            System.out.println("skuVal value is : : ; : : : : : " + skuVal);
            ReasonCodeDtl.clearViewCriterias();
            ReasonCodeDtl.setWhereClause(null);
            ReasonCodeDtl.setOrderByClause(null);
            ReasonCodeDtl.setNamedWhereClauseParam("bindReasonCode", row.getReasoncode());
            ReasonCodeDtl.setNamedWhereClauseParam("bindItemId", skuVal);
            ReasonCodeDtl.setNamedWhereClauseParam("bindVendorId", row.getVendorId());
            //ConsignmentRTVVOImpl.setNamedWhereClauseParam("bindRTV", row.getRtvno());
            ReasonCodeDtl.setNamedWhereClauseParam("bindFromDate", row.getGldaterangefrom());
            ReasonCodeDtl.setNamedWhereClauseParam("bindToDate", row.getGldaterangeto());
            //   ReasonCodeDtl.setNamedWhereClauseParam("bindVendorId", row.getSuppliername());
            ReasonCodeDtl.setNamedWhereClauseParam("bindVendSiteId", row.getVendorSiteValue());
            ReasonCodeDtl.setNamedWhereClauseParam("bindPeriodFrom", row.getPeriodrangefrom());
            ReasonCodeDtl.setNamedWhereClauseParam("bindPeriodTo", row.getPeriodrangeto());
            ReasonCodeDtl.setNamedWhereClauseParam("bindOrgId", row.getOrgIdVal());
            ReasonCodeDtl.setNamedWhereClauseParam("bindVendAssCode", row.getVendorAsstValue());
            ReasonCodeDtl.setNamedWhereClauseParam("bindDropship", dropship);
            //                if ("Y".equals(dropship)) {
            //                   logger.info("Dropship is true");
            //                    String whereClause =
            //                        "UPPER(QRSLT.drop_ship) in ('DROPSHIP NON-CODESPL ORDER', 'DROPSHIP VW', 'NON-CODE DROPSHIP')";
            //                    ReasonCodeDtl.addWhereClause(whereClause);
            //
            //                   logger.info("get query : : " + ReasonCodeDtl.getQuery());
            //                }
            String orderBy = "QRSLT.Supplier_Name, QRSLT.Supplier_Site, QRSLT.Invoice, QRSLT.Reason_Code";
            ReasonCodeDtl.addOrderByClause(orderBy);
            ReasonCodeDtl.executeQuery();
        }
        return null;
    }

    /**
     * Container's getter for XxApReasonCodeSummaryVO1.
     * @return XxApReasonCodeSummaryVO1
     */
    public XxApReasonCodeSummaryVOImpl getXxApReasonCodeSummaryVO() {
        return (XxApReasonCodeSummaryVOImpl) findViewObject("XxApReasonCodeSummaryVO");
    }

    /**
     * Container's getter for XxApReasonCodeSearchVO1.
     * @return XxApReasonCodeSearchVO1
     */
    public XxApReasonCodeSearchVOImpl getXxApReasonCodeSearchVO() {
        return (XxApReasonCodeSearchVOImpl) findViewObject("XxApReasonCodeSearchVO");
    }

    /**
     * Container's getter for XxApReasonCodeDetailVO1.
     * @return XxApReasonCodeDetailVO1
     */
    public XxApReasonCodeDetailVOImpl getXxApReasonCodeDetailVO() {
        return (XxApReasonCodeDetailVOImpl) findViewObject("XxApReasonCodeDetailVO");
    }


    public static java.util.Date convertDomainDateToUtilDate(oracle.jbo.domain.Date domainDate) {
        java.util.Date date = null;
        if (domainDate != null) {
            java.sql.Date sqldate = domainDate.dateValue();
            date = new java.util.Date(sqldate.getTime());
        }
        return date;
    }

    public String searchReceiptDetailInquiry(int userId) {

        ViewObjectImpl ReceiptDtl = this.getXxApReceiptDetailSummaryVO3();
        //ViewObjectImpl ReceiptDtlTotalImpl = this.getXxApReceiptDetailTotalLOV2();
        XxApReceiptDetailInquirySearchVORowImpl row =
            (XxApReceiptDetailInquirySearchVORowImpl) getXxApReceiptDetailInquirySearchVO1().getCurrentRow();
        Connection conn = null;
        CallableStatement st = null;
        System.out.println("DDDDDDDDDDDDD");
        String proStatus = "E";


        String value = "N";
        DateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
        if (row != null) {

            logger.info(">>>>>>>>>>>>>>>>inside row is not null>>>>>>>>>");
            logger.info(">>>>>>>>>>>>>>>>getSupplierName>>>>>>>>>." + row.getSuppliername());
            logger.info(">>>>>>>>>>>>>>>>getSuppliersite Site>>>>>>>>>." + row.getSuppliersite() + "-SKU--" +
                        row.getSku());
            logger.info(">>>>>>>>>>>>>>>>invoice>>>>>>>>>." + row.getInvoice() + "-PO--" + row.getPo());
            logger.info(">>>>>>>>>>>>>>>>getReceipt>>>>>>>>>." + row.getReceipt() + "--dateFrom--" +
                        row.getDaterangefrom() + "--DateTo--" + row.getDaterangeto());
        
            logger.info(">>>>>>>>>>>>>>>>userId>>>>>>>>>." + userId);
            java.util.Date valueDateFrm = convertDomainDateToUtilDate(row.getDaterangefrom());
            String dateFrm = null;
            if (valueDateFrm != null)
                dateFrm = dateFormat.format(valueDateFrm);


            java.util.Date valueDateTo = convertDomainDateToUtilDate(row.getDaterangeto());
            String dateTo = null;
            if (valueDateTo != null)
                dateTo = dateFormat.format(valueDateTo);
            int suppId = 0;
            if (row.getSupplierId() != null) {
                suppId = row.getSupplierId().intValue();
            }


            System.err.println("searchReceiptDetailInquiry suppId>>>" + suppId);
            ReceiptDtl.clearViewCriterias();
            //   ReceiptDtlTotalImpl.clearViewCriterias();

            /*
             *  P_DATE_FROM   DATE ,
    P_DATE_TO     DATE ,
    P_PERIOD_FROM VARCHAR2,
    P_PERIOD_TO   VARCHAR2,
    P_USER_ID     NUMBER,
    P_INVOICE_ID        NUMBER,
    P_RECEIPT_ID        NUMBER,
    P_PO_HEADER_ID      NUMBER,
    P_INVENTORY_ITEM_ID NUMBER,
    P_SUPPLIER_SITE_ID  NUMBER,
    P_VENDOR_ID         NUMBER,
    P_RESULT OUT VARCHAR2,
    P_ERROR OUT VARCHAR2

             * */
            try {

                System.err.println("dateFrm" + dateFrm);
                System.err.println("dateTo" + dateTo);
                System.err.println("userId" + userId);

                String sql =
                    "begin XX_AP_TRADE_RCT_INQ_PKG.GET_DATA_TEMP(:P_DATE_FROM,:P_DATE_TO,:P_USER_ID," +
                    ":P_INVOICE_ID,:P_RECEIPT_ID,:P_PO_HEADER_ID,:P_INVENTORY_ITEM_ID," +
                    ":P_SUPPLIER_SITE_ID,:P_VENDOR_ID,:P_RESULT,:P_ERROR); end;";
                conn = getDBTransaction().createStatement(1).getConnection();
                st = getDBTransaction().createCallableStatement(sql, 0);
                st.setString(1, dateFrm);
                st.setString(2, dateTo);
               
                st.setInt(3, userId);

                System.err.println("row.getInvoiceId()" + row.getInvoiceId());
                System.err.println("row.getReciptsId()" + row.getReciptsId());
                System.err.println("row.getPoHdrId()" + row.getPoHdrId());
                System.err.println("row.getInvItemId()" + row.getInvItemId());
                System.err.println("row.getSupSiteId()" + row.getSupSiteId());
                if (row.getInvoiceId() != null) {
                    st.setObject(4, row.getInvoiceId().intValue());
                } else {
                    st.setObject(4, null);

                }
                if (row.getReciptsId() != null) {
                    st.setObject(5, row.getReciptsId().intValue());
                } else {
                    st.setObject(5, null);

                }
                if (row.getPoHdrId() != null) {
                    st.setObject(6, row.getPoHdrId().intValue());

                } else {
                    System.out.println("In else................");
                    st.setObject(6, null);

                }
                if (row.getInvItemId() != null) {
                    st.setObject(7, row.getInvItemId().intValue());
                } else {
                    st.setObject(7, null);

                }
                if (row.getSupSiteId() != null) {
                    st.setObject(8, row.getSupSiteId().intValue());
                } else {
                    st.setObject(8, null);

                }
                if (suppId != 0) {
                    st.setInt(9, suppId);
                } else {
                    st.setObject(9, null);

                }
                st.registerOutParameter(10, Types.VARCHAR);
                st.registerOutParameter(11, Types.VARCHAR);


                st.execute();

                proStatus = st.getString(10);
                System.err.println("proStatus"+proStatus);

                logger.info("XX_AP_TRADE_RCT_INQ_PKG.GET_DATA_TEMP result proStatus >>>>>>>" + proStatus);

            } catch (Exception e) {
                System.out.println(e);
            }

            if ("S".equals(proStatus)) {
                System.err.println(" S row.getSupplierId()"+row.getSupplierId());
                System.err.println(" S row.getSupSiteId()"+row.getSupSiteId());
                System.err.println(" S row.getInvItemId()"+row.getInvItemId());
                System.err.println(" S row.getInvoiceId()"+row.getInvoiceId());
                System.err.println(" S row.getPoHdrId()"+row.getPoHdrId());
                System.err.println(" S row.getReciptsId()"+row.getReciptsId());
                System.err.println(" S row.getDaterangefrom()"+row.getDaterangefrom());
                System.err.println(" S row.getDaterangeto()"+row.getDaterangeto());
                System.err.println(" S row.userId()"+userId);
               
                ReceiptDtl.setNamedWhereClauseParam("bindVendorId", row.getSupplierId());
                ReceiptDtl.setNamedWhereClauseParam("bindSupSitId", row.getSupSiteId());
                ReceiptDtl.setNamedWhereClauseParam("bindInvIteId", row.getInvItemId());
                ReceiptDtl.setNamedWhereClauseParam("bindInvId", row.getInvoiceId());
                ReceiptDtl.setNamedWhereClauseParam("bindPoHdrId", row.getPoHdrId());

                ReceiptDtl.setNamedWhereClauseParam("bindRecId", row.getReciptsId());
                ReceiptDtl.setNamedWhereClauseParam("P_date_from", row.getDaterangefrom());
                ReceiptDtl.setNamedWhereClauseParam("P_date_to", row.getDaterangeto());
                ReceiptDtl.setNamedWhereClauseParam("bindUserId", userId);
                ReceiptDtl.executeQuery();

                if (ReceiptDtl.first()!=null ) {
                    value = "Y";
                } else {
                    value = "N";

                }


            } else {

                value = "N";

            }


        }
        return value;
    }


    public String searchInvoiceNum(HashMap invNumMap) {

        String outString = "UNSUCCESSFULL";


        logger.info("searchTraMatChargebk called.");


        ViewObjectImpl xxApReceiptTemp = this.getXxApReceiptDetailTempVO();


        xxApReceiptTemp.setWhereClause(null);
        xxApReceiptTemp.clearViewCriterias();
        ViewObjectImpl xxApReceiptTempTotal = this.getXxApReceiptDetailTempTotalVO();


        xxApReceiptTempTotal.setWhereClause(null);
        xxApReceiptTempTotal.clearViewCriterias();

        xxApReceiptTemp.setNamedWhereClauseParam("P_Review_Num", invNumMap.get("ReceiptNum"));
        xxApReceiptTemp.setNamedWhereClauseParam("bindUserId", invNumMap.get("userIdVal"));
        xxApReceiptTemp.setNamedWhereClauseParam("bindInvNum", invNumMap.get("invNumer"));
        
        xxApReceiptTempTotal.setNamedWhereClauseParam("P_Receipt_Num", invNumMap.get("ReceiptNum"));
        xxApReceiptTempTotal.setNamedWhereClauseParam("bindUserId", invNumMap.get("userIdVal"));
        xxApReceiptTempTotal.setNamedWhereClauseParam("bindInvNum", invNumMap.get("invNumer"));
        logger.info("invNumMap.get(\"ReceiptNum\") : : " + invNumMap.get("ReceiptNum"));
        logger.info("invNumMap.get(\"userIdVal\") : : " + invNumMap.get("userIdVal"));

        logger.info("Query value ::::" + xxApReceiptTemp.getQuery());
        xxApReceiptTemp.executeQuery();
        xxApReceiptTempTotal.executeQuery();
        
        System.err.println("xxApReceiptTemp.getRowCount()"+xxApReceiptTemp.getRowCount());


        if (xxApReceiptTemp.getRowCount()>0)
            outString = "SUCCESS";

        return outString;
    }

    /**
     * Container's getter for XxApReceiptDetailInquirySearchVO.
     * @return XxApReceiptDetailInquirySearchVO
     */
    public XxApReceiptDetailInquirySearchVOImpl getXxApReceiptDetailInquirySearchVO1() {
        return (XxApReceiptDetailInquirySearchVOImpl) findViewObject("XxApReceiptDetailInquirySearchVO");
    }


    /**
     * Container's getter for XxApReceiptDetailSummaryVO1.
     * @return XxApReceiptDetailSummaryVO1
     */
    public XxApReceiptDetailSummaryVOImpl getXxApReceiptDetailSummaryVO3() {
        return (XxApReceiptDetailSummaryVOImpl) findViewObject("XxApReceiptDetailSummaryVO");
    }

    /**
     * Container's getter for XxApReceiptDetailSummVO1.
     * @return XxApReceiptDetailSummVO1
     */
    public XxApReceiptDetailSummVOImpl getXxApReceiptDetailSummVO() {
        return (XxApReceiptDetailSummVOImpl) findViewObject("XxApReceiptDetailSummVO");
    }

    /**
     * Container's getter for XxApReceiptDetailTempTotalVO1.
     * @return XxApReceiptDetailTempTotalVO1
     */
    public XxApReceiptDetailTempTotalVOImpl getXxApReceiptDetailTempTotalVO() {
        return (XxApReceiptDetailTempTotalVOImpl) findViewObject("XxApReceiptDetailTempTotalVO");
    }

    /**
     * Container's getter for XxApReceiptDetailTempVO1.
     * @return XxApReceiptDetailTempVO1
     */
    public XxApReceiptDetailTempVOImpl getXxApReceiptDetailTempVO() {
        return (XxApReceiptDetailTempVOImpl) findViewObject("XxApReceiptDetailTempVO");
    }

    /**
     * Container's getter for XxApReceiptDetailTotalLOV1.
     * @return XxApReceiptDetailTotalLOV1
     */
    public XxApReceiptDetailTotalLOVImpl getXxApReceiptDetailTotalLOV2() {
        return (XxApReceiptDetailTotalLOVImpl) findViewObject("XxApReceiptDetailTotalLOV");
    }


    public String searchPoInquiry(String poNum, int orgId, HashMap poTypeMap) {
        String outString = "";


        logger.info("searchPoInquiry called.");


        ViewObjectImpl PoInquiryMainVOImpl = this.getPoInquiryMainVO();
        ViewObjectImpl poHeaderImpl = this.getPOInquiryHeaderVO1();
        //ViewObjectImpl ConsignmentRTVTotalImpl = this.getConsignmentRTVTotalVO1();
        PoInquirySearchVORowImpl row = (PoInquirySearchVORowImpl) getPoInquirySearchVO().getCurrentRow();

        if (row != null && poTypeMap != null) {
            logger.info(">>>>>>>>>>>>>>>>inside row is not null>>>>>>>>>");
            logger.info(">>>>>>>>>>>>>>>>getVendor>>>>>>>>>." +
                        row.getSuppliername()); // + "---"+row.getVendorIdValue());
            logger.info(">>>>>>>>>>>>>>>>getVendor Site>>>>>>>>>." + row.getSuppliernum());
            logger.info(">>>>>>>>>>>>>>>>getVendor Site>>>>>>>>>." +
                        row.getSuppliersiteno()); // + "---"+row.getVendorSiteIdValue());
            logger.info(">>>>>>>>>>>>>>>>getSKU>>>>>>>>>." + row.getSku() + "---" + row.getItemIdValue());
            //logger.info(">>>>>>>>>>>>>>>>getRTV>>>>>>>>>." + row.getRtvno());
            logger.info(">>>>>>>>>>>>>>>>getPoNum>>>>>>>>>." + row.getPonum());
            logger.info(">>>>>>>>>>>>>>>>getLineNum>>>>>>>>>." + row.getPolinenum());
            logger.info(">>>>>>>>>>>>>>>>getLocation>>>>>>>>>." + row.getLocation());
            logger.info(">>>>>>>>>>>>>>>>getStatus>>>>>>>>>." + row.getStatus());
            logger.info(">>>>>>>>>>>>>>>>getPoType>>>>>>>>>." + row.getPotype());
            logger.info(">>>>>>>>>>>>>>>>getDate>>>>>>>>>." + row.getPodatefrom() + "---" + row.getPodateto());
            logger.info(">>>>>>>>>>>>>>>>getOrg>>>>>>>>>." + orgId);

            PoInquiryMainVOImpl.clearViewCriterias();
            poHeaderImpl.clearViewCriterias();
            poHeaderImpl.setWhereClause(null);
            poHeaderImpl.setOrderByClause(null);
            System.out.println("the value of SKU is : : " + poNum);
            poHeaderImpl.setNamedWhereClauseParam("bindPoNum", poNum);
            poHeaderImpl.executeQuery();
            BigDecimal poHdrVal = null;
            if (poHeaderImpl.hasNext()) {
                POInquiryHeaderVORowImpl row1 = (POInquiryHeaderVORowImpl) getPOInquiryHeaderVO1().first();
                poHdrVal = (BigDecimal) row1.getAttribute("PoHeaderId");
            }
            //ConsignmentRTVTotalImpl.clearViewCriterias();
            //ViewCriteria criteria=getInvoicesNotValidatedVO1().getViewCriteria("InvoicesNotValidatedVOCriteria");

            // xxApChargeBackDtl.setNamedWhereClauseParam("bindSearchStatus", 1);
            // PoInquiryMainVOImpl.setNamedWhereClauseParam("bindSupplierName", row.getSupplierIdValue()));
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindSupplierNum", row.getSupplierIdValue());
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindSupplierSite", row.getSuppSiteIdValue());
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindSku", row.getItemIdValue());
            //  PoInquiryMainVOImpl.setNamedWhereClauseParam("bindPO", row.getPonum());
            //  PoInquiryMainVOImpl.setNamedWhereClauseParam("bindLineNum", row.getPolinenum());
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindLocation", row.getLocationId());
            PoInquiryMainVOImpl.setNamedWhereClauseParam("binddatefrom", row.getPodatefrom());
            PoInquiryMainVOImpl.setNamedWhereClauseParam("binddateto", row.getPodateto());
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindPoStatus", row.getStatus());

            //PoInquiryMainVOImpl.setNamedWhereClauseParam("bindPeriodTo",row.getPotype());
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindOrgId", orgId);
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindPOHeaderId", poHdrVal);
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindPDropship", poTypeMap.get("dropshipVal"));
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindPFrontDoor", poTypeMap.get("frontDoorVal"));
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindPNoncode", poTypeMap.get("nonCodeVal"));
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindPConsignment", poTypeMap.get("consignmentVal"));
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindPtrade", poTypeMap.get("tradeVal"));
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindPNewStore", poTypeMap.get("newStoreVal"));
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindPReplenishment", poTypeMap.get("replenishmentVal"));
            PoInquiryMainVOImpl.setNamedWhereClauseParam("bindPdirectimpor", poTypeMap.get("directImportVal"));
            PoInquiryMainVOImpl.executeQuery();
            logger.info("Query value Po Inquiry ::::" + PoInquiryMainVOImpl.getQuery());


        }
        return outString;
    }

    public String getPoLines(Number poHdrId, String poNum) {
        String outString = "";


        logger.info("getPoLines called.");

        logger.info(">>>>>>>>>>>>>>>>poHdrId>>>>>>>>>." + poHdrId);

        ViewObjectImpl PoInquiryDetailsVOImpl = this.getPoInquiryDetailsVO();

        PoInquiryDetailsVOImpl.clearViewCriterias();

        PoInquiryDetailsVOImpl.setNamedWhereClauseParam("bindPOHdrId", poHdrId);
        PoInquiryDetailsVOImpl.setNamedWhereClauseParam("bindPPNum", poNum);
        PoInquiryDetailsVOImpl.executeQuery();
        logger.info("Query value Po Inquiry ::::" + PoInquiryDetailsVOImpl.getQuery());


        return outString;
    }

    public String getRecPopUp(Number poLineId) {
        String outString = "";


        logger.info("getRecPopUp called.");

        logger.info(">>>>>>>>>>>>>>>>poHdrId>>>>>>>>>." + poLineId);

        ViewObjectImpl PoInquiryRecPopVOImpl = this.getPoInquiryRecPopVO();

        PoInquiryRecPopVOImpl.clearViewCriterias();

        PoInquiryRecPopVOImpl.setNamedWhereClauseParam("bindPoLineId", poLineId);
        PoInquiryRecPopVOImpl.executeQuery();
        logger.info("Query value Po Inquiry ::::" + PoInquiryRecPopVOImpl.getQuery());


        // if(PoInquiryRecPopVOImpl.hasNext())
        if (PoInquiryRecPopVOImpl.getEstimatedRowCount() == 1)
            outString = "FAIL";
        else
            outString = "SUCCESS";
        return outString;
    }

    public String getInvPopUp(Number poHdrId, Number poLineId) {
        String outString = "";


        logger.info("getInvPopUp called.");

        logger.info(">>>>>>>>>>>>>>>>poHdrId>>>>>>>>>." + poHdrId);
        logger.info(">>>>>>>>>>>>>>>>poLineId>>>>>>>>>." + poLineId);

        ViewObjectImpl PoInquiryInvPopVOImpl = this.getPoInquiryInvPopVO();

        PoInquiryInvPopVOImpl.clearViewCriterias();

        PoInquiryInvPopVOImpl.setNamedWhereClauseParam("bindPoHdrId", poHdrId);
        PoInquiryInvPopVOImpl.setNamedWhereClauseParam("bindPoLineId", poLineId);
        PoInquiryInvPopVOImpl.executeQuery();
        logger.info("Query value Po Inquiry ::::" + PoInquiryInvPopVOImpl.getQuery());

        //if(PoInquiryInvPopVOImpl.hasNext())
        if (PoInquiryInvPopVOImpl.getEstimatedRowCount() == 1)
            outString = "FAIL";
        else
            outString = "SUCCESS";
        return outString;
    }

    public String getWriteoffPopUp(Number poHdrId, Number poLineId) {
        String outString = "";


        logger.info("getWriteoffPopUp called.");

        logger.info(">>>>>>>>>>>>>>>>poHdrId>>>>>>>>>." + poHdrId);
        logger.info(">>>>>>>>>>>>>>>>poLineId>>>>>>>>>." + poLineId);

        ViewObjectImpl PoInquiryWrtoffPopVOImpl = this.getPoInquiryWrtoffPopVO();

        PoInquiryWrtoffPopVOImpl.clearViewCriterias();

        PoInquiryWrtoffPopVOImpl.setNamedWhereClauseParam("bindPoHdrId", poHdrId);
        PoInquiryWrtoffPopVOImpl.setNamedWhereClauseParam("bindPoLineId", poLineId);
        PoInquiryWrtoffPopVOImpl.executeQuery();
        logger.info("Query value Po Inquiry ::::" + PoInquiryWrtoffPopVOImpl.getQuery());

        //if(PoInquiryWrtoffPopVOImpl.hasNext())
        if (PoInquiryWrtoffPopVOImpl.getEstimatedRowCount() == 1)
            outString = "FAIL";
        else
            outString = "SUCCESS";

        return outString;
    }

    public void clearPoDetails() {

        logger.info("clearPoDetails called.");
        ViewObjectImpl PoInquiryDetailsVOImpl = this.getPoInquiryDetailsVO();

        ViewObjectImpl hdrImpl = this.getPoInquiryMainVO();
        if (hdrImpl != null) {

            if (hdrImpl.getRowCount() == 1) {
                Row fistRow = hdrImpl.first();
                if (fistRow != null) {

                    PoInquiryDetailsVOImpl.setNamedWhereClauseParam("bindPOHdrId", fistRow.getAttribute("PoHeaderId"));
                    PoInquiryDetailsVOImpl.setNamedWhereClauseParam("bindPPNum", fistRow.getAttribute("PoNumber"));
                    PoInquiryDetailsVOImpl.executeQuery();

                }


            } else {

                PoInquiryDetailsVOImpl.executeEmptyRowSet();

            }


        }

        else {

            PoInquiryDetailsVOImpl.executeEmptyRowSet();

        }

    }

    /**
     * Container's getter for PoInquiryDetailsVO1.
     * @return PoInquiryDetailsVO1
     */
    public PoInquiryDetailsVOImpl getPoInquiryDetailsVO() {
        return (PoInquiryDetailsVOImpl) findViewObject("PoInquiryDetailsVO");
    }

    /**
     * Container's getter for PoInquiryInvPopVO1.
     * @return PoInquiryInvPopVO1
     */
    public PoInquiryInvPopVOImpl getPoInquiryInvPopVO() {
        return (PoInquiryInvPopVOImpl) findViewObject("PoInquiryInvPopVO");
    }

    /**
     * Container's getter for PoInquiryMainVO1.
     * @return PoInquiryMainVO1
     */
    public PoInquiryMainVOImpl getPoInquiryMainVO() {
        return (PoInquiryMainVOImpl) findViewObject("PoInquiryMainVO");
    }

    /**
     * Container's getter for PoInquiryRecPopVO1.
     * @return PoInquiryRecPopVO1
     */
    public PoInquiryRecPopVOImpl getPoInquiryRecPopVO() {
        return (PoInquiryRecPopVOImpl) findViewObject("PoInquiryRecPopVO");
    }

    /**
     * Container's getter for PoInquirySearchVO1.
     * @return PoInquirySearchVO1
     */
    public PoInquirySearchVOImpl getPoInquirySearchVO() {
        return (PoInquirySearchVOImpl) findViewObject("PoInquirySearchVO");
    }

    /**
     * Container's getter for PoInquiryWrtoffPopVO1.
     * @return PoInquiryWrtoffPopVO1
     */
    public PoInquiryWrtoffPopVOImpl getPoInquiryWrtoffPopVO() {
        return (PoInquiryWrtoffPopVOImpl) findViewObject("PoInquiryWrtoffPopVO");
    }

    /**
     * Container's getter for XxApReceiptDetailInquirySearchVO.
     * @return XxApReceiptDetailInquirySearchVO
     */
    public XxApReceiptDetailInquirySearchVOImpl getXxApReceiptDetailInquirySearchVO() {
        return (XxApReceiptDetailInquirySearchVOImpl) findViewObject("XxApReceiptDetailInquirySearchVO");
    }

    /**
     * Container's getter for XxApReceiptDetailSummaryVO.
     * @return XxApReceiptDetailSummaryVO
     */
    public XxApReceiptDetailSummaryVOImpl getXxApReceiptDetailSummaryVO() {
        return (XxApReceiptDetailSummaryVOImpl) findViewObject("XxApReceiptDetailSummaryVO");
    }


    /**
     * Container's getter for XxApMatchRateVO1.
     * @return XxApMatchRateVO1
     */
    public XxApMatchRateVOImpl getXxApMatchRateVO1() {
        return (XxApMatchRateVOImpl) findViewObject("XxApMatchRateVO1");
    }

    /**
     * Container's getter for XxApMatchRateDataVO1.
     * @return XxApMatchRateDataVO1
     */
    public XxApMatchRateDataVOImpl getXxApMatchRateDataVO1() {
        return (XxApMatchRateDataVOImpl) findViewObject("XxApMatchRateDataVO1");
    }

    public String searchMatchRateData(HashMap matchRateMap) {
        String outString = "";

        ViewObjectImpl xxApMatchRateHdr = this.getXxApMatchRateDataVO1();
        ViewObjectImpl xxApMatchRateFstPass = this.getXxApMatchRateDataFirstPassVO1();
        ViewObjectImpl xxApMatchRateAllFin = this.getXxApMatchRateDataAllFinalizedVO1();
        ViewObjectImpl xxApMatchRateAllPayDue = this.getXxApMatchRateDataPaymtDueVO1();
        ViewObjectImpl xxApMatchRateAllDue = this.getXxApMatchRateDataDueDaysVO1();
        ViewObjectImpl xxApMatchRateAllTrueMatch = this.getXxApMatchRateDataTrueMatchVO1();


        XxApMatchRateVORowImpl row = (XxApMatchRateVORowImpl) getXxApMatchRateVO1().getCurrentRow();

        if (matchRateMap != null && row != null) {


            xxApMatchRateHdr.setWhereClause(null);
            xxApMatchRateHdr.clearViewCriterias();


            xxApMatchRateHdr.setNamedWhereClauseParam("P_date_from", row.getDaterangefrom());
            xxApMatchRateHdr.setNamedWhereClauseParam("P_date_to", row.getDaterangeto());


            xxApMatchRateHdr.setNamedWhereClauseParam("P_PO_TYPE", matchRateMap.get("poType"));
            xxApMatchRateHdr.setNamedWhereClauseParam("P_MATCH_TYPE", matchRateMap.get("wayMatch"));
            xxApMatchRateHdr.setNamedWhereClauseParam("P_OU_NAME", matchRateMap.get("orgId"));

            xxApMatchRateHdr.executeQuery();

            xxApMatchRateFstPass.setWhereClause(null);
            xxApMatchRateFstPass.clearViewCriterias();


            xxApMatchRateFstPass.setNamedWhereClauseParam("P_date_from", row.getDaterangefrom());
            xxApMatchRateFstPass.setNamedWhereClauseParam("P_date_to", row.getDaterangeto());


            xxApMatchRateFstPass.setNamedWhereClauseParam("P_PO_TYPE", matchRateMap.get("poType"));
            xxApMatchRateFstPass.setNamedWhereClauseParam("P_MATCH_TYPE", matchRateMap.get("wayMatch"));
            xxApMatchRateFstPass.setNamedWhereClauseParam("P_OU_NAME", matchRateMap.get("orgId"));
            xxApMatchRateFstPass.executeQuery();

            xxApMatchRateAllFin.setWhereClause(null);
            xxApMatchRateAllFin.clearViewCriterias();


            xxApMatchRateAllFin.setNamedWhereClauseParam("P_date_from", row.getDaterangefrom());
            xxApMatchRateAllFin.setNamedWhereClauseParam("P_date_to", row.getDaterangeto());


            xxApMatchRateAllFin.setNamedWhereClauseParam("P_PO_TYPE", matchRateMap.get("poType"));
            xxApMatchRateAllFin.setNamedWhereClauseParam("P_MATCH_TYPE", matchRateMap.get("wayMatch"));
            xxApMatchRateAllFin.setNamedWhereClauseParam("P_OU_NAME", matchRateMap.get("orgId"));
            xxApMatchRateAllFin.executeQuery();

            xxApMatchRateAllPayDue.setWhereClause(null);
            xxApMatchRateAllPayDue.clearViewCriterias();


            xxApMatchRateAllPayDue.setNamedWhereClauseParam("P_date_from", row.getDaterangefrom());
            xxApMatchRateAllPayDue.setNamedWhereClauseParam("P_date_to", row.getDaterangeto());


            xxApMatchRateAllPayDue.setNamedWhereClauseParam("P_PO_TYPE", matchRateMap.get("poType"));
            xxApMatchRateAllPayDue.setNamedWhereClauseParam("P_MATCH_TYPE", matchRateMap.get("wayMatch"));
            xxApMatchRateAllPayDue.setNamedWhereClauseParam("P_OU_NAME", matchRateMap.get("orgId"));
            xxApMatchRateAllPayDue.executeQuery();

            xxApMatchRateAllDue.setWhereClause(null);
            xxApMatchRateAllDue.clearViewCriterias();


            xxApMatchRateAllDue.setNamedWhereClauseParam("P_date_from", row.getDaterangefrom());
            xxApMatchRateAllDue.setNamedWhereClauseParam("P_date_to", row.getDaterangeto());


            xxApMatchRateAllDue.setNamedWhereClauseParam("P_PO_TYPE", matchRateMap.get("poType"));
            xxApMatchRateAllDue.setNamedWhereClauseParam("P_MATCH_TYPE", matchRateMap.get("wayMatch"));
            xxApMatchRateAllDue.setNamedWhereClauseParam("P_OU_NAME", matchRateMap.get("orgId"));
            xxApMatchRateAllDue.executeQuery();

            xxApMatchRateAllTrueMatch.setWhereClause(null);
            xxApMatchRateAllTrueMatch.clearViewCriterias();


            xxApMatchRateAllTrueMatch.setNamedWhereClauseParam("P_date_from", row.getDaterangefrom());
            xxApMatchRateAllTrueMatch.setNamedWhereClauseParam("P_date_to", row.getDaterangeto());


            xxApMatchRateAllTrueMatch.setNamedWhereClauseParam("P_PO_TYPE", matchRateMap.get("poType"));
            xxApMatchRateAllTrueMatch.setNamedWhereClauseParam("P_MATCH_TYPE", matchRateMap.get("wayMatch"));
            xxApMatchRateAllTrueMatch.setNamedWhereClauseParam("P_OU_NAME", matchRateMap.get("orgId"));
            xxApMatchRateAllTrueMatch.executeQuery();
            outString = "success";

        }
        return outString;
    }

    public void searchDefaultMatchRateData() {
        XxApMatchRateDefaultDataVORowImpl row =
            (XxApMatchRateDefaultDataVORowImpl) getXxApMatchRateDefaultDataVO1().first();
        ViewObjectImpl xxApMatchRateHdr = this.getXxApMatchRateDataVO1();
        ViewObjectImpl xxApMatchRateFstPass = this.getXxApMatchRateDataFirstPassVO1();
        ViewObjectImpl xxApMatchRateAllFin = this.getXxApMatchRateDataAllFinalizedVO1();
        ViewObjectImpl xxApMatchRateAllPayDue = this.getXxApMatchRateDataPaymtDueVO1();
        ViewObjectImpl xxApMatchRateAllDue = this.getXxApMatchRateDataDueDaysVO1();
        ViewObjectImpl xxApMatchRateAllTrueMatch = this.getXxApMatchRateDataTrueMatchVO1();
        if (row != null) {


            xxApMatchRateHdr.setWhereClause(null);
            xxApMatchRateHdr.clearViewCriterias();


            xxApMatchRateHdr.setNamedWhereClauseParam("P_date_from", row.getSelectobjects0());
            xxApMatchRateHdr.setNamedWhereClauseParam("P_date_to", row.getSelectobjects0());

            xxApMatchRateHdr.executeQuery();

            xxApMatchRateFstPass.setWhereClause(null);
            xxApMatchRateFstPass.clearViewCriterias();


            xxApMatchRateFstPass.setNamedWhereClauseParam("P_date_from", row.getSelectobjects0());
            xxApMatchRateFstPass.setNamedWhereClauseParam("P_date_to", row.getSelectobjects0());
            xxApMatchRateFstPass.executeQuery();

            xxApMatchRateAllFin.setWhereClause(null);
            xxApMatchRateAllFin.clearViewCriterias();


            xxApMatchRateAllFin.setNamedWhereClauseParam("P_date_from", row.getSelectobjects0());
            xxApMatchRateAllFin.setNamedWhereClauseParam("P_date_to", row.getSelectobjects0());
            xxApMatchRateAllFin.executeQuery();

            xxApMatchRateAllPayDue.setWhereClause(null);
            xxApMatchRateAllPayDue.clearViewCriterias();


            xxApMatchRateAllPayDue.setNamedWhereClauseParam("P_date_from", row.getSelectobjects0());
            xxApMatchRateAllPayDue.setNamedWhereClauseParam("P_date_to", row.getSelectobjects0());
            xxApMatchRateAllPayDue.executeQuery();

            xxApMatchRateAllDue.setWhereClause(null);
            xxApMatchRateAllDue.clearViewCriterias();


            xxApMatchRateAllDue.setNamedWhereClauseParam("P_date_from", row.getSelectobjects0());
            xxApMatchRateAllDue.setNamedWhereClauseParam("P_date_to", row.getSelectobjects0());
            xxApMatchRateAllDue.executeQuery();

            xxApMatchRateAllTrueMatch.setWhereClause(null);
            xxApMatchRateAllTrueMatch.clearViewCriterias();


            xxApMatchRateAllTrueMatch.setNamedWhereClauseParam("P_date_from", row.getSelectobjects0());
            xxApMatchRateAllTrueMatch.setNamedWhereClauseParam("P_date_to", row.getSelectobjects0());
            xxApMatchRateAllTrueMatch.executeQuery();

        }
    }

    /**
     * Container's getter for XxApMatchRateDataFirstPassVO1.
     * @return XxApMatchRateDataFirstPassVO1
     */
    public XxApMatchRateDataFirstPassVOImpl getXxApMatchRateDataFirstPassVO1() {
        return (XxApMatchRateDataFirstPassVOImpl) findViewObject("XxApMatchRateDataFirstPassVO1");
    }

    /**
     * Container's getter for XxApMatchRateDataAllFinalizedVO1.
     * @return XxApMatchRateDataAllFinalizedVO1
     */
    public XxApMatchRateDataAllFinalizedVOImpl getXxApMatchRateDataAllFinalizedVO1() {
        return (XxApMatchRateDataAllFinalizedVOImpl) findViewObject("XxApMatchRateDataAllFinalizedVO1");
    }

    /**
     * Container's getter for XxApMatchRateDataPaymtDueVO1.
     * @return XxApMatchRateDataPaymtDueVO1
     */
    public XxApMatchRateDataPaymtDueVOImpl getXxApMatchRateDataPaymtDueVO1() {
        return (XxApMatchRateDataPaymtDueVOImpl) findViewObject("XxApMatchRateDataPaymtDueVO1");
    }

    /**
     * Container's getter for XxApMatchRateDataDueDaysVO1.
     * @return XxApMatchRateDataDueDaysVO1
     */
    public XxApMatchRateDataDueDaysVOImpl getXxApMatchRateDataDueDaysVO1() {
        return (XxApMatchRateDataDueDaysVOImpl) findViewObject("XxApMatchRateDataDueDaysVO1");
    }

    /**
     * Container's getter for XxApMatchRateDataTrueMatchVO1.
     * @return XxApMatchRateDataTrueMatchVO1
     */
    public XxApMatchRateDataTrueMatchVOImpl getXxApMatchRateDataTrueMatchVO1() {
        return (XxApMatchRateDataTrueMatchVOImpl) findViewObject("XxApMatchRateDataTrueMatchVO1");
    }

    /**
     * Container's getter for XxApMatchRateDefaultDataVO1.
     * @return XxApMatchRateDefaultDataVO1
     */
    public XxApMatchRateDefaultDataVOImpl getXxApMatchRateDefaultDataVO1() {
        return (XxApMatchRateDefaultDataVOImpl) findViewObject("XxApMatchRateDefaultDataVO1");
    }


    /**
     * Container's getter for SKULovVO1.
     * @return SKULovVO1
     */
    public od.tdmatch.model.lov.SKULovVOImpl getSKULovVO1() {
        return (od.tdmatch.model.lov.SKULovVOImpl) findViewObject("SKULovVO1");
    }

    /**
     * Container's getter for POInquiryHeaderVO1.
     * @return POInquiryHeaderVO1
     */
    public POInquiryHeaderVOImpl getPOInquiryHeaderVO1() {
        return (POInquiryHeaderVOImpl) findViewObject("POInquiryHeaderVO1");
    }
    
    public String searchReceiptDetInqConReq(int userId) {
        
            XxApReceiptDetailInquirySearchVORowImpl row =
                (XxApReceiptDetailInquirySearchVORowImpl) getXxApReceiptDetailInquirySearchVO1().getCurrentRow();
            Connection conn = null;
            CallableStatement st = null;
   
            java.math.BigDecimal conRequestId = null;


            DateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
            if (row != null) {

                logger.info(">>>>>>>>>>>>>>>>inside row is not null>>>>>>>>>");
                logger.info(">>>>>>>>>>>>>>>>getSupplierName>>>>>>>>>." + row.getSuppliername());
                logger.info(">>>>>>>>>>>>>>>>getSuppliersite Site>>>>>>>>>." + row.getSuppliersite() + "-SKU--" +
                            row.getSku());
                logger.info(">>>>>>>>>>>>>>>>invoice>>>>>>>>>." + row.getInvoice() + "-PO--" + row.getPo());
                logger.info(">>>>>>>>>>>>>>>>getReceipt>>>>>>>>>." + row.getReceipt() + "--dateFrom--" +
                            row.getDaterangefrom() + "--DateTo--" + row.getDaterangeto());
            
                logger.info(">>>>>>>>>>>>>>>>userId>>>>>>>>>." + userId);
                System.err.println("row.getDaterangefrom()"+row.getDaterangefrom());
                System.err.println("row.getDaterangefrom()"+row.getDaterangefrom());    
                java.util.Date valueDateFrm = convertDomainDateToUtilDate(row.getDaterangefrom());
                String dateFrm = null;
                if (valueDateFrm != null)
                    dateFrm = dateFormat.format(valueDateFrm);


                java.util.Date valueDateTo = convertDomainDateToUtilDate(row.getDaterangeto());
                String dateTo = null;
                if (valueDateTo != null)
                    dateTo = dateFormat.format(valueDateTo);
                int suppId = 0;
                if (row.getSupplierId() != null) {
                    suppId = row.getSupplierId().intValue();
                }


                System.err.println("searchReceiptDetailInquiry suppId>>>" + suppId);
          

              
                try {

                    System.err.println("dateFrm" + dateFrm);
                    System.err.println("dateTo" + dateTo);
                    System.err.println("userId" + userId);

                    String sql =
                        "begin XX_AP_TRADE_RCT_INQ_PKG.XXAPRECEITPDETINQ_WRAPPER(:P_DATE_FROM,:P_DATE_TO," +
                        ":P_INVOICE_ID,:P_RECEIPT_ID,:P_PO_HEADER_ID,:P_INVENTORY_ITEM_ID," +
                        ":P_SUPPLIER_SITE_ID,:P_VENDOR_ID,:P_USER_ID,:P_REQUEST_ID); end;";
                    conn = getDBTransaction().createStatement(1).getConnection();
                    st = getDBTransaction().createCallableStatement(sql, 0);
                    st.setString(1, dateFrm);
                    st.setString(2, dateTo);
                   
                    
                    System.err.println("dateFrm" + dateFrm);
                    System.err.println("dateFrm" + dateFrm);
                    System.err.println("row.getInvoiceId()" + row.getInvoiceId());
                    System.err.println("row.getInvoiceId()" + row.getInvoiceId());
                    System.err.println("row.getReciptsId()" + row.getReciptsId());
                    System.err.println("row.getPoHdrId()" + row.getPoHdrId());
                    System.err.println("row.getInvItemId()" + row.getInvItemId());
                    System.err.println("row.getSupSiteId()" + row.getSupSiteId());
                    System.err.println("suppId :::::" + suppId);
                    System.err.println("userId :::::" + userId);
                    if (row.getInvoiceId() != null) {
                        st.setObject(3, row.getInvoiceId().intValue());
                    } else {
                        st.setObject(3, null);

                    }
                    if (row.getReciptsId() != null) {
                        st.setObject(4, row.getReciptsId().intValue());
                    } else {
                        st.setObject(4, null);

                    }
                    if (row.getPoHdrId() != null) {
                        st.setObject(5, row.getPoHdrId().intValue());

                    } else {
                        System.out.println("In else................");
                        st.setObject(5, null);

                    }
                    if (row.getInvItemId() != null) {
                        st.setObject(6, row.getInvItemId().intValue());
                    } else {
                        st.setObject(6, null);

                    }
                    if (row.getSupSiteId() != null) {
                        st.setObject(7, row.getSupSiteId().intValue());
                    } else {
                        st.setObject(7, null);

                    }
                    if (suppId != 0) {
                        st.setInt(8, suppId);
                    } else {
                        st.setObject(8, null);

                    }
                    
                    st.setInt(9, userId);
                    st.registerOutParameter(10, Types.NUMERIC);
                  


                    st.execute();
                    
                  

                    conRequestId = (java.math.BigDecimal)st.getObject(10);
                    System.err.println("conRequestId>>>>>>>"+conRequestId);

                    logger.info("XX_AP_TRADE_RCT_INQ_PKG.GET_DATA_TEMP result proStatus >>>>>>>" + conRequestId);

                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        return "Request submitted with id: "+conRequestId;
        }

    /**
     * Container's getter for XxApDropDeducNonDedInqSearchVO1.
     * @return XxApDropDeducNonDedInqSearchVO1
     */
    public XxApDropDeducNonDedInqSearchVOImpl getXxApDropDeducNonDedInqSearchVO() {
        return (XxApDropDeducNonDedInqSearchVOImpl) findViewObject("XxApDropDeducNonDedInqSearchVO");
    }

    /**
     * Container's getter for XxApDropDeducNonDedInqSumVO1.
     * @return XxApDropDeducNonDedInqSumVO1
     */
    public XxApDropDeducNonDedInqSumVOImpl getXxApDropDeducNonDedInqSumVO() {
        return (XxApDropDeducNonDedInqSumVOImpl) findViewObject("XxApDropDeducNonDedInqSumVO");
    }

    /**
     * Container's getter for XxApDropDeducNonDedInqDtlVO1.
     * @return XxApDropDeducNonDedInqDtlVO1
     */
    public XxApDropDeducNonDedInqDtlVOImpl getXxApDropDeducNonDedInqDtlVO() {
        return (XxApDropDeducNonDedInqDtlVOImpl) findViewObject("XxApDropDeducNonDedInqDtlVO");
    }

    /**
     * Container's getter for XxApNonDedInqSearchVO1.
     * @return XxApNonDedInqSearchVO1
     */
    public XxApNonDedInqSearchVOImpl getXxApNonDedInqSearchVO() {
        return (XxApNonDedInqSearchVOImpl) findViewObject("XxApNonDedInqSearchVO");
    }
    
    
    /**
     * @param trMaCashBkSearchMap
     * @return
     */
    public String searchTraMatDedInq(HashMap trMaDedInqSearchMap) {
        String outString = "";


        logger.info("searchTraMatDedInq called.");


        ViewObjectImpl xxApDeInq = this.getXxApDropDeducNonDedInqSumVO();

        XxApDropDeducNonDedInqSearchVORowImpl row = (XxApDropDeducNonDedInqSearchVORowImpl) getXxApDropDeducNonDedInqSearchVO().getCurrentRow();

        if (trMaDedInqSearchMap != null && row != null) {
            logger.info(">>>>>>>>>>>>>>>>orgId>>>>>>>>>." + trMaDedInqSearchMap.get("orgId"));
            logger.info(">>>>>>>>>>>>>>>>daterangfrom>>>>>>>>>." + trMaDedInqSearchMap.get("daterangfrom"));
            logger.info(">>>>>>>>>>>>>>>>daterangto>>>>>>>>>." + trMaDedInqSearchMap.get("daterangto"));
            System.err.println(">>>>>>>>>>>>>>>>dAPPaterangto>>>>>>>>>." + trMaDedInqSearchMap.get("daterangto"));
            xxApDeInq.setWhereClause(null);
            xxApDeInq.clearViewCriterias();
                xxApDeInq.setNamedWhereClauseParam("bindOrgId", trMaDedInqSearchMap.get("orgId"));
            
            xxApDeInq.setNamedWhereClauseParam("bindFromDate", row.getInvdaterangfrom());
            xxApDeInq.setNamedWhereClauseParam("bindToDate", row.getInvdaterangto());
            xxApDeInq.setNamedWhereClauseParam("bindGlFromDate", row.getGldaterangfrom());
            xxApDeInq.setNamedWhereClauseParam("bindGlToDate", row.getGldaterangto());
            xxApDeInq.setNamedWhereClauseParam("bindVendSiteId", row.getSupplierSiteId());
            xxApDeInq.setNamedWhereClauseParam("bindVendorId", row.getSupplierId());
            xxApDeInq.setNamedWhereClauseParam("bindReasonCode", row.getReasoncode());
           
            xxApDeInq.setNamedWhereClauseParam("bindInvoiceId",row.getInvoiceId());
            
            logger.info("Query value ::::" + xxApDeInq.getQuery());
            xxApDeInq.executeQuery();
            System.out.println();
            System.err.println(""+xxApDeInq.getEstimatedRowCount());


        }
        return outString;
    }
    
    
    
    
    /**
     * @param trMaCashBkSearchMap
     * @return
     */
    public String searchTraMatDedDtlInq(HashMap trMaDedInqSearchMap) {
        String outString = "";


        logger.info("searchTraMatDedDtlInq called.");


        ViewObjectImpl xxApDeInq = this.getXxApDropDeducNonDedInqDtlVO();

        XxApDropDeducNonDedInqSearchVORowImpl row = (XxApDropDeducNonDedInqSearchVORowImpl) getXxApDropDeducNonDedInqSearchVO().getCurrentRow();
        
        System.err.println("Map......."+trMaDedInqSearchMap);
        System.err.println("Row....."+row);
        if (trMaDedInqSearchMap != null && row != null) {
            logger.info(">>>>>>>>>>>>>>>>orgId>>>>>>>>>." + trMaDedInqSearchMap.get("orgId"));
            logger.info(">>>>>>>>>>>>>>>>daterangfrom>>>>>>>>>." + trMaDedInqSearchMap.get("daterangfrom"));
            logger.info(">>>>>>>>>>>>>>>>daterangto>>>>>>>>>." + trMaDedInqSearchMap.get("daterangto"));
            System.err.println(">>>>>>>>>>>>>>>>dAPPaterangto>>>>>>>>>." + trMaDedInqSearchMap.get("daterangto"));
            xxApDeInq.setWhereClause(null);
            xxApDeInq.clearViewCriterias();
                xxApDeInq.setNamedWhereClauseParam("bindOrgId", trMaDedInqSearchMap.get("orgId"));
            
            xxApDeInq.setNamedWhereClauseParam("bindFromDate", row.getInvdaterangfrom());
            xxApDeInq.setNamedWhereClauseParam("bindToDate", row.getInvdaterangto());
            xxApDeInq.setNamedWhereClauseParam("bindGlFromDate", row.getGldaterangfrom());
            xxApDeInq.setNamedWhereClauseParam("bindGlToDate", row.getGldaterangto());
            xxApDeInq.setNamedWhereClauseParam("bindVendSiteId", row.getSupplierSiteId());
            xxApDeInq.setNamedWhereClauseParam("bindVendorId", row.getSupplierId());
            xxApDeInq.setNamedWhereClauseParam("bindReasonCode", row.getReasoncode());
           
            xxApDeInq.setNamedWhereClauseParam("bindInvoiceId",row.getInvoiceId());
            
            logger.info("Query value ::::" + xxApDeInq.getQuery());
            xxApDeInq.executeQuery();
            System.out.println();
            System.err.println("getEstimatedRowCount"+xxApDeInq.getEstimatedRowCount());

        }
        return outString;
    }


    /**
     * Container's getter for XxApNonDedInqResultVO1.
     * @return XxApNonDedInqResultVO1
     */
    public XxApNonDedInqResultVOImpl getXxApNonDedInqResultVO() {
        return (XxApNonDedInqResultVOImpl) findViewObject("XxApNonDedInqResultVO");
    }
    
    
    /**
     * @param trMaCashBkSearchMap
     * @return
     */
    public String searchTraMatNonDedInq(HashMap trMaNonDedInqSearchMap) {
        String outString = "";


        logger.info("searchTraMatNonDedInq called.");


        ViewObjectImpl xxApDeInq = this.getXxApNonDedInqResultVO();

        XxApNonDedInqSearchVORowImpl row = (XxApNonDedInqSearchVORowImpl) getXxApNonDedInqSearchVO() .getCurrentRow();
        
        System.err.println("Map......."+trMaNonDedInqSearchMap);
        System.err.println("Row....."+row);
        if (trMaNonDedInqSearchMap != null && row != null) {
            logger.info(">>>>>>>>>>>>>>>>orgId>>>>>>>>>." + trMaNonDedInqSearchMap.get("orgId"));
           
            xxApDeInq.setWhereClause(null);
            xxApDeInq.clearViewCriterias();
                xxApDeInq.setNamedWhereClauseParam("bindOrgId", trMaNonDedInqSearchMap.get("orgId"));
            
            xxApDeInq.setNamedWhereClauseParam("bindFromDate", row.getDaterangfrom());
            xxApDeInq.setNamedWhereClauseParam("bindToDate", row.getDaterangto());
            
            xxApDeInq.setNamedWhereClauseParam("bindVendSiteId", row.getSupplierSiteId());
            xxApDeInq.setNamedWhereClauseParam("bindVendorId", row.getSupplierId());
            xxApDeInq.setNamedWhereClauseParam("bindReasonCode", row.getReasoncode());
           
            xxApDeInq.setNamedWhereClauseParam("bindPoHdrId",row.getPonum());
            
            logger.info("Query value ::::" + xxApDeInq.getQuery());
            xxApDeInq.executeQuery();
            System.out.println();
            System.err.println("getEstimatedRowCount"+xxApDeInq.getEstimatedRowCount());

        }
        return outString;
    }

}

