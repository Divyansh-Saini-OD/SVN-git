-- Declare the SQL type for the PL/SQL type ROWTYPE_PL0
CREATE OR REPLACE TYPE XX_GI_SUBINVXFR_PKG_ROWTYPE_2 AS OBJECT (
      TRANSACTION_INTERFACE_ID NUMBER,
      LOC_NBR NUMBER,
      ORGANIZATION_ID NUMBER,
      TARGET_TRANS_TYPE_CD VARCHAR2(30),
      SKU VARCHAR2(240),
      ITEM_DESCRIPTION VARCHAR2(240),
      PRIMARY_UOM_CD VARCHAR2(4),
      ITEM_ID NUMBER,
      FROM_SUBINVENTORY VARCHAR2(25),
      TO_SUBINVENTORY VARCHAR2(25),
      SOURCE_SYSTEM VARCHAR2(30),
      TRANSACTION_DATE DATE,
      COUNTRY_CD VARCHAR2(3),
      VENDOR_ID VARCHAR2(15),
      EBS_VENDOR_ID NUMBER,
      TM_STAMP VARCHAR2(25),
      QUANTITY NUMBER,
      REASON_CD VARCHAR2(2),
      STATUS_CD VARCHAR2(2),
      COMMENTS VARCHAR2(60),
      UNIT_COST NUMBER,
      EXTENDED_COST NUMBER,
      UOM_CD VARCHAR2(4),
      RTV_NBR NUMBER,
      BUYBACK_NBR NUMBER,
      WORKSHEET_NBR NUMBER,
      PO_NBR NUMBER,
      KEYREC_NBR NUMBER,
      VENDOR_PRODUCT_CD VARCHAR2(20),
      MISSHIP_DESCR VARCHAR2(30),
      PO_COST NUMBER,
      USER_ID_ENT_BY VARCHAR2(10),
      PGM_ENT VARCHAR2(10),
      LICENSE_PLATE VARCHAR2(10),
      RTV_ATTR VARCHAR2(50),
      CASHIER_ID NUMBER,
      WEIGHT_SHIP NUMBER,
      CREATED_BY NUMBER,
      CREATION_DATE DATE,
      LAST_UPDATED_BY NUMBER,
      LAST_UPDATE_DATE DATE,
      LAST_UPDATE_LOGIN NUMBER,
      STATUS VARCHAR2(15),
      ERROR_MESSAGE VARCHAR2(500)
);
/
show errors
CREATE OR REPLACE TYPE XX_GI_SUBINVXFR_PKG_DETAIL_T1 AS TABLE OF XX_GI_SUBINVXFR_PKG_ROWTYPE_2; 
/
show errors
-- Declare package containing conversion functions between SQL and PL/SQL types
CREATE OR REPLACE PACKAGE BPEL_PLINVOKESUBINVENTORYPROCE AS
	-- Redefine a PL/SQL RECORD type originally defined via CURSOR%ROWTYPE
	TYPE ROWTYPE_PL0 IS RECORD (
		TRANSACTION_INTERFACE_ID NUMBER,
		LOC_NBR NUMBER,
		ORGANIZATION_ID NUMBER,
		TARGET_TRANS_TYPE_CD VARCHAR2(30),
		SKU VARCHAR2(240),
		ITEM_DESCRIPTION VARCHAR2(240),
		PRIMARY_UOM_CD VARCHAR2(4),
		ITEM_ID NUMBER,
		FROM_SUBINVENTORY VARCHAR2(25),
		TO_SUBINVENTORY VARCHAR2(25),
		SOURCE_SYSTEM VARCHAR2(30),
		TRANSACTION_DATE DATE,
		COUNTRY_CD VARCHAR2(3),
		VENDOR_ID VARCHAR2(15),
		EBS_VENDOR_ID NUMBER,
		TM_STAMP VARCHAR2(25),
		QUANTITY NUMBER,
		REASON_CD VARCHAR2(2),
		STATUS_CD VARCHAR2(2),
		COMMENTS VARCHAR2(60),
		UNIT_COST NUMBER,
		EXTENDED_COST NUMBER,
		UOM_CD VARCHAR2(4),
		RTV_NBR NUMBER,
		BUYBACK_NBR NUMBER,
		WORKSHEET_NBR NUMBER,
		PO_NBR NUMBER,
		KEYREC_NBR NUMBER,
		VENDOR_PRODUCT_CD VARCHAR2(20),
		MISSHIP_DESCR VARCHAR2(30),
		PO_COST NUMBER,
		USER_ID_ENT_BY VARCHAR2(10),
		PGM_ENT VARCHAR2(10),
		LICENSE_PLATE VARCHAR2(10),
		RTV_ATTR VARCHAR2(50),
		CASHIER_ID NUMBER,
		WEIGHT_SHIP NUMBER,
		CREATED_BY NUMBER,
		CREATION_DATE DATE,
		LAST_UPDATED_BY NUMBER,
		LAST_UPDATE_DATE DATE,
		LAST_UPDATE_LOGIN NUMBER,
		STATUS VARCHAR2(15),
		ERROR_MESSAGE VARCHAR2(500));
	-- Declare the conversion functions the PL/SQL type ROWTYPE_PL0
	FUNCTION PL_TO_SQL3(aPlsqlItem ROWTYPE_PL0)
 	RETURN XX_GI_SUBINVXFR_PKG_ROWTYPE_2;
	FUNCTION SQL_TO_PL3(aSqlItem XX_GI_SUBINVXFR_PKG_ROWTYPE_2)
	RETURN ROWTYPE_PL0;
	-- Declare the conversion functions the PL/SQL type XX_GI_SUBINVXFR_PKG.DETAIL_TBL_TYPE
	FUNCTION PL_TO_SQL2(aPlsqlItem XX_GI_SUBINVXFR_PKG.DETAIL_TBL_TYPE)
 	RETURN XX_GI_SUBINVXFR_PKG_DETAIL_T1;
	FUNCTION SQL_TO_PL2(aSqlItem XX_GI_SUBINVXFR_PKG_DETAIL_T1)
	RETURN XX_GI_SUBINVXFR_PKG.DETAIL_TBL_TYPE;
   PROCEDURE XX_GI_SUBINVXFR_PKG$POPULATE_ (P_CALLING_PGM VARCHAR2,X_DETAIL_TBL IN OUT XX_GI_SUBINVXFR_PKG_DETAIL_T1,X_RETURN_STATUS OUT VARCHAR2,X_RETURN_MESSAGE OUT VARCHAR2);
END BPEL_PLINVOKESUBINVENTORYPROCE;
/
show errors
CREATE OR REPLACE PACKAGE BODY BPEL_PLINVOKESUBINVENTORYPROCE IS
	FUNCTION PL_TO_SQL3(aPlsqlItem ROWTYPE_PL0)
 	RETURN XX_GI_SUBINVXFR_PKG_ROWTYPE_2 IS 
	aSqlItem XX_GI_SUBINVXFR_PKG_ROWTYPE_2; 
	BEGIN 
		-- initialize the object
		aSqlItem := XX_GI_SUBINVXFR_PKG_ROWTYPE_2(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
		aSqlItem.TRANSACTION_INTERFACE_ID := aPlsqlItem.TRANSACTION_INTERFACE_ID;
		aSqlItem.LOC_NBR := aPlsqlItem.LOC_NBR;
		aSqlItem.ORGANIZATION_ID := aPlsqlItem.ORGANIZATION_ID;
		aSqlItem.TARGET_TRANS_TYPE_CD := aPlsqlItem.TARGET_TRANS_TYPE_CD;
		aSqlItem.SKU := aPlsqlItem.SKU;
		aSqlItem.ITEM_DESCRIPTION := aPlsqlItem.ITEM_DESCRIPTION;
		aSqlItem.PRIMARY_UOM_CD := aPlsqlItem.PRIMARY_UOM_CD;
		aSqlItem.ITEM_ID := aPlsqlItem.ITEM_ID;
		aSqlItem.FROM_SUBINVENTORY := aPlsqlItem.FROM_SUBINVENTORY;
		aSqlItem.TO_SUBINVENTORY := aPlsqlItem.TO_SUBINVENTORY;
		aSqlItem.SOURCE_SYSTEM := aPlsqlItem.SOURCE_SYSTEM;
		aSqlItem.TRANSACTION_DATE := aPlsqlItem.TRANSACTION_DATE;
		aSqlItem.COUNTRY_CD := aPlsqlItem.COUNTRY_CD;
		aSqlItem.VENDOR_ID := aPlsqlItem.VENDOR_ID;
		aSqlItem.EBS_VENDOR_ID := aPlsqlItem.EBS_VENDOR_ID;
		aSqlItem.TM_STAMP := aPlsqlItem.TM_STAMP;
		aSqlItem.QUANTITY := aPlsqlItem.QUANTITY;
		aSqlItem.REASON_CD := aPlsqlItem.REASON_CD;
		aSqlItem.STATUS_CD := aPlsqlItem.STATUS_CD;
		aSqlItem.COMMENTS := aPlsqlItem.COMMENTS;
		aSqlItem.UNIT_COST := aPlsqlItem.UNIT_COST;
		aSqlItem.EXTENDED_COST := aPlsqlItem.EXTENDED_COST;
		aSqlItem.UOM_CD := aPlsqlItem.UOM_CD;
		aSqlItem.RTV_NBR := aPlsqlItem.RTV_NBR;
		aSqlItem.BUYBACK_NBR := aPlsqlItem.BUYBACK_NBR;
		aSqlItem.WORKSHEET_NBR := aPlsqlItem.WORKSHEET_NBR;
		aSqlItem.PO_NBR := aPlsqlItem.PO_NBR;
		aSqlItem.KEYREC_NBR := aPlsqlItem.KEYREC_NBR;
		aSqlItem.VENDOR_PRODUCT_CD := aPlsqlItem.VENDOR_PRODUCT_CD;
		aSqlItem.MISSHIP_DESCR := aPlsqlItem.MISSHIP_DESCR;
		aSqlItem.PO_COST := aPlsqlItem.PO_COST;
		aSqlItem.USER_ID_ENT_BY := aPlsqlItem.USER_ID_ENT_BY;
		aSqlItem.PGM_ENT := aPlsqlItem.PGM_ENT;
		aSqlItem.LICENSE_PLATE := aPlsqlItem.LICENSE_PLATE;
		aSqlItem.RTV_ATTR := aPlsqlItem.RTV_ATTR;
		aSqlItem.CASHIER_ID := aPlsqlItem.CASHIER_ID;
		aSqlItem.WEIGHT_SHIP := aPlsqlItem.WEIGHT_SHIP;
		aSqlItem.CREATED_BY := aPlsqlItem.CREATED_BY;
		aSqlItem.CREATION_DATE := aPlsqlItem.CREATION_DATE;
		aSqlItem.LAST_UPDATED_BY := aPlsqlItem.LAST_UPDATED_BY;
		aSqlItem.LAST_UPDATE_DATE := aPlsqlItem.LAST_UPDATE_DATE;
		aSqlItem.LAST_UPDATE_LOGIN := aPlsqlItem.LAST_UPDATE_LOGIN;
		aSqlItem.STATUS := aPlsqlItem.STATUS;
		aSqlItem.ERROR_MESSAGE := aPlsqlItem.ERROR_MESSAGE;
		RETURN aSqlItem;
	END PL_TO_SQL3;
	FUNCTION SQL_TO_PL3(aSqlItem XX_GI_SUBINVXFR_PKG_ROWTYPE_2) 
	RETURN ROWTYPE_PL0 IS 
	aPlsqlItem ROWTYPE_PL0; 
	BEGIN 
		aPlsqlItem.TRANSACTION_INTERFACE_ID := aSqlItem.TRANSACTION_INTERFACE_ID;
		aPlsqlItem.LOC_NBR := aSqlItem.LOC_NBR;
		aPlsqlItem.ORGANIZATION_ID := aSqlItem.ORGANIZATION_ID;
		aPlsqlItem.TARGET_TRANS_TYPE_CD := aSqlItem.TARGET_TRANS_TYPE_CD;
		aPlsqlItem.SKU := aSqlItem.SKU;
		aPlsqlItem.ITEM_DESCRIPTION := aSqlItem.ITEM_DESCRIPTION;
		aPlsqlItem.PRIMARY_UOM_CD := aSqlItem.PRIMARY_UOM_CD;
		aPlsqlItem.ITEM_ID := aSqlItem.ITEM_ID;
		aPlsqlItem.FROM_SUBINVENTORY := aSqlItem.FROM_SUBINVENTORY;
		aPlsqlItem.TO_SUBINVENTORY := aSqlItem.TO_SUBINVENTORY;
		aPlsqlItem.SOURCE_SYSTEM := aSqlItem.SOURCE_SYSTEM;
		aPlsqlItem.TRANSACTION_DATE := aSqlItem.TRANSACTION_DATE;
		aPlsqlItem.COUNTRY_CD := aSqlItem.COUNTRY_CD;
		aPlsqlItem.VENDOR_ID := aSqlItem.VENDOR_ID;
		aPlsqlItem.EBS_VENDOR_ID := aSqlItem.EBS_VENDOR_ID;
		aPlsqlItem.TM_STAMP := aSqlItem.TM_STAMP;
		aPlsqlItem.QUANTITY := aSqlItem.QUANTITY;
		aPlsqlItem.REASON_CD := aSqlItem.REASON_CD;
		aPlsqlItem.STATUS_CD := aSqlItem.STATUS_CD;
		aPlsqlItem.COMMENTS := aSqlItem.COMMENTS;
		aPlsqlItem.UNIT_COST := aSqlItem.UNIT_COST;
		aPlsqlItem.EXTENDED_COST := aSqlItem.EXTENDED_COST;
		aPlsqlItem.UOM_CD := aSqlItem.UOM_CD;
		aPlsqlItem.RTV_NBR := aSqlItem.RTV_NBR;
		aPlsqlItem.BUYBACK_NBR := aSqlItem.BUYBACK_NBR;
		aPlsqlItem.WORKSHEET_NBR := aSqlItem.WORKSHEET_NBR;
		aPlsqlItem.PO_NBR := aSqlItem.PO_NBR;
		aPlsqlItem.KEYREC_NBR := aSqlItem.KEYREC_NBR;
		aPlsqlItem.VENDOR_PRODUCT_CD := aSqlItem.VENDOR_PRODUCT_CD;
		aPlsqlItem.MISSHIP_DESCR := aSqlItem.MISSHIP_DESCR;
		aPlsqlItem.PO_COST := aSqlItem.PO_COST;
		aPlsqlItem.USER_ID_ENT_BY := aSqlItem.USER_ID_ENT_BY;
		aPlsqlItem.PGM_ENT := aSqlItem.PGM_ENT;
		aPlsqlItem.LICENSE_PLATE := aSqlItem.LICENSE_PLATE;
		aPlsqlItem.RTV_ATTR := aSqlItem.RTV_ATTR;
		aPlsqlItem.CASHIER_ID := aSqlItem.CASHIER_ID;
		aPlsqlItem.WEIGHT_SHIP := aSqlItem.WEIGHT_SHIP;
		aPlsqlItem.CREATED_BY := aSqlItem.CREATED_BY;
		aPlsqlItem.CREATION_DATE := aSqlItem.CREATION_DATE;
		aPlsqlItem.LAST_UPDATED_BY := aSqlItem.LAST_UPDATED_BY;
		aPlsqlItem.LAST_UPDATE_DATE := aSqlItem.LAST_UPDATE_DATE;
		aPlsqlItem.LAST_UPDATE_LOGIN := aSqlItem.LAST_UPDATE_LOGIN;
		aPlsqlItem.STATUS := aSqlItem.STATUS;
		aPlsqlItem.ERROR_MESSAGE := aSqlItem.ERROR_MESSAGE;
		RETURN aPlsqlItem;
	END SQL_TO_PL3;
	FUNCTION PL_TO_SQL2(aPlsqlItem XX_GI_SUBINVXFR_PKG.DETAIL_TBL_TYPE)
 	RETURN XX_GI_SUBINVXFR_PKG_DETAIL_T1 IS 
	aSqlItem XX_GI_SUBINVXFR_PKG_DETAIL_T1; 
	BEGIN 
		-- initialize the table 
		aSqlItem := XX_GI_SUBINVXFR_PKG_DETAIL_T1();
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := PL_TO_SQL3(aPlsqlItem(I));
		END LOOP; 
		RETURN aSqlItem;
	END PL_TO_SQL2;
	FUNCTION SQL_TO_PL2(aSqlItem XX_GI_SUBINVXFR_PKG_DETAIL_T1) 
	RETURN XX_GI_SUBINVXFR_PKG.DETAIL_TBL_TYPE IS 
	aPlsqlItem XX_GI_SUBINVXFR_PKG.DETAIL_TBL_TYPE; 
	BEGIN 
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := SQL_TO_PL3(aSqlItem(I));
		END LOOP; 
		RETURN aPlsqlItem;
	END SQL_TO_PL2;

   PROCEDURE XX_GI_SUBINVXFR_PKG$POPULATE_ (P_CALLING_PGM VARCHAR2,X_DETAIL_TBL IN OUT XX_GI_SUBINVXFR_PKG_DETAIL_T1,X_RETURN_STATUS OUT VARCHAR2,X_RETURN_MESSAGE OUT VARCHAR2) IS
      X_DETAIL_TBL_ APPS.XX_GI_SUBINVXFR_PKG.DETAIL_TBL_TYPE;
   BEGIN
      X_DETAIL_TBL_ := BPEL_PLINVOKESUBINVENTORYPROCE.SQL_TO_PL2(X_DETAIL_TBL);
      APPS.XX_GI_SUBINVXFR_PKG.POPULATE_SUBINV_XFR_DATA(P_CALLING_PGM,X_DETAIL_TBL_,X_RETURN_STATUS,X_RETURN_MESSAGE);
      X_DETAIL_TBL := BPEL_PLINVOKESUBINVENTORYPROCE.PL_TO_SQL2(X_DETAIL_TBL_);
   END XX_GI_SUBINVXFR_PKG$POPULATE_;

END BPEL_PLINVOKESUBINVENTORYPROCE;
/
show errors
exit
