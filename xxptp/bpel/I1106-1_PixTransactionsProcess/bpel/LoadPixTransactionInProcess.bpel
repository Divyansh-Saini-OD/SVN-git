<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Thu Feb 21 10:51:17 GMT+05:30 2008
  Author:  aandavar
  Purpose: Asynchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="LoadPixTransactionInProcess"
         targetNamespace="http://xmlns.oracle.com/LoadPixTransactionInProcess"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ns4="http://xmlns.oracle.com/pcbpel/adapter/db/plPopulateRcvXfrStageProcess/"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:ns5="http://xmlns.oracle.com/pcbpel/adapter/db/plPopulaterRcvPoStageProcess/"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:ns9="http://xmlns.oracle.com/pcbpel/adapter/db/APPS/BPEL_PLPOPULATERRCVPOSTAGEPROC/XX_GI_RECEIVING_PKG-24POPULATE_/"
         xmlns:ns1="http://xmlns.oracle.com/pcbpel/adapter/mq/headerplDQPixTransactionProcess/"
         xmlns:ns2="http://TargetNamespace.com/plDQPixTransactionProcess"
         xmlns:ns15="ODError"
         xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:ns10="http://xmlns.oracle.com/pcbpel/adapter/db/APPS/XX_GI_PIX_TRAN_VALIDATE_PKG/VALIDATE_MESSAGE/"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:ns13="http://xmlns.oracle.com/pcbpel/adapter/db/plInvokeSubInventoryProcess/"
         xmlns:ns7="http://xmlns.oracle.com/pcbpel/adapter/db/APPS/BPEL_PLPOPULATERCVXFRSTAGEPROC/XX_GI_RECEIVING_PKG-24POPULATE_/"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns12="http://xmlns.oracle.com/pcbpel/adapter/db/pl1106DisabledErrorLogger/"
         xmlns:client="http://xmlns.oracle.com/LoadPixTransactionInProcess"
         xmlns:ns6="http://xmlns.oracle.com/pcbpel/adapter/db/plInventoryTransferProcess/"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ns11="http://xmlns.oracle.com/pcbpel/adapter/db/pl1106ErrorLogger/"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:NS20="http://schemas.xmlsoap.org/wsdl/"
         xmlns:ehdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions"
         xmlns:ns3="http://xmlns.oracle.com/pcbpel/adapter/db/plIsValidTransaction/"
         xmlns:ns14="http://xmlns.oracle.com/ODErrorLogger"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:ns8="http://xmlns.oracle.com/pcbpel/adapter/db/APPS/BPEL_PLINVENTORYTRANSFERPROCES/XX_GI_TRANSFER_PKG-24CREATE_MAI/">
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink myRole="Dequeue_role" name="plDQPixTransactionProcess"
                     partnerLinkType="ns1:Dequeue_plt"/>
        <partnerLink name="plIsValidTransaction"
                     partnerRole="plIsValidTransaction_role"
                     partnerLinkType="ns3:plIsValidTransaction_plt"/>
        <partnerLink name="pl1106ErrorLogger"
                     partnerRole="pl1106ErrorLogger_role"
                     partnerLinkType="ns11:pl1106ErrorLogger_plt"/>
        <partnerLink name="plPopulateRcvXfrStageProcess"
                     partnerRole="plPopulateRcvXfrStageProcess_role"
                     partnerLinkType="ns4:plPopulateRcvXfrStageProcess_plt"/>
        <partnerLink name="plPopulaterRcvPoStageProcess"
                     partnerRole="plPopulaterRcvPoStageProcess_role"
                     partnerLinkType="ns5:plPopulaterRcvPoStageProcess_plt"/>
        <partnerLink name="plInventoryTransferProcess"
                     partnerRole="plInventoryTransferProcess_role"
                     partnerLinkType="ns6:plInventoryTransferProcess_plt"/>
        <partnerLink name="pl1106DisabledErrorLogger"
                     partnerRole="pl1106DisabledErrorLogger_role"
                     partnerLinkType="ns12:pl1106DisabledErrorLogger_plt"/>
        <partnerLink name="plInvokeSubInventoryProcess"
                     partnerRole="plInvokeSubInventoryProcess_role"
                     partnerLinkType="ns13:plInvokeSubInventoryProcess_plt"/>
        <partnerLink myRole="ODErrorLoggerRequester" name="ODErrorLogger"
                     partnerRole="ODErrorLoggerProvider"
                     partnerLinkType="ns14:ODErrorLogger"/>
    </partnerLinks>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        VARIABLES                                                        
        List of messages and XML documents used within this BPEL process 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <!-- Reference to the message that will be sent back to the requester during callback -->
        <variable name="ReceiveInput_Dequeue_InputVariable"
                  messageType="ns1:Root-Element_msg"/>
        <variable name="invkIsValidTransaction_InputVariable"
                  messageType="ns3:args_in_msg"/>
        <variable name="invkIsValidTransaction_OutputVariable"
                  messageType="ns3:args_out_msg"/>
        <variable name="invkInventoryTransferProcess_InputVariable"
                  messageType="ns6:args_in_msg"/>
        <variable name="invkInventoryTransferProcess_OutputVariable"
                  messageType="ns6:args_out_msg"/>
        <variable name="invkPoStageProcess_InputVariable"
                  messageType="ns5:args_in_msg"/>
        <variable name="invkPoStageProcess_OutputVariable"
                  messageType="ns5:args_out_msg"/>
        <variable name="InvkRcvXfrStageProcess_InputVariable"
                  messageType="ns4:args_in_msg"/>
        <variable name="InvkRcvXfrStageProcess_OutputVariable"
                  messageType="ns4:args_out_msg"/>
        <variable name="invkInventoryTransferProcess_plInventoryTransferProcess_InputVariable"
                  messageType="ns6:args_in_msg"/>
        <variable name="invkInventoryTransferProcess_plInventoryTransferProcess_OutputVariable"
                  messageType="ns6:args_out_msg"/>
        <variable name="invkPoStageProcess_plPopulaterRcvPoStageProcess_InputVariable"
                  messageType="ns5:args_in_msg"/>
        <variable name="invkPoStageProcess_plPopulaterRcvPoStageProcess_OutputVariable"
                  messageType="ns5:args_out_msg"/>
        <variable name="invk1106ErrorLogger_InputVariable"
                  messageType="ns11:XxGiPixtransactionsCollection_msg"/>
        <variable name="invkInventoryTransferProcess_plInventoryTransferProcess_InputVariable_1"
                  messageType="ns6:args_in_msg"/>
        <variable name="invkInventoryTransferProcess_plInventoryTransferProcess_OutputVariable_1"
                  messageType="ns6:args_out_msg"/>
        <variable name="InvkplInventoryTransferProcess_InputVariable"
                  messageType="ns6:args_in_msg"/>
        <variable name="InvkplInventoryTransferProcess_OutputVariable"
                  messageType="ns6:args_out_msg"/>
        <variable name="Invk_Disabled_Transaction_InputVariable"
                  messageType="ns12:XxGiPixtransactionsCollection_msg"/>
        <variable name="Invk_plInvokeSubInventoryProcess_InputVariable"
                  messageType="ns13:args_in_msg"/>
        <variable name="Invk_plInvokeSubInventoryProcess_OutputVariable"
                  messageType="ns13:args_out_msg"/>
        <variable name="catchremotefault"
                  messageType="bpelx:RuntimeFaultMessage"/>
        <variable name="Invoke_catchremotefault_Input"
                  messageType="ns14:ODErrorLoggerRequestMessage"/>
        <variable name="catchbindingfault"
                  messageType="bpelx:RuntimeFaultMessage"/>
        <variable name="Invoke_catchbindingfault_Input"
                  messageType="ns14:ODErrorLoggerRequestMessage"/>
        <variable name="Invoke_catchall_Input"
                  messageType="ns14:ODErrorLoggerRequestMessage"/>
    </variables>
    <faultHandlers>
        <catch faultName="bpelx:remoteFault" faultVariable="catchremotefault">
            <sequence name="Seq_catchremotefault">
                <assign name="setremotefault">
                    <copy>
                        <from expression="concat(ora:getProcessId(),ora:getProcessVersion())"/>
                        <to variable="Invoke_catchremotefault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:BusinessProcessName"/>
                    </copy>
                    <copy>
                        <from expression="ora:getInstanceId()"/>
                        <to variable="Invoke_catchremotefault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:BusinessProcessId"/>
                    </copy>
                    <copy>
                        <from expression="ora:getDomainId()"/>
                        <to variable="Invoke_catchremotefault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:BusinessProcessDomain"/>
                    </copy>
                    <copy>
                        <from expression="ora:getProcessURL()"/>
                        <to variable="Invoke_catchremotefault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:SystemName"/>
                    </copy>
                    <copy>
                        <from expression="'LoadPixTransactionInProcess'"/>
                        <to variable="Invoke_catchremotefault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:BusinessProcessStep"/>
                    </copy>
                    <copy>
                        <from expression="xp20:current-dateTime()"/>
                        <to variable="Invoke_catchremotefault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ErrorDetails/ns15:ErrorDateTime"/>
                    </copy>
                    <copy>
                        <from expression="bpws:getVariableData('catchremotefault','code')"/>
                        <to variable="Invoke_catchremotefault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ErrorDetails/ns15:ErrorCode"/>
                    </copy>
                    <copy>
                        <from expression="substring(bpws:getVariableData('catchremotefault','summary'),1,1000)"/>
                        <to variable="Invoke_catchremotefault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ErrorDetails/ns15:ErrorDescription"/>
                    </copy>
                </assign>
                <invoke name="Invoke_catchremotefault"
                        partnerLink="ODErrorLogger"
                        portType="ns14:ODErrorLogger" operation="initiate"
                        inputVariable="Invoke_catchremotefault_Input"/>
            </sequence>
        </catch>
        <catch faultName="bpelx:bindingFault" faultVariable="catchbindingfault">
            <sequence name="Seq_catchbindingfault">
                <assign name="setbindingfault">
                    <copy>
                        <from expression="concat(ora:getProcessId(),ora:getProcessVersion())"/>
                        <to variable="Invoke_catchbindingfault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:BusinessProcessName"/>
                    </copy>
                    <copy>
                        <from expression="ora:getInstanceId()"/>
                        <to variable="Invoke_catchbindingfault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:BusinessProcessId"/>
                    </copy>
                    <copy>
                        <from expression="ora:getDomainId()"/>
                        <to variable="Invoke_catchbindingfault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:BusinessProcessDomain"/>
                    </copy>
                    <copy>
                        <from expression="ora:getProcessURL()"/>
                        <to variable="Invoke_catchbindingfault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:SystemName"/>
                    </copy>
                    <copy>
                        <from expression="'LoadPixTransactionInProcess'"/>
                        <to variable="Invoke_catchbindingfault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:BusinessProcessStep"/>
                    </copy>
                    <copy>
                        <from expression="xp20:current-dateTime()"/>
                        <to variable="Invoke_catchbindingfault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ErrorDetails/ns15:ErrorDateTime"/>
                    </copy>
                    <copy>
                        <from expression="bpws:getVariableData('catchbindingfault','code')"/>
                        <to variable="Invoke_catchbindingfault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ErrorDetails/ns15:ErrorCode"/>
                    </copy>
                    <copy>
                        <from expression="substring(bpws:getVariableData('catchbindingfault','summary'),1,1000)"/>
                        <to variable="Invoke_catchbindingfault_Input"
                            part="payload"
                            query="/ns15:ErrorData/ns15:ErrorDetails/ns15:ErrorDescription"/>
                    </copy>
                </assign>
                <invoke name="Invoke_catchbindingfault"
                        partnerLink="ODErrorLogger"
                        portType="ns14:ODErrorLogger" operation="initiate"
                        inputVariable="Invoke_catchbindingfault_Input"/>
            </sequence>
        </catch>
        <catchAll>
            <sequence name="Seq_catchall">
                <assign name="setcatchall">
                    <copy>
                        <from expression="concat(ora:getProcessId(),ora:getProcessVersion())"/>
                        <to variable="Invoke_catchall_Input" part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:BusinessProcessName"/>
                    </copy>
                    <copy>
                        <from expression="ora:getInstanceId()"/>
                        <to variable="Invoke_catchall_Input" part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:BusinessProcessId"/>
                    </copy>
                    <copy>
                        <from expression="ora:getDomainId()"/>
                        <to variable="Invoke_catchall_Input" part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:BusinessProcessDomain"/>
                    </copy>
                    <copy>
                        <from expression="ora:getProcessURL()"/>
                        <to variable="Invoke_catchall_Input" part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:SystemName"/>
                    </copy>
                    <copy>
                        <from expression="'LoadPixTransactionInProcess'"/>
                        <to variable="Invoke_catchall_Input" part="payload"
                            query="/ns15:ErrorData/ns15:ProcessInfo/ns15:BusinessProcessStep"/>
                    </copy>
                    <copy>
                        <from expression="xp20:current-dateTime()"/>
                        <to variable="Invoke_catchall_Input" part="payload"
                            query="/ns15:ErrorData/ns15:ErrorDetails/ns15:ErrorDateTime"/>
                    </copy>
                    <copy>
                        <from expression="bpws:getVariableData('catchremotefault','code')"/>
                        <to variable="Invoke_catchall_Input" part="payload"
                            query="/ns15:ErrorData/ns15:ErrorDetails/ns15:ErrorCode"/>
                    </copy>
                    <copy>
                        <from expression="substring(bpws:getVariableData('catchremotefault','summary'),1,1000)"/>
                        <to variable="Invoke_catchall_Input" part="payload"
                            query="/ns15:ErrorData/ns15:ErrorDetails/ns15:ErrorDescription"/>
                    </copy>
                </assign>
                <invoke name="Invoke_catchall" partnerLink="ODErrorLogger"
                        portType="ns14:ODErrorLogger" operation="initiate"
                        inputVariable="Invoke_catchall_Input"/>
            </sequence>
        </catchAll>
    </faultHandlers>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       ORCHESTRATION LOGIC                                               
       Set of activities coordinating the flow of messages across the    
       services integrated within this business process                  
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <sequence name="main">
        <!-- Receive input from requestor. (Note: This maps to operation defined in LoadPixTransactionInProcess.wsdl) -->
        <receive name="rcvPIXTransaction"
                 partnerLink="plDQPixTransactionProcess"
                 portType="ns1:Dequeue_ptt" operation="Dequeue"
                 variable="ReceiveInput_Dequeue_InputVariable"
                 createInstance="yes"/>
        <!-- 
          Asynchronous callback to the requester. (Note: the callback location and correlation id is transparently handled using WS-addressing.)
        -->
        <assign name="asgnTransactionType">
            <copy>
                <from variable="ReceiveInput_Dequeue_InputVariable"
                      part="Root-Element"
                      query="/ns2:Root-Element/ns2:GIMQTRN-RECORD/ns2:GIMQTRN-FILE-HEADER/ns2:GIMQTRN-TARGET-TRAN-TYPE-CD"/>
                <to variable="invkIsValidTransaction_InputVariable"
                    part="InputParameters"
                    query="/ns10:InputParameters/ns10:P_TRANSACTION_TYPE"/>
            </copy>
        </assign>
        <invoke name="invkIsValidTransaction"
                inputVariable="invkIsValidTransaction_InputVariable"
                partnerLink="plIsValidTransaction"
                portType="ns3:plIsValidTransaction_ptt"
                operation="plIsValidTransaction"
                outputVariable="invkIsValidTransaction_OutputVariable"/>
        <switch name="switchforTransactionType">
            <case condition="bpws:getVariableData('invkIsValidTransaction_OutputVariable','OutputParameters','/ns10:OutputParameters/ns10:X_OBJECT_NAME')='RVDD'">
                <bpelx:annotation>
                    <bpelx:pattern>IF RVDD THEN</bpelx:pattern>
                </bpelx:annotation>
                <sequence name="Sequence_7">
                    <assign name="xformMsgDatatoSubInventoryTransfer">
                        <bpelx:annotation>
                            <bpelx:pattern>transformation</bpelx:pattern>
                        </bpelx:annotation>
                        <copy>
                            <from expression="ora:processXSLT('Transformation_10.xsl',bpws:getVariableData('ReceiveInput_Dequeue_InputVariable','Root-Element'))"/>
                            <to variable="Invk_plInvokeSubInventoryProcess_InputVariable"
                                part="InputParameters"/>
                        </copy>
                    </assign>
                    <invoke name="InvkSubInventoryTransfer"
                            partnerLink="plInvokeSubInventoryProcess"
                            portType="ns13:plInvokeSubInventoryProcess_ptt"
                            operation="plInvokeSubInventoryProcess"
                            inputVariable="Invk_plInvokeSubInventoryProcess_InputVariable"
                            outputVariable="Invk_plInvokeSubInventoryProcess_OutputVariable"/>
                </sequence>
            </case>
            <case condition="bpws:getVariableData('invkIsValidTransaction_OutputVariable','OutputParameters','/ns10:OutputParameters/ns10:X_OBJECT_NAME')='N'">
                <bpelx:annotation>
                    <bpelx:pattern>IF Disabled Transaction Type THEN</bpelx:pattern>
                </bpelx:annotation>
                <sequence name="Sequence_6">
                    <assign name="xformMsgtoDisabledError">
                        <bpelx:annotation>
                            <bpelx:pattern>transformation</bpelx:pattern>
                        </bpelx:annotation>
                        <copy>
                            <from expression="ora:processXSLT('Transformation_9.xsl',bpws:getVariableData('ReceiveInput_Dequeue_InputVariable','Root-Element'))"/>
                            <to variable="Invk_Disabled_Transaction_InputVariable"
                                part="XxGiPixtransactionsCollection"/>
                        </copy>
                    </assign>
                    <invoke name="InvkDisabledTransError"
                            partnerLink="pl1106DisabledErrorLogger"
                            portType="ns12:pl1106DisabledErrorLogger_ptt"
                            operation="insert"
                            inputVariable="Invk_Disabled_Transaction_InputVariable"/>
                </sequence>
            </case>
            <case condition="bpws:getVariableData('invkIsValidTransaction_OutputVariable','OutputParameters','/ns10:OutputParameters/ns10:X_OBJECT_NAME')='RCV'">
                <bpelx:annotation>
                    <bpelx:pattern>IF RCV THEN</bpelx:pattern>
                </bpelx:annotation>
                <switch name="SwitchReceiving">
                    <case condition="bpws:getVariableData('ReceiveInput_Dequeue_InputVariable','Root-Element','/ns2:Root-Element/ns2:GIMQTRN-RECORD/ns2:GIMQTRN-FILE-HEADER/ns2:GIMQTRN-ORIGIN-CD')='ST' or bpws:getVariableData('ReceiveInput_Dequeue_InputVariable','Root-Element','/ns2:Root-Element/ns2:GIMQTRN-RECORD/ns2:GIMQTRN-FILE-HEADER/ns2:GIMQTRN-ORIGIN-CD')='WH' or bpws:getVariableData('ReceiveInput_Dequeue_InputVariable','Root-Element','/ns2:Root-Element/ns2:GIMQTRN-RECORD/ns2:GIMQTRN-FILE-HEADER/ns2:GIMQTRN-ORIGIN-CD')='RT'">
                        <bpelx:annotation>
                            <bpelx:pattern>IF Transfer Receiving THEN</bpelx:pattern>
                        </bpelx:annotation>
                        <sequence name="Sequence_5">
                            <assign name="xformMsgToXfrAPI">
                                <bpelx:annotation>
                                    <bpelx:pattern>transformation</bpelx:pattern>
                                </bpelx:annotation>
                                <copy>
                                    <from expression="ora:processXSLT('Transformation_8.xsl',bpws:getVariableData('ReceiveInput_Dequeue_InputVariable','Root-Element'))"/>
                                    <to variable="InvkRcvXfrStageProcess_InputVariable"
                                        part="InputParameters"/>
                                </copy>
                            </assign>
                            <invoke name="invkRcvXfrStageProcess"
                                    partnerLink="plPopulateRcvXfrStageProcess"
                                    portType="ns4:plPopulateRcvXfrStageProcess_ptt"
                                    operation="plPopulateRcvXfrStageProcess"
                                    inputVariable="InvkRcvXfrStageProcess_InputVariable"
                                    outputVariable="InvkRcvXfrStageProcess_OutputVariable"/>
                        </sequence>
                    </case>
                    <case condition="bpws:getVariableData('ReceiveInput_Dequeue_InputVariable','Root-Element','/ns2:Root-Element/ns2:GIMQTRN-RECORD/ns2:GIMQTRN-FILE-HEADER/ns2:GIMQTRN-ORIGIN-CD') = 'PO'">
                        <bpelx:annotation>
                            <bpelx:pattern>IF PO Receiving THEN</bpelx:pattern>
                        </bpelx:annotation>
                        <sequence name="Sequence_3">
                            <assign name="xformMsgDataToPOAPI">
                                <bpelx:annotation>
                                    <bpelx:pattern>transformation</bpelx:pattern>
                                </bpelx:annotation>
                                <copy>
                                    <from expression="ora:processXSLT('Transformation_3.xsl',bpws:getVariableData('ReceiveInput_Dequeue_InputVariable','Root-Element'))"/>
                                    <to variable="invkPoStageProcess_plPopulaterRcvPoStageProcess_InputVariable"
                                        part="InputParameters"/>
                                </copy>
                            </assign>
                            <invoke name="invkPoStageProcess"
                                    portType="ns5:plPopulaterRcvPoStageProcess_ptt"
                                    inputVariable="invkPoStageProcess_plPopulaterRcvPoStageProcess_InputVariable"
                                    outputVariable="invkPoStageProcess_plPopulaterRcvPoStageProcess_OutputVariable"
                                    partnerLink="plPopulaterRcvPoStageProcess"
                                    operation="plPopulaterRcvPoStageProcess"/>
                        </sequence>
                    </case>
                    <otherwise>
                        <sequence name="Sequence_4">
                            <assign name="xformMsgDataTo1106ErrorLogger">
                                <bpelx:annotation>
                                    <bpelx:pattern>transformation</bpelx:pattern>
                                </bpelx:annotation>
                                <copy>
                                    <from expression="ora:processXSLT('Transformation_2.xsl',bpws:getVariableData('ReceiveInput_Dequeue_InputVariable','Root-Element'))"/>
                                    <to part="XxGiPixtransactionsCollection"
                                        variable="invk1106ErrorLogger_InputVariable"/>
                                </copy>
                            </assign>
                            <invoke name="invk1106ErrorLogger"
                                    partnerLink="pl1106ErrorLogger"
                                    portType="ns11:pl1106ErrorLogger_ptt"
                                    operation="insert"
                                    inputVariable="invk1106ErrorLogger_InputVariable"/>
                        </sequence>
                    </otherwise>
                </switch>
            </case>
            <case condition="bpws:getVariableData('invkIsValidTransaction_OutputVariable','OutputParameters','/ns10:OutputParameters/ns10:X_OBJECT_NAME')='INV'">
                <bpelx:annotation>
                    <bpelx:pattern>IF INV THEN</bpelx:pattern>
                </bpelx:annotation>
                <sequence name="Sequence_1">
                    <assign name="xformMsgDatatoSXTRAPI">
                        <bpelx:annotation>
                            <bpelx:pattern>transformation</bpelx:pattern>
                        </bpelx:annotation>
                        <copy>
                            <from expression="ora:processXSLT('Transformation_7.xsl',bpws:getVariableData('ReceiveInput_Dequeue_InputVariable','Root-Element'))"/>
                            <to variable="InvkplInventoryTransferProcess_InputVariable"
                                part="InputParameters"/>
                        </copy>
                    </assign>
                    <invoke name="InvkStoreTransferProcess"
                            partnerLink="plInventoryTransferProcess"
                            portType="ns6:plInventoryTransferProcess_ptt"
                            operation="plInventoryTransferProcess"
                            inputVariable="InvkplInventoryTransferProcess_InputVariable"
                            outputVariable="InvkplInventoryTransferProcess_OutputVariable"/>
                </sequence>
            </case>
            <otherwise>
                <sequence name="Sequence_2">
                    <assign name="xformMsgDataTo1106ErrorLogger">
                        <bpelx:annotation>
                            <bpelx:pattern>transformation</bpelx:pattern>
                        </bpelx:annotation>
                        <copy>
                            <from expression="ora:processXSLT('Transformation_2.xsl',bpws:getVariableData('ReceiveInput_Dequeue_InputVariable','Root-Element'))"/>
                            <to part="XxGiPixtransactionsCollection"
                                variable="invk1106ErrorLogger_InputVariable"/>
                        </copy>
                    </assign>
                    <invoke name="invk1106ErrorLogger"
                            partnerLink="pl1106ErrorLogger"
                            portType="ns11:pl1106ErrorLogger_ptt"
                            operation="insert"
                            inputVariable="invk1106ErrorLogger_InputVariable"/>
                </sequence>
            </otherwise>
        </switch>
    </sequence>
</process>