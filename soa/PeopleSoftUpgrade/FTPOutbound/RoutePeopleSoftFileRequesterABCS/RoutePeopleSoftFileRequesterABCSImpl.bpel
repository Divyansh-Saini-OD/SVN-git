<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Mon Apr 30 16:11:00 IST 2012
  Type: BPEL 1.1 Process
  Purpose: One Way BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="RoutePeopleSoftFileRequesterABCSImpl"
         targetNamespace="http://xmlns.oracle.com/PeopleSoftMigration/RoutePeopleSoftFileRequesterABCS/RoutePeopleSoftFileRequesterABCSImpl"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:client="http://xmlns.oracle.com/PeopleSoftMigration/RoutePeopleSoftFileRequesterABCS/RoutePeopleSoftFileRequesterABCSImpl"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:ns1="http://xmlns.oracle.com/pcbpel/adapter/file/PeopleSoftMigration/RoutePeopleSoftFileRequesterABCS/ReadPeopleSoftOutboundDir"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/jms/PeopleSoftMigration/RoutePeopleSoftFileRequesterABCS/CommonErrorLoggingService"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:bpel2="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns3="http://www.officedepot.com/officedepot/ODComnErrorStructure/1.0"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns4="http://xmlns.oracle.com/pcbpel/adapter/opaque/"
         xmlns:ns5="http://xmlns.oracle.com/pcbpel/adapter/file/PSHR/RoutePeopleSoftFileRequesterABCS/MoveToPeopleSoftOutboundDir"
         xmlns:aia="http://www.oracle.com/XSL/Transform/java/oracle.apps.aia.core.xpath.AIAFunctions"
         xmlns:ns6="http://xmlns.oracle.com/pcbpel/adapter/jms/10GTo11G/OTMCOSOrderReleaseABCS/InsertErrorLoggerJMSPublisher"
         xmlns:ns7="ODError">
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="ReadPeopleSoftOutboundDir" partnerLinkType="ns1:Read_plt"
                 myRole="Read_role"/>
    <partnerLink name="MoveToPeopleSoftOutboundDir"
                 partnerLinkType="ns5:FileMove_plt"
                 partnerRole="FileMove_role"/>
    <partnerLink name="InsertErrorLoggerJMSPublisher"
                 partnerLinkType="ns6:Produce_Message_plt"
                 partnerRole="Produce_Message_role"/>
  </partnerLinks>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="fileName" type="xsd:string"/>
    <variable name="directoryPath" type="xsd:string"/>
    <variable name="returnCode" type="xsd:string"/>
    <variable name="inputVariable" messageType="ns1:Read_msg"/>
    <variable name="sourceDirectory" type="xsd:string"/>
    <variable name="sourceFileName" type="xsd:string"/>
    <variable name="targetDirectory" type="xsd:string"/>
    <variable name="targetFileName" type="xsd:string"/>
    <variable name="InvokeMoveToPeopleSoftOutDir_FileMove_InputVariable"
              messageType="ns5:Empty_msg"/>
    <variable name="InvokeMoveToPeopleSoftOutDir_FileMove_OutputVariable"
              messageType="ns5:FileMove_msg"/>
    <variable name="tempReturnCode" type="xsd:string"/>
    <variable name="InvokeInsertErrorLogger_Produce_Message_InputVariable"
              messageType="ns6:Produce_Message_msg"/>
  </variables>
  <faultHandlers>
    <catchAll>
      <sequence name="SequenceLogAndSendNotification">
        <bpelx:annotation>
          <bpelx:documentation>Sequence which encompasses all activities in case of error</bpelx:documentation>
        </bpelx:annotation>
        <scope name="Scope4">
          <bpelx:annotation>
            <bpelx:general>
              <bpelx:property name="userLabel">ScopeSendNotification</bpelx:property>
            </bpelx:general>
          </bpelx:annotation>
          <variables>
            <variable name="messagePayload" type="xsd:string"/>
            <variable name="emailSubject" type="xsd:string"/>
            <variable name="errorText" type="xsd:string"/>
            <variable name="systemName" type="xsd:string"/>
            <variable name="messageOperation" type="xsd:string"/>
          </variables>
          <sequence name="SequenceSendNotification">
            <switch name="SwitchDetermineFaultType">
              <bpelx:annotation>
                <bpelx:documentation>Determine the cause of the error In case of scriptErroredOutFault then capture the error description and email subject In case of the Runtime error then populate error description and email subject</bpelx:documentation>
              </bpelx:annotation>
              <case condition='contains(ora:getFaultAsString(),"scriptErroredOutFault")'>
                <bpelx:annotation>
                  <bpelx:general>
                    <bpelx:property name="userLabel">InCaseUnixScriptReturnedError</bpelx:property>
                  </bpelx:general>
                </bpelx:annotation>
                <sequence name="Sequence2">
                  <assign name="AssignUnknownReturnCodeRelatedData">
                    <copy>
                      <from expression="concat(ora:getPreference('SCRIPT_RETURN_ERROR_SUBJECT'),' ',bpws:getVariableData('fileName'))"/>
                      <to variable="emailSubject"/>
                    </copy>
                    <copy>
                      <from expression='string("")'/>
                      <to variable="messagePayload"/>
                    </copy>
                    <copy>
                      <from expression="concat(ora:getPreference('SCRIPT_RETURN_ERROR_MESSAGE'),' ', bpws:getVariableData('fileName'))"/>
                      <to variable="errorText"/>
                    </copy>
                    <copy>
                      <from expression='ora:getPreference("SOURCE_SYSTEM_NAME")'/>
                      <to variable="systemName"/>
                    </copy>
                    <copy>
                      <from expression="ora:getPreference('MESSAGE_OPERATION')"/>
                      <to variable="messageOperation"/>
                    </copy>
                  </assign>
                  <switch name="Switch1">
                    <case condition="bpws:getVariableData('returnCode') = &quot;1&quot;">
                      <bpelx:annotation>
                        <bpelx:pattern>If returnCode from script is 1</bpelx:pattern>
                        <bpelx:general>
                          <bpelx:property name="userLabel">ReturnCode1</bpelx:property>
                        </bpelx:general>
                      </bpelx:annotation>
                      <assign name="AssignSystemName1">
                        <copy>
                          <from expression="ora:getPreference('SYSTEM_NAME_RETURNCODE_1')"/>
                          <to variable="systemName"/>
                        </copy>
                      </assign>
                    </case>
                    <otherwise>
                      <assign name="AssignSystemName2">
                        <copy>
                          <from expression="ora:getPreference('SYSTEM_NAME_RETURNCODE_2')"/>
                          <to variable="systemName"/>
                        </copy>
                      </assign>
                    </otherwise>
                  </switch>
                </sequence>
              </case>
              <otherwise>
                <sequence name="SequenceOtherScenarios">
                  <assign name="AssignRunTimeErrorRelatedData">
                    <copy>
                      <from expression="concat(ora:getPreference(&quot;SCRIPT_RETURN_ERROR_SUBJECT&quot;),&quot; &quot;,bpws:getVariableData('fileName'))"/>
                      <to variable="emailSubject"/>
                    </copy>
                   <copy>
                      <from expression="concat(ora:getPreference(&quot;SCRIPT_RETURN_ERROR_MESSAGE&quot;),&quot; &quot;, bpws:getVariableData('fileName'))"/>
                      <to variable="errorText"/>
                    </copy>
                    <copy>
                      <from expression="concat(ora:getPreference(&quot;SCRIPT_RETURN_ERROR_MESSAGE&quot;),&quot; &quot;, bpws:getVariableData('fileName'))"/>
                      <to variable="messagePayload"/>
                    </copy>
                    <copy>
                      <from expression="ora:getPreference('SYSTEM_NAME_RETURNCODE_1')"/>
                      <to variable="systemName"/>
                    </copy>
                  </assign>
                </sequence>
              </otherwise>
            </switch>
            <assign name="AssignInsertErrorLogger">
              <copy>
                <from expression="bpws:getVariableData('systemName')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ProcessInfo/ns7:BusinessProcessName"/>
              </copy>
              <copy>
                <from expression="ora:getPreference('SOURCE_SYSTEM_NAME')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:MessageDetails/ns7:MessageSourceSystem"/>
              </copy>
              <copy>
                <from expression="ora:getCurrentDateTime()"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:MessageDetails/ns7:MessageDateTime"/>
              </copy>
              <copy>
                <from expression="ora:getPreference('MESSAGE_TYPE')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:MessageDetails/ns7:MessageType"/>
              </copy>
              <copy>
                <from expression="ora:getPreference('MESSAGE_VERSION')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:MessageDetails/ns7:MessageVersion"/>
              </copy>
              <copy>
                <from expression="bpws:getVariableData('messageOperation')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:MessageDetails/ns7:MessageOperation"/>
              </copy>
              <copy>
                <from expression="ora:getCompositeInstanceId()"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ProcessInfo/ns7:BusinessProcessId"/>
              </copy>
              <copy>
                <from expression="ora:getPreference('CATCH_ALL_PROCESS_STEP')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ProcessInfo/ns7:BusinessProcessStep"/>
              </copy>
              <copy>
                <from expression="ora:getPreference('DOMAIN')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ProcessInfo/ns7:BusinessProcessDomain"/>
              </copy>
              <copy>
                <from expression="ora:getCompositeURL()"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ProcessInfo/ns7:SystemName"/>
              </copy>
              <copy>
                <from expression="ora:getPreference('SOURCE_SYSTEM_NAME')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ProcessInfo/ns7:TradingPartnerDetails/ns7:TPFrom"/>
              </copy>
              <copy>
                <from expression="ora:getPreference('MESSAGE_OPERATION')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ProcessInfo/ns7:TradingPartnerDetails/ns7:TPTo"/>
              </copy>
              <copy>
                <from expression="ora:getPreference('ENTITY_ID')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body" query="/ns7:ErrorData/ns7:Entity/ns7:EntityID"/>
              </copy>
              <copy>
                <from expression="ora:getFaultName()"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ErrorDetails/ns7:ErrorCode"/>
              </copy>
              <copy>
                <from expression="bpws:getVariableData('emailSubject')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ErrorDetails/ns7:ErrorDescription"/>
              </copy>
              <copy>
                <from expression="substring(bpws:getVariableData('errorText'),1,4000)"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ErrorDetails/ns7:ErrorText"/>
              </copy>
              <copy>
                <from expression="ora:getPreference('ERROR_TYPE')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ErrorDetails/ns7:ErrorType"/>
              </copy>
              <copy>
                <from expression="ora:getPreference('ERROR_SEVERITY')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ErrorDetails/ns7:ErrorSeverity"/>
              </copy>
              <copy>
                <from expression="ora:getCurrentDateTime()"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:ErrorDetails/ns7:ErrorDateTime"/>
              </copy>
              <copy>
                <from expression="ora:getPreference('NOTIFICATION_FLAG')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:Notification/ns7:sendNotification"/>
              </copy>
              <copy>
                <from expression="bpws:getVariableData('emailSubject')"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:Notification/ns7:Subject"/>
              </copy>
              <copy>
                <from expression="ora:getCompositeInstanceId()"/>
                <to variable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    part="body"
                    query="/ns7:ErrorData/ns7:MessageDetails/ns7:MessageId"/>
              </copy>
            </assign>
            <invoke name="InvokeInsertErrorLogger"
                    inputVariable="InvokeInsertErrorLogger_Produce_Message_InputVariable"
                    partnerLink="InsertErrorLoggerJMSPublisher"
                    portType="ns6:Produce_Message_ptt"
                    operation="Produce_Message" bpelx:invokeAsDetail="no"/>
          </sequence>
        </scope>
      </sequence>
    </catchAll>
  </faultHandlers>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">
    <!-- Receive input from requestor. (Note: This maps to operation defined in TestReadFile.wsdl) -->
    <receive name="receiveInput" partnerLink="ReadPeopleSoftOutboundDir"
             portType="ns1:Read_ptt" operation="Read" variable="inputVariable"
             createInstance="yes">
      <bpelx:annotation>
        <bpelx:documentation>Receive the file name and directory information from the FTP adapter header</bpelx:documentation>
      </bpelx:annotation>
      <bpelx:property name="jca.file.FileName" variable="fileName"/>
      <bpelx:property name="jca.file.Directory" variable="directoryPath"/>
    </receive>
    <assign name="AssignFileAndDirName">
      <copy>
        <from variable="fileName"/>
        <to variable="sourceFileName"/>
      </copy>
      <copy>
        <from variable="directoryPath"/>
        <to variable="sourceDirectory"/>
      </copy>
      <copy>
        <from variable="fileName"/>
        <to variable="targetFileName"/>
      </copy>
      <copy>
        <from expression='ora:getPreference("TARGET_DIR")'/>
        <to variable="targetDirectory"/>
      </copy>
    </assign>
    <invoke name="InvokeMoveToPeopleSoftOutDir"
            partnerLink="MoveToPeopleSoftOutboundDir"
            portType="ns5:FileMove_ptt" operation="FileMove"
            bpelx:invokeAsDetail="no"
            inputVariable="InvokeMoveToPeopleSoftOutDir_FileMove_InputVariable"
            outputVariable="InvokeMoveToPeopleSoftOutDir_FileMove_OutputVariable">
      <bpelx:inputProperty name="jca.file.SourceDirectory"
                           variable="sourceDirectory"/>
      <bpelx:inputProperty name="jca.file.SourceFileName"
                           variable="sourceFileName"/>
      <bpelx:inputProperty name="jca.file.TargetDirectory"
                           variable="targetDirectory"/>
      <bpelx:inputProperty name="jca.file.TargetFileName"
                           variable="targetFileName"/>
    </invoke>
    <scope name="Scope3" variableAccessSerializable="no">
      <bpelx:annotation>
        <bpelx:documentation>Set the Title of the Composite</bpelx:documentation>
        <bpelx:general>
          <bpelx:property name="userLabel">SetHeader</bpelx:property>
        </bpelx:general>
      </bpelx:annotation>
      <variables>
        <variable name="header" type="xsd:string"/>
      </variables>
      <sequence name="SequenceSetHeader">
        <assign name="setHeader">
          <bpelx:annotation>
            <bpelx:documentation>Copy the file name to the local variable</bpelx:documentation>
          </bpelx:annotation>
          <copy>
            <from expression="bpws:getVariableData('fileName')"/>
            <to variable="header"/>
          </copy>
        </assign>
        <bpelx:exec name="setTitle" version="1.5" language="java">
          <![CDATA[/* Set the Title for the process        
*/        
            
try                   
{                   
                 
  String title      = "";                   
  title = (String)getVariableData("header");                   
  setCompositeInstanceTitle(title) ;                   
                   
}                   
catch (Exception ex)                   
{                   
  addAuditTrailEntry(ex.toString());                   
 ex.printStackTrace();                   
}]]>
        </bpelx:exec>
      </sequence>
    </scope>
    <sequence name="SequenceInvokeUnixScript">
      <bpelx:annotation>
        <bpelx:documentation>Invoke the Unix Script with the filename as the parameter Unix script responds back with 1 for Success or 0 for Error</bpelx:documentation>
      </bpelx:annotation>
      <bpelx:exec import="java.io.InputStreamReader"/>
      <bpelx:exec import="java.io.BufferedReader"/>
      <bpelx:exec import="java.io.IOException"/>
      <bpelx:exec import="java.io.FileInputStream"/>
      <bpelx:exec import="java.io.File"/>
      <bpelx:exec name="InvokeESPScript" language="java" version="1.5">
        <![CDATA[/** Initialize the return code*/        
       
Process proc = null;        
    String returnCode="0";       
    try {        
        String[] cmd = new String[3];      
                cmd[0] = "/bin/bash";      
                cmd[1] = (String)getPreference("SHELL_SCRIPT");    
                cmd[2] = (String)getVariableData("fileName");       
                proc = Runtime.getRuntime().exec(cmd);     
                int exitVal = proc.waitFor();     
                returnCode=String.valueOf(exitVal);     
                setVariableData("returnCode",returnCode);         
        }    
    catch (Exception e) {        
                        returnCode="1";        
			e.printStackTrace();        
		}   
    setVariableData("returnCode",returnCode);]]>
      </bpelx:exec>
    </sequence>
    <switch name="SwitchDetermineUnixScriptOutput">
      <bpelx:annotation>
        <bpelx:documentation>Check if the Unix Script returned the Success or Error, In case the Unix Script returned an error raise the CustomFault message so that the control transfers to Catch All block</bpelx:documentation>
      </bpelx:annotation>
      <case condition="bpws:getVariableData('returnCode') = &quot;1&quot; or bpws:getVariableData('returnCode') = &quot;2&quot;">
        <bpelx:annotation>
          <bpelx:general>
            <bpelx:property name="userLabel">IfUnixScriptOutputIsNotSuccessful</bpelx:property>
          </bpelx:general>
        </bpelx:annotation>
        <sequence name="Sequence1">
          <throw name="ThrowUnixScriptErroredOutFault"
                 faultName="bpelx:scriptErroredOutFault">
            <bpelx:annotation>
              <bpelx:documentation>Throw a custom fault message "scriptErroredOutFault"</bpelx:documentation>
            </bpelx:annotation>
          </throw>
        </sequence>
      </case>
    </switch>
    <!-- Generate reply to synchronous request -->
  </sequence>
</process>