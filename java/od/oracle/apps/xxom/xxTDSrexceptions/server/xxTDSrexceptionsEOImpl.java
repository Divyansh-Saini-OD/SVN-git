package od.oracle.apps.xxom.xxTDSrexceptions.server;
import oracle.apps.fnd.framework.server.OAEntityImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.AttributeList;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.Key;
//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class xxTDSrexceptionsEOImpl extends OAEntityImpl 
{
  protected static final int EXCEPTIONID = 0;
  protected static final int PROCESSNAME = 1;
  protected static final int PROCESSID = 2;
  protected static final int MODULENAME = 3;
  protected static final int EXCEPTIONLOCATION = 4;
  protected static final int EXCEPTIONMSGCOUNT = 5;
  protected static final int EXCEPTIONMSGCODE = 6;
  protected static final int EXCEPTIONMSG = 7;
  protected static final int EXCEPTIONMSGSEVERITY = 8;
  protected static final int EXCEPTIONSTATUSFLAG = 9;
  protected static final int NOTIFYFLAG = 10;
  protected static final int EXCEPTIONPAYLOAD = 11;
  protected static final int REPROCESSFLAG = 12;
  protected static final int REPROCESSED = 13;
  protected static final int REPROCESSEDDATE = 14;
  protected static final int ATTRIBUTE1 = 15;
  protected static final int ATTRIBUTE2 = 16;
  protected static final int ATTRIBUTE3 = 17;
  protected static final int ATTRIBUTE4 = 18;
  protected static final int ATTRIBUTE5 = 19;
  protected static final int ATTRIBUTE6 = 20;
  protected static final int ATTRIBUTE7 = 21;
  protected static final int ATTRIBUTE8 = 22;
  protected static final int ATTRIBUTE9 = 23;
  protected static final int ATTRIBUTE10 = 24;
  protected static final int ATTRIBUTE11 = 25;
  protected static final int ATTRIBUTE12 = 26;
  protected static final int ATTRIBUTE13 = 27;
  protected static final int ATTRIBUTE14 = 28;
  protected static final int ATTRIBUTE15 = 29;
  protected static final int CREATIONDATE = 30;
  protected static final int CREATEDBY = 31;
  protected static final int LASTUPDATEDATE = 32;
  protected static final int LASTUPDATELOGIN = 33;
  protected static final int LASTUPDATEDBY = 34;
  private static oracle.apps.fnd.framework.server.OAEntityDefImpl mDefinitionObject;

  /**
   * 
   * This is the default constructor (do not remove)
   */
  public xxTDSrexceptionsEOImpl()
  {
  }

  /**
   * 
   * Retrieves the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject()
  {
    if (mDefinitionObject == null)
    {
      mDefinitionObject = (oracle.apps.fnd.framework.server.OAEntityDefImpl)EntityDefImpl.findDefObject("od.oracle.apps.xxom.xxTDSrexceptions.server.xxTDSrexceptionsEO");
    }
    return mDefinitionObject;
  }

  /**
   * 
   * Add attribute defaulting logic in this method.
   */
  public void create(AttributeList attributeList)
  {
    super.create(attributeList);
  }

  /**
   * 
   * Add entity remove logic in this method.
   */
  public void remove()
  {
    super.remove();
  }

  /**
   * 
   * Add Entity validation code in this method.
   */
  protected void validateEntity()
  {
    super.validateEntity();
  }

  /**
   * 
   * Add locking logic here.
   */
  public void lock()
  {
    super.lock();
  }

  /**
   * 
   * Custom DML update/insert/delete logic here.
   */
  protected void doDML(int operation, TransactionEvent e)
  {
    super.doDML(operation, e);
  }

  /**
   * 
   * Gets the attribute value for ExceptionId, using the alias name ExceptionId
   */
  public Number getExceptionId()
  {
    return (Number)getAttributeInternal(EXCEPTIONID);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ExceptionId
   */
  public void setExceptionId(Number value)
  {
    setAttributeInternal(EXCEPTIONID, value);
  }

  /**
   * 
   * Gets the attribute value for ProcessName, using the alias name ProcessName
   */
  public String getProcessName()
  {
    return (String)getAttributeInternal(PROCESSNAME);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ProcessName
   */
  public void setProcessName(String value)
  {
    setAttributeInternal(PROCESSNAME, value);
  }

  /**
   * 
   * Gets the attribute value for ProcessId, using the alias name ProcessId
   */
  public String getProcessId()
  {
    return (String)getAttributeInternal(PROCESSID);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ProcessId
   */
  public void setProcessId(String value)
  {
    setAttributeInternal(PROCESSID, value);
  }

  /**
   * 
   * Gets the attribute value for ModuleName, using the alias name ModuleName
   */
  public String getModuleName()
  {
    return (String)getAttributeInternal(MODULENAME);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ModuleName
   */
  public void setModuleName(String value)
  {
    setAttributeInternal(MODULENAME, value);
  }

  /**
   * 
   * Gets the attribute value for ExceptionLocation, using the alias name ExceptionLocation
   */
  public String getExceptionLocation()
  {
    return (String)getAttributeInternal(EXCEPTIONLOCATION);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ExceptionLocation
   */
  public void setExceptionLocation(String value)
  {
    setAttributeInternal(EXCEPTIONLOCATION, value);
  }

  /**
   * 
   * Gets the attribute value for ExceptionMsgCount, using the alias name ExceptionMsgCount
   */
  public Number getExceptionMsgCount()
  {
    return (Number)getAttributeInternal(EXCEPTIONMSGCOUNT);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ExceptionMsgCount
   */
  public void setExceptionMsgCount(Number value)
  {
    setAttributeInternal(EXCEPTIONMSGCOUNT, value);
  }

  /**
   * 
   * Gets the attribute value for ExceptionMsgCode, using the alias name ExceptionMsgCode
   */
  public String getExceptionMsgCode()
  {
    return (String)getAttributeInternal(EXCEPTIONMSGCODE);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ExceptionMsgCode
   */
  public void setExceptionMsgCode(String value)
  {
    setAttributeInternal(EXCEPTIONMSGCODE, value);
  }

  /**
   * 
   * Gets the attribute value for ExceptionMsg, using the alias name ExceptionMsg
   */
  public ClobDomain getExceptionMsg()
  {
    return (ClobDomain)getAttributeInternal(EXCEPTIONMSG);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ExceptionMsg
   */
  public void setExceptionMsg(ClobDomain value)
  {
    setAttributeInternal(EXCEPTIONMSG, value);
  }

  /**
   * 
   * Gets the attribute value for ExceptionMsgSeverity, using the alias name ExceptionMsgSeverity
   */
  public String getExceptionMsgSeverity()
  {
    return (String)getAttributeInternal(EXCEPTIONMSGSEVERITY);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ExceptionMsgSeverity
   */
  public void setExceptionMsgSeverity(String value)
  {
    setAttributeInternal(EXCEPTIONMSGSEVERITY, value);
  }

  /**
   * 
   * Gets the attribute value for ExceptionStatusFlag, using the alias name ExceptionStatusFlag
   */
  public String getExceptionStatusFlag()
  {
    return (String)getAttributeInternal(EXCEPTIONSTATUSFLAG);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ExceptionStatusFlag
   */
  public void setExceptionStatusFlag(String value)
  {
    setAttributeInternal(EXCEPTIONSTATUSFLAG, value);
  }

  /**
   * 
   * Gets the attribute value for NotifyFlag, using the alias name NotifyFlag
   */
  public String getNotifyFlag()
  {
    return (String)getAttributeInternal(NOTIFYFLAG);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for NotifyFlag
   */
  public void setNotifyFlag(String value)
  {
    setAttributeInternal(NOTIFYFLAG, value);
  }

  /**
   * 
   * Gets the attribute value for ExceptionPayload, using the alias name ExceptionPayload
   */
  public ClobDomain getExceptionPayload()
  {
    return (ClobDomain)getAttributeInternal(EXCEPTIONPAYLOAD);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ExceptionPayload
   */
  public void setExceptionPayload(ClobDomain value)
  {
    setAttributeInternal(EXCEPTIONPAYLOAD, value);
  }

  /**
   * 
   * Gets the attribute value for ReprocessFlag, using the alias name ReprocessFlag
   */
  public String getReprocessFlag()
  {
    return (String)getAttributeInternal(REPROCESSFLAG);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ReprocessFlag
   */
  public void setReprocessFlag(String value)
  {
    setAttributeInternal(REPROCESSFLAG, value);
  }

  /**
   * 
   * Gets the attribute value for Reprocessed, using the alias name Reprocessed
   */
  public String getReprocessed()
  {
    return (String)getAttributeInternal(REPROCESSED);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Reprocessed
   */
  public void setReprocessed(String value)
  {
    setAttributeInternal(REPROCESSED, value);
  }

  /**
   * 
   * Gets the attribute value for ReprocessedDate, using the alias name ReprocessedDate
   */
  public Date getReprocessedDate()
  {
    return (Date)getAttributeInternal(REPROCESSEDDATE);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ReprocessedDate
   */
  public void setReprocessedDate(Date value)
  {
    setAttributeInternal(REPROCESSEDDATE, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute1, using the alias name Attribute1
   */
  public String getAttribute1()
  {
    return (String)getAttributeInternal(ATTRIBUTE1);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute1
   */
  public void setAttribute1(String value)
  {
    setAttributeInternal(ATTRIBUTE1, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute2, using the alias name Attribute2
   */
  public String getAttribute2()
  {
    return (String)getAttributeInternal(ATTRIBUTE2);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute2
   */
  public void setAttribute2(String value)
  {
    setAttributeInternal(ATTRIBUTE2, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute3, using the alias name Attribute3
   */
  public String getAttribute3()
  {
    return (String)getAttributeInternal(ATTRIBUTE3);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute3
   */
  public void setAttribute3(String value)
  {
    setAttributeInternal(ATTRIBUTE3, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute4, using the alias name Attribute4
   */
  public String getAttribute4()
  {
    return (String)getAttributeInternal(ATTRIBUTE4);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute4
   */
  public void setAttribute4(String value)
  {
    setAttributeInternal(ATTRIBUTE4, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute5, using the alias name Attribute5
   */
  public String getAttribute5()
  {
    return (String)getAttributeInternal(ATTRIBUTE5);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute5
   */
  public void setAttribute5(String value)
  {
    setAttributeInternal(ATTRIBUTE5, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute6, using the alias name Attribute6
   */
  public String getAttribute6()
  {
    return (String)getAttributeInternal(ATTRIBUTE6);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute6
   */
  public void setAttribute6(String value)
  {
    setAttributeInternal(ATTRIBUTE6, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute7, using the alias name Attribute7
   */
  public String getAttribute7()
  {
    return (String)getAttributeInternal(ATTRIBUTE7);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute7
   */
  public void setAttribute7(String value)
  {
    setAttributeInternal(ATTRIBUTE7, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute8, using the alias name Attribute8
   */
  public String getAttribute8()
  {
    return (String)getAttributeInternal(ATTRIBUTE8);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute8
   */
  public void setAttribute8(String value)
  {
    setAttributeInternal(ATTRIBUTE8, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute9, using the alias name Attribute9
   */
  public String getAttribute9()
  {
    return (String)getAttributeInternal(ATTRIBUTE9);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute9
   */
  public void setAttribute9(String value)
  {
    setAttributeInternal(ATTRIBUTE9, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute10, using the alias name Attribute10
   */
  public String getAttribute10()
  {
    return (String)getAttributeInternal(ATTRIBUTE10);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute10
   */
  public void setAttribute10(String value)
  {
    setAttributeInternal(ATTRIBUTE10, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute11, using the alias name Attribute11
   */
  public String getAttribute11()
  {
    return (String)getAttributeInternal(ATTRIBUTE11);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute11
   */
  public void setAttribute11(String value)
  {
    setAttributeInternal(ATTRIBUTE11, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute12, using the alias name Attribute12
   */
  public String getAttribute12()
  {
    return (String)getAttributeInternal(ATTRIBUTE12);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute12
   */
  public void setAttribute12(String value)
  {
    setAttributeInternal(ATTRIBUTE12, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute13, using the alias name Attribute13
   */
  public String getAttribute13()
  {
    return (String)getAttributeInternal(ATTRIBUTE13);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute13
   */
  public void setAttribute13(String value)
  {
    setAttributeInternal(ATTRIBUTE13, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute14, using the alias name Attribute14
   */
  public String getAttribute14()
  {
    return (String)getAttributeInternal(ATTRIBUTE14);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute14
   */
  public void setAttribute14(String value)
  {
    setAttributeInternal(ATTRIBUTE14, value);
  }

  /**
   * 
   * Gets the attribute value for Attribute15, using the alias name Attribute15
   */
  public String getAttribute15()
  {
    return (String)getAttributeInternal(ATTRIBUTE15);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for Attribute15
   */
  public void setAttribute15(String value)
  {
    setAttributeInternal(ATTRIBUTE15, value);
  }

  /**
   * 
   * Gets the attribute value for CreationDate, using the alias name CreationDate
   */
  public Date getCreationDate()
  {
    return (Date)getAttributeInternal(CREATIONDATE);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for CreationDate
   */
  public void setCreationDate(Date value)
  {
    setAttributeInternal(CREATIONDATE, value);
  }

  /**
   * 
   * Gets the attribute value for CreatedBy, using the alias name CreatedBy
   */
  public Number getCreatedBy()
  {
    return (Number)getAttributeInternal(CREATEDBY);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for CreatedBy
   */
  public void setCreatedBy(Number value)
  {
    setAttributeInternal(CREATEDBY, value);
  }

  /**
   * 
   * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate
   */
  public Date getLastUpdateDate()
  {
    return (Date)getAttributeInternal(LASTUPDATEDATE);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for LastUpdateDate
   */
  public void setLastUpdateDate(Date value)
  {
    setAttributeInternal(LASTUPDATEDATE, value);
  }

  /**
   * 
   * Gets the attribute value for LastUpdateLogin, using the alias name LastUpdateLogin
   */
  public Number getLastUpdateLogin()
  {
    return (Number)getAttributeInternal(LASTUPDATELOGIN);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for LastUpdateLogin
   */
  public void setLastUpdateLogin(Number value)
  {
    setAttributeInternal(LASTUPDATELOGIN, value);
  }

  /**
   * 
   * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy
   */
  public Number getLastUpdatedBy()
  {
    return (Number)getAttributeInternal(LASTUPDATEDBY);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for LastUpdatedBy
   */
  public void setLastUpdatedBy(Number value)
  {
    setAttributeInternal(LASTUPDATEDBY, value);
  }
  //  Generated method. Do not modify.

  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case EXCEPTIONID:
        return getExceptionId();
      case PROCESSNAME:
        return getProcessName();
      case PROCESSID:
        return getProcessId();
      case MODULENAME:
        return getModuleName();
      case EXCEPTIONLOCATION:
        return getExceptionLocation();
      case EXCEPTIONMSGCOUNT:
        return getExceptionMsgCount();
      case EXCEPTIONMSGCODE:
        return getExceptionMsgCode();
      case EXCEPTIONMSG:
        return getExceptionMsg();
      case EXCEPTIONMSGSEVERITY:
        return getExceptionMsgSeverity();
      case EXCEPTIONSTATUSFLAG:
        return getExceptionStatusFlag();
      case NOTIFYFLAG:
        return getNotifyFlag();
      case EXCEPTIONPAYLOAD:
        return getExceptionPayload();
      case REPROCESSFLAG:
        return getReprocessFlag();
      case REPROCESSED:
        return getReprocessed();
      case REPROCESSEDDATE:
        return getReprocessedDate();
      case ATTRIBUTE1:
        return getAttribute1();
      case ATTRIBUTE2:
        return getAttribute2();
      case ATTRIBUTE3:
        return getAttribute3();
      case ATTRIBUTE4:
        return getAttribute4();
      case ATTRIBUTE5:
        return getAttribute5();
      case ATTRIBUTE6:
        return getAttribute6();
      case ATTRIBUTE7:
        return getAttribute7();
      case ATTRIBUTE8:
        return getAttribute8();
      case ATTRIBUTE9:
        return getAttribute9();
      case ATTRIBUTE10:
        return getAttribute10();
      case ATTRIBUTE11:
        return getAttribute11();
      case ATTRIBUTE12:
        return getAttribute12();
      case ATTRIBUTE13:
        return getAttribute13();
      case ATTRIBUTE14:
        return getAttribute14();
      case ATTRIBUTE15:
        return getAttribute15();
      case CREATIONDATE:
        return getCreationDate();
      case CREATEDBY:
        return getCreatedBy();
      case LASTUPDATEDATE:
        return getLastUpdateDate();
      case LASTUPDATELOGIN:
        return getLastUpdateLogin();
      case LASTUPDATEDBY:
        return getLastUpdatedBy();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }
  //  Generated method. Do not modify.

  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case EXCEPTIONID:
        setExceptionId((Number)value);
        return;
      case PROCESSNAME:
        setProcessName((String)value);
        return;
      case PROCESSID:
        setProcessId((String)value);
        return;
      case MODULENAME:
        setModuleName((String)value);
        return;
      case EXCEPTIONLOCATION:
        setExceptionLocation((String)value);
        return;
      case EXCEPTIONMSGCOUNT:
        setExceptionMsgCount((Number)value);
        return;
      case EXCEPTIONMSGCODE:
        setExceptionMsgCode((String)value);
        return;
      case EXCEPTIONMSG:
        setExceptionMsg((ClobDomain)value);
        return;
      case EXCEPTIONMSGSEVERITY:
        setExceptionMsgSeverity((String)value);
        return;
      case EXCEPTIONSTATUSFLAG:
        setExceptionStatusFlag((String)value);
        return;
      case NOTIFYFLAG:
        setNotifyFlag((String)value);
        return;
      case EXCEPTIONPAYLOAD:
        setExceptionPayload((ClobDomain)value);
        return;
      case REPROCESSFLAG:
        setReprocessFlag((String)value);
        return;
      case REPROCESSED:
        setReprocessed((String)value);
        return;
      case REPROCESSEDDATE:
        setReprocessedDate((Date)value);
        return;
      case ATTRIBUTE1:
        setAttribute1((String)value);
        return;
      case ATTRIBUTE2:
        setAttribute2((String)value);
        return;
      case ATTRIBUTE3:
        setAttribute3((String)value);
        return;
      case ATTRIBUTE4:
        setAttribute4((String)value);
        return;
      case ATTRIBUTE5:
        setAttribute5((String)value);
        return;
      case ATTRIBUTE6:
        setAttribute6((String)value);
        return;
      case ATTRIBUTE7:
        setAttribute7((String)value);
        return;
      case ATTRIBUTE8:
        setAttribute8((String)value);
        return;
      case ATTRIBUTE9:
        setAttribute9((String)value);
        return;
      case ATTRIBUTE10:
        setAttribute10((String)value);
        return;
      case ATTRIBUTE11:
        setAttribute11((String)value);
        return;
      case ATTRIBUTE12:
        setAttribute12((String)value);
        return;
      case ATTRIBUTE13:
        setAttribute13((String)value);
        return;
      case ATTRIBUTE14:
        setAttribute14((String)value);
        return;
      case ATTRIBUTE15:
        setAttribute15((String)value);
        return;
      case CREATIONDATE:
        setCreationDate((Date)value);
        return;
      case CREATEDBY:
        setCreatedBy((Number)value);
        return;
      case LASTUPDATEDATE:
        setLastUpdateDate((Date)value);
        return;
      case LASTUPDATELOGIN:
        setLastUpdateLogin((Number)value);
        return;
      case LASTUPDATEDBY:
        setLastUpdatedBy((Number)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }

  /**
   * 
   * Creates a Key object based on given key constituents
   */
  public static Key createPrimaryKey(Number exceptionId)
  {
    return new Key(new Object[] {exceptionId});
  }
}