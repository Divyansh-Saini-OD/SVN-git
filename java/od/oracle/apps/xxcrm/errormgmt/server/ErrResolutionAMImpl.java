package od.oracle.apps.xxcrm.errormgmt.server;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
//import od.oracle.apps.xxcrm.errormgmt.lov.server.ErrResApplLovVOImpl;
//import od.oracle.apps.xxcrm.errormgmt.lov.server.ErrResLangLovVOImpl;
import oracle.jbo.Row;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.jbo.Transaction;
//import java.sql.*;
import oracle.apps.fnd.framework.server.OADBTransaction;

//import oracle.jbo.*;

//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ErrResolutionAMImpl extends OAApplicationModuleImpl 
{
  /**
   * 
   * This is the default constructor (do not remove)
   */
  public ErrResolutionAMImpl()
  {
  }

  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxcrm.errormgmt.server", "ErrResolutionAMLocal");
  }

  /**
   * 
   * Container's getter for ErrResolutionVO1
   */
  public ErrResolutionVOImpl getErrResolutionVO1()
  {
    return (ErrResolutionVOImpl)findViewObject("ErrResolutionVO1");
  }


  /**
   * 
   * Creates new resolution Steps (Ambarish)
   */
   public void createResSteps()
   {
     OAViewObject vo = (OAViewObject)getErrResolutionFullVO1();
     OADBTransaction oadbtransaction = getOADBTransaction();
 
     if (!vo.isPreparedForExecution ())
     {
       vo.executeQuery();
     }
     Row row = vo.createRow();
     vo.insertRow(row);
 
     row.setNewRowState(Row.STATUS_INITIALIZED);
     
   }// end createResSteps()

   /**
   * Executes a rollback including the database and the middle tier
   * (Ambarish)
   */
   public void rollbackResSteps()
   {
     Transaction txn = getTransaction();
     // This small optimization ensures that we don't perform a rollback
     // if we don't have to
     if (txn.isDirty())
     {
       txn.rollback();       
     }
   } // end rollbackEmployee()

   public void apply()
   {
     getTransaction().commit();
   }

   public void initDetails(String resId)
   {
     ErrResolutionFullVOImpl vo =  getErrResolutionFullVO1();
     vo.initQuery(resId);
   }

  /**
   * 
   * Container's getter for ErrResolutionFullVO1
   */
  public ErrResolutionFullVOImpl getErrResolutionFullVO1()
  {
    return (ErrResolutionFullVOImpl)findViewObject("ErrResolutionFullVO1");
  }

}