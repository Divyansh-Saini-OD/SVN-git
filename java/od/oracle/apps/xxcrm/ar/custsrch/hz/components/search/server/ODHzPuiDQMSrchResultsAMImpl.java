/*===========================================================================+
 |   Copyright (c) 2001, 2005 Oracle Corporation, Redwood Shores, CA, USA    |
 |                         All rights reserved.                              |
 +===========================================================================+
 |  HISTORY                                                                  |
 +===========================================================================*/
/*===========================================================================+
 |      		       Office Depot - Project Simplify                       |
 |            Oracle NAIO/WIPRO/Office Depot/Consulting Organization         |
 +===========================================================================+
 |  FILENAME                                                                 |
 |             ODHzPuiDQMSrchResultsAMImpl.java                              |
 |                                                                           |
 |  DESCRIPTION                                                              |
 |             AM Implementation file for the sales customer                 |     
 |             search results region .                                       |                                        
 |                                                                           |
 |                                                                           |
 |  NOTES                                                                    |
 |                                                                           |
 |                                                                           |
 |  DEPENDENCIES                                                             |
 |    This class file is called from ODCustSearchCO.java                     |
 |                                                                           |
 |  HISTORY                                                                  |
 |                                                                           |
 |    21/09/2007 Anirban Chaudhuri   Created                                 |
 |                                                                           |
 +===========================================================================*/

package od.oracle.apps.xxcrm.ar.custsrch.hz.components.search.server;

import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import com.sun.java.util.collections.HashMap;
import java.io.Serializable;
import java.util.Vector;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.*;
import oracle.jbo.*;
import java.lang.*;
import oracle.jbo.common.Diagnostic;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jdbc.driver.OracleConnection;
import oracle.apps.ar.hz.components.search.server.*;
import oracle.apps.ar.hz.components.search.server.HzPuiDQMSrchResultsVOImpl;
import oracle.apps.ar.hz.components.search.server.HzPuiDQMContactsLovVOImpl;
import od.oracle.apps.xxcrm.ar.custsrch.hz.components.search.server.ODHzPuiDQMSrchResultsVOImpl;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.webui.OAPageContext;
import java.sql.*;
import java.math.BigDecimal;
import oracle.apps.fnd.framework.OAException ;
//import oracle.apps.ar.hz.components.search.server.HzPuiDQMContactsLovVOImplImpl;

//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODHzPuiDQMSrchResultsAMImpl extends OAApplicationModuleImpl 
{
  /**
   * 
   * This is the default constructor (do not remove)
   */
    public ODHzPuiDQMSrchResultsAMImpl()
    {
    }

  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
    public static void main(String[] args)
    {
     launchTester("od.oracle.apps.xxcrm.ar.custsrch.hz.components.search.server.", "ODHzPuiDQMSrchResultsAMLocal");
    }

    public String callDQMSearch(HashMap hashmap, String s, String s1, String s2, String s3, String s4, StringBuffer stringbuffer)
    {
        OracleConnection oracleconnection = null;
        OADBTransaction oadbtransaction = null;
		int iTotalRows = 0;

        try
        {
            oadbtransaction = getOADBTransaction();
            oracleconnection = (OracleConnection)oadbtransaction.getJdbcConnection();
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
            return null;
        }
        String s5 = null;
		s5 = HzPuiDqmSrchUtil.execDqmSearch(hashmap, s, s1, s3, s4, oracleconnection);
        Diagnostic.println("OD: srchContextId = " + s5);

		if(s5 == null)
          oadbtransaction.writeDiagnostics(this,  "ODCO ANIRBAN: In callDQMSearch returnResults s5 NULL execDqmSearch - "+s5, OAFwkConstants.STATEMENT);
		if(" ".equals(s5))
          oadbtransaction.writeDiagnostics(this,  "ODCO ANIRBAN: In callDQMSearch returnResults s5 execDqmSearch - "+s5, OAFwkConstants.STATEMENT);


        if(s5 == null || "".equals(s5))
        {
            OAExceptionUtils.checkErrors(oadbtransaction);
        }
        
		//Anirban fixed ASN issue#216: starts

	    PreparedStatement ps = null; 
        ResultSet rs =null; 
        Statement st = null;
         try
         {
           st=oracleconnection.createStatement();
           StringBuffer sbSQL = new StringBuffer(300); 
           sbSQL.append("SELECT party_id  ");
           sbSQL.append(" from hz_matched_parties_gt ");
           sbSQL.append(" where SEARCH_CONTEXT_ID = ? ");
          
           try  
          { 
           ps = oracleconnection.prepareStatement(sbSQL.toString(), 
                                  ResultSet.TYPE_SCROLL_INSENSITIVE, 
                                  ResultSet.CONCUR_READ_ONLY); 
 
          // Set the parameters on the statement 
		  if(s5!=null)//ANIRBAN CHANGE
	      {
            BigDecimal bCTXid = new BigDecimal(s5);
            ps.setBigDecimal(1, bCTXid);
            rs = ps.executeQuery(); 
          // Determine how many rows were returned so we can size the vector accordingly 
           rs.last(); 
           iTotalRows = rs.getRow(); 
           ps.close();
		  }//if(s5!=null)
         }
         catch(SQLException e) 
        { e.printStackTrace(); }

         }
         catch(SQLException e) 
        { e.printStackTrace(); } 
        
        oadbtransaction.putValue("callDQMApiCount",new Integer(iTotalRows));

		oadbtransaction.writeDiagnostics(this,  "ODCO ANIRBAN 3 jan 08:  "+oadbtransaction.getValue("callDQMApiCount"), OAFwkConstants.STATEMENT);

		//Anirban fixed ASN issue#216: ends

       /* PreparedStatement ps = null; 
        ResultSet rs =null; 
        Statement st = null;
         try
         {
           st=oracleconnection.createStatement();
           StringBuffer sbSQL = new StringBuffer(300); 
           sbSQL.append("SELECT party_id  ");
           sbSQL.append(" from hz_matched_parties_gt ");
           sbSQL.append(" where SEARCH_CONTEXT_ID = ? ");
          
           try  
          { 
           ps = oracleconnection.prepareStatement(sbSQL.toString(), 
                                  ResultSet.TYPE_SCROLL_INSENSITIVE, 
                                  ResultSet.CONCUR_READ_ONLY); 
 
          // Set the parameters on the statement 
		  if(s5!=null)//ANIRBAN CHANGE
	      {
            BigDecimal bCTXid = new BigDecimal(s5);
            ps.setBigDecimal(1, bCTXid);
            rs = ps.executeQuery(); 
          // Determine how many rows were returned so we can size the vector accordingly 
           rs.last(); 
           int iTotalRows = rs.getRow(); 
          oadbtransaction.writeDiagnostics(this,  "ODAM: ANIRBAN In callDQMSearch - after API call - iTotalRows - "+iTotalRows, OAFwkConstants.STATEMENT);
          rs.beforeFirst();
          while (rs.next()) 
          {
            BigDecimal strPID = rs.getBigDecimal("party_id"); 
            oadbtransaction.writeDiagnostics(this,  "ODAM: ANIRBAN In callDQMSearch - after API call - strPID - "+strPID, OAFwkConstants.STATEMENT);
            
          }
          ps.close();
		  }//if(s5!=null)
         }
         catch(SQLException e) 
        { e.printStackTrace(); }

         }
         catch(SQLException e) 
        { e.printStackTrace(); } */

		return s5;        
    }

	public Integer callDQMSearchCount(HashMap hashmap, String s, String s1, String s2, String s3, String s4, StringBuffer stringbuffer)
    {
        OracleConnection oracleconnection = null;
        OADBTransaction oadbtransaction = null;
		int iTotalRows = 0;
        try
        {
            oadbtransaction = getOADBTransaction();
            oracleconnection = (OracleConnection)oadbtransaction.getJdbcConnection();
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
            return new Integer(iTotalRows);
        }
        String s5 = null;
		s5 = HzPuiDqmSrchUtil.execDqmSearch(hashmap, s, s1, s3, s4, oracleconnection);
        Diagnostic.println("OD: srchContextId = " + s5);

		if(s5 == null)
          oadbtransaction.writeDiagnostics(this,  "ODCO ANIRBAN: In callDQMSearch returnResults s5 NULL execDqmSearch - "+s5, OAFwkConstants.STATEMENT);
		if(" ".equals(s5))
          oadbtransaction.writeDiagnostics(this,  "ODCO ANIRBAN: In callDQMSearch returnResults s5 execDqmSearch - "+s5, OAFwkConstants.STATEMENT);


        if(s5 == null || "".equals(s5))
        {
            OAExceptionUtils.checkErrors(oadbtransaction);
        }
        

        PreparedStatement ps = null; 
        ResultSet rs =null; 
        Statement st = null;
         try
         {
           st=oracleconnection.createStatement();
           StringBuffer sbSQL = new StringBuffer(300); 
           sbSQL.append("SELECT party_id  ");
           sbSQL.append(" from hz_matched_parties_gt ");
           sbSQL.append(" where SEARCH_CONTEXT_ID = ? ");
          
           try  
          { 
           ps = oracleconnection.prepareStatement(sbSQL.toString(), 
                                  ResultSet.TYPE_SCROLL_INSENSITIVE, 
                                  ResultSet.CONCUR_READ_ONLY); 
 
          // Set the parameters on the statement 
		  if(s5!=null)//ANIRBAN CHANGE
	      {
            BigDecimal bCTXid = new BigDecimal(s5);
            ps.setBigDecimal(1, bCTXid);
            rs = ps.executeQuery(); 
          // Determine how many rows were returned so we can size the vector accordingly 
           rs.last(); 
           iTotalRows = rs.getRow(); 
           ps.close();
		  }//if(s5!=null)
         }
         catch(SQLException e) 
        { e.printStackTrace(); }

         }
         catch(SQLException e) 
        { e.printStackTrace(); } 

		return (new Integer(iTotalRows));        
    }

	
    public String callPartySiteDQMSearch(HashMap hashmap, String s, String s1, String s2, String s3, String s4, StringBuffer stringbuffer)
    {
        OracleConnection oracleconnection = null;
        OADBTransaction oadbtransaction = null;
       
        try
        {
            oadbtransaction = getOADBTransaction();
            oracleconnection = (OracleConnection)oadbtransaction.getJdbcConnection();
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
            return null;
        }

        boolean isStatLogEnabled = oadbtransaction.isLoggingEnabled(OAFwkConstants.STATEMENT);
        if(isStatLogEnabled)
        {
          oadbtransaction.writeDiagnostics(this,  "ODAM: In callPartySiteDQMSearch", OAFwkConstants.STATEMENT);
        } 
        
        String s5 = HzPuiDqmSrchUtil.execDqmSearch(hashmap, s, s1, s3, s4, oracleconnection);
        //String s5 = ODHzPuiDqmSrchUtil.execPartySiteDqmSearch(hashmap, s, s1, s3, s4, oracleconnection, oadbtransaction);
        Diagnostic.println("OD: srchPartySiteContextId = " + s5);
        if(isStatLogEnabled)
        {
          oadbtransaction.writeDiagnostics(this,  "ODAM: In callPartySiteDQMSearch srchPartySiteContextId - "+s5, OAFwkConstants.STATEMENT);
        } 
        if(s5 == null || "".equals(s5))
        {
            OAExceptionUtils.checkErrors(oadbtransaction);
        }
        return s5;
    }
    
    public String callDQMAPIdynamic(HashMap hashmap, String s, String s1, String s2, String s3, String s4, StringBuffer stringbuffer)
    {
        OracleConnection oracleconnection = null;
        OADBTransaction oadbtransaction = null;
        try
        {
            oadbtransaction = getOADBTransaction();
            oracleconnection = (OracleConnection)oadbtransaction.getJdbcConnection();
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
            return null;
        }
        boolean isStatLogEnabled = oadbtransaction.isLoggingEnabled(OAFwkConstants.STATEMENT);
        if(isStatLogEnabled)
        {
          oadbtransaction.writeDiagnostics(this,  "ODAM: In callDQMAPIdynamic - before API call", OAFwkConstants.STATEMENT);
        } 
        
        String s5 = HzPuiDqmSrchUtil.execDqmAPIDynamic(hashmap, s, s1, s3, s4, "GET_MATCHING_PARTY_SITES", oracleconnection);
        Diagnostic.println("anirban srchContextId for dynamic = " + s5);
		if(s5 == null)
          oadbtransaction.writeDiagnostics(this,  "ODCO ANIRBAN: 11/9/07 In callDQMAPIdynamic execDqmAPIDynamic NULL - "+s5, OAFwkConstants.STATEMENT);
		if(" ".equals(s5))
          oadbtransaction.writeDiagnostics(this,  "ODCO ANIRBAN: 11/9/07 In callDQMAPIdynamic execDqmAPIDynamic - "+s5, OAFwkConstants.STATEMENT);
        if(isStatLogEnabled)
        {
          oadbtransaction.writeDiagnostics(this,  "ODAM: In callDQMAPIdynamic - after API call - s5 - "+s5, OAFwkConstants.STATEMENT);
        } 

        if(s5 == null || "".equals(s5))
        {
            OAExceptionUtils.checkErrors(oadbtransaction);
        }

		
	//}

       /* PreparedStatement ps = null; 
        ResultSet rs =null; 
        Statement st = null;
         try
         {
           st=oracleconnection.createStatement();
           StringBuffer sbSQL = new StringBuffer(300); 
           sbSQL.append("SELECT party_id , ");
           sbSQL.append(" party_site_id ");
           sbSQL.append(" from hz_matched_party_sites_gt ");
           sbSQL.append(" where SEARCH_CONTEXT_ID = ? ");
          
           try  
          { 
           ps = oracleconnection.prepareStatement(sbSQL.toString(), 
                                  ResultSet.TYPE_SCROLL_INSENSITIVE, 
                                  ResultSet.CONCUR_READ_ONLY); 
 
          // Set the parameters on the statement 
		  if(s5!=null)
		 {
          BigDecimal bCTXid = new BigDecimal(s5);
            ps.setBigDecimal(1, bCTXid);
            rs = ps.executeQuery(); 
          
           rs.last(); 
           int iTotalRows = rs.getRow(); 
          oadbtransaction.writeDiagnostics(this,  "ODAM: In callDQMAPIdynamic - after API call - iTotalRows - "+iTotalRows, OAFwkConstants.STATEMENT);
          rs.beforeFirst();
          while (rs.next()) 
          {
            BigDecimal strPID = rs.getBigDecimal("party_id"); 
            oadbtransaction.writeDiagnostics(this,  "ODAM: ANIRBAN In callDQMAPIdynamic - after API call - strPID - "+strPID, OAFwkConstants.STATEMENT);
            BigDecimal strPSID = rs.getBigDecimal("party_site_id"); 
			oadbtransaction.writeDiagnostics(this,  "ODAM: ANIRBAN In callDQMAPIdynamic - after API call - strPSID - "+strPSID, OAFwkConstants.STATEMENT);
		  }
		 }
          ps.close();
         }
         catch(SQLException e) 
        { e.printStackTrace(); }

         }
         catch(SQLException e) 
        { e.printStackTrace(); } */

             
        return s5;
    }

   /* public void executeQuery(StringBuffer stringbuffer, StringBuffer stringbuffer1, Vector vector)
    {
        OADBTransaction oadbtransaction = null;
       
        try
        {
            oadbtransaction = getOADBTransaction();
          //  oracleconnection = (OracleConnection)oadbtransaction.getJdbcConnection();
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
            //return null;
        }

        boolean isStatLogEnabled = oadbtransaction.isLoggingEnabled(OAFwkConstants.STATEMENT);
        if(isStatLogEnabled)
        {
          oadbtransaction.writeDiagnostics(this,  "ODAM: In executeQuery", OAFwkConstants.STATEMENT);
        } 
        
        try
        {
            Serializable aserializable[] = {
                stringbuffer, stringbuffer1, vector
            };
            Class aclass[] = {
                Class.forName("java.lang.StringBuffer"), Class.forName("java.lang.StringBuffer"), Class.forName("java.util.Vector")
            };
            //getHzPuiDQMSrchResultsVO().invokeMethod("initQuery", aserializable, aclass);
            if(isStatLogEnabled)
            {
              oadbtransaction.writeDiagnostics(this,  "ODAM: In executeQuery calling VO", OAFwkConstants.STATEMENT);
            } 
            getHzPuiDQMSrchResultsVO().invokeMethod("initQuery", aserializable, aclass);
        }
        catch(ClassNotFoundException classnotfoundexception)
        {
            Diagnostic.println("Error executing the Search");
            classnotfoundexception.printStackTrace();
        }
        markSelectedRows("NON-CONTACT");
    }*/

    public void executeQuery(StringBuffer stringbuffer, StringBuffer stringbuffer1, Vector vector, String extraRestrictiveSQL)
    {
        OADBTransaction oadbtransaction = null;
       
        try
        {
            oadbtransaction = getOADBTransaction();
        }
        catch(Exception exception)
        {
            exception.printStackTrace();            
        }

        boolean isStatLogEnabled = oadbtransaction.isLoggingEnabled(OAFwkConstants.STATEMENT);
        if(isStatLogEnabled)
        {
          oadbtransaction.writeDiagnostics(this,  "ODAM: In executeTestQuery", OAFwkConstants.STATEMENT);
        } 
        
        try
        {
            Serializable aserializable[] = {
                stringbuffer, stringbuffer1, vector, extraRestrictiveSQL
            };
            Class aclass[] = {
                Class.forName("java.lang.StringBuffer"), Class.forName("java.lang.StringBuffer"), Class.forName("java.util.Vector"), Class.forName("java.lang.String")
            };
            if(isStatLogEnabled)
            {
              oadbtransaction.writeDiagnostics(this,  "ODAM: In executeTestQuery calling VO", OAFwkConstants.STATEMENT);
            } 
            getODHzPuiDQMSrchResultsVO1().invokeMethod("initQuery", aserializable, aclass);
        }
        catch(ClassNotFoundException classnotfoundexception)
        {
            Diagnostic.println("Error executing the Search");
            classnotfoundexception.printStackTrace();
        }
        //markSelectedRows("NON-CONTACT");
    }

	public void defaultViewExecution(StringBuffer stringbuffer, StringBuffer stringbuffer1, Vector vector)
    {
        OADBTransaction oadbtransaction = null;
		String s = null;
       
        try
        {
            oadbtransaction = getOADBTransaction();          
        }
        catch(Exception exception)
        {
            exception.printStackTrace();            
        }

        boolean isStatLogEnabled = oadbtransaction.isLoggingEnabled(OAFwkConstants.STATEMENT);
        if(isStatLogEnabled)
        {
          oadbtransaction.writeDiagnostics(this,  "ODAM: In defaultViewExecution", OAFwkConstants.STATEMENT);
        } 
        
        try
        {
            Serializable aserializable[] = {
                stringbuffer, stringbuffer1, vector, s
            };
            Class aclass[] = {
                Class.forName("java.lang.StringBuffer"), Class.forName("java.lang.StringBuffer"), Class.forName("java.util.Vector"), Class.forName("java.lang.String")
            };
            if(isStatLogEnabled)
            {
              oadbtransaction.writeDiagnostics(this,  "ODAM: In defaultViewExecution calling VO", OAFwkConstants.STATEMENT);
            } 
            getODHzPuiDQMSrchResultsVO1().invokeMethod("initQuery", aserializable, aclass);
        }
        catch(ClassNotFoundException classnotfoundexception)
        {
            Diagnostic.println("Error executing the Search");
            classnotfoundexception.printStackTrace();
        }        
    }


    public void executeQueryPSite(StringBuffer stringbuffer, StringBuffer stringbuffer1, Vector vector)
    {
        OADBTransaction oadbtransaction = null;
       
        try
        {
            oadbtransaction = getOADBTransaction();
          //  oracleconnection = (OracleConnection)oadbtransaction.getJdbcConnection();
        }
        catch(Exception exception)
        {
            exception.printStackTrace();            
        }

        boolean isStatLogEnabled = oadbtransaction.isLoggingEnabled(OAFwkConstants.STATEMENT);
        if(isStatLogEnabled)
        {
          oadbtransaction.writeDiagnostics(this,  "ODAM: In executeQueryPSite", OAFwkConstants.STATEMENT);
        } 
        
        try
        {
            Serializable aserializable[] = {
                stringbuffer, stringbuffer1, vector
            };
            Class aclass[] = {
                Class.forName("java.lang.StringBuffer"), Class.forName("java.lang.StringBuffer"), Class.forName("java.util.Vector")
            };
            if(isStatLogEnabled)
            {
              oadbtransaction.writeDiagnostics(this,  "ODAM: In executeQueryPSite calling VO", OAFwkConstants.STATEMENT);
            } 
           getODHzPuiDQMSrchResultsVO1().invokeMethod("initQuery", aserializable, aclass);
           int iRowCnt = getODHzPuiDQMSrchResultsVO1().getRowCount();
           oadbtransaction.writeDiagnostics(this,  "ODAM: In executeQueryPSite calling VO - iRowCnt - "+iRowCnt, OAFwkConstants.STATEMENT);
           int iBindStyle = getODHzPuiDQMSrchResultsVO1().getBindingStyle();
           oadbtransaction.writeDiagnostics(this,  "ODAM: In executeQueryPSite calling VO - iBindStyle - "+iBindStyle, OAFwkConstants.STATEMENT);
           String strQry = getODHzPuiDQMSrchResultsVO1().getQuery();
           oadbtransaction.writeDiagnostics(this,  "ODAM: In executeQueryPSite calling VO - strQry - "+strQry, OAFwkConstants.STATEMENT);
           oadbtransaction.writeDiagnostics(this,  "ODAM: In executeQueryPSite calling VO ************** Where Clause Query **************** - ", OAFwkConstants.STATEMENT);
           String strWhCl = getODHzPuiDQMSrchResultsVO1().getWhereClause();
           oadbtransaction.writeDiagnostics(this,  "ODAM: In executeQueryPSite calling VO - strWhCl - "+strWhCl, OAFwkConstants.STATEMENT);
        }
        catch(ClassNotFoundException classnotfoundexception)
        {
            Diagnostic.println("Error executing the Search");
            classnotfoundexception.printStackTrace();
        }
        markSelectedRows("NON-CONTACT");
    }


    public void executeContactQuery(StringBuffer stringbuffer, StringBuffer stringbuffer1, Vector vector)
    {
        try
        {
            Serializable aserializable[] = {
                stringbuffer, stringbuffer1, vector
            };
            Class aclass[] = {
                Class.forName("java.lang.StringBuffer"), Class.forName("java.lang.StringBuffer"), Class.forName("java.util.Vector")
            };
            getHzPuiDQMContactsLovVO().invokeMethod("initQuery", aserializable, aclass);
        }
        catch(ClassNotFoundException classnotfoundexception)
        {
            Diagnostic.println("Error executing the Search");
            classnotfoundexception.printStackTrace();
        }
        markSelectedRows("CONTACT");
    }

    public void markSelectedRows(String s)
    {
        Diagnostic.println("Calling HzPuiDQMSrchResultsAMImpl.markSelectedRows");
        OAViewObject oaviewobject = null;
        if("CONTACT".equals(s))
        {
            oaviewobject = (OAViewObject)findViewObject("HzPuiDQMContactsLovVO");
        } else
        {
            oaviewobject = (OAViewObject)findViewObject("ODHzPuiDQMSrchResultsVO1");
        }
        Row row = oaviewobject.first();
        if(row != null)
        {
            row.setAttribute("SelectFlag", "Y");
            row.setNewRowState((byte)-1);
        }
    }

	
   
    public void sampleHzPuiDQMSrchResultsAMImplExportable()
    {
    }

    public void sampleHzPuiDQMSrchResultsAMImplExportable2(String s)
    {
    }

    public OAViewObjectImpl getHzPuiPersnSrchDtlVO()
    {
        return (OAViewObjectImpl)findViewObject("HzPuiPersnSrchDtlVO");
    }

    public ViewLinkImpl getHzPuiPerznSrchDtlVL1()
    {
        return (ViewLinkImpl)findViewLink("HzPuiPerznSrchDtlVL1");
    }

    public OAViewObjectImpl getHzPuiPersnSrchlVL()
    {
        return (OAViewObjectImpl)findViewObject("HzPuiPersnSrchlVL");
    }

    public HzPuiDQMContactsLovVOImpl getHzPuiDQMContactsLovVO()
    {
    return (HzPuiDQMContactsLovVOImpl)findViewObject("HzPuiDQMContactsLovVO");
    }

    public HzPuiDQMSrchResultsVOImpl getHzPuiDQMSrchResultsVO()
    {
    return (HzPuiDQMSrchResultsVOImpl)findViewObject("HzPuiDQMSrchResultsVO");
    }

  /**
   * 
   * Container's getter for HzPuiDQMSrchResultsVO1
   */
  public HzPuiDQMSrchResultsVOImpl getHzPuiDQMSrchResultsVO1()
  {
    return (HzPuiDQMSrchResultsVOImpl)findViewObject("HzPuiDQMSrchResultsVO1");
  }

  /**
   * 
   * Container's getter for HzPuiDQMContactsLovVO1
   */
  public HzPuiDQMContactsLovVOImpl getHzPuiDQMContactsLovVO1()
  {
    return (HzPuiDQMContactsLovVOImpl)findViewObject("HzPuiDQMContactsLovVO1");
  }

  /**
   * 
   * Container's getter for ODHzPuiDQMSrchResultsVO1
   */
  public ODHzPuiDQMSrchResultsVOImpl getODHzPuiDQMSrchResultsVO1()
  {
    return (ODHzPuiDQMSrchResultsVOImpl)findViewObject("ODHzPuiDQMSrchResultsVO1");
  }


}