package od.oracle.apps.xxcrm.asn.opportunity.server;
import od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNApplicationModuleImpl;
import com.sun.java.util.collections.ArrayList;
import com.sun.java.util.collections.HashMap;

import java.io.Serializable;

import java.sql.SQLException;

import java.util.Hashtable;


import oracle.apps.asn.common.fwk.server.ASNConstants;
import oracle.apps.asn.common.fwk.server.ASNViewObjectImpl;
import oracle.apps.asn.common.poplist.server.ContactActionsVOImpl;
import oracle.apps.asn.common.poplist.server.SalesMethodologiesVOImpl;
import oracle.apps.asn.common.server.SalesMethDefaultStageVOImpl;
import oracle.apps.asn.common.server.StatusDetailsVOImpl;
import oracle.apps.asn.opportunity.poplist.server.OpportunityDetCloseReasonVOImpl;
import oracle.apps.asn.opportunity.poplist.server.OpportunityMethSalesStagesVOImpl;
import oracle.apps.asn.opportunity.server.OpportunityProposalsVOImpl;
import oracle.apps.asn.opportunity.server.OpportunityQuotesVOImpl;
import oracle.apps.fnd.common.MessageToken;

import oracle.apps.fnd.framework.OAApplicationModule;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OADBTransactionImpl;
import oracle.apps.fnd.framework.server.OAExceptionUtils;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;
import oracle.apps.fnd.framework.server.OAViewRowImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewLinkImpl;

import oracle.apps.asn.opportunity.server.OpportunityDetailsVOImpl;
import oracle.apps.asn.opportunity.server.OpportunityDetailsVORowImpl;
import oracle.apps.asn.opportunity.server.OpportunityFrcstOwnerDetailsVOImpl;
import oracle.apps.asn.opportunity.server.OpptyDetAppPropertiesVORowImpl;
import oracle.apps.asn.opportunity.server.OpportunityContactDetailsVORowImpl;
import oracle.apps.asn.opportunity.server.OpptyLineCmptPrdtDetailsVORowImpl;
import oracle.apps.asn.opportunity.server.OpportunityAccessDetailsVORowImpl;
import oracle.apps.asn.opportunity.server.OpportunityProposalsVORowImpl;
import oracle.apps.asn.opportunity.server.OpportunityQuotesVORowImpl;
import oracle.apps.asn.opportunity.server.OpportunityLineNonRevFrcstDetailsVORowImpl;
import oracle.apps.asn.opportunity.server.OpportunityLineRevFrcstDetailsVORowImpl;


import od.oracle.apps.xxcrm.asn.opportunity.server.ODOpportunityAccessDetailsVOImpl;
import od.oracle.apps.xxcrm.asn.opportunity.server.ODOpportunityAccessDetailsVORowImpl;
import od.oracle.apps.xxcrm.asn.opportunity.server.ODOpportunityFrcstOwnerDetailsVOImpl;
import oracle.apps.asn.common.fwk.server.ASNApplicationModuleImpl;
                                                      
//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODOpptyDetAMImpl extends ASNApplicationModuleImpl 
{

/**
   * intiailize PPR feature
   */
  public void initPPR(String secFlag, String custSecFlag, String srcFlag)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.initPPR";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
     boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
    
    StringBuffer buf = new StringBuffer(100);
    StringBuffer buf1 = new StringBuffer();
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    // PPR VO
    OAViewObject appVo = (OAViewObject)findViewObject("OpptyDetAppPropertiesVO1");
    if(appVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpptyDetAppPropertiesVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    if (!appVo.isPreparedForExecution())
    {
      appVo.setMaxFetchSize(0);
      appVo.insertRow(appVo.createRow());
    }
    OpptyDetAppPropertiesVORowImpl appRow = (OpptyDetAppPropertiesVORowImpl) appVo.first();

    // default
    appRow.setNAME_READ_ONLY(Boolean.FALSE);
    appRow.setDATE_READ_ONLY(Boolean.FALSE);
    appRow.setSTAGE_READ_ONLY(Boolean.FALSE);
    appRow.setSTAGE_REQUIRED("no");
    appRow.setCHANNEL_READ_ONLY(Boolean.FALSE);
    appRow.setWINPROB_READ_ONLY(Boolean.FALSE);
    appRow.setSTATUS_READ_ONLY(Boolean.FALSE);
    appRow.setCLOSEREASON_READ_ONLY(Boolean.FALSE);
    appRow.setAVT_NM_READ_ONLY(Boolean.FALSE);
    appRow.setAVT_NM1_RENDER(Boolean.TRUE);
    appRow.setAVT_NM2_RENDER(Boolean.FALSE);
    appRow.setMETH_READ_ONLY(Boolean.FALSE);
    appRow.setMETH_REQUIRED("no");
    appRow.setMETH_CSS("");
    appRow.setFORECAST1_READ_ONLY(Boolean.FALSE);
    appRow.setFRCST_CSS("");
    appRow.setFORECAST1_RENDER(Boolean.TRUE);
    appRow.setFORECAST2_RENDER(Boolean.FALSE);
    appRow.setADDR_READ_ONLY(Boolean.FALSE);
    appRow.setFIELD_READ_ONLY(Boolean.FALSE);

    appRow.setREFERRAL_RENDER(Boolean.FALSE);
    
    appRow.setPRDT_TITLE("");
    appRow.setUOM_READ_ONLY(Boolean.FALSE);
    appRow.setQUANTITY_READ_ONLY(Boolean.FALSE);
    appRow.setLINE_AMOUNT_READ_ONLY(Boolean.FALSE);
    appRow.setLINE_DATE_READ_ONLY(Boolean.FALSE);
    appRow.setBEST_READ_ONLY(Boolean.FALSE);
    appRow.setFORECAST_READ_ONLY(Boolean.FALSE);
    appRow.setWORST_READ_ONLY(Boolean.FALSE);
    appRow.setPRDT_FLEX_READ_ONLY(Boolean.FALSE);
    appRow.setCMPT_STATUS_READ_ONLY(Boolean.FALSE);
    //appRow.setPRDT_FRCST_REGION_RENDER(Boolean.FALSE);

    // Code for Line Level Forecasting
    appRow.setPRDT_REVENUE_FRCST_OWNER_READ_ONLY(Boolean.FALSE);
    appRow.setPRDT_REVENUE_FRCST_GROUP_READ_ONLY(Boolean.FALSE);
    appRow.setPRDT_NON_REVENUE_FRCST_GROUP_READ_ONLY(Boolean.FALSE);
    appRow.setPRDT_NON_REVENUE_FRCST_TYPE_READ_ONLY(Boolean.FALSE);
    appRow.setPRDT_NON_REVENUE_FRCST_CREDITPERCENT_READ_ONLY(Boolean.FALSE);    
    

    appRow.setGROUP_READ_ONLY(Boolean.FALSE);
    appRow.setACC_READ_ONLY(Boolean.FALSE);
    appRow.setKEEP_READ_ONLY(Boolean.FALSE);
    appRow.setOW_READ_ONLY(Boolean.FALSE);
    appRow.setST_FLEX_READ_ONLY(Boolean.FALSE);
    appRow.setFLEX_READ_ONLY(Boolean.FALSE);
    appRow.setST_CONTRIBUTOR_READ_ONLY(Boolean.FALSE);
    appRow.setST_SELECTCOL_RENDERED(Boolean.TRUE);

    appRow.setUPDATE_RENDER(Boolean.TRUE);
    appRow.setADD_CTCT_RENDER(Boolean.TRUE);
    appRow.setCRTE_CTCT_RENDER(Boolean.TRUE);
    appRow.setCTCT_SEL_RENDER(Boolean.TRUE);
    appRow.setCTCT_REMOVE_RENDER(Boolean.TRUE);
    //Flex code
    appRow.setCTCT_ACTIONS_RENDERED(Boolean.TRUE);
    
    appRow.setCTCT_ROLE_READ_ONLY(Boolean.FALSE);
    appRow.setCTCT_PRI_READ_ONLY(Boolean.FALSE);
    appRow.setCTCT_NM1_RENDER(Boolean.TRUE);
    appRow.setCTCT_NM2_RENDER(Boolean.FALSE);
    appRow.setCTCT_PHONE1_RENDER(Boolean.TRUE);
    appRow.setCTCT_PHONE2_RENDER(Boolean.FALSE);
    appRow.setCTCT_JOB_READ_ONLY(Boolean.FALSE);
    appRow.setCTCT_COUNTRY_CODE_READ_ONLY(Boolean.FALSE);
    appRow.setCTCT_AREA_CODE_READ_ONLY(Boolean.FALSE);
    appRow.setCTCT_PHONE_READ_ONLY(Boolean.FALSE);
    appRow.setCTCT_EXT_READ_ONLY(Boolean.FALSE);
    appRow.setCTCT_FLEX_READ_ONLY(Boolean.FALSE);
        
    // header VO
    ViewObject detailVo = (ViewObject) findViewObject("OpportunityDetailsVO1");
    if(detailVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    
    Row detailRow = detailVo.first();

    

    // forecast field logic
    String status = (String) detailRow.getAttribute("Status");
    Boolean isForecast = isForecastStatus(status);
    Boolean isForecstNull = isForecastNull();
 
    ViewObject lineVo = (ViewObject) findViewObject("OpportunityLineDetailsVO1");
    if(lineVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityLineDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    RowSetIterator viewObjectItr = lineVo.findRowSetIterator("lvoIterator");
    if(viewObjectItr==null)
    {
      viewObjectItr = lineVo.createRowSetIterator("lvoIterator");
    }
    else
    {
      viewObjectItr.reset();
    }
    
    if(isForecast.booleanValue() == true)
    {
      if(viewObjectItr.hasNext())
      {
        appRow.setFORECAST1_RENDER(Boolean.TRUE);
        appRow.setFORECAST2_RENDER(Boolean.FALSE);
        if(isForecstNull.booleanValue() == true)
        {
          appRow.setFORECAST3_RENDER(Boolean.FALSE);
          appRow.setFORECAST4_RENDER(Boolean.TRUE);                  
        }
        else
        {
          appRow.setFORECAST3_RENDER(Boolean.TRUE);
          appRow.setFORECAST4_RENDER(Boolean.FALSE);                  
        }
      }
      else
      {
        appRow.setFORECAST1_RENDER(Boolean.FALSE);
        appRow.setFORECAST2_RENDER(Boolean.TRUE);        
        appRow.setFORECAST3_RENDER(Boolean.FALSE);
        appRow.setFORECAST4_RENDER(Boolean.TRUE);        
      }
    }
    else
    {
      appRow.setFORECAST1_RENDER(Boolean.FALSE);
      appRow.setFORECAST2_RENDER(Boolean.TRUE);
      appRow.setFORECAST3_RENDER(Boolean.FALSE);
      appRow.setFORECAST4_RENDER(Boolean.TRUE);        
    }
    viewObjectItr.closeRowSetIterator();

    String  closeReasonCode= (String) detailRow.getAttribute("CloseReason");
    /** Initialize the close reason poplist **/
     initCloseReasonPoplistQuery(closeReasonCode);
 
    // methodology & stage logic 
    String salesMethFlag = (String) detailRow.getAttribute("SalesMethFlag");
    String salesStageFlag = (String) detailRow.getAttribute("SalesStageFlag");
    Number stageId = (Number) detailRow.getAttribute("SalesStageId");
    String stageIdStr = null;
    if(stageId != null)
    {
      stageIdStr = stageId.toString();
    }
    Number methId = (Number)detailRow.getAttribute("SalesMethodologyId");
    String methIdStr = "-1";
    if(methId != null)
    {
      methIdStr = methId.toString();
    }

    if("Y".equals(salesMethFlag))
    {
      appRow.setMETH_READ_ONLY(Boolean.TRUE);
      appRow.setMETH_CSS("OraDataText");
      initMethPoplistQuery(null);
      if(initStagePoplistQuery(methIdStr, null))
      {
        appRow.setSTAGE_REQUIRED("yes");
      }
      else
      {
        appRow.setSTAGE_REQUIRED("no");
      }
      appRow.setSTAGE_READ_ONLY(Boolean.FALSE);      
      appRow.setMETH_REQUIRED("no");
    }
    else
    {
      appRow.setMETH_READ_ONLY(Boolean.FALSE);
      appRow.setMETH_CSS("");
      if("Y".equals(salesStageFlag))
      {
        initMethPoplistQuery(stageIdStr);
        initStagePoplistQuery(null,stageIdStr);
        appRow.setSTAGE_REQUIRED("no");
        appRow.setSTAGE_READ_ONLY(Boolean.TRUE);
        appRow.setMETH_REQUIRED("yes");
      }
      else
      {
        initMethPoplistQuery(null);
        if(initStagePoplistQuery(methIdStr, null))
        {
          appRow.setSTAGE_REQUIRED("yes");
        }
        else
        {
          appRow.setSTAGE_REQUIRED("no");
        }
        appRow.setSTAGE_READ_ONLY(Boolean.FALSE);
        appRow.setMETH_REQUIRED("no");
      }
    }

  //PRM logic
     String referralCode =  (String) detailRow.getAttribute("PrmReferralCode");
     if ( referralCode == null || "".equals(referralCode.trim()))
     {
       appRow.setREFERRAL_RENDER(Boolean.FALSE);
     }

    
    // security logic
    if(ASNConstants.READ_ACCESS.equals(secFlag))
    {
      appRow.setNAME_READ_ONLY(Boolean.TRUE);
      appRow.setDATE_READ_ONLY(Boolean.TRUE);
      appRow.setSTAGE_READ_ONLY(Boolean.TRUE);
      appRow.setCHANNEL_READ_ONLY(Boolean.TRUE);
      appRow.setWINPROB_READ_ONLY(Boolean.TRUE);
      appRow.setSTATUS_READ_ONLY(Boolean.TRUE);
      appRow.setCLOSEREASON_READ_ONLY(Boolean.TRUE);
      appRow.setAVT_NM_READ_ONLY(Boolean.TRUE);
      appRow.setMETH_READ_ONLY(Boolean.TRUE);
      appRow.setMETH_CSS("OraDataText");
      appRow.setADDR_READ_ONLY(Boolean.TRUE);

      // Added for the vehicle response code
      appRow.setFIELD_READ_ONLY(Boolean.TRUE);
      
      appRow.setUOM_READ_ONLY(Boolean.TRUE);
      appRow.setQUANTITY_READ_ONLY(Boolean.TRUE);
      appRow.setLINE_AMOUNT_READ_ONLY(Boolean.TRUE);
      appRow.setLINE_DATE_READ_ONLY(Boolean.TRUE);
      appRow.setBEST_READ_ONLY(Boolean.TRUE);
      appRow.setFORECAST_READ_ONLY(Boolean.TRUE);
      appRow.setWORST_READ_ONLY(Boolean.TRUE);
      appRow.setPRDT_FLEX_READ_ONLY(Boolean.TRUE);
      appRow.setCMPT_STATUS_READ_ONLY(Boolean.TRUE);
      //appRow.setPRDT_FRCST_REGION_RENDER(Boolean.TRUE);

      // Code for Line Level Forecasting
          appRow.setPRDT_REVENUE_FRCST_OWNER_READ_ONLY(Boolean.TRUE);
    appRow.setPRDT_REVENUE_FRCST_GROUP_READ_ONLY(Boolean.TRUE);
    appRow.setPRDT_NON_REVENUE_FRCST_GROUP_READ_ONLY(Boolean.TRUE);
    appRow.setPRDT_NON_REVENUE_FRCST_TYPE_READ_ONLY(Boolean.TRUE);
    appRow.setPRDT_NON_REVENUE_FRCST_CREDITPERCENT_READ_ONLY(Boolean.TRUE);    

      appRow.setGROUP_READ_ONLY(Boolean.TRUE);
      appRow.setACC_READ_ONLY(Boolean.TRUE);
      appRow.setKEEP_READ_ONLY(Boolean.TRUE);
      appRow.setOW_READ_ONLY(Boolean.TRUE);
            appRow.setST_FLEX_READ_ONLY(Boolean.TRUE);
      appRow.setFLEX_READ_ONLY(Boolean.TRUE);
       appRow.setST_CONTRIBUTOR_READ_ONLY(Boolean.TRUE);
      appRow.setUPDATE_RENDER(Boolean.FALSE);
      appRow.setADD_CTCT_RENDER(Boolean.FALSE);
      appRow.setCRTE_CTCT_RENDER(Boolean.FALSE);
      // Flex code
      appRow.setCTCT_SEL_RENDER(Boolean.FALSE);
      appRow.setCTCT_ACTIONS_RENDERED(Boolean.FALSE);

       // Sales Team Select column
       appRow.setST_SELECTCOL_RENDERED(Boolean.FALSE);
    
      appRow.setFORECAST1_READ_ONLY(Boolean.TRUE);
      appRow.setFRCST_CSS("OraDataText");

      appRow.setCTCT_ROLE_READ_ONLY(Boolean.TRUE);
      appRow.setCTCT_PRI_READ_ONLY(Boolean.TRUE);
      appRow.setCTCT_FLEX_READ_ONLY(Boolean.TRUE);

      // Below code added as part of flex fields change for contact.
     // In read only mode the remove icon should not be displyed
     appRow.setCTCT_REMOVE_RENDER(Boolean.FALSE);
    }

    // b2c logic
    Number customerId = (Number) detailRow.getAttribute("CustomerId");
    if(customerId != null)
    {
      if("PERSON".equals(this.getCustomerType(customerId.toString())))
      {
        ContactActionsVOImpl actionVo = this.getContactActionsVO1();
        if(actionVo == null)
        {
          MessageToken[] tokens = { new MessageToken("NAME", "ContactActionsVO1") };
          throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
        }
        actionVo.initQuery("Y");

        appRow.setADD_CTCT_RENDER(Boolean.FALSE);
        appRow.setCRTE_CTCT_RENDER(Boolean.FALSE);
        appRow.setCTCT_SEL_RENDER(Boolean.FALSE);
            appRow.setCTCT_ACTIONS_RENDERED(Boolean.FALSE);
            appRow.setCTCT_SEL_RENDER(Boolean.FALSE);
        appRow.setCTCT_ROLE_READ_ONLY(Boolean.TRUE);
        appRow.setCTCT_PRI_READ_ONLY(Boolean.TRUE);
        appRow.setCTCT_AREA_CODE_READ_ONLY(Boolean.TRUE);
        appRow.setCTCT_COUNTRY_CODE_READ_ONLY(Boolean.TRUE);
        appRow.setCTCT_PHONE_READ_ONLY(Boolean.TRUE);
        appRow.setCTCT_EXT_READ_ONLY(Boolean.TRUE);
        appRow.setCTCT_JOB_READ_ONLY(Boolean.TRUE);
        appRow.setCTCT_NM1_RENDER(Boolean.FALSE);
        appRow.setCTCT_NM2_RENDER(Boolean.TRUE);        
        appRow.setCTCT_PHONE1_RENDER(Boolean.FALSE);
        appRow.setCTCT_PHONE2_RENDER(Boolean.TRUE);
        
        appRow.setADDR_READ_ONLY(Boolean.TRUE);

       //Remove button should not be displayed.
        appRow.setCTCT_REMOVE_RENDER(Boolean.FALSE);
      }
    }

    if(!ASNConstants.UPDATE_ACCESS.equals(secFlag) || !ASNConstants.UPDATE_ACCESS.equals(custSecFlag))
    {
      ContactActionsVOImpl actionVo = this.getContactActionsVO1();
      if(actionVo == null)
      {
        MessageToken[] tokens = { new MessageToken("NAME", "ContactActionsVO1") };
        throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
      }
      actionVo.initQuery("Y");
 
      appRow.setCTCT_NM1_RENDER(Boolean.FALSE);
      appRow.setCTCT_NM2_RENDER(Boolean.TRUE);
      appRow.setCTCT_PHONE1_RENDER(Boolean.FALSE);
      appRow.setCTCT_PHONE2_RENDER(Boolean.TRUE);
      appRow.setCTCT_JOB_READ_ONLY(Boolean.TRUE);
      appRow.setCTCT_COUNTRY_CODE_READ_ONLY(Boolean.TRUE);
      appRow.setCTCT_AREA_CODE_READ_ONLY(Boolean.TRUE);
      appRow.setCTCT_PHONE_READ_ONLY(Boolean.TRUE);
      appRow.setCTCT_EXT_READ_ONLY(Boolean.TRUE);
      appRow.setCRTE_CTCT_RENDER(Boolean.FALSE);
    }
    else
    {
      ContactActionsVOImpl actionVo = this.getContactActionsVO1();
      if(actionVo == null)
      {
        MessageToken[] tokens = { new MessageToken("NAME", "ContactActionsVO1") };
        throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
      }
      actionVo.initQuery("N");
    }

    if("ASNOpptyDetSrcNm".equals(srcFlag))
    {
      appRow.setAVT_NM1_RENDER(Boolean.TRUE);
      appRow.setAVT_NM2_RENDER(Boolean.FALSE);
    }
    else
    {
      appRow.setAVT_NM1_RENDER(Boolean.FALSE);
      appRow.setAVT_NM2_RENDER(Boolean.TRUE);
    }

    appVo.setCurrentRow(appRow);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  
  public void handleCustomerUpdate(String selCustId, String selCustName)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.selectcustomer";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
   
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OpportunityDetailsVOImpl mvo = getOpportunityDetailsVO1();
    if(mvo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    // getting query result row
    OpportunityDetailsVORowImpl row = (OpportunityDetailsVORowImpl) mvo.first();
    if(row == null)
    {
      throw new OAException("ASN","ASN_CMMN_REQKEY_MISS_ERR");
    }

    row.setAttribute("PartyName",selCustName);
    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  PartyName= ");
      buf.append(selCustName);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }
    try
    {
      row.setAttribute("CustomerId",new Number(selCustId));
      if (isStatLogEnabled)
      {
        StringBuffer buf = new StringBuffer(100);
        buf.append("Customer ID= ");
        buf.append(selCustId);
        dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
      }

    }
    catch(SQLException sqlex)
    {
      MessageToken[] tokens = { new MessageToken("IDNAME", "selCustId") };
      throw new OAException("ASN","ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
    }

    row.setAttribute("AddressId", null);
    row.defaultAddressId();

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * handle header frcst update event
   */
  public void handleHeaderFrcstUpdateEvent()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.handleHeaderFrcstUpdateEvent";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    ViewObject detailVo = getOpportunityDetailsVO1();
    if(detailVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    Row detailRow = detailVo.first();
    Number amount = (Number) detailRow.getAttribute("ForecastAmount");
    if(amount == null)
    {
      amount = new Number(0);
      detailRow.setAttribute("ForecastAmount", amount);
    }

    ViewObject lineVo = this.getOpportunityLineDetailsVO1();
    if(lineVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityLineDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    RowSetIterator viewObjectItr = lineVo.findRowSetIterator("HdrFrcstHandlerIterator");
    if(viewObjectItr==null)
    {
      viewObjectItr = lineVo.createRowSetIterator("HdrFrcstHandlerIterator");
    }
    else
    {
      viewObjectItr.reset();
    }
    viewObjectItr.setRowValidation(false);

    int lineCount = 0;
    Number lineTotalAmount = null;
    while(viewObjectItr.hasNext())
    {
      Row lineRow = viewObjectItr.next();
      Number lineAmount = (Number) lineRow.getAttribute("OppForecastAmount");

      if(lineAmount == null)
      {
        lineAmount = new Number(0);
      }
      if(lineTotalAmount == null)
      {
        lineTotalAmount = lineAmount;
      }
      else
      {
        lineTotalAmount = lineTotalAmount.add(lineAmount);
      }
      lineCount++;
    }

    if(lineTotalAmount != null && lineTotalAmount.compareTo(new Number(0))!= 0)
    {
      Number multiplier = amount.divide(lineTotalAmount);
      viewObjectItr.reset();
      while(viewObjectItr.hasNext())
      {
        Row lineRow = viewObjectItr.next();
        Number lineAmount = (Number) lineRow.getAttribute("OppForecastAmount");

        if(lineAmount == null)
        {
          lineAmount = new Number(0);
        }
        lineAmount = lineAmount.multiply(multiplier);
        lineRow.setAttribute("OppForecastAmount", lineAmount);
      }
    }
    else
    {
      Number lineAmount = amount.divide(lineCount);
      viewObjectItr.reset();
      while(viewObjectItr.hasNext())
      {
        Row lineRow = viewObjectItr.next();
        lineRow.setAttribute("OppForecastAmount", lineAmount);

      }
    }

    viewObjectItr.closeRowSetIterator();

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * handle line frcst update event
   */
  public void handleLineFrcstUpdateEvent()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.handleLineFrcstUpdateEvent";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    ViewObject lineVo = this.getOpportunityLineDetailsVO1();
    if(lineVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityLineDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    RowSetIterator viewObjectItr = lineVo.findRowSetIterator("LineFrcstHandlerIterator");
    if(viewObjectItr==null)
    {
      viewObjectItr = lineVo.createRowSetIterator("LineFrcstHandlerIterator");
    }
    else
    {
      viewObjectItr.reset();
    }
    viewObjectItr.setRowValidation(false);

    Number amount = null;
    while(viewObjectItr.hasNext())
    {
      Row lineRow = viewObjectItr.next();
      Number lineAmount = (Number) lineRow.getAttribute("OppForecastAmount");

      if(lineAmount == null)
      {
        lineAmount = new Number(0);
        lineRow.setAttribute("OppForecastAmount", lineAmount);
      }
      if(amount == null)
      {
        amount = lineAmount;
      }
      else
      {
        amount = amount.add(lineAmount);
      }
    }

    ViewObject detailVo = getOpportunityDetailsVO1();
    if(detailVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    Row detailRow = detailVo.first();
    detailRow.setAttribute("ForecastAmount", amount);

    viewObjectItr.closeRowSetIterator();

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * handle detail meth update event
   */
  public void handleDetailMethUpdateEvent()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.handleDetailMethUpdateEvent";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    String detailViewUsageName = "OpportunityDetailsVO1";
    
    OAViewObject appVo = getOpptyDetAppPropertiesVO1();
    if(appVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpptyDetAppPropertiesVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
  	}
    OpptyDetAppPropertiesVORowImpl appRow = (OpptyDetAppPropertiesVORowImpl) appVo.getCurrentRow();

    ViewObject detailVo = findViewObject(detailViewUsageName);
    if(detailVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", detailViewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
  	}
    Row detailRow = detailVo.first();

    Number methId = (Number) detailRow.getAttribute("SalesMethodologyId");
    if(methId != null)
    {
      if(initStagePoplistQuery(methId.toString(), null))
      {
        appRow.setSTAGE_REQUIRED("yes");      
      }
      else
      {
        appRow.setSTAGE_REQUIRED("no");      
      }
      if(!appRow.getSTAGE_READ_ONLY().booleanValue())
      {
        detailRow.setAttribute("SalesStageId",getSalesMethDefaultStage(methId.toString()));
      }
    }
    else
    {
      appRow.setSTAGE_REQUIRED("no");
      initStagePoplistQuery("-1", null);
      if(!appRow.getSTAGE_READ_ONLY().booleanValue())
      {
        detailRow.setAttribute("SalesStageId",null);
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * handle detail status update event
   */
  public void handleDetailStatusUpdateEvent()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.handleDetailStatusUpdateEvent";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    String detailViewUsageName = "OpportunityDetailsVO1";
  
    OAViewObject appVo = getOpptyDetAppPropertiesVO1();
    if(appVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpptyDetAppPropertiesVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
  	}
    OpptyDetAppPropertiesVORowImpl appRow = (OpptyDetAppPropertiesVORowImpl) appVo.getCurrentRow();

    ViewObject detailVo = findViewObject(detailViewUsageName);
    if(detailVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", detailViewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
  	}
    Row detailRow = detailVo.first();

    String status = (String) detailRow.getAttribute("Status");
    Boolean isForecast = isForecastStatus(status);
    Boolean isForecstNull = isForecastNull();

     String closeReason = (String) detailRow.getAttribute("CloseReason");
    // new trial code //
    Boolean isOpenStatus  = isOpenStatus(status);
    
    if (isOpenStatus.booleanValue() == true)
    {
     if(closeReason!=null && !("".equals(closeReason.trim())))
     {
       detailRow.setAttribute("CloseReason", null);
     }
    }


    // end of new code //
    ViewObject lineVo = (ViewObject) findViewObject("OpportunityLineDetailsVO1");
    if(lineVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityLineDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    RowSetIterator viewObjectItr = lineVo.findRowSetIterator("lvoIterator");
    if(viewObjectItr==null)
    {
      viewObjectItr = lineVo.createRowSetIterator("lvoIterator");
    }
    else
    {
      viewObjectItr.reset();
    }
    
    if(isForecast.booleanValue() == true)
    {
      if(viewObjectItr.hasNext())
      {
        appRow.setFORECAST1_RENDER(Boolean.TRUE);
        appRow.setFORECAST2_RENDER(Boolean.FALSE);
        if(isForecstNull.booleanValue() == true)
        {
          appRow.setFORECAST3_RENDER(Boolean.FALSE);
          appRow.setFORECAST4_RENDER(Boolean.TRUE);                  
        }
        else
        {
          appRow.setFORECAST3_RENDER(Boolean.TRUE);
          appRow.setFORECAST4_RENDER(Boolean.FALSE);                  
        }
      }
      else
      {
        appRow.setFORECAST1_RENDER(Boolean.FALSE);
        appRow.setFORECAST2_RENDER(Boolean.TRUE);        
        appRow.setFORECAST3_RENDER(Boolean.FALSE);
        appRow.setFORECAST4_RENDER(Boolean.TRUE);                  
      }
    }
    else
    {
      appRow.setFORECAST1_RENDER(Boolean.FALSE);
      appRow.setFORECAST2_RENDER(Boolean.TRUE);
      appRow.setFORECAST3_RENDER(Boolean.FALSE);
      appRow.setFORECAST4_RENDER(Boolean.TRUE);                  
    }
    viewObjectItr.closeRowSetIterator();

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * init query
   *
   * @param leadId lead ID
   * @param force force query to run?
   */
  public void initQuery(String leadId, Boolean force)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.initQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OpportunityDetailsVOImpl vo = getOpportunityDetailsVO1();
    if(vo != null)
    {
      if(force.booleanValue())
      {
        vo.initQuery(leadId);
      }
      else
      {
        if(!vo.isPreparedForExecution())
        {
          vo.initQuery(leadId);
        }
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * init methodology query
   *
   * @param methId methodology Id
   */
  public void initMethPoplistQuery(String stageId)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.initMethPoplistQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    SalesMethodologiesVOImpl poplistVO = getSalesMethodologiesVO1();
    if(poplistVO != null)
    {
      poplistVO.initQuery(stageId);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * init stage query
   *
   * @param methId methodology Id
   */
  public boolean initStagePoplistQuery(String methId, String stageId)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.initStagePoplistQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OpportunityMethSalesStagesVOImpl poplistVO = getOpportunityMethSalesStagesVO1();
    if(poplistVO != null)
    {
      poplistVO.initQuery(methId, stageId);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    if(poplistVO.hasNext())
    {
      return true;
    }
    else
    {
      return false;
    }
  }

  private Number getSalesMethDefaultStage(String methId)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.getSalesMethDefaultStage";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    SalesMethDefaultStageVOImpl vo = getSalesMethDefaultStageVO1();
    if(vo != null)
    {
      vo.initQuery(methId,"OPPORTUNITY");
    }
    Row row = vo.first();

    if(row != null)
    {
      Number stageId = (Number) row.getAttribute("SalesStageId");
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return stageId;
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return null;
  }

  /**
   * create Sales cycle
   */
  public void createSalesCycle(String secFlag)
  {
    final String METHOD_NAME = "asn.opportunity.server.LeadUwqAMImpl.createSalesCycle";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    if(ASNConstants.UPDATE_ACCESS.equals(secFlag))
    {  
      // header VO
      OpportunityDetailsVOImpl detailVo = (OpportunityDetailsVOImpl) getOpportunityDetailsVO1();
      if(detailVo == null)
      {
        MessageToken[] tokens = { new MessageToken("NAME", "OpportunityDetailsVO1") };
        throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
      }
      OpportunityDetailsVORowImpl detailRow = (OpportunityDetailsVORowImpl) detailVo.first();

      if(detailRow.isSalesCycleMissing())
      {
        if(detailRow.createSalesCycle())
        {
          this.getOADBTransaction().commit();
        }
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * is the status forecastable ?
   * 
   * @param status Status
   * @return if the status is forecastable
   */
  public Boolean isForecastStatus(String status)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.isForecastStatus";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    if(status == null)
    {
      return Boolean.FALSE;
    }

    StatusDetailsVOImpl vo = getStatusDetailsVO1();

    if (vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "StatusDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    vo.initQuery(status);
    Row row = vo.first();

    if(row != null)
    {
      String flag = (String) row.getAttribute("ForecastRollupFlag");
      if("Y".equals(flag))
      {
        if (isProcLogEnabled)
        {
          dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
          dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
        }
        return Boolean.TRUE;
      }
      else
      {
        if (isProcLogEnabled)
        {
          dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
          dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
        }
        return Boolean.FALSE;
      }
    }
    else
    {
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return Boolean.FALSE;
    }
  }

  /**
   * is the forecast amount null ?
   * 
   * @param status Status
   * @return if the status is forecastable
   */
  public Boolean isForecastNull()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.isForecastNull";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OpportunityDetailsVOImpl vo = (OpportunityDetailsVOImpl) getOpportunityDetailsVO1();
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "StatusDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    OpportunityDetailsVORowImpl detailRow = (OpportunityDetailsVORowImpl) vo.first();
    Number amount = (Number)detailRow.getAttribute("ForecastAmount");
    if(amount == null)
    {
      return Boolean.TRUE;
    }
    else
    {
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return Boolean.FALSE;
    }
  }

  /**
   * Get Task Parameters
   *
   * @return parameters
   */
  public HashMap getTaskParameters()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.getTaskParameters";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    HashMap params = new HashMap();

    OAViewObject vo = getOpportunityContactDetailsVO1();
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityContactDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.reset();  // be sure to start on the first row
    Row row = null;

    int fetchedRowCount = vo.getFetchedRowCount();
    for (int i = 0; i < fetchedRowCount; i++)
    {
      row = vo.next();

      if(row != null)
      {
        String flag = (String) row.getAttribute("SelectFlag");
        if("Y".equals(flag))
        {
          Number leadId = (Number) row.getAttribute("LeadId");
          String leadIdStr = "";
          if(leadId != null)
          {
            leadIdStr = leadId.toString();
          }
          Number subPtyId = (Number) row.getAttribute("SubjectId");
          String subPtyIdStr = "";
          if(subPtyId != null)
          {
            subPtyIdStr = subPtyId.toString();
          }
          Number objPtyId = (Number) row.getAttribute("CustomerId");
          String objPtyIdStr = "";
          if(objPtyId != null)
          {
            objPtyIdStr = objPtyId.toString();
          }
          Number relId = (Number) row.getAttribute("PartyRelationshipId");
          String relIdStr = "";
          if(relId != null)
          {
            relIdStr = relId.toString();
          }
          Number relPtyId = (Number) row.getAttribute("ContactPartyId");
          String relPtyIdStr = "";
          if(relPtyId != null)
          {
            relPtyIdStr = relPtyId.toString();
          }
          params.put("cacTaskSrcObjCode","OPPORTUNITY");
          params.put("cacTaskSrcObjId",leadIdStr);
          params.put("cacTaskCustId",objPtyIdStr);
          params.put("cacTaskContactId",relPtyIdStr);
          break;
        }
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return params;
  }

  /**
   * Get Proposal Parameters
   *
   * @return parameters
   */
  public HashMap getProposalParameters()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.getProposalParameters";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    HashMap params = new HashMap();

    OAViewObject vo = getOpportunityDetailsVO1();
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.reset();  // be sure to start on the first row
    Row row = vo.first();
    if(row != null)
    {
      Number leadId = (Number) row.getAttribute("LeadId");
      String leadIdStr = "";
      if(leadId != null)
      {
        leadIdStr = leadId.toString();
      }

      Number relPtyId = (Number) row.getAttribute("RelationshipPartyId");
      String relPtyIdStr = "";
      if(relPtyId != null)
      {
        relPtyIdStr = relPtyId.toString();
      }

      String sourceCode = (String) row.getAttribute("SourceCode");

      params.put("PRPObjectType","OPPORTUNITY");
      params.put("PRPObjectId",leadIdStr);
      params.put("PRPReturnFunctionName","ASN_OPPTYDETPG");
      params.put("PRPContactRelPartyId",relPtyIdStr);
      params.put("PRPSourceCode",sourceCode);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return params;
  }

  /**
   * Get Contact Parameters
   *
   * @return parameters
   */
  public HashMap getContactParameters()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.getContactParameters";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    HashMap params = new HashMap();

    OAViewObject vo = getOpportunityContactDetailsVO1();
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityContactDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.reset();  // be sure to start on the first row
    Row row = null;

    int fetchedRowCount = vo.getFetchedRowCount();
    for (int i = 0; i < fetchedRowCount; i++)
    {
      row = vo.next();

      if(row != null)
      {
        String flag = (String) row.getAttribute("SelectFlag");
        if("Y".equals(flag))
        {
          Number subPtyId = (Number) row.getAttribute("SubjectId");
          String subPtyIdStr = "";
          if(subPtyId != null)
          {
            subPtyIdStr = subPtyId.toString();
          }
          Number objPtyId = (Number) row.getAttribute("CustomerId");
          String objPtyIdStr = "";
          if(objPtyId != null)
          {
            objPtyIdStr = objPtyId.toString();
          }
          Number relId = (Number) row.getAttribute("PartyRelationshipId");
          String relIdStr = "";
          if(relId != null)
          {
            relIdStr = relId.toString();
          }
          Number relPtyId = (Number) row.getAttribute("ContactPartyId");
          String relPtyIdStr = "";
          if(relPtyId != null)
          {
            relPtyIdStr = relPtyId.toString();
          }
          params.put("ASNReqFrmCtctId",subPtyIdStr);
          params.put("ASNReqFrmCustId",objPtyIdStr);
          params.put("ASNReqFrmRelId",relIdStr);
          params.put("ASNReqFrmRelPtyId",relPtyIdStr);
          break;
        }
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return params;
  }

  /**
   * remove contact
   * 
   * @return if the contact is successfully removed
   */
  public void removeContacts(String lcId)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.removeContacts";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    int poToDelete = 0;
    try
    {
      poToDelete = Integer.parseInt(lcId);
    }
    catch (NumberFormatException nfe)
    {
      MessageToken[] tokens = { new MessageToken("IDNAME", lcId) };
      throw new OAException("ASN","ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
    }

    OAViewObject vo = getOpportunityContactDetailsVO1();
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityContactDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.reset();  // be sure to start on the first row
    vo.setRowValidation(false);
    OpportunityContactDetailsVORowImpl row = null;

    int fetchedRowCount = vo.getFetchedRowCount();
    for (int i = 0; i < fetchedRowCount; i++)
    {
      row = (OpportunityContactDetailsVORowImpl) vo.next();

      if(row != null)
      {
        Number primaryKey = row.getLeadContactId();
        if(primaryKey == null)
        {
           primaryKey = new Number(0);
        }

        if (primaryKey.compareTo(poToDelete) == 0)
        {
          row.remove();
          break;
        }
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }
  
  public void removeAllContacts()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.removeContacts";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObject vo = getOpportunityContactDetailsVO1();
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityContactDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.reset();  // be sure to start on the first row
    vo.setRowValidation(false);
    OpportunityContactDetailsVORowImpl row = null;

    int fetchedRowCount = vo.getFetchedRowCount();
    for (int i = 0; i < fetchedRowCount; i++)
    {
      row = (OpportunityContactDetailsVORowImpl) vo.next();

      if(row != null)
      {
        Number primaryKey = row.getLeadContactId();
        if(primaryKey == null)
        {
           primaryKey = new Number(0);
        }
        row.remove();
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * remove line
   *
   * @param lId id to delete
   */
  public void removeLines(String lId)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.removeLines";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObject viewObject = getOpportunityLineDetailsVO1();
    OAViewRowImpl viewRow = null;
    if(viewObject==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME","OpportunityLineDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    int fetchedRowCount = viewObject.getFetchedRowCount();
    RowSetIterator viewObjectItr = viewObject.findRowSetIterator("OpptyDetLineIterator");
    if(viewObjectItr==null)
      viewObjectItr = viewObject.createRowSetIterator("OpptyDetLineIterator");
    else
      viewObjectItr.reset();

    viewObjectItr.setRowValidation(false);
    if(viewObjectItr!=null && fetchedRowCount>0)
    {
      viewObjectItr.setRangeStart(0);
      viewObjectItr.setRangeSize(fetchedRowCount);
      String value = null;
      Object valueObj = null;
      for(int i=0; i<fetchedRowCount; i++)
      {
        viewRow = (OAViewRowImpl)viewObjectItr.getRowAtRangeIndex(i);
        if(viewRow!=null)
          valueObj = viewRow.getAttribute("LeadLineId");
        if(valueObj!=null) {
          value = valueObj.toString();
          if(value.equals(lId))
          {
            viewRow.remove();
            break;
          }
        }
      }
    }
    if(viewObjectItr!=null)
      viewObjectItr.closeRowSetIterator();

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * remove competitor
   *
   * @param lId id to delete
   */
  public void removeCompetitors(String lId)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.removeCompetitors";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    int poToDelete = 0;
    try
    {
      poToDelete = Integer.parseInt(lId);
    }
    catch (NumberFormatException nfe)
    {
      MessageToken[] tokens = { new MessageToken("IDNAME", "lId") };
      throw new OAException("ASN","ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
    }

    OAViewObject vo = getOpptyLineCmptPrdtDetailsVO1();
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpptyLineCmptPrdtDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.reset();  // be sure to start on the first row
    vo.setRowValidation(false);
    OpptyLineCmptPrdtDetailsVORowImpl row = null;

    int fetchedRowCount = vo.getFetchedRowCount();
    for (int i = 0; i < fetchedRowCount; i++)
    {
      row = (OpptyLineCmptPrdtDetailsVORowImpl) vo.next();

      if(row != null)
      {
        Number primaryKey = row.getLeadCompetitorProdId();
        if(primaryKey == null)
        {
           primaryKey = new Number(0);
        }

        if (primaryKey.compareTo(poToDelete) == 0)
        {
          row.remove();
          break;
        }
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * remove access
   *
   * @param mId id to delete
   */
  public void removeSalesTeamMembers(String mId)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.removeSalesTeamMembers";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    int poToDelete = 0;
    try
    {
      poToDelete = Integer.parseInt(mId);
    }
    catch(NumberFormatException nfe)
    {
      MessageToken[] tokens = { new MessageToken("IDNAME", "mId") };
      throw new OAException("ASN","ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
    }

    OAViewObject vo = getAccessDetailsVO();
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "AccessDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.reset();  // be sure to start on the first row
    vo.setRowValidation(false);
    ODOpportunityAccessDetailsVORowImpl row = null;

    int fetchedRowCount = vo.getFetchedRowCount();
    for (int i = 0; i < fetchedRowCount; i++)
    {
      row = (ODOpportunityAccessDetailsVORowImpl) vo.next();
      if(row != null)
      {
        Number primaryKey = row.getAccessId();
        if(primaryKey == null)
        {
           primaryKey = new Number(0);
        }

        if (primaryKey.compareTo(poToDelete) == 0)
        {
          row.remove();
          break;
        }
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * set current row based on Id
   * 
   * @param lead line Id
   */
  public void setRowAsSelected(String leadLineId)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.setRowAsSelected";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    String viewUsageName = "OpportunityLineDetailsVO1";
  
    OAViewObject appVo = getOpptyDetAppPropertiesVO1();
    if(appVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpptyDetAppPropertiesVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
  	}
    OpptyDetAppPropertiesVORowImpl appRow = (OpptyDetAppPropertiesVORowImpl) appVo.getCurrentRow();

    OAViewObject summaryVo = (OAViewObject)findViewObject(viewUsageName);
    if (summaryVo != null)
    {
      int fetchedRowCount = summaryVo.getFetchedRowCount();
      RowSetIterator summaryItr = summaryVo.findRowSetIterator("OpptyLineSummaryIterator");
      if(summaryItr==null)
      {
        summaryItr = summaryVo.createRowSetIterator("OpptyLineSummaryIterator");
      }
      else
      {
        summaryItr.reset();
      }

      if(summaryItr!=null && fetchedRowCount > 0)
      {
        summaryItr.setRangeStart(0);
        summaryItr.setRangeSize(fetchedRowCount);
        for(int i=0; i < fetchedRowCount; i++)
        {
          OAViewRowImpl row = (OAViewRowImpl)summaryItr.getRowAtRangeIndex(i);
          Number Id = (Number) row.getAttribute("LeadLineId");
          
          if(Id != null && leadLineId.equals(Id.toString()))
          {
            row.setAttribute("SelectFlag","Y");    
           
          }          
        }
        summaryItr.closeRowSetIterator();
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * set current row
   */
  public void setRowAsSelected()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.setRowAsSelected";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    String viewUsageName = "OpportunityLineDetailsVO1";
     
    OAViewObject appVo = getOpptyDetAppPropertiesVO1();
    if(appVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpptyDetAppPropertiesVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
  	}
    OpptyDetAppPropertiesVORowImpl appRow = (OpptyDetAppPropertiesVORowImpl) appVo.getCurrentRow();
     
    OAViewObject summaryVo = (OAViewObject)findViewObject(viewUsageName);
    if (summaryVo != null)
    {
      
      int fetchedRowCount = summaryVo.getFetchedRowCount();
      RowSetIterator summaryItr = summaryVo.findRowSetIterator("OpptyLineSummaryIterator");
      if(summaryItr==null)
      {
        summaryItr = summaryVo.createRowSetIterator("OpptyLineSummaryIterator");
      }
      else
      {
        summaryItr.reset();
      }

      if(summaryItr!=null && fetchedRowCount > 0)
      {
        summaryItr.setRangeStart(0);
        summaryItr.setRangeSize(fetchedRowCount);
        for(int i=0; i < fetchedRowCount; i++)
        {
          OAViewRowImpl row = (OAViewRowImpl)summaryItr.getRowAtRangeIndex(i);
          String flag = (String) row.getAttribute("SelectFlag");
          String prdtTitle = (String) row.getAttribute("ProductCategory");
          Number cmptInvId = (Number) row.getAttribute("InventoryItemId");
          Number cmptOrgId = (Number) row.getAttribute("OrganizationId");
          Number cmptPrdCatId = (Number) row.getAttribute("ProductCategoryId");

          // Code to pass values to transaction variables for Competitors LOV  
          if (cmptOrgId != null)
          {
            dbTrx.putValue("ASNTxnCmptOrgId", cmptOrgId.toString());   
           }   

          if (cmptInvId != null)
          {
             dbTrx.putValue("ASNTxnCmptInvId", cmptInvId.toString());   
           }   

          if (cmptPrdCatId != null)
          {
             dbTrx.putValue("ASNTxnCmptPrdtCatId", cmptPrdCatId.toString());   
           }   

          if (prdtTitle != null)
          {
             dbTrx.putValue("ASNTxnProductCategory", prdtTitle);   
           } 

          if("Y".equals(flag))
          {
            summaryVo.setCurrentRow(row);
          
            OADBTransactionImpl currTrans = (OADBTransactionImpl) getTransaction();
            MessageToken[] tokens = { new MessageToken("NAME", prdtTitle) };
            String title = OAExceptionUtils.getMessageFromDB(currTrans, "ASN", "ASN_CMMN_PRDTDET_TITLE", tokens);
            appRow.setPRDT_TITLE(title);
            break;
          }
        }
        summaryItr.closeRowSetIterator();
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * check if the view has only one record with the attribute set.
   * 
   * @param viewUsageName view usage name
   * @param attributeName attribute name
   * @return if the view has only one record with the attribute set
   */
  public Boolean checkUniqueness(String viewUsageName, String attributeName)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.checkUniqueness";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObject vo = (OAViewObject)findViewObject(viewUsageName);
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.reset();  // be sure to start on the first row

    int count = 0;

    while(vo.hasNext())
    {
      Row row = vo.next();
      if(row != null)
      {
        String flag = (String) row.getAttribute(attributeName);
        if(flag != null && "Y".equals(flag))
        {
          count++;
        }

        if(count > 1)
        {
          if (isProcLogEnabled)
          {
            dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
            dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
          }
          return Boolean.FALSE;
        }
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return Boolean.TRUE;
  }

  /**
   * check to see if the view has at least one record with the attribute set
   * 
   * @param viewUsageName view usage name
   * @param attributeName attribute name
   * @return if the view has at least one record with the attribute set
   */
  public Boolean checkExistence(String viewUsageName, String attributeName)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.checkExistence";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObject vo = (OAViewObject)findViewObject(viewUsageName);
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.reset();  // be sure to start on the first row

    int count = 0;

    while(vo.hasNext())
    {
      Row row = vo.next();
      if(row != null)
      {
        String flag = (String) row.getAttribute(attributeName);
        if(flag != null && "Y".equals(flag))
        {
         count++;
        }

        if(count >= 1)
        {
          if (isProcLogEnabled)
          {
            dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
            dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
          }
          return Boolean.TRUE;
        }
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return Boolean.FALSE;
  }

  public Boolean checkProposalsQuotes(String leadId)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.checkExistence";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }
    
    OpportunityProposalsVOImpl vo = getOpportunityProposalsVO1();
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityProposalsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    if(!vo.isPreparedForExecution())
    {
      vo.initQuery(leadId);
    }
    OpportunityProposalsVORowImpl row = (OpportunityProposalsVORowImpl) vo.first();
    if(row != null)
    {
      return Boolean.TRUE;
    }
    //int fetchedRowCount = vo.getFetchedRowCount();
    //if (fetchedRowCount>=1)
    //{
      //return Boolean.TRUE;
    //}

    OpportunityQuotesVOImpl voQuotes = getOpportunityQuotesVO1();
    if(voQuotes == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityQuotesVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    if(!voQuotes.isPreparedForExecution())
    {
      voQuotes.initQuery(leadId);
    }
    OpportunityQuotesVORowImpl rowQuotes = (OpportunityQuotesVORowImpl) voQuotes.first();
    if(rowQuotes != null)
    {
      return Boolean.TRUE;
    }

    //int fetchedRowCountQuotes = voQuotes.getFetchedRowCount();
    //if (fetchedRowCountQuotes>=1)
    //{
      //return Boolean.TRUE;
    //}

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return Boolean.FALSE;
  }

  /**
   * add the contact into the contact table
   * 
   * @param selRelPtyId relationship party id of the contact
   */
  public void addContact(String selRelPtyId)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.addContact";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    ViewObject ctvo = findViewObject("OpportunityContactDetailsVO1");
    if(ctvo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityContactDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    Row ctctRow = ctvo.createRow();
    try
    {
      ctctRow.setAttribute("ContactPartyId",new Number(selRelPtyId));
    }
    catch(Exception ex)
    {
      MessageToken[] tokens = { new MessageToken("IDNAME", "selRelPtyId") };
      throw new OAException("ASN","ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
    }
    ctvo.insertRow(ctctRow);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }



  /**
   * set the address for the opportunity
   * 
   * @param selPSId selected party site Id
   * @param selAddress address
   */
  public void selectAddress(String selPSId, String selAddress)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.selectAddress";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    ViewObject vo = findViewObject("OpportunityDetailsVO1");
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    Row row = vo.first();
    row.setAttribute("Address", selAddress);
    try
    {
      row.setAttribute("AddressId",new Number(selPSId));
    }
    catch(Exception ex)
    {
      MessageToken[] tokens = { new MessageToken("IDNAME", "selLocId") };
      throw new OAException("ASN","ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * get the opportunity line attributes
   * 
   * @return hastable containing the attribute
   */
  public Hashtable getOpptyLineAttributes()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.getOpptyLineAttributes";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    Hashtable ht = new Hashtable(10);

    ViewObject lvo=findViewObject("OpportunityLineDetailsVO1");
    if(lvo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityLineDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
  	}

    Row lrow = lvo.getCurrentRow();

    if(lrow != null)
    {
      Number oppLineId = (Number) lrow.getAttribute("LeadLineId");
      if(oppLineId != null)
      {
        ht.put("LeadLineId", oppLineId);
      }

      Number oppId = (Number) lrow.getAttribute("LeadId");
      if(oppId != null)
      {
        ht.put("LeadId", oppId);
      }

      Number orgId = (Number) lrow.getAttribute("OrganizationId");
      if(orgId != null)
      {
        ht.put("OrganizationId", orgId);
      }

      Number prodCatId = (Number) lrow.getAttribute("ProductCategoryId");
      if(prodCatId != null)
      {
        ht.put("ProductCategoryId", prodCatId);
      }

      Number prodCatSetId = (Number) lrow.getAttribute("ProductCatSetId");
      if(prodCatSetId != null)
      {
        ht.put("ProductCatSetId", prodCatSetId);
      }

      Number invItemId = (Number) lrow.getAttribute("InventoryItemId");
      if(invItemId != null)
      {
        ht.put("InventoryItemId", invItemId);
      }

      String productCategory = (String) lrow.getAttribute("ProductCategory");
      if(productCategory != null)
      {
        ht.put("ProductCategory", productCategory);
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return ht;
  }

  /**
   * get the opportunity attributes
   * 
   * @return hastable containing the attribute
   */
  public Hashtable getOpptyAttributes()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.getOpptyAttributes";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    Hashtable ht = new Hashtable(10);
    OpportunityDetailsVOImpl dvo = getOpportunityDetailsVO1();
    if(dvo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
  	}
    Row drow = dvo.first();

    Number leadId = (Number) drow.getAttribute("LeadId");
    if(leadId != null)
    {
      ht.put("LeadId", leadId);
    }

    Number customerId = (Number) drow.getAttribute("CustomerId");
    if(customerId != null)
    {
      ht.put("CustomerId", customerId);
    }

    Number relPtyId = (Number) drow.getAttribute("RelationshipPartyId");
    if(relPtyId != null)
    {
      ht.put("RelationshipPartyId", relPtyId);
    }

    String title = (String) drow.getAttribute("Description");
    if(title != null)
    {
      ht.put("Description", title);
    }

    String salesMethFlag = (String) drow.getAttribute("SalesMethFlag");
    if(salesMethFlag != null)
    {
      ht.put("SalesMethFlag", salesMethFlag);
    }

    String srcFlag = (String) drow.getAttribute("SourceNameUpdFlag");
    if(srcFlag != null)
    {
      ht.put("SourceNameUpdFlag", srcFlag);
    }

    Number methId = (Number) drow.getAttribute("SalesMethodologyId");
    if(methId != null)
    {
      ht.put("SalesMethodologyId", methId);
    }

    Number stageId = (Number) drow.getAttribute("SalesStageId");
    if(stageId != null)
    {
      ht.put("SalesStageId", stageId);
    }

    String currencyCode = (String) drow.getAttribute("CurrencyCode");
    if(currencyCode != null)
    {
      ht.put("CurrencyCode", currencyCode);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return ht;
  }

  /**
   * retrieve the current row for the line
   * 
   * @return if current row exists
   */
  public Boolean getLineCurrentRow()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.getLineCurrentRow";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    ViewObject summaryVo = findViewObject("OpportunityLineDetailsVO1");
    if(summaryVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityLineDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
  	}

    Row summaryRow = summaryVo.getCurrentRow();
    if(summaryRow==null)
    {
      if(summaryVo.hasNext())
      {
        summaryRow = summaryVo.first();
        summaryRow.setAttribute("SelectFlag", "Y");
      }
    }
    else
    {
      // resetSelectFlag();
      summaryRow.setAttribute("SelectFlag","Y");
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    if(summaryRow == null)
    {
      return Boolean.FALSE;
    }
    else
    {
      return Boolean.TRUE;
    }
  }

  /**
   * commit
   * 
   * @return List of error or warning messages found after committing the transaction
   */
  public ArrayList doCommit()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.doCommit";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    /*
    Boolean primaryContactChk = checkUniqueness("OpportunityContactDetailsVO1","PrimaryContactFlag");
    if(primaryContactChk.booleanValue() == false)
    {
      throw new OAException("ASN","ASN_CMMN_MULTPRMCTCT_ERR");
    }

    Boolean ownerChk = this.checkUniqueness("AccessDetailsVO","OwnerFlag");
    if(ownerChk.booleanValue() == false)
    {
      throw new OAException("ASN","ASN_CMMN_MULTOWNER_ERR");
    }

    Boolean existChk = this.checkExistence("AccessDetailsVO","OwnerFlag");
    if(existChk.booleanValue() == false)
    {
      throw new OAException("ASN","ASN_CMMN_REQOWNER_ERR");
    }
    */

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return super.doCommit();
  }

   //Code for flexfield

      /* Loops thru and sets the  specified row of Contact Details view object as Current   */
  public void refreshContactDetailsRow()
  {

  // get view instance/object
    OAViewObject opptyContactDetailsVo = (OAViewObject)findViewObject("OpportunityContactDetailsVO1");
    if(opptyContactDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityContactDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    if (opptyContactDetailsVo!=null) 
    {
     // opptyContactDetailsVo.setRowValidation(false);
      opptyContactDetailsVo.reset();
      OpportunityContactDetailsVORowImpl opptyContactDetailsRow = (OpportunityContactDetailsVORowImpl)opptyContactDetailsVo.getCurrentRow();

      if (opptyContactDetailsRow!=null)
      {
        opptyContactDetailsVo.setCurrentRow(opptyContactDetailsRow);
      }
      else
      {  
	      // Loop through the VO
        String contactSelectFlag = null;
        while(opptyContactDetailsVo.hasNext())
        {
          opptyContactDetailsRow = (OpportunityContactDetailsVORowImpl)opptyContactDetailsVo.next();
          if(opptyContactDetailsRow!=null)
          {
            String contactSelect = (String)opptyContactDetailsRow.getAttribute("SelectFlag");
       	   // Check to see which Row the User has selected
            if("Y".equals(contactSelect))
            {
            	// Set the selected Row as Current Row and exit
              opptyContactDetailsVo.setCurrentRow(opptyContactDetailsRow);
              // Store the value Y into a temp variable to indicate there is a selected row
              contactSelectFlag = "Y";
              break;
            }
          }
        }        
        if(!("Y".equals(contactSelectFlag)))
        {
          opptyContactDetailsVo.setRowValidation(false);
          opptyContactDetailsVo.reset();
          if(opptyContactDetailsVo.hasNext())
          {
            // get the first row
            opptyContactDetailsRow = (OpportunityContactDetailsVORowImpl)opptyContactDetailsVo.first();
            if(opptyContactDetailsRow!=null)
            {
	            // set the first row as selected
              opptyContactDetailsRow.setAttribute("SelectFlag", "Y");              
            }
          }
        }
      }
    }
  } 


  
  
  

   // This method will be used to determine whether a  Row exists in the 
   // underlying VO. This method will be invoked from the Process Request
   // of the Controller on which the FlexField Region is based. 
   // Note : A new controller has to be created for the Stacked Layout
   // on which the flexfield is based, which will be dicussed.
   
   public Boolean rowExistsInContactDetails()
  {
     // get view instance/object
    OAViewObject opptyContactDetailsVo = (OAViewObject)findViewObject("OpportunityContactDetailsVO1"); 
    // Throw an error msg if Object doesnt exist.
    if(opptyContactDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "opptyContactDetailsVo") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    } 
    if(opptyContactDetailsVo!=null) 
    {       
        // Create a RowSetIterator on the VO Instance
        RowSetIterator opptyContactDetailsItr = null;
        opptyContactDetailsItr=opptyContactDetailsVo.findRowSetIterator("CtctIterator");
        if(opptyContactDetailsItr==null)
          opptyContactDetailsItr = opptyContactDetailsVo.createRowSetIterator("CtctIterator");
        else
          opptyContactDetailsItr.reset();        
    
        if(opptyContactDetailsItr!=null)
        {
          // check if any rows exist and If so, return True
          if(opptyContactDetailsItr.hasNext())
          {

            opptyContactDetailsItr.closeRowSetIterator();  
            return Boolean.TRUE;
          }
          else
          // return False as no rows exist
          {

            opptyContactDetailsItr.closeRowSetIterator();
            return Boolean.FALSE;
          }
        } 
    }
      return Boolean.FALSE;
  }

 // Code for Sales Team Flex Field

   /**
   * Loops thru and sets the  specified row of Sales Team view object as Current
   */
  public void refreshSalesteamDetailsRow()
  {

    // get view instance/object
    OAViewObject opptySalesteamDetailsVo = (OAViewObject)findViewObject("AccessDetailsVO");
    if(opptySalesteamDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "AccessDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    if(opptySalesteamDetailsVo!=null) 
    {
      opptySalesteamDetailsVo.reset();
      ODOpportunityAccessDetailsVORowImpl opptySalesteamDetailsRow = (ODOpportunityAccessDetailsVORowImpl) opptySalesteamDetailsVo.getCurrentRow();

      if(opptySalesteamDetailsRow!=null)
      {
        opptySalesteamDetailsVo.setCurrentRow(opptySalesteamDetailsRow);
      }
      else
      {  
        // Loop through the VO
        String salesteamSelectFlag = null;
        while(opptySalesteamDetailsVo.hasNext())
        {
          opptySalesteamDetailsRow = (ODOpportunityAccessDetailsVORowImpl)opptySalesteamDetailsVo.next();
          if(opptySalesteamDetailsRow!=null)
          {
            String salesteamSelect = (String)opptySalesteamDetailsRow.getAttribute("SelectFlag");
            // Check to see which Row the User has selected
            if("Y".equals(salesteamSelect))
            {
              // Set the selected Row as Current Row and exit
              opptySalesteamDetailsVo.setCurrentRow(opptySalesteamDetailsRow);
              // Store the value Y into a temp variable to indicate there is a selected row
              salesteamSelectFlag = "Y";              
              break;
            }
          }
        }        
        if(!("Y".equals(salesteamSelectFlag)))
        {
          opptySalesteamDetailsVo.setRowValidation(false);
          opptySalesteamDetailsVo.reset();
          if(opptySalesteamDetailsVo.hasNext())
          {
            // get the first row
            opptySalesteamDetailsRow = (ODOpportunityAccessDetailsVORowImpl)opptySalesteamDetailsVo.first();
            if(opptySalesteamDetailsRow!=null)
            {
	            // set the first row as selected
              opptySalesteamDetailsRow.setAttribute("SelectFlag", "Y");
            }
          }
        }        
      }
    }
  }


  /**
   *
   * Following method checks whether Rows exists in the Sales Team Details VO or not
   */
  public Boolean rowExistsInSalesteamDetails()
  {
     // get view instance/object
    OAViewObject opptySalesteamDetailsVo = (OAViewObject)findViewObject("AccessDetailsVO"); 
    // Throw an error msg if Object doesnt exist.
    if(opptySalesteamDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "AccessDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    } 
    if(opptySalesteamDetailsVo!=null) 
    {       
        // Create a RowSetIterator on the VO Instance
        RowSetIterator opptySalesteamDetailsItr = null;
        opptySalesteamDetailsItr=opptySalesteamDetailsVo.findRowSetIterator("SalesteamIterator");
        if(opptySalesteamDetailsItr==null)
          opptySalesteamDetailsItr = opptySalesteamDetailsVo.createRowSetIterator("SalesteamIterator");
        else
          opptySalesteamDetailsItr.reset();
    
        if(opptySalesteamDetailsItr!=null)
        {
          // check if any rows exist and If so, return True
          if(opptySalesteamDetailsItr.hasNext())
          {
           opptySalesteamDetailsItr.closeRowSetIterator();  
            return Boolean.TRUE;
          }
          else
          // return False as no rows exist
          {
            opptySalesteamDetailsItr.closeRowSetIterator();  
            return Boolean.FALSE;
          }
        } 
    }
      return Boolean.FALSE;
  }


/*  public void setRowAsSelected(String viewUsageName)
  {
    ApplicationModuleImpl pam = this.getRootApplicationModule();
    ViewObject vo = pam.findViewObject(viewUsageName);
     OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    // reset all rows to be not selected
    Row[] rangeRows = vo.getAllRowsInRange();
    for(int i = 0; i < rangeRows.length;i++)
    {
      rangeRows[i].setAttribute("SelectFlag","N");
    }

    // set the first row as selected
    vo.reset();
    if(vo.hasNext())
    {
      Row row = vo.first();
      row.setAttribute("SelectFlag", "Y");
      vo.setCurrentRow(row);
     
    }
   
  }
*/
 
  /**
   * Prepares the query for re-execution
   */
  public void resetQuery()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.resetQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObject viewObject = (OAViewObject)(this.findViewObject("OpportunityDetailsVO1"));
    if(viewObject!=null && viewObject.isPreparedForExecution())
    {
      viewObject.setPreparedForExecution(false);
    }

    OAApplicationModule childAM = (OAApplicationModule)this.findApplicationModule("ASNSugCtctLstAM");
    if(childAM != null)
    {
      childAM.invokeMethod("resetQueryForOpp");
    }

    childAM = (OAApplicationModule) this.findApplicationModule("ASNCustOpptyLstAM");
    if(childAM != null)
    {
      childAM.invokeMethod("resetQuery");
    }

    childAM = (OAApplicationModule) this.findApplicationModule("ASNPrdtCntrLstAM");
    if(childAM != null)
    {
      childAM.invokeMethod("resetQuery");
    }
    
    childAM = (OAApplicationModule) this.findApplicationModule("ASNCustomerServiceAM");
    if(childAM != null)
    {
      childAM.invokeMethod("resetQuery");
    }

    childAM = (OAApplicationModule) this.findApplicationModule("ASNSCStgStackAM");
    if(childAM != null)
    {
      childAM.invokeMethod("resetQuery");
    }

    OAApplicationModule taskAM = (OAApplicationModule)this.findApplicationModule("CacTaskSummAM");
    if(taskAM!=null)
    {
      taskAM.invokeMethod("resetQuery");
    }

    OAApplicationModule noteAM = (OAApplicationModule)this.findApplicationModule("ASNNotesAM");
    if(noteAM != null)
    {
      noteAM.invokeMethod("resetQuery");
      noteAM.invokeMethod("resetNewNote");
      Serializable[] paramPoplist = { "OPPORTUNITY" };
      noteAM.invokeMethod("resetNotePoplist", paramPoplist);
    }
    
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

 

  /**
   *
   * Container's getter for StatusDetailsVO1
   */
  public StatusDetailsVOImpl getStatusDetailsVO1()
  {
    return (StatusDetailsVOImpl)findViewObject("StatusDetailsVO1");
  }

  /**
   *
   * Container's getter for OpportunityMethSalesStagesVO1
   */
  public OpportunityMethSalesStagesVOImpl getOpportunityMethSalesStagesVO1()
  {
    return (OpportunityMethSalesStagesVOImpl)findViewObject("OpportunityMethSalesStagesVO1");
  }

  /**
   *
   * Container's getter for OpportunityDetailsVO1
   */
  public OpportunityDetailsVOImpl getOpportunityDetailsVO1()
  {
    return (OpportunityDetailsVOImpl)findViewObject("OpportunityDetailsVO1");
  }


  /**
   *
   * Container's getter for OpptyDetailsToAccessesVL1
   */
  public ViewLinkImpl getOpptyDetailsToAccessesVL1()
  {
    return (ViewLinkImpl)findViewLink("OpptyDetailsToAccessesVL1");
  }



  /**
   *
   * Container's getter for OpportunityLineDetailsVO1
   */
  public ASNViewObjectImpl getOpportunityLineDetailsVO1()
  {
    return (ASNViewObjectImpl)findViewObject("OpportunityLineDetailsVO1");
  }

  /**
   *
   * Container's getter for OpptyDetailsToLinesVL1
   */
  public ViewLinkImpl getOpptyDetailsToLinesVL1()
  {
    return (ViewLinkImpl)findViewLink("OpptyDetailsToLinesVL1");
  }


  /**
   *
   * Container's getter for AccessDetailsVO
   */
  public ASNViewObjectImpl getAccessDetailsVO()
  {
    return (ASNViewObjectImpl)findViewObject("AccessDetailsVO");
  }

  /**
   *
   * Container's getter for OpportunityContactDetailsVO1
   */
  public ASNViewObjectImpl getOpportunityContactDetailsVO1()
  {
    return (ASNViewObjectImpl)findViewObject("OpportunityContactDetailsVO1");
  }

  /**
   *
   * Container's getter for OpptyDetailsToContactsVL1
   */
  public ViewLinkImpl getOpptyDetailsToContactsVL1()
  {
    return (ViewLinkImpl)findViewLink("OpptyDetailsToContactsVL1");
  }

  /**
   *
   * Container's getter for OpptyLineCmptPrdtDetailsVO1
   */
  public ASNViewObjectImpl getOpptyLineCmptPrdtDetailsVO1()
  {
    return (ASNViewObjectImpl)findViewObject("OpptyLineCmptPrdtDetailsVO1");
  }

  /**
   *
   * Container's getter for OpptyLineToCmptPrdtDetailsVL1
   */
  public ViewLinkImpl getOpptyLineToCmptPrdtDetailsVL1()
  {
    return (ViewLinkImpl)findViewLink("OpptyLineToCmptPrdtDetailsVL1");
  }

  /**
   *
   * Container's getter for SalesMethDefaultStageVO1
   */
  public SalesMethDefaultStageVOImpl getSalesMethDefaultStageVO1()
  {
    return (SalesMethDefaultStageVOImpl)findViewObject("SalesMethDefaultStageVO1");
  }

  /**
   *
   * Container's getter for OpptyDetAppPropertiesVO1
   */
  public ASNViewObjectImpl getOpptyDetAppPropertiesVO1()
  {
    return (ASNViewObjectImpl)findViewObject("OpptyDetAppPropertiesVO1");
  }

  /**
   *
   * Container's getter for ContactActionsVO1
   */
  public ContactActionsVOImpl getContactActionsVO1()
  {
    return (ContactActionsVOImpl)findViewObject("ContactActionsVO1");
  }

  /**
   * 
   * Container's getter for SalesMethodologiesVO1
   */
  public SalesMethodologiesVOImpl getSalesMethodologiesVO1()
  {
    return (SalesMethodologiesVOImpl)findViewObject("SalesMethodologiesVO1");
  }





// Parameter selection : value in the Poplist as parameter selection, 
// used to handle the event when poplist if modified
// Parameter refresh : Bollean value that tells whether the poplist has to be refreshed, 
// whcih is usually done when clicking on the new Row of Products Table
// Referenced by : Process Form Request of the PrdtTable Controler


  public void handlePrdtChoiceSelection(String selection, String renderFlex, String productsExist) 
  {
    OAViewObject appVo = getOpptyDetAppPropertiesVO1();
    if(appVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpptyDetAppPropertiesVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    OpptyDetAppPropertiesVORowImpl appRow = (OpptyDetAppPropertiesVORowImpl) appVo.getCurrentRow();

    if((productsExist == null) || ("N".equals(productsExist)))
    {
      appRow.setAttribute("PRDT_COMP_RENDER",Boolean.FALSE);
      appRow.setAttribute("PRDT_ADDINFO_RENDER",Boolean.FALSE);
      appRow.setAttribute("PRDT_INFOPLIST_RENDER",Boolean.FALSE);
      appRow.setAttribute("PRDT_REVENUE_FRCST_RENDER",Boolean.FALSE);
      appRow.setAttribute("PRDT_NON_REVENUE_FRCST_RENDER",Boolean.FALSE);
    }
    else
    {
      appRow.setAttribute("PRDT_INFOPLIST_RENDER",Boolean.TRUE);

      if (selection == null)
      {
        appRow.setAttribute("PRDT_COMP_RENDER",Boolean.TRUE);
        appRow.setAttribute("PRDT_ADDINFO_RENDER",Boolean.FALSE);
        appRow.setAttribute("PRDT_REVENUE_FRCST_RENDER",Boolean.FALSE);
        appRow.setAttribute("PRDT_NON_REVENUE_FRCST_RENDER",Boolean.FALSE);
      }
      else
      {
        if ("COMP_PRDT".equals(selection))
        {
          // Render the Competitor Products Region while turning off the Additional Info. Region
          appRow.setAttribute("PRDT_COMP_RENDER",Boolean.TRUE);
          appRow.setAttribute("PRDT_ADDINFO_RENDER",Boolean.FALSE);
          appRow.setAttribute("PRDT_REVENUE_FRCST_RENDER",Boolean.FALSE);
          appRow.setAttribute("PRDT_NON_REVENUE_FRCST_RENDER",Boolean.FALSE);
        }
        else if ("ADD_INFO".equals(selection))
        {
          // Render the Additional Info. Region while turning off the Competitor Products Region
          appRow.setAttribute("PRDT_COMP_RENDER",Boolean.FALSE);
          appRow.setAttribute("PRDT_ADDINFO_RENDER",Boolean.TRUE);
          appRow.setAttribute("PRDT_REVENUE_FRCST_RENDER",Boolean.FALSE);
          appRow.setAttribute("PRDT_NON_REVENUE_FRCST_RENDER",Boolean.FALSE);
        }
        else if ("FRCST_DTLS".equals(selection))
        {
          //code for display of the personalize region
          appRow.setAttribute("PRDT_COMP_RENDER",Boolean.FALSE);
          appRow.setAttribute("PRDT_ADDINFO_RENDER",Boolean.FALSE);
          appRow.setAttribute("PRDT_REVENUE_FRCST_RENDER",Boolean.TRUE);
          appRow.setAttribute("PRDT_NON_REVENUE_FRCST_RENDER",Boolean.TRUE);
        }        
      }
    }
  }


  /**
   * @param opptyReadOnlyMode  read-only mode of the opportunity. Possible values are "Y" or "N"
   * Function requried to determine if the actions dropdown for contacts table is 
   * required or not. (In read only mode this drop down should not be displayed.
   */
  public void setContactSelectionProperty()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.setContactSelectionProperty";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObjectImpl appPropertiesVo = (OAViewObjectImpl)this.getOpptyDetAppPropertiesVO1();
    OpptyDetAppPropertiesVORowImpl propertiesRow = null;
    if(appPropertiesVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadDetAppPropertiesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
      // by this time, the properties view object should've already been initialized
    propertiesRow = (OpptyDetAppPropertiesVORowImpl)appPropertiesVo.first();


    // Flexfield Changes
    // Render the Detail Selection Column and 
    // disable the Action fields in Read-Only mode whenever the Flexfield is rendered.
    propertiesRow.setCTCT_SEL_RENDER(Boolean.TRUE);
        if (isProcLogEnabled)
        {
          dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
        }
        return;
  }

  /**
   * @param opptyReadOnlyMode  read-only mode of the opportunity. Possible values are "Y" or "N"
   */
  public void setOpptyDetSTProperties(String flexFieldEnabled)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.setOpptyDetSTProperties";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObjectImpl appPropertiesVo = (OAViewObjectImpl)this.getOpptyDetAppPropertiesVO1();
    OpptyDetAppPropertiesVORowImpl propertiesRow = null;
    if(appPropertiesVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadDetAppPropertiesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
      // by this time, the properties view object should've already been initialized
    propertiesRow = (OpptyDetAppPropertiesVORowImpl)appPropertiesVo.first();

    // Flexfield Changes
    // Render the Detail Selection Column and 
    if("Y".equals(flexFieldEnabled))
    {
      propertiesRow.setST_SELECTCOL_RENDERED(Boolean.TRUE);
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return;
    }
    else
    {
      propertiesRow.setST_SELECTCOL_RENDERED(Boolean.FALSE);
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return;
    }
    
  }

  /**
   * 
   * Container's getter for OpportunityQuotesVO1
   */
  public OpportunityQuotesVOImpl getOpportunityQuotesVO1()
  {
    return (OpportunityQuotesVOImpl)findViewObject("OpportunityQuotesVO1");
  }

  /**
   * 
   * Container's getter for OpportunityProposalsVO1
   */
  public OpportunityProposalsVOImpl getOpportunityProposalsVO1()
  {
    return (OpportunityProposalsVOImpl)findViewObject("OpportunityProposalsVO1");
  }

  /**
   * 
   * Container's getter for OpportunityLineRevFrcstDetailsVO1
   */
 // public OpportunityLineRevFrcstDetailsVOImpl getOpportunityLineRevFrcstDetailsVO1()
 // {
  //  return (OpportunityLineRevFrcstDetailsVOImpl)findViewObject("OpportunityLineRevFrcstDetailsVO1");
 // }


  /**
   * 
   * Container's getter for OpportunityFrcstOwnerDetailsVO1
   */
  public OpportunityFrcstOwnerDetailsVOImpl getOpportunityFrcstOwnerDetailsVO1()
  {
    return (OpportunityFrcstOwnerDetailsVOImpl)findViewObject("OpportunityFrcstOwnerDetailsVO1");
  }

  /**
   * 
   * Container's getter for OpportunityLineNonRevFrcstDetailsVO1
   */
  public ASNViewObjectImpl getOpportunityLineNonRevFrcstDetailsVO1()
  {
    return (ASNViewObjectImpl)findViewObject("OpportunityLineNonRevFrcstDetailsVO1");
  }

  /**
   * 
   * Container's getter for OpptyLineToNonRevFrcstDetailsVL1
   */
  public ViewLinkImpl getOpptyLineToNonRevFrcstDetailsVL1()
  {
    return (ViewLinkImpl)findViewLink("OpptyLineToNonRevFrcstDetailsVL1");
  }



 
// public void initForecastCreditTypes()
// {

  // NonRevenueForecastTypesVOImpl vo = getNonRevenueForecastTypesVO1();
 // if (vo == null)
  // {
    // MessageToken[] tokens = { new MessageToken("NAME", "getLookupsOrderByTagVO") };
    // throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
  // }
  //   vo.initQuery();
// }//


public void removeNonRevFrcstOwner(String nrfId)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.removeNonRevFrcstOwner ";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    int poToDelete = 0;
    try
    {
      poToDelete = Integer.parseInt(nrfId);
    }
    catch (NumberFormatException nfe)
    {
      MessageToken[] tokens = { new MessageToken("IDNAME", " nrfId") };
      throw new OAException("ASN","ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
    }

    OAViewObject vo = getOpportunityLineNonRevFrcstDetailsVO1();
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpptyLineNonRevFrcstDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.reset();  // be sure to start on the first row
    vo.setRowValidation(false);
    OpportunityLineNonRevFrcstDetailsVORowImpl row = null;

    int fetchedRowCount = vo.getFetchedRowCount();
    for (int i = 0; i < fetchedRowCount; i++)
    {
      row = (OpportunityLineNonRevFrcstDetailsVORowImpl) vo.next();

      if(row != null)
      {
        Number primaryKey = row.getSalesCreditId();
        if(primaryKey == null)
        {
           primaryKey = new Number(0);
        }

        if (primaryKey.compareTo(poToDelete) == 0)
        {
          row.remove();
          break;
        }
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }


  /**
   * Sets the owner defaulted flag for the given sales credit id. If the sales credit
   * id is not passed, then sets to the first non revenue sales credit record.
   * 
   * @param String salesCreditId sales credit id
   * @param String default flag . Possible values are "y' and 'N', with default beingt 'N'
   */

  public void setRevFrcstDefaultFlag(String salesCreditId, String defaultFlag)
 {
   final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.setRevFrcstDefaultFlag";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObject mvo = (OAViewObject) findViewObject("OpportunityLineRevFrcstDetailsVO1");
  
    if(mvo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityFrcstOwnerDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    Number salesCreditIdNbr = null;    
    boolean defaultFirstRow = false;

    if(salesCreditId==null || "".equals(salesCreditId.trim()))
    {
      defaultFirstRow = true;
    }
    else
    {
      try
      {
        salesCreditIdNbr = new Number(salesCreditId);
      }
      catch(SQLException sqlex)
      {
        MessageToken[] tokens = { new MessageToken("IDNAME", salesCreditId) };
        throw new OAException("ASN","ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
      }
    }
    
    mvo.setRowValidation(false);
    mvo.reset();  // be sure to start on the first row
    OpportunityLineRevFrcstDetailsVORowImpl row = null;
    Number rowKey = null;
    int fetchedRowCount = mvo.getFetchedRowCount();
    
    if(defaultFirstRow && fetchedRowCount >=1)
    {
      row = (OpportunityLineRevFrcstDetailsVORowImpl) mvo.first();
    }
    else
    {
      for (int i = 0; i < fetchedRowCount; i++)
      {
        row = (OpportunityLineRevFrcstDetailsVORowImpl) mvo.next();
        if(row != null)
        {
          rowKey = row.getSalesCreditId();
          if(rowKey!=null && rowKey.compareTo(salesCreditIdNbr) == 0)
          {
            break;
          }
        }
        row = null;
      }
    }
    if(row!=null)
    {
      if("Y".equals(defaultFlag))
      {
        row.setDefaultedFromOwnerFlag("Y");
        row.setOWNER_FLAG1_RENDER(Boolean.TRUE);
        row.setOWNER_FLAG2_RENDER(Boolean.FALSE);
      }
      else
      {
        row.setDefaultedFromOwnerFlag("N");
        row.setOWNER_FLAG1_RENDER(Boolean.FALSE);
        row.setOWNER_FLAG2_RENDER(Boolean.TRUE);            
      }
    }
     
    if (isProcLogEnabled)
    {
     dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
     dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }     

  /**
   * handle revenue forecast credit percent update event
   */
  public void handleRevFrcstCrdPcntUpdateEvent()
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.handleRevFrcstCreditPcntUpdateEvent";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    ViewObject revFrcstVo = this.getOpportunityLineRevFrcstDetailsVO1();
    if(revFrcstVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityLineRevFrcstDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    RowSetIterator revFrcstVoItr = revFrcstVo.findRowSetIterator("RevenueFrcstIterator");
    if(revFrcstVoItr==null)
    {
      revFrcstVoItr = revFrcstVo.createRowSetIterator("RevenueFrcstIterator");
    }
    else
    {
      revFrcstVoItr.reset();
    }
    revFrcstVoItr.setRowValidation(false);

    Number revFrcstAmt = null;
    Number totRevFrcstCrdPcnt = new Number(0);    
    Number revFrcstCrdPcnt = null;
    OpportunityLineRevFrcstDetailsVORowImpl revFrcstRow = null; 

      // calculate total line revenue forecast credit percent
    while(revFrcstVoItr.hasNext())
    {
      revFrcstRow = (OpportunityLineRevFrcstDetailsVORowImpl)revFrcstVoItr.next();
      if(revFrcstRow!=null)
      {
        revFrcstCrdPcnt = (Number)revFrcstRow.getCreditPercent();
        if(revFrcstCrdPcnt!=null)
        {
          totRevFrcstCrdPcnt.add(revFrcstCrdPcnt);
        }
      }
    }
    
    boolean isTotCrdPcntZero = (totRevFrcstCrdPcnt==null || totRevFrcstCrdPcnt.intValue()<=0);
    revFrcstVoItr.reset();
    while(revFrcstVoItr.hasNext())
    {
      revFrcstRow = (OpportunityLineRevFrcstDetailsVORowImpl)revFrcstVoItr.next();
      if(revFrcstRow!=null)
      {
        revFrcstAmt = (Number)revFrcstRow.getOppForecastAmount();
        revFrcstCrdPcnt = (Number)revFrcstRow.getCreditPercent();
        
        if(revFrcstCrdPcnt==null)
        {
          revFrcstCrdPcnt = new Number (0);
        }
        if(isTotCrdPcntZero)
        {
          revFrcstRow.setOppForecastAmount(revFrcstCrdPcnt.multiply(revFrcstAmt));
        }
        else
        {
          revFrcstAmt = revFrcstAmt.multiply(revFrcstCrdPcnt);
          revFrcstRow.setOppForecastAmount(revFrcstAmt.divide(totRevFrcstCrdPcnt));
        }
      }
    }
    if(revFrcstVoItr!=null)
    {
      revFrcstVoItr.closeRowSetIterator();
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }


 public Boolean isOpenStatus(String status)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.isOpenStatus";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    StringBuffer buf = new StringBuffer(100);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    if(status == null)
    {
      return Boolean.FALSE;
    }

    StatusDetailsVOImpl vo = getStatusDetailsVO1();

    if (vo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "StatusDetailsVO1") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    vo.initQuery(status);
    Row row = vo.first();

    if(row != null)
    {
      String flag = (String) row.getAttribute("OppOpenStatusFlag");
      if("Y".equals(flag))
      {
        if (isProcLogEnabled)
        {
          dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
          dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
        }
        return Boolean.TRUE;
      }
      else
      {
        if (isProcLogEnabled)
        {
          dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
          dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
        }
        return Boolean.FALSE;
      }
    }
    else
    {
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return Boolean.FALSE;
    }
  }


   
  /**
   * 
   * Container's getter for OpportunityDetCloseReasonVO1
   */
  public OpportunityDetCloseReasonVOImpl getOpportunityDetCloseReasonVO1()
  {
    return (OpportunityDetCloseReasonVOImpl)findViewObject("OpportunityDetCloseReasonVO1");
  }


  // Added to populate the close reason
  public void initCloseReasonPoplistQuery(String closeReason)
  {
    final String METHOD_NAME = "asn.opportunity.server.OpptyDetAMImpl.initCloseReasonPoplistQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OpportunityDetCloseReasonVOImpl closeReasonsVo = this.getOpportunityDetCloseReasonVO1();
    if(closeReasonsVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "OpportunityDetCloseReasonVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    closeReasonsVo.initQuery(closeReason);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * 
   * Container's getter for OpportunityLineRevFrcstDetailsVO1
   */
  public ASNViewObjectImpl getOpportunityLineRevFrcstDetailsVO1()
  {
    return (ASNViewObjectImpl)findViewObject("OpportunityLineRevFrcstDetailsVO1");
  }

  /**
   * 
   * Container's getter for OpptyLineToRevFrcstDetailsVL1
   */
  public ViewLinkImpl getOpptyLineToRevFrcstDetailsVL1()
  {
    return (ViewLinkImpl)findViewLink("OpptyLineToRevFrcstDetailsVL1");
  }



  /**
   * 
   * This is the default constructor (do not remove)
   */
  public ODOpptyDetAMImpl()
  {
  }

    /**
   *
   * Sample main for debugging Business Components code using the tester.
   */
  /*public static void main(String[] args)
  {
    launchTester("oracle.apps.asn.opportunity.server", "OpptyDetAMLocal");
  }*/


  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxcrm.asn.opportunity.server", "ODOpptyDetAMLocal");
  }

  /**
   * 
   * Container's getter for ODOpportunityAccessDetailsVO
   */
  public OAViewObjectImpl getODOpportunityAccessDetailsVO()
  {
    return (OAViewObjectImpl)findViewObject("ODOpportunityAccessDetailsVO");
  }

  /**
   * 
   * Container's getter for ODOpportunityFrcstOwnerDetailsVO
   */
  public ODOpportunityFrcstOwnerDetailsVOImpl getODOpportunityFrcstOwnerDetailsVO()
  {
    return (ODOpportunityFrcstOwnerDetailsVOImpl)findViewObject("ODOpportunityFrcstOwnerDetailsVO");
  }
}