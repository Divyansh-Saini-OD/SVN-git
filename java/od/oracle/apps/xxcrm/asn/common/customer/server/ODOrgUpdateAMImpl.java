/*===========================================================================+
 |      Copyright (c) 2001 Oracle Corporation, Redwood Shores, CA, USA       |
 |                         All rights reserved.                              |
 +===========================================================================+
 |  HISTORY                                                                  |
 |  Aug-03   mkatraga Created                                                |
 +===========================================================================*/

package od.oracle.apps.xxcrm.asn.common.customer.server;
import od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNApplicationModuleImpl;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.asn.common.customer.schema.server.CustomerAccessEOImpl;
import od.oracle.apps.xxcrm.asn.common.customer.server.ODCustomerAccessesVOImpl;
import od.oracle.apps.xxcrm.asn.common.customer.server.ODCustomerAccessesVORowImpl;
import oracle.apps.asn.common.customer.server.OrgUpdatePPRTransVOImpl;
import oracle.apps.asn.common.customer.server.OrgUpdatePPRTransVORowImpl;
import com.sun.java.util.collections.Iterator;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.common.VersionInfo;
import oracle.jbo.domain.Number;
import com.sun.java.util.collections.ArrayList;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.asn.common.server.PartyVOImpl;
import oracle.apps.asn.common.server.PartyVORowImpl;
import oracle.apps.asn.common.poplist.server.LookupsVOImpl;
import oracle.jbo.RowSetIterator;
import java.sql.SQLException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;


//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODOrgUpdateAMImpl extends ODASNApplicationModuleImpl
{
  public static final String RCS_ID="$Header: ODOrgUpdateAMImpl.java 115.18 2004/12/03 18:54:05 jezhou ship $";
  public static final boolean RCS_ID_RECORDED =
        VersionInfo.recordClassVersion(RCS_ID, "od.oracle.apps.xxcrm.asn.common.customer.server");

  /**
   *
   * This is the default constructor (do not remove)
   */
  public ODOrgUpdateAMImpl()
  {
  }
public void initWRFAcc(String partyid)
     {
  OAViewObject vor = getODWRFRefVO();
   if (partyid !=null)
      {          
        if (!vor.isPreparedForExecution())
         {
           getODWRFRefVO().initQuery(partyid);
         }
      } 
   }
  /**
   * Method for populating customer Id in customer accesses VO
   * @param partyId the customer party identifier
   */
  public void populateCustomerId(String customerId)
        {
    final String METHOD_NAME = "xxcrm.asn.common.customer.server.ODOrgUpdateAMImpl.populateCustomerId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      StringBuffer buf = new StringBuffer();
      buf.append("Input Parameters: partyId = ");
      buf.append(customerId);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
    }

          ODCustomerAccessesVOImpl vo = getODCustomerAccessesVO();
          if(vo == null)
          {
            MessageToken[] tokens =
              { new MessageToken("OBJECT_NAME", "ODCustomerAccessesVO") };
            throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
          }
          vo.reset();  // be sure to start on the first row
          ODCustomerAccessesVORowImpl row = null;
    while(vo.hasNext())
    {
            row = (ODCustomerAccessesVORowImpl) vo.next();
            if(row != null)
            {
        Number Id = (Number) row.getAttribute("CustomerId");
        if(Id == null)
        {
          try
          {
              row.setAttribute("CustomerId",new Number(customerId));
          }
          catch(SQLException sqlex)
          {
            MessageToken[] tokens = { new MessageToken("IDNAME", "customerId") };
            throw new OAException("ASN","ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
          }
        }
            }
          }

    if (isProcLogEnabled) {
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   *
   * Method for fetching the party name from the party identifier
   * @param partyId the customer party identifier
   */
  public String getPartyNameFromId(String partyId)
  {
    final String METHOD_NAME = "xxcrm.asn.common.customer.server.ODOrgUpdateAMImpl.getPartyNameFromId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      StringBuffer buf = new StringBuffer();
      buf.append("Input Parameters: partyId = ");
      buf.append(partyId);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
    }

    PartyVOImpl vo = this.getPartyVO();
    if (vo == null)
    {
          MessageToken[] tokens = { new MessageToken("NAME", "PartyVOImpl") };
          throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.initQuery(partyId);

    String partyName = null;

    if ( vo != null && vo.isExecuted() )
    {
         PartyVORowImpl cRow = (PartyVORowImpl)vo.first();
         partyName = ((Object)cRow.getAttribute("PartyName")).toString();
    }

    if (isProcLogEnabled) {
      StringBuffer buf = new StringBuffer();
      buf.append("Output Parameters: partyName = ");
      buf.append(partyName);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }

    return partyName;
  }

  /**
   *
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxcrm.asn.common.customer.server", "ODOrgUpdateAMLocal");
  }

  /**
   *
   * Container's getter for ODCustomerAccessesVO
   */
  public ODCustomerAccessesVOImpl getODCustomerAccessesVO()
  {
    return (ODCustomerAccessesVOImpl)findViewObject("ODCustomerAccessesVO");
  }

  //sasles team

  /**
   * Method for commiting the transaction.
   * Call validateSalesTeam, Post changes
   * and then call commit to commit the transaction
   */
  public ArrayList doCommit()
  {
    final String METHOD_NAME = "xxcrm.asn.common.customer.server.ODOrgUpdateAMImpl.doCommit";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    validateCustomerSalesTeam();
    OADBTransaction trxn = getOADBTransaction();
    Iterator customerAccessIter = CustomerAccessEOImpl.getDefinitionObject().getAllEntityInstancesIterator(trxn);
    while (customerAccessIter.hasNext())
    {
      CustomerAccessEOImpl cachedCustAccess = (CustomerAccessEOImpl) customerAccessIter.next();
      cachedCustAccess.postChanges(null);
    }
    trxn.postChanges();
    //Jean 12/03/2004. re-introduce full access
    //check if there is atleast one sales person in the sales team
    //Boolean existChk = this.rowExistsInSalesteamDetails();
    //if(existChk.booleanValue() == false)
    //{
    //  throw new OAException("ASN","ASN_CMMN_ACSS_NOCUSTSLSPER_ERR");
    //}
    removeDupCustSalesTeamMembers();

    if (isProcLogEnabled) {
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }
    return super.doCommit();
  }

  /**
   *
   * Method to Validate the customer sales team for uniqueness
   */
  public void validateCustomerSalesTeam()
  {
    final String METHOD_NAME = "xxcrm.asn.common.customer.server.ODOrgUpdateAMImpl.validateCustomerSalesTeam";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    ODCustomerAccessesVOImpl vo = getODCustomerAccessesVO();
    if (vo==null)
    {
      MessageToken[] tokens = { new MessageToken("OBJECT_NAME", "ODCustomerAccessesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
      }

    vo.checkUniqueness();
    if (isProcLogEnabled) {
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }
  }
  /**
   *
   * Method to Remove the duplicate sales team members
   */
  public void removeDupCustSalesTeamMembers()
  {
    final String METHOD_NAME = "xxcrm.asn.common.customer.server.ODOrgUpdateAMImpl.removeDupCustSalesTeamMembers";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    ODCustomerAccessesVOImpl vo = getODCustomerAccessesVO();
    if (vo==null)
    {
      MessageToken[] tokens = { new MessageToken("OBJECT_NAME", "ODCustomerAccessesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
      }

    vo.removeDuplicateAccesses();
    if (isProcLogEnabled) {
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   *
   * Method to remove the customer access
   * @param mId id to delete
   */
  public void removeSalesTeamMembers(String mId)
  {
    final String METHOD_NAME = "xxcrm.asn.common.customer.server.ODOrgUpdateAMImpl.removeSalesTeamMembers";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      StringBuffer buf = new StringBuffer();
      buf.append("Input Parameters: sales Team Member Id = ");
      buf.append(mId);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
    }

    int poToDelete = 0;
    try
    {
      poToDelete = Integer.parseInt(mId);
    }
    catch(NumberFormatException nfe)
    {
          MessageToken[] tokens = { new MessageToken("OBJECT_NAME", mId) };
      throw new OAException("ASN","ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
    }

    ODCustomerAccessesVOImpl vo = getODCustomerAccessesVO();

    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("OBJECT_NAME", "ODCustomerAccessesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.reset();  // be sure to start on the first row
    ODCustomerAccessesVORowImpl row = null;

    int fetchedRowCount = vo.getFetchedRowCount();

    for (int i = 0; i < fetchedRowCount; i++)
    {
      row = (ODCustomerAccessesVORowImpl) vo.next();
      if(row != null)
      {
        Number primaryKey = row.getAccessId();
        if(primaryKey == null)
        {
           primaryKey = new Number(0);
        }

        if (primaryKey.compareTo(poToDelete) == 0)
        {
          row.remove();
          break;
        }
      }
    }
    if (isProcLogEnabled) {
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   *
   * init sales team query
   * @param custId is the customer ID
   */
  public void initSalesTeamQuery(String custId)
  {
    final String METHOD_NAME = "xxcrm.asn.common.customer.server.ODOrgUpdateAMImpl.initSalesTeamQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      StringBuffer buf = new StringBuffer();
      buf.append("Input Parameters: custId = ");
      buf.append(custId);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);

    }

    ODCustomerAccessesVOImpl vo = getODCustomerAccessesVO();

    if(vo != null)
    {
      if(!vo.isPreparedForExecution())
      {
        vo.initQuery(custId);
      }
    }
    if (isProcLogEnabled) {
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   *
   * Method to initialize the parameters required for tca to achieve subtab PPR.
   */
public void initSubtabPPRParameters(String customerId)
{

    final String METHOD_NAME = "xxcrm.asn.common.customer.server.ODOrgUpdateAMImpl.initSubtabPPRParameters";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      StringBuffer buf = new StringBuffer();
      buf.append("Input Parameters: customerId = ");
      buf.append(customerId);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
    }

    OrgUpdatePPRTransVOImpl vo = getOrgUpdatePPRTransVO();

    if (vo == null)
    {
      MessageToken[] tokens = { new MessageToken("OBJECT_NAME", "OrgUpdatePPRTransVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    if (!vo.isPreparedForExecution())
    {
      vo.setMaxFetchSize(0);
      vo.insertRow(vo.createRow());
    }
    OrgUpdatePPRTransVORowImpl appRow = (OrgUpdatePPRTransVORowImpl) vo.first();
    if(appRow == null){
		vo.insertRow(vo.createRow());
		appRow = (OrgUpdatePPRTransVORowImpl) vo.first();
	}
    //put the paramters required for the profile subtab
    appRow.setAsnHzPuiOrgProfilePartyId(customerId);
    appRow.setAsnHzPuiOrgProfileEvent("UPDATE");
    appRow.setAsnHzPuiEmployeePartyId(customerId);
    appRow.setAsnHzPuiEmployeeInfoEvent("UPDATE");
    appRow.setAsnHzPuiTaxFinancialPartyId(customerId);
    appRow.setAsnHzPuiIncomeEvent("UPDATE");
    //put the parameters required for the addressbook subtab
    appRow.setAsnHzPuiAddressPartyId(customerId);
    appRow.setAsnHzPuiAddressEvent("ViewAddress");
    appRow.setAsnHzPuiOwnerTableId(customerId);
    appRow.setAsnHzPuiOwnerTableName("HZ_PARTIES");
    appRow.setAsnHzPuiCPPhoneTableEvent("UPDATE");
    appRow.setAsnHzPuiCPEmailTableEvent("UPDATE");
    appRow.setAsnHzPuiCPUrlTableEvent("UPDATE");
    //put the parameters required for the classification region
    appRow.setAsnHzPuiPartyId(customerId);
    //put the parameters required for the contact regions
    appRow.setAsnHzPuiContRelTableObjectPartyId(customerId);
    appRow.setAsnHzPuiContRelTableObjectPartyType("ORGANIZATION");
    appRow.setAsnHzPuiContRelTableMode("CURRENT");
    //put the parameters required for the relationships region
    appRow.setAsnHzPuiPartyRelTableObjectPartyId(customerId);
    appRow.setAsnHzPuiPartyRelTableObjectPartyType("ORGANIZATION");
    appRow.setAsnHzPuiPartyRelTableSubjectPartyType("ORGANIZATION");
    appRow.setAsnHzPuiPartyRelTableMode("CURRENT");

    if (isProcLogEnabled) {
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }
}//end of init subtab PPR

  /**
   *
   * Initializes the query for the customer actions poplist.
   *
   */
  public void initCustomerActionsQuery()
  {
    LookupsVOImpl vo = getLookupsVO();
    if (vo == null)
    {
        MessageToken[] tokens = { new MessageToken("NAME", "LookupsVO") };
        throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.initQuery("ASN_CUSTOMER_ACTIONS", "0");

  }//end of initCustomerActionsQuery

   /**
   * Loops thru and sets the  specified row of Sales Team view object as Current
   */
  public void refreshSalesteamDetailsRow()
  {
     // get view instance/object
    ODCustomerAccessesVOImpl customerAccessesVo = (ODCustomerAccessesVOImpl)findViewObject("ODCustomerAccessesVO");
    // Throw an error msg if Object doesnt exist.
    if(customerAccessesVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "ODCustomerAccessesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    if(customerAccessesVo!=null)
    {
      customerAccessesVo.reset();
      ODCustomerAccessesVORowImpl customerAccessesVoRow = (ODCustomerAccessesVORowImpl)customerAccessesVo.getCurrentRow();

      if(customerAccessesVoRow!=null)
      {
        customerAccessesVo.setCurrentRow(customerAccessesVoRow);
      }
      else
      {
        // Loop through the VO
        String salesteamSelectFlag = null;
        while(customerAccessesVo.hasNext())
        {
          customerAccessesVoRow = (ODCustomerAccessesVORowImpl)customerAccessesVo.next();
          if(customerAccessesVoRow!=null)
          {
            String salesteamSelect = (String)customerAccessesVoRow.getAttribute("SelectFlag");
            // Check to see which Row the User has selected
            if("Y".equals(salesteamSelect))
            {
              // Set the selected Row as Current Row and exit
              customerAccessesVo.setCurrentRow(customerAccessesVoRow);
              // Store the value Y into a temp variable to indicate there is a selected row
              salesteamSelectFlag = "Y";
              break;
            }
          }
        }
        if(!("Y".equals(salesteamSelectFlag)))
        {
          customerAccessesVo.setRowValidation(false);
          customerAccessesVo.reset();
          if(customerAccessesVo.hasNext())
          {
            // get the first row
            customerAccessesVoRow = (ODCustomerAccessesVORowImpl)customerAccessesVo.first();
            if(customerAccessesVoRow !=null)
            {
                    // set the first row as selected
              customerAccessesVoRow.setAttribute("SelectFlag", "Y");
            }
          }
        }
      }
    }
  }

  /**
   *
   * Following method checks whether Rows exists in the Sales Team Details VO or not
   */
  public Boolean rowExistsInSalesteamDetails()
  {
     // get view instance/object
    ODCustomerAccessesVOImpl customerAccessesVo = (ODCustomerAccessesVOImpl)findViewObject("ODCustomerAccessesVO");
    // Throw an error msg if Object doesnt exist.
    if(customerAccessesVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "ODCustomerAccessesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    if(customerAccessesVo!=null)
    {
        // Create a RowSetIterator on the VO Instance
        RowSetIterator customerAccessesItr = null;
        customerAccessesItr=customerAccessesVo.findRowSetIterator("SalesteamIterator");

        if(customerAccessesItr==null){
          customerAccessesItr = customerAccessesVo.createRowSetIterator("SalesteamIterator");
        }else{
          customerAccessesItr.reset();
        }

        if(customerAccessesItr!=null)
        {
          // check if any rows exist and If so, return True
          if(customerAccessesItr.hasNext())
          {
            // System.out.println("RowSetIterator Rows found");
            customerAccessesItr.closeRowSetIterator();
            return Boolean.TRUE;
          }
          else
          // return False as no rows exist
          {
            // System.out.println("RowSetIterator not  Rows found");
            customerAccessesItr.closeRowSetIterator();
            return Boolean.FALSE;
          }
        }
    }
    return Boolean.FALSE;
  }


  /**
   *
   * Container's getter for OrgUpdatePPRTransVO
   */
  public OrgUpdatePPRTransVOImpl getOrgUpdatePPRTransVO()
  {
    return (OrgUpdatePPRTransVOImpl)findViewObject("OrgUpdatePPRTransVO");
  }

  /**
   *
   * Container's getter for PartyVO
   */
  public PartyVOImpl getPartyVO()
  {
    return (PartyVOImpl)findViewObject("PartyVO");
  }

  /**
   *
   * Container's getter for LookupsVO
   */
  public LookupsVOImpl getLookupsVO()
  {
    return (LookupsVOImpl)findViewObject("LookupsVO");
  }

public ODWRFRefVOImpl getODWRFRefVO()
  {
    return (ODWRFRefVOImpl)findViewObject("ODWRFRefVO");
  }

}

