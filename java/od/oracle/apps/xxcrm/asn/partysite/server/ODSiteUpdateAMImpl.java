/*===========================================================================+
 |                       Office Depot - Project Simplify                     |
 |            Oracle NAIO/WIPRO/Office Depot/Consulting Organization         |
 +===========================================================================+
 |  FILENAME                                                                 |
 |             ODSiteUpdateAMImpl.java                                       |
 |                                                                           |
 |  DESCRIPTION                                                              |
 |     Application Module for Customer Site Update Page                      | 
 |                                                                           |
 |  NOTES                                                                    |
 |                                                                           |
 |                                                                           |
 |  DEPENDENCIES                                                             |
 |    No dependencies.                                                       |
 |                                                                           |
 |  HISTORY                                                                  |
 |                                                                           |
 |    01/OCT/2007 Sudeept Maharana   Created  / Generated                    |
 |    28/NOV/2007 Sathya Prabha      Added a check for Null Pointer exception|
 |                                   in the method "initQuery"               |
 |    19/DEC/2007 Jasmine Sujithra   Added VO for Attachments Region         |
 |    19/DEC/2007 Jayamohan          Issue on table range selection-127      |
 +===========================================================================*/
package od.oracle.apps.xxcrm.asn.partysite.server;
import com.sun.java.util.collections.HashMap;
import java.sql.SQLException;
import od.oracle.apps.xxcrm.asn.partysite.server.ODPartySitesAddrVOImpl;
import od.oracle.apps.xxcrm.asn.partysite.server.ODPartySitesAddrVORowImpl;
import od.oracle.apps.xxcrm.asn.partysite.server.ODSalesTeamVORowImpl;
import oracle.apps.asn.common.poplist.server.LookupsVOImpl;
import oracle.apps.asn.common.poplist.server.LookupsVORowImpl;
import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jdbc.driver.OracleCallableStatement;
import oracle.jdbc.driver.OracleConnection;
import od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;
//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODSiteUpdateAMImpl extends ODASNApplicationModuleImpl 
{

/**
 * This is the default constructor (do not remove)
 * generated in JDeveloper
 *
 * @return void
 */

  public ODSiteUpdateAMImpl()
  {
  }


/**
 * Sample main for debugging Business Components code using the tester.
 * generated in JDeveloper
 *  
 * @return void
 */
   
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxcrm.asn.partysite.server", "SiteUpdateAMLocal");
  }

/**
 * method to initialize and execute the queries in all VOs
 * 
 * @param  defaultPartyId      - party ID
 * @param  defaultPartySiteId  - party site ID
 * @return void
 * @throws SQLException - during conversion of String to Number
 */

  public void initQuery(String defaultPartyId, String defaultPartySiteId)
  {
  		final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.initQuery";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: defaultPartyId = ");
			buf.append(defaultPartyId);
			buf.append("Input Parameters: defaultPartySiteId = ");
			buf.append(defaultPartySiteId);
			
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}

		ODPartySitesAddrVOImpl vo=(ODPartySitesAddrVOImpl)getODPartySitesAddrVO1();
		vo.initQuery(defaultPartyId);
		
        dbTrx.writeDiagnostics(METHOD_NAME,"Number of Sites = "+vo.getRowCount(), OAFwkConstants.PROCEDURE);   
       

		try
		{
			ODPartySitesAddrVORowImpl row = (ODPartySitesAddrVORowImpl)vo.getFirstFilteredRow("PartySiteId",new Number(defaultPartySiteId));
			// To handle NPE the if condition is added - by Prabha.
			if (row != null)
			{
				row.setSelected("Y"); 
			}else
			{
			   row = (ODPartySitesAddrVORowImpl)vo.first();
			   if (row != null)
			   {
				row.setSelected("Y"); 
			   }
			}
			//End    
			

			/*VJ Added to fix the issue 127 in tracker to bring the range of the selected index*/
			row = (ODPartySitesAddrVORowImpl)vo.first();
			int index = 0;
			while (row != null)
			{
				if ("Y".equals(row.getSelected()))
				{
					break;
				}
				index ++;
				row = (ODPartySitesAddrVORowImpl)vo.next();
			}
			vo.setRangeStart(index - (index % 10));
			/*VJ Added to fix the issue 127 in tracker to bring the range of the selected index*/
			
		} catch(SQLException e)
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "SQLException in ODSiteUpdateAM.initQuery"+e, OAFwkConstants.PROCEDURE);
		};
    
		((ODTasksVOImpl)getODTasksVO1()).initQuery(defaultPartyId, defaultPartySiteId);
		((ODPhoneNumbersVOImpl)getODPhoneNumbersVO1()).initQuery(defaultPartySiteId);
		((ODSalesTeamVOImpl)getODSalesTeamVO1()).initQuery(defaultPartySiteId); 

    /* Jasmine - Added as a fix for Issue 176 */
    ODAttachPartySiteVOImpl attachpartysitevo = (ODAttachPartySiteVOImpl)getODAttachPartySiteVO();
    attachpartysitevo.initQuery(defaultPartyId, defaultPartySiteId);
   

		if (isProcLogEnabled) 
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
		}

  }

/**
 * method to determine the site name from party site id
 * 
 * @param  defaultPartySiteId  - party site ID
 * @return string - Party Site Name
 * @throws SQLException - during conversion of String to Number 
 */

  public String getSelectedPartySiteName(String partySiteId)
  {
  		final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.getSelectedPartySiteName";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: partySiteId = ");
			buf.append(partySiteId);
			
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}

		ODPartySitesAddrVOImpl vo=getODPartySitesAddrVO1();
		try
		{
			ODPartySitesAddrVORowImpl row=(ODPartySitesAddrVORowImpl)vo.getFirstFilteredRow("PartySiteId",new Number(partySiteId));
			return row.getPartySiteName();
		}
		catch ( SQLException e)
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "SQLException in ODSiteUpdateAM.getSelectedPartySiteName"+e, OAFwkConstants.PROCEDURE);
			if (isProcLogEnabled) 
			{
				dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
			}
			return " ";
			
		}
  }


/**
 * method to make a party site "inactive"
 * 
 * @param  defaultPartySiteId  - party site ID
 * @return none
 * @throws SQLException - during conversion of String to Number
 */

  public void makeInactive(String partySiteId)
  {
  		final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.makeInactive";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: partySiteId = ");
			buf.append(partySiteId);
			
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}


		try
		{
			(getODPartySitesAddrVO1()).makeInactive(new Number(partySiteId));
		}
		catch ( SQLException e)
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "SQLException in ODSiteUpdateAM.getSelectedPartySiteName"+e, OAFwkConstants.PROCEDURE);
			if (isProcLogEnabled) 
			{
				dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
			}
		}
    
  }


/**
 * method to delete task
 * 
 * @param  taskId  - task ID
 * @return none
 * @throws SQLException - during conversion of String to Number
 */

  public void deleteTask(String taskId)
  {
 		final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.deleteTask";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: taskId = ");
			buf.append(taskId);
			
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}
        
		
		try
        {
            ODTasksVOImpl vo = (ODTasksVOImpl)getODTasksVO1();
            ODTasksVORowImpl row = (ODTasksVORowImpl)vo.getFirstFilteredRow("TaskId",new Number(taskId));
            row.setDeletedFlag("Y"); 
            row.setViewvevd("VD");
            row.setUpdateueud("UD");
            row.setDeletededd("DD");
        }
		catch ( SQLException e)
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "SQLException in ODSiteUpdateAM.makeInactive"+e, OAFwkConstants.PROCEDURE);
			if (isProcLogEnabled) 
			{
				dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
			}
			
		}
    
  }  

/**
 * method to delete phone number
 * 
 * @param  contactId  - contact ID
 * @return none
 * @throws SQLException - during conversion of String to Number
 */

  public void deletePhone(String contactId)
  {

 		final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.deletePhone";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: contactId = ");
			buf.append(contactId);
			
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}

		try
		{
			ODPhoneNumbersVOImpl vo = (ODPhoneNumbersVOImpl)getODPhoneNumbersVO1();
			ODPhoneNumbersVORowImpl row = (ODPhoneNumbersVORowImpl)vo.getFirstFilteredRow("ContactPointId",new Number(contactId));
			row.remove();   
		}
		catch ( SQLException e)
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "SQLException in ODSiteUpdateAM.makeInactive"+e, OAFwkConstants.PROCEDURE);
			if (isProcLogEnabled) 
			{
				dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
			}
			
		}
    
    }  


/**
 * method to delete Sales Team entry
 * 
 * @param  TerritoryResourceID - Territory Resource ID ( custom security table )
 * @return none
 * @throws SQLException - during conversion of String to Number
 */

  public void deleteST(String TerritoryResourceID)
  {

  		final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.deleteST";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: TerritoryResourceID = ");
			buf.append(TerritoryResourceID);
			
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}
		try
		{

			ODSalesTeamVOImpl vo = (ODSalesTeamVOImpl)getODSalesTeamVO1();
			ODSalesTeamVORowImpl row = (ODSalesTeamVORowImpl)vo.getFirstFilteredRow("TerritoryResourceID",new Number(TerritoryResourceID));
			row.remove();   
		}
		catch ( SQLException e)
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "SQLException in ODSiteUpdateAM.getSelectedPartySiteName"+e, OAFwkConstants.PROCEDURE);
			if (isProcLogEnabled) 
			{
				dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
			}
		}
    
  }  


/**
 * method to rollback all operations
 * 
 * @return none
 */

  public void rollbackAll()
  {
  
  	final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.rollbackAll";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: none ");
			
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}
  
		(getOADBTransaction()).rollback();

		if (isProcLogEnabled) 
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
		}
		
  }


/**
 * method to commit all changes
 * 
 * @param  partySiteName - partySiteName
 * @return none
 * @throws OAException - Confirmation Message
 */

  public void commitAll(String partySiteName)
  {
  	final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.commitAll";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: partySiteName ");
			buf.append(partySiteName);
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}

		(getOADBTransaction()).commit();
    (getODTasksVO1()).executeQuery();

		MessageToken[] tokens = { new MessageToken("REQ_VAL", partySiteName)};

		if (isProcLogEnabled) 
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
		}
	  
		throw new OAException("XXCRM", "XX_SFA_051_CUST_SITE_APPLY", tokens, OAException.CONFIRMATION, null);

  }

/**
 * method to commit all changes
 * 
 * @return none
 */

  public void commitAll()
  {
  	final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.commitAll";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
		}

		(getOADBTransaction()).commit();
    (getODTasksVO1()).executeQuery();


		if (isProcLogEnabled) 
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
		}
  }



/**
 * method to get a handle to ODPartySitesAddrVO1
 * generated by JDeveloper
 */
  public ODPartySitesAddrVOImpl getODPartySitesAddrVO1()
  {
    return (ODPartySitesAddrVOImpl)findViewObject("ODPartySitesAddrVO1");
  }

/**
 * method to get a handle to ODSalesTeamVO1
 * generated by JDeveloper
 */
  public ODSalesTeamVOImpl getODSalesTeamVO1()
  {
    return (ODSalesTeamVOImpl)findViewObject("ODSalesTeamVO1");
  }

/**
 * method to get a handle to ODTasksVO1
 * generated by JDeveloper
 */
 public ODTasksVOImpl getODTasksVO1()
  {
    return (ODTasksVOImpl)findViewObject("ODTasksVO1");
  }

/**
 * method to get a handle to ODPhoneNumbersVO1
 * generated by JDeveloper
 */
  public ODPhoneNumbersVOImpl getODPhoneNumbersVO1()
  {
    return (ODPhoneNumbersVOImpl)findViewObject("ODPhoneNumbersVO1");
  }

/**
 * method to initialize Actions Poplist
 * 
 * @throws OAException - Confirmation Message
 */
  public void initCustomerActionsQuery()
  {
  	final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.initCustomerActionsQuery";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: none");
			
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}


		LookupsVOImpl vo = (LookupsVOImpl)getODActionsPoplistVO1();
        
		if(vo == null)
        {
            MessageToken amessagetoken[] = {
                new MessageToken("NAME", "LookupsVO")
            };
			if (isProcLogEnabled) 
			{
				dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
			}
			
            throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", amessagetoken);
        } else
        {
            vo.initQuery("XX_ASN_SITE_ACTIONS", "0");
            LookupsVORowImpl row = (LookupsVORowImpl)vo.first();            
            row = (LookupsVORowImpl)vo.next();            
			if (isProcLogEnabled) 
			{
				dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
			}
			
        }
    }

/**
 * method to initialize Address Book Types
 * 
 * @throws OAException - Confirmation Message
 */
  public void initAddrBkTypes()
  {

  	final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.initAddrBkTypes";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: none");
			
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}
	
		LookupsVOImpl vo = (LookupsVOImpl)getODAddrBkTypePoplistVO1();
        if(vo == null)
        {
            MessageToken amessagetoken[] = {
                new MessageToken("NAME", "LookupsVO")
            };
			if (isProcLogEnabled) 
			{
				dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
			}
			
            throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", amessagetoken);
        } else
        {
            vo.initQuery("XX_ASN_ADDR_BK_TYPES", "0");

            LookupsVORowImpl row = (LookupsVORowImpl)vo.first();            
            row = (LookupsVORowImpl)vo.next();            
			if (isProcLogEnabled) 
			{
				dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
			}
        }
    }


/**
 * method to add rows to Tasks Region
 * 
 * @param  tableRows - table rows
 * @param  custId      - partyId
 * @param  addrId     - party Site Id
 * @param  ouId        - Org Id
 * @return none
 * @throws OAException - Confirmation Message
 */
  public void addMoreRows(String tableRows , String custId , String addrId, String ouId)
  {
   	final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.addMoreRows";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: tableRows");
			buf.append(tableRows);
			buf.append("Input Parameters: custId");
			buf.append(custId);
			buf.append("Input Parameters: addrId");
			buf.append(addrId);
			buf.append("Input Parameters: ouId");
			buf.append(ouId);
			
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}

		ODTasksVOImpl vo = (ODTasksVOImpl)getODTasksVO1();
		HashMap hashMap = getDefaultOwner();
		if (vo != null)
		{
			Row lastRow = vo.last();
			vo.setCurrentRow(lastRow);
			int lastRowIndex = vo.getCurrentRowIndex();
			int range = vo.getRowCountInRange();
          
			for (int i= range ; i < range  +1 ; i++)
			{
				// Create new  row
				ODTasksVORowImpl row = (ODTasksVORowImpl)vo.createNewRow(custId , addrId, ouId,hashMap);
				vo.insertRowAtRangeIndex(i , row);  // inserts the row at the i th position in the VO
				vo.setRangeSize(i + 1);
			}
		}
		if (isProcLogEnabled) 
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
		}

  }

  /**
   * 
   * Container's getter for ODAccessRightPVO1
   */
  public ODAccessRightPVOImpl getODAccessRightPVO1()
  {
    return (ODAccessRightPVOImpl)findViewObject("ODAccessRightPVO1");
  }

/**
 * method to set all the updateable fields to readonly = true and set rendered = false
*/
public void setReadOnly()
{
   	final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.setReadOnly";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: none");
			
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}


		ODAccessRightPVOImpl pvo = (ODAccessRightPVOImpl)getODAccessRightPVO1();
		pvo.setMaxFetchSize(0) ;

		ODAccessRightPVORowImpl pvoRow = ( ODAccessRightPVORowImpl)pvo.createRow();

		pvo.insertRow(pvoRow);

		pvoRow.setReadOnly(Boolean.TRUE );
		pvoRow.setRendered(Boolean.FALSE );

		if (isProcLogEnabled) 
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
		}
 
}

/**
 * method to set all the updateable fields to readonly = false and set rendered = true
*/
public void setUpdate()
{
   	final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.partysite.server.ODSiteUpdateAMImpl.setReadOnly";
		OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
		boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
		if (isProcLogEnabled)  
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
			StringBuffer buf = new StringBuffer();
			buf.append("Input Parameters: none");
			
			dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
		}
  
		ODAccessRightPVOImpl pvo = (ODAccessRightPVOImpl)getODAccessRightPVO1();
		pvo.setMaxFetchSize(0) ;
		ODAccessRightPVORowImpl pvoRow = ( ODAccessRightPVORowImpl)pvo.createRow();

		pvo.insertRow(pvoRow);

		pvoRow.setReadOnly(Boolean.FALSE );
		pvoRow.setRendered(Boolean.TRUE );

		if (isProcLogEnabled) 
		{
			dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
		}
 
}


  /**
   * 
   * Container's getter for ODAddrBkTypePoplistVO1
   */
  public LookupsVOImpl getODAddrBkTypePoplistVO1()
  {
    return (LookupsVOImpl)findViewObject("ODAddrBkTypePoplistVO1");
  }

  /**
   * 
   * Container's getter for ODActionsPoplistVO1
   */
  public LookupsVOImpl getODActionsPoplistVO1()
  {
    return (LookupsVOImpl)findViewObject("ODActionsPoplistVO1");
  }

/**
 * method to determine the Owner
 * copied from seeded code
 * @return  Hashmap
  */  
    public HashMap getDefaultOwner()
    {
        OADBTransaction oadbtransaction = getOADBTransaction();
        OracleConnection oracleconnection = (OracleConnection)oadbtransaction.getJdbcConnection();
        OracleCallableStatement oraclecallablestatement = null;
        try
        {
            oraclecallablestatement = (OracleCallableStatement)oracleconnection.prepareCall("BEGIN JTF_TASK_UTL.get_default_owner (x_owner_type_code      => :1,x_owner_id   " +
			"          => :2,x_owner_type_code_name => :3,x_owner_name           => :4,x_retu" +
			"rn_status        => :5); END;");

            oraclecallablestatement.registerOutParameter(1, 12, 0, 30);
            oraclecallablestatement.registerOutParameter(2, 2, 15, 0);
            oraclecallablestatement.registerOutParameter(3, 12, 0, 80);
            oraclecallablestatement.registerOutParameter(4, 12, 0, 80);
            oraclecallablestatement.registerOutParameter(5, 12, 0, 1);
            oraclecallablestatement.execute();

            if(!"S".equals(oraclecallablestatement.getString(5)))
            {
                throw new OAException("JTF", "JTF_TASK_INVALID_DEFAULT_OWNER", null, (byte)0, null);
            }

            HashMap hashmap1 = new HashMap(4);
            String s = oraclecallablestatement.getString(1);
            Number number = new Number(oraclecallablestatement.getNUMBER(2).intValue());
            String s1 = oraclecallablestatement.getString(3);
            String s2 = oraclecallablestatement.getString(4);
            hashmap1.put("OwnerTypeCode", s);
            hashmap1.put("OwnerId", number);
            hashmap1.put("OwnerTypeCodeName", s1);
            hashmap1.put("OwnerName", s2);
            if(oadbtransaction.isLoggingEnabled(1))
            {
                oadbtransaction.writeDiagnostics(this, "TaskEntityExpert.getDefaultOwner(): Default task owner data: " + hashmap1, 1);
            }
            HashMap hashmap = hashmap1;
            return hashmap;
        }
        catch(Exception exception1)
        {
            if(oadbtransaction.isLoggingEnabled(4))
            {
                oadbtransaction.writeDiagnostics(this, "TaskEntityExpert.getDefaultOwner(): API exception - Message:" + exception1.getMessage(), 4);
            }
            throw OAException.wrapperException(exception1);
        }
        finally
        {
            try
            {
                if(oraclecallablestatement != null)
                {
                    oraclecallablestatement.close();
                }
            }
            catch(Exception exception2)
            {
                if(oadbtransaction.isLoggingEnabled(4))
                {
                    oadbtransaction.writeDiagnostics(this, "TaskEntityExpert.getDefaultOwner(): Cannot close an open OracleCallableStatement" +
					": " + oraclecallablestatement + ", Message:" + exception2.getMessage(), 4);
                }
            }
        }
    }

  /**
   * 
   * Container's getter for ODOwnerTypePoplistVO1
   */
  public OAViewObjectImpl getODOwnerTypePoplistVO1()
  {
    return (OAViewObjectImpl)findViewObject("ODOwnerTypePoplistVO1");
  }

  /**
   * 
   * Container's getter for ODAttachPartySiteVO
   */
  public ODAttachPartySiteVOImpl getODAttachPartySiteVO()
  {
    return (ODAttachPartySiteVOImpl)findViewObject("ODAttachPartySiteVO");
  }



    
}