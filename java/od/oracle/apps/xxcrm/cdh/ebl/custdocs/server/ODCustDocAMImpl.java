package od.oracle.apps.xxcrm.cdh.ebl.custdocs.server;

/*
-- +===========================================================================+
  -- |                  Office Depot - eBilling Project                          |
  -- |                         WIPRO/Office Depot                                |
  -- +===========================================================================+
  -- | Name        : ODCustDocAMImpl                                         |
  -- | Description :                                                             |
  -- |        |
  -- |                                                                           |
  -- |                                                                           |
  -- |                                                                           |
  -- |Change Record:                                                             |
  -- |===============                                                            |
  -- |Version  Date        Author        Remarks                                 |
  -- |======== =========== ============= ========================================|
  -- |DRAFT 1A 24-FEB-2010 Vasan S        Initial draft version                   |
  -- |2.0      16-FEB-2017 Havish K       Closing the leaked connection/statement |
  -- |3.0      13-Nov-2018 Reddy Sekhar K Code Added for Req# NAIT-61952 & 66520 |
  -- |4.0      04-May-2020 Divyansh Saini Code added for NAIT-129167                                                                           |
  -- |===========================================================================|
  -- | Subversion Info:                                                          |
  -- | $HeadURL$                                                               |
  -- | $Rev$                                                                   |
  -- | $Date$                                                                  |
  -- |                                                                           |
  -- +===========================================================================+
*/


import java.sql.PreparedStatement;

import od.oracle.apps.xxcrm.cdh.ebl.poplist.server.ODEBillDelyMethodInvoicePVOImpl;
import od.oracle.apps.xxcrm.cdh.ebl.poplist.server.ODEBillDelyMethodPVOImpl;

import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import od.oracle.apps.xxcrm.cdh.ebl.poplist.server.ODEBillComboPVOImpl;
import od.oracle.apps.xxcrm.cdh.ebl.poplist.server.ODEBillCharYesNoImpl;
import od.oracle.apps.xxcrm.cdh.ebl.poplist.server.ODEBillNumYesNoPVOImpl;

import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.OARow;


import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.domain.Number;
import oracle.apps.fnd.framework.server.OADBTransaction;
import java.sql.SQLException;
import oracle.jdbc.OracleCallableStatement;
import oracle.jbo.domain.Date;
import java.sql.Types;
import java.sql.ResultSet;
import oracle.apps.fnd.framework.OAException;

import od.oracle.apps.xxcrm.cdh.ebl.server.ODUtil;
import od.oracle.apps.xxcrm.cdh.ebl.poplist.server.ODEBillPaymentFreqPVOImpl;

import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.webui.beans.message.OAMessageChoiceBean;
import oracle.jbo.RowSetIterator;

//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODCustDocAMImpl extends OAApplicationModuleImpl {
  /**
   * 
   * This is the default constructor (do not remove)
   */
  public ODCustDocAMImpl()
  {
  }


  /**
   * 
   * Container's getter for ODEBillDocStatusPVO
   */
  public OAViewObjectImpl getODEBillDocStatusPVO()
  {
    return (OAViewObjectImpl)findViewObject("ODEBillDocStatusPVO");
  }


    /**
     * 
     * Container's getter for ODEBillComboPVO
     */
  public ODEBillComboPVOImpl getODEBillComboPVO()
  {
    return (ODEBillComboPVOImpl)findViewObject("ODEBillComboPVO");
  }

  /**
   * 
   * Container's getter for ODEBillCharYesNo
   */
  public ODEBillCharYesNoImpl getODEBillCharYesNo()
  {
    return (ODEBillCharYesNoImpl)findViewObject("ODEBillCharYesNo");
  }

  /**
   * 
   * Container's getter for ODEBillNumYesNoPVO
   */
  public ODEBillNumYesNoPVOImpl getODEBillNumYesNoPVO()
  {
    return (ODEBillNumYesNoPVOImpl)findViewObject("ODEBillNumYesNoPVO");
  }




  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxcrm.cdh.ebl.custdocs.server", "ODCustDocAMLocal");
  }

  /**
   * Custom Code to handle events from Controller
   * 
   */

  /**
   * OverLoaded method to calculateEffective Date
   * Call to Fin Database packag to get the Effective Date.
   * 
   */
  public Date calculateEffDate(String payTerm,String invDate)
  {
    Date effDt =  new Date(invDate);
    return calculateEffDate(payTerm,effDt);
  }

  /**
   * OverLoaded method to calculateEffective Date
   * Call to Fin Database packag to get the Effective Date.
   * 
   */ 
  public Date calculateEffDate(String payTerm,Date invDate)
  {
      //OAApplicationModule am=(OAApplicationModule)getApplicationModule()
      ODUtil utl = new ODUtil(this);
      //Date effDate;
      String effDate=null;
      utl.log("ODEBillCustDocVO :Begin calculateEffDate");
      OracleCallableStatement ocs=null;
      OADBTransaction db=this.getOADBTransaction();
      String stmt = "BEGIN :1 := XX_AR_INV_FREQ_PKG.COMPUTE_EFFECTIVE_DATE(:2,:3); END;";
      utl.log("calculateEffDate:"+ stmt);
      ocs = (OracleCallableStatement)db.createCallableStatement(stmt,1);

      try
      {
        ocs.registerOutParameter(1,Types.DATE);
        ocs.setString(2,payTerm);
        ocs.setDATE(3,invDate);   
        ocs.execute();
        effDate = ocs.getDate(1).toString();
        ocs.close();
      }
      catch(SQLException e)
      {
        utl.log("calculateEffDate:Error:"+ e.toString());
      }
      catch(Exception e)
      {
        utl.log("calculateEffDate:Error:"+ e.toString());
        throw new OAException("XXCRM","XXOD_EBL_INVALID_PAY_TERM");
      }
	  finally
        {
           try{
                if(ocs != null)
                   ocs.close();
              }
		   catch(Exception e){}
        }

      utl.log("calculateEffDate:"+ effDate);
      utl.log("ODEBillCustDocVO :End calculateEffDate");
      Date xd=new Date(effDate);
      return xd;
  }//calculateEffDate

   /**
    * Added by Divyansh for NAIT-129167
    *
    */
    public Boolean checkDelMethod(String doctype,String delmethod)
    {
       ODUtil utl = new ODUtil(this);
       Integer num =0;
       OADBTransaction db = this.getOADBTransaction();
       String query = "SELECT DECODE(count(0),0,1,0)" +
                               "FROM xx_fin_translatedefinition xft,\n" + 
                               "     xx_fin_translatevalues xftv\n" + 
                               "WHERE xft.translate_id = xftv.translate_id\n" + 
                               "AND xftv.ENABLED_FLAG = 'Y'\n" + 
                               "AND sysdate between xftv.START_DATE_ACTIVE and  NVL(xftv.END_DATE_ACTIVE,sysdate+1)\n" + 
                               "AND xft.translation_name = 'OD_IREC_BILL_DOC_DEFAULTS'\n"+
                               "AND NVL(Source_value3,'"+doctype+"') = '"+doctype+"'" +
                               "AND Source_value2 = '"+delmethod+"' ";
       PreparedStatement stmt = db.createPreparedStatement(query,1);
        try {
            ResultSet rset = stmt.executeQuery();
            while(rset.next())
            {
               num = rset.getInt(1);
            }
            
        } catch (SQLException e) {
             utl.log("getDefaultFee:Error:"+ e.toString());
        }
        return num==1;
    }
  /**
   * Added by Divyansh for NAIT-129167
   *
   */
   public String getDefaultFee(String doctype,String delmethod)
   {
      ODUtil utl = new ODUtil(this);
      String retStr = null;
      OADBTransaction db = this.getOADBTransaction();
      String Feeoptstr = "SELECT xftv.TARGET_VALUE1\n" + 
                       "FROM xx_fin_translatedefinition xft,\n" + 
                       "     xx_fin_translatevalues xftv\n" + 
                       "WHERE xft.translate_id = xftv.translate_id\n" + 
                       "AND xftv.ENABLED_FLAG = 'Y'\n" + 
                       "AND sysdate between xftv.START_DATE_ACTIVE and  NVL(xftv.END_DATE_ACTIVE,sysdate+1)\n" + 
                       "AND xft.translation_name = 'OD_IREC_BILL_DOC_DEFAULTS'\n"+
                       "AND NVL(Source_value3,'"+doctype+"') = '"+doctype+"'" +
                       "AND Source_value2 = '"+delmethod+"' " +
                       "AND upper(target_value2)= 'YES'AND rownum =1";
      PreparedStatement stmt = db.createPreparedStatement(Feeoptstr,1);

        try {
            ResultSet rset=stmt.executeQuery();
            if (rset.next())
            {
               retStr =rset.getString(1);
            }
            
        } catch (SQLException e) {
             utl.log("getDefaultFee:Error:"+ e.toString());
        }
        return retStr;
    }
    /**
     * Added by Divyansh for NAIT-129167
     *
     */
     public String ValidateFeeOption(String doctype,String delmethod,String Feeopt)
     {
        ODUtil utl = new ODUtil(this);
        String retStr = null;
        OADBTransaction db = this.getOADBTransaction();
          String Feeoptstr = null;
        if (("").equals(Feeopt)|| Feeopt==null)
        {
            System.out.println(" for doctype "+doctype +" inside feopt null");
             Feeoptstr = "SELECT decode(count(0),0,1,0)\n" + 
                             "FROM xx_fin_translatedefinition xft,\n" + 
                             "     xx_fin_translatevalues xftv\n" + 
                             "WHERE xft.translate_id = xftv.translate_id\n" + 
                             "AND xftv.ENABLED_FLAG = 'Y'\n" + 
                             "AND sysdate between xftv.START_DATE_ACTIVE and  NVL(xftv.END_DATE_ACTIVE,sysdate+1)\n" + 
                             "AND xft.translation_name = 'OD_IREC_BILL_DOC_DEFAULTS'\n"+
                             "AND NVL(Source_value3,'"+doctype+"') = '"+doctype+"'" +
                             "AND Source_value2 = '"+delmethod+"' ";
        }
        else 
        { 
            System.out.println(" for doctype "+doctype +" inside feopt not null");
              Feeoptstr = "SELECT count(0)\n" + 
                         "FROM xx_fin_translatedefinition xft,\n" + 
                         "     xx_fin_translatevalues xftv\n" + 
                         "WHERE xft.translate_id = xftv.translate_id\n" + 
                         "AND xftv.ENABLED_FLAG = 'Y'\n" + 
                         "AND sysdate between xftv.START_DATE_ACTIVE and  NVL(xftv.END_DATE_ACTIVE,sysdate+1)\n" + 
                         "AND xft.translation_name = 'OD_IREC_BILL_DOC_DEFAULTS'\n"+
                         "AND NVL(Source_value3,'"+doctype+"') = '"+doctype+"'" +
                         "AND Source_value2 = '"+delmethod+"' " +
                         "AND xftv.SOURCE_VALUE1= '"+Feeopt+"'";
        }
        PreparedStatement stmt = db.createPreparedStatement(Feeoptstr,1);

          try {
              ResultSet rset=stmt.executeQuery();
              if (rset.next())
              {
                 retStr =rset.getString(1);
              }
              
          } catch (SQLException e) {
               utl.log("getDefaultFee:Error:"+ e.toString());
          }
          return retStr;
      }
    /**
     * execQuery to return Number
     * Generic method to execute count(1) query
     * @param pQuery -Query string as parameter
     */

  public Number execQuery(String pQuery)
  {
      ODUtil utl = new ODUtil(this);
      utl.log("execQuery :Begin execQuery");
      OracleCallableStatement ocs=null;
      ResultSet rs=null;
      OADBTransaction db=this.getOADBTransaction();
      String stmt = pQuery;
      Object obj = (Object)new String("NODATA");
      Number val=new Number(0);
      //utl.log("execQuery:"+ stmt);
      ocs = (OracleCallableStatement)db.createCallableStatement(stmt,1);

      try
      {
        rs = ocs.executeQuery();
        if (rs.next())
        {
          val = new Number(rs.getLong(1));
        }
        rs.close();
        ocs.close();
      }
      catch(SQLException e)
      {
        utl.log("execQuery:Error:"+ e.toString());
      }
	  finally
        {
           try{
                if(rs != null)
                   rs.close();
                if(ocs != null)
                   ocs.close();
              }
		   catch(Exception e){}
        }
      utl.log("execQuery :End execQuery");
      return val;
  }//execQuery

  /**
   * execStrQuery to return Text
   * Generic method to execute flag query
   * @param pQuery -Query string as parameter
   */
  public String execStrQuery(String pQuery)
  {
      ODUtil utl = new ODUtil(this);
      utl.log("execQuery :Begin execQuery");
      OracleCallableStatement ocs=null;
      ResultSet rs=null;
      OADBTransaction db=this.getOADBTransaction();
      String stmt = pQuery;
      String rStr=null;
      //utl.log("execQuery:"+ stmt);
      ocs = (OracleCallableStatement)db.createCallableStatement(stmt,1);

      try
      {
        rs = ocs.executeQuery();
        if (rs.next())
        {
          rStr = rs.getString(1);
        }
        rs.close();
        ocs.close();
      }
      catch(SQLException e)
      {
        utl.log("execQuery:Error:"+ e.toString());
      }
	  finally
        {
           try{
                if(rs != null)
                   rs.close();
                if(ocs != null)
                   ocs.close();
              }
		   catch(Exception e){}
        }
      utl.log("execQuery :End execQuery");
      return rStr;
  }//execStrQuery


  /**
   * addRow to handle PPR event to add a new row in VO/Region
   */

  public void addRow(String CustAccountId,String payTerm,String curdate)
  {
    ODUtil utl = new ODUtil(this);
    utl.log("ODEBillAMImpl:Inside AddRow PPR"+CustAccountId+" PayTerm:"+payTerm);
      
    OADBTransaction transaction = this.getOADBTransaction();
    Number extnId = transaction.getSequenceValue("EGO_EXTFWK_S");
    Number custDocID = transaction.getSequenceValue("XX_CDH_CUST_DOC_ID_S");


    utl.log("ODEBillAMImpl:Before Query parsing");

    String lqry="SELECT attr_group_id "
               +" FROM   ego_attr_groups_v"
               +" WHERE  attr_group_type = 'XX_CDH_CUST_ACCOUNT'"
               +" AND    attr_group_name = 'BILLDOCS'";
    //utl.log("ODEBillDocumentsCO:Query:"+lqry);
        
    Number attrGrpID = this.execQuery(lqry);
    
     String FeeOpt = this.getDefaultFee("Invoice","ePDF");
    
    utl.log("ODEBillAMImpl:Attribute Group id:"+attrGrpID.toString());

    OAViewObject CustDocVO = (OAViewObject) this.findViewObject("ODEbillCustDocVO");
    CustDocVO.executeQuery();
    if (CustDocVO!=null)
    {
      CustDocVO.last();
      CustDocVO.next();
      //String payTerm = pageContext.getProfile("XXOD_EBL_DEFAULT_PAYTERM");
      OARow cdRow = (OARow)CustDocVO.createRow();
      cdRow.setAttribute("CustAccountId",CustAccountId);
      cdRow.setAttribute("ExtensionId",extnId);
      cdRow.setAttribute("NExtAttr2",custDocID);
      //PayTerm Defaulting commented as per Request from Users.
      //cdRow.setAttribute("CExtAttr14",payTerm);
      //Set Other Related Values of Payment Term here
      //populatePayTerm(payTerm,cdRow);
      //payment term dependent values end
      cdRow.setAttribute("AttrGroupId",attrGrpID);
      cdRow.setAttribute("CExtAttr16","IN_PROCESS");
      cdRow.setAttribute("Supusr",Boolean.TRUE);
      cdRow.setAttribute("Intrecstatus","NEW");
      Date curdt = new Date(curdate);
      cdRow.setAttribute("DExtAttr9",curdt);
      cdRow.setAttribute("NExtAttr16",new Number(0));
      cdRow.setAttribute("NExtAttr17",new Number(0));
      cdRow.setAttribute("CExtAttr3","ePDF");
      cdRow.setAttribute("NExtAttr1",new Number(10000));
      cdRow.setAttribute("CExtAttr1","Invoice");
      cdRow.setAttribute("Deliverymethod","Case2");
      //cdRow.setAttribute("CExtAttr3","eTXT");
      cdRow.setAttribute("CExtAttr7","Y"); //Direct Flag
      cdRow.setAttribute("NExtAttr19",new Number(0));
      cdRow.setAttribute("Supusrend",Boolean.TRUE);
      cdRow.setAttribute("BcPodFlag","N");//Added By Reddy Sekhar K on 13 Oct 2018 for the Req# NAIT-61952 & 66520 
      cdRow.setAttribute("FeeOption",FeeOpt); // Added by Divyansh for NAIT-129167
       
       CustDocVO.insertRow(cdRow);
      cdRow.setNewRowState(cdRow.STATUS_INITIALIZED); 
      //Defect#40073 Bhagwan Rao  7March2017
       //String docType=cdRow.getAttribute("CExtAttr1")+ "";     
          } 
    
    
  }//addRow

 

   
  /**
   * populatePayTerm to handle PPR event to add a new row in VO/Region
   * When Payment term is defaulted/modified by program, we can call this 
   * method to default associated values.
   */
  public void populatePayTerm(String payTerm,OARow cdRow)
  {
      ODUtil utl = new ODUtil(this);
      utl.log("populatePayTerm :Begin execQuery");
      OracleCallableStatement ocs=null;
      ResultSet rs=null;
      OADBTransaction db=this.getOADBTransaction();
      String stmt = "SELECT TERM_ID,ATTRIBUTE1,ATTRIBUTE2,ATTRIBUTE5"
                  + " FROM RA_TERMS "
                  + " WHERE NAME= :1";
      Number val=new Number(0);
      //utl.log("execQuery:"+ stmt);
      ocs = (OracleCallableStatement)db.createCallableStatement(stmt,1);

      try
      {
        ocs.setString(1,payTerm);
        rs = ocs.executeQuery();
        if (rs.next())
        {
          cdRow.setAttribute("NExtAttr18",new Number(rs.getLong(1)));
          cdRow.setAttribute("Frequency",rs.getString(2));
          cdRow.setAttribute("ReportDay",rs.getString(3));
          cdRow.setAttribute("PayTerm",rs.getString(4));
        }
        rs.close();
        ocs.close();
      }
      catch(SQLException e)
      {
        utl.log("populatePayTerm:Error:"+ e.toString());
      }
	  finally
        {
           try{
                if(rs != null)
                   rs.close();
                if(ocs != null)
                   ocs.close();
              }
		   catch(Exception e){}
        }
      utl.log("populatePayTerm :End populatePayTerm");
  }//populatePayTerm

  /**
   * populateCustDoc to copy cust document from parent customer document.
   * Optomized for Performance. 
   * Called during save, when Parent Doc Id is modified.
   */

  public void populateCustDoc(String pCustDocID,String pAttrGrpId,String pCurCustdoc,String pParCustAccId)
  {
      ODUtil utl = new ODUtil(this);
      utl.log("populateCustDoc :Begin");
      OracleCallableStatement ocs=null;
      ResultSet rs=null;
      OADBTransaction db=this.getOADBTransaction();
      String stmt = "select * from XX_CDH_CUST_ACCT_EXT_B "
                  + " WHERE attr_group_id=:1 "
                  + " and n_ext_attr2= :2"
                  +"  and cust_account_id=nvl(:3,cust_account_id)";
    
      OAViewObject CustDocVO = (OAViewObject) this.findViewObject("ODEbillCustDocVO");
      ocs = (OracleCallableStatement)db.createCallableStatement(stmt,1);

      try
      {
        Number attrGrpID    = new Number(pAttrGrpId);
        Number parCustDoc   = new Number(pCustDocID);
        Number CurCustdoc   = new Number(pCurCustdoc);
        Number ParCustAccId = new Number(pParCustAccId);
        ocs.setNUMBER(1,attrGrpID);
        ocs.setNUMBER(2,parCustDoc);
        ocs.setNUMBER(3,ParCustAccId);
        
        rs = ocs.executeQuery();
        if (rs.next())
        {
           //utl.log("populateCustDoc :Inside result set. copy logic to go here");
           //utl.log("populateCustDoc :Payment Term "+rs.getString("C_EXT_ATTR14"));
           //utl.log("populateCustDoc :Spl handling "+rs.getString("C_EXT_ATTR4"));
           //utl.log("populateCustDoc :Combo Type   "+rs.getString("C_EXT_ATTR13"));
           //utl.log("populateCustDoc :Mbs doc ID   "+rs.getLong("N_EXT_ATTR1"));
           //utl.log("populateCustDoc :Doc Type     "+rs.getString("C_EXT_ATTR1"));
           //utl.log("populateCustDoc :Pay Doc      "+rs.getString("C_EXT_ATTR2"));
           //utl.log("populateCustDoc :Delivery Mtd "+rs.getString("C_EXT_ATTR3"));
           //utl.log("populateCustDoc :Mail Attn    "+rs.getString("C_EXT_ATTR15"));
           //utl.log("copyCustDoc :Eff From Date"+rs.getDate("D_EXT_ATTR1").toString());
           //utl.log("copyCustDoc :Eff To Date  "+rs.getDate("D_EXT_ATTR2").toString());
           //utl.log("copyCustDoc :Req From Date"+rs.getDate("D_EXT_ATTR9").toString());
           //utl.log("copyCustDoc :Req To Date  "+rs.getDate("D_EXT_ATTR10").toString());
           utl.log("populateCustDoc :Set Attribute Begin");
           OARow curRow = (OARow)CustDocVO.getFirstFilteredRow("NExtAttr2",CurCustdoc);
           //Payment Term
           curRow.setAttribute("CExtAttr14",rs.getString("C_EXT_ATTR14")); //Pay Term
           curRow.setAttribute("CExtAttr4",rs.getString("C_EXT_ATTR4"));   //Spl handling
           curRow.setAttribute("CExtAttr13",rs.getString("C_EXT_ATTR13")); //Combo Type
           curRow.setAttribute("CExtAttr1",rs.getString("C_EXT_ATTR1"));   //Doc Type
           curRow.setAttribute("CExtAttr2",rs.getString("C_EXT_ATTR2"));  //Pay Doc Ind
           curRow.setAttribute("CExtAttr7",rs.getString("C_EXT_ATTR7")); //Direct Flag
           curRow.setAttribute("CExtAttr3",rs.getString("C_EXT_ATTR3")); //Delivery Method
           curRow.setAttribute("CExtAttr15",rs.getString("C_EXT_ATTR15")); //Mail Attention
           //Send to Parent
           curRow.setAttribute("NExtAttr16",new Number(1)); 
           //Term ID
           curRow.setAttribute("NExtAttr18",new Number(rs.getLong("N_EXT_ATTR18")));
           curRow.setAttribute("NExtAttr1",new Number(rs.getLong("N_EXT_ATTR1"))); //MBS Doc ID
           //curRow.setAttribute("DExtAttr1",new Date(rs.getDate("D_EXT_ATTR1")));
           //curRow.setAttribute("DExtAttr9",new Date(rs.getDate("D_EXT_ATTR9")));
           populatePayTerm(rs.getString("C_EXT_ATTR14"),curRow);
           //Process for Pay doc if parent is Pay doc
           Number custAcctId = (Number)curRow.getAttribute("CustAccountId");
           utl.log("populateCustDoc :Cust Account ID "+custAcctId.toString());
           utl.log("populateCustDoc :Cust Doc ID "+pCustDocID);
           if(rs.getString("C_EXT_ATTR2").equals("Y"))
             processPayDoc(pCurCustdoc,custAcctId.toString());
           //curRow.setAttribute("CExtAttr16","COMPLETE"); //Status

           utl.log("populateCustDoc :Set Attribute End");

        }
        rs.close();
        ocs.close();
      }
      catch(SQLException e)
      {
        utl.log("populateCustDoc:Error:"+ e.toString());
      }
      finally
        {
           try{
                if(rs != null)
                   rs.close();
                if(ocs != null)
                   ocs.close();
              }
		   catch(Exception e){}
        }
      utl.log("populateCustDoc :End");
  }//populateCustDoc

  /**
   * processPayDoc to endate existing pay doc and set start date for new pay doc.
   * Called database package to identify the old pay doc.
   * Called during save validation.
   */
  public void processPayDoc(String pCustDocId,String pCustAcctId)
  {
      //OAApplicationModule am=(OAApplicationModule)getApplicationModule()
      ODUtil utl = new ODUtil(this);
      //Date effDate;
      utl.log("ODEBillCustDocVO :Begin processPayDoc");
      long corCustDocId=0;
      long corCustDocId1=0;
      int procFlag=0;
      OAViewObject CustDocVO = (OAViewObject) this.findViewObject("ODEbillCustDocVO");
      
      OracleCallableStatement ocs=null;
      OADBTransaction db=this.getOADBTransaction();
      String stmt = "BEGIN XX_CDH_CUST_ACCT_EXT_W_PKG.COMPLETE_CUST_DOC("
                  + "p_doc_id => :1"
                  +",p_cust_acct_id => :2"
                  +",p_payment_term => :3"
			            +",p_doc_type     => :4"
			            +",p_direct_flag  => :5"
			            +",p_req_st_date  => :6"
			            +",p_combo_type   => :7"
			            +",p_update_flag  => :8"
			            +",x_process_flag => :9"
			            +",x_cust_doc_id  => :10"
                  +",x_cust_doc_id1 => :11"
                  +"); END;";
      utl.log("processPayDoc:"+ stmt);
      ocs = (OracleCallableStatement)db.createCallableStatement(stmt,1);

      try
      {
        Number custDocId = new Number(pCustDocId);
        Number custAcctId = new Number(pCustAcctId);
        OARow curRow = (OARow)CustDocVO.getFirstFilteredRow("NExtAttr2",custDocId);
        if (curRow==null) utl.log("Unable to find row with cust account"+custDocId);

        String payTerm = (String)curRow.getAttribute("CExtAttr14");
        Date reqDt     = (Date)curRow.getAttribute("DExtAttr9");
        //Commented to calculate date based on Old pay term and not the new one.
        //reqDt = calculateEffDate(payTerm,reqDt);
        ocs.registerOutParameter(9,Types.INTEGER);
        ocs.registerOutParameter(10,Types.DOUBLE);
        ocs.registerOutParameter(11,Types.DOUBLE);        
        ocs.registerOutParameter(3,Types.VARCHAR);        
        ocs.setNUMBER(1,custDocId);
        ocs.setNUMBER(2,custAcctId);
        ocs.setString(3,(String)curRow.getAttribute("CExtAttr14"));
        ocs.setString(4,(String)curRow.getAttribute("CExtAttr1"));
        ocs.setString(5,(String)curRow.getAttribute("CExtAttr7"));
        ocs.setDATE(6,(Date)curRow.getAttribute("DExtAttr9"));
        ocs.setString(7,(String)curRow.getAttribute("CExtAttr13"));
        ocs.setString(8,"N");
        ocs.execute();
        procFlag =ocs.getInt(9);
        corCustDocId = ocs.getLong(10);
        corCustDocId1= ocs.getLong(11);
        payTerm=ocs.getString(3);
        ocs.close();
        //Eff Date calculated based on End Dated pay doc pay term.
        /*Date curDate = (Date)Date.getCurrentDate();
        if ( curDate.compareTo(value)=0 )
        {
          reqDt=(Date)reqDt.addJulianDays(1,0);
        }*/
        if(corCustDocId1==-1)
        {
          throw new OAException("XXCRM","XXOD_EBL_COMBO_MISMATCH");
        }
        reqDt = calculateEffDate(payTerm,reqDt);
        Number nProcFlag=new Number(procFlag);

        
        curRow.setAttribute("NExtAttr19",nProcFlag);
        Date newStDate = new Date(reqDt);
        newStDate=(Date)newStDate.addJulianDays(1,0);
        curRow.setAttribute("DExtAttr1",newStDate);
      
        utl.log("processPayDoc:cust Doc ID "+ corCustDocId);
        utl.log("processPayDoc:cust Doc ID "+ corCustDocId1);
        //Going to corresponding pay doc to set end date
        if (corCustDocId!=0)
        {
          Number nCorCustDocId=new Number(corCustDocId);
          curRow = (OARow)CustDocVO.getFirstFilteredRow("NExtAttr2",nCorCustDocId);
          curRow.setAttribute("DExtAttr2",reqDt);       
          Boolean sup=(Boolean)curRow.getAttribute("Supusrend");
          //Disable End Date for super user, If End Date is NULL
          if(!sup.booleanValue())
            curRow.setAttribute("Supusrend",Boolean.FALSE);
        }
        if (corCustDocId1!=0)
        {
          Number nCorCustDocId1=new Number(corCustDocId1);
          curRow = (OARow)CustDocVO.getFirstFilteredRow("NExtAttr2",nCorCustDocId1);
          curRow.setAttribute("DExtAttr2",reqDt);
          Boolean sup=(Boolean)curRow.getAttribute("Supusrend");
          //Disable End Date for super user, If End Date is NULL
          if(!sup.booleanValue())
            curRow.setAttribute("Supusrend",Boolean.FALSE);
        }
      }
      catch(SQLException e)
      {
        utl.log("processPayDoc:Error:"+ e.toString());
        throw new OAException("AM-Process pay doc:"+e.toString(),OAException.ERROR);
      }
	  finally
        {
           try{
                if(ocs != null)
                   ocs.close();
              }
		   catch(Exception e){}
        }
      utl.log("ODEBillCustDocVO :End processPayDoc");

  }//processPayDoc

  /*
   * Unused at the moment. If any bug found, 
   * we might need to move validation to database package
   * This code piece comes handy at that point
   */
  /*
  public String validateCustDoc(String pCustAcctId)
  {
     int payDocCnt =0;
     int payDocId1 = 0;
     int payDocId2 = 0;
     String comboType = null;
     String consFlag = null;
     String errMsg = null;
     //OAViewObject CustDocVO1 = (OAViewObject) this.findViewObject("ODEbillCustDocVO");
     OracleCallableStatement ocs=null;
     OADBTransaction db=this.getOADBTransaction();
     String stmt = "BEGIN XX_CDH_CUST_ACCT_EXT_W_PKG.VALIDATE_CUST_DOC("
            + "p_cust_account_id    => :1"
            + ",x_vld_pay_doc_cnt   => :2"
            + ",x_vld_pay_doc_id1   => :3"
            + ",x_vld_pay_doc_id2   => :4"
            + ",x_combo_type        => :5"
            + ",x_cons_flag         => :6"
            + ",x_error_msg         => :7);"
            + " END;";
          
      ocs = (OracleCallableStatement)db.createCallableStatement(stmt,1);   
        try
        {
          Number custAcctId = new Number(pCustAcctId);
          ocs.registerOutParameter(2,Types.INTEGER);
          ocs.registerOutParameter(3,Types.INTEGER);
          ocs.registerOutParameter(4,Types.INTEGER);  
          ocs.registerOutParameter(5,Types.VARCHAR);
          ocs.registerOutParameter(6,Types.VARCHAR);
          ocs.registerOutParameter(7,Types.VARCHAR);  
          ocs.setNUMBER(1,custAcctId);
          ocs.execute();
          payDocCnt = ocs.getInt(2);
          payDocId1 = ocs.getInt(3);
          payDocId2 = ocs.getInt(4);
          comboType  = ocs.getString(5);
          consFlag   = ocs.getString(6);
          errMsg     = ocs.getString(7);
          ocs.close();
 
        }
        catch(SQLException e)
        {
          getOADBTransaction().rollback();
          throw new OAException(e.toString(),OAException.ERROR);
        }
        return errMsg;

  } // End of validateCustDoc
  */

  /**
   * deleteTrans to delete Standard/Non-Standard Configuration when Delivery method is changed
   * Called database package API to delete
   * Called during PPR of Delivery Method change event
   */
  public void deleteTrans(String pCustDocId,String pDlyMtd)
  {
    OracleCallableStatement ocs=null;
    OADBTransaction db=this.getOADBTransaction();
    String s= "BEGIN"
            +" XX_CDH_EBL_TEMPL_DTL_PKG.delete_all(p_cust_doc_id  => :1"
            +" ,p_dly_mtd => :2);"
            +" END;" ;
    ocs = (OracleCallableStatement)db.createCallableStatement(s,1); 
    try
        {
          Number custDocId = new Number(pCustDocId);
          ocs.setNUMBER(1,custDocId);
          ocs.setString(2,pDlyMtd);
          ocs.execute();
          ocs.close();
        }
    catch(SQLException e)
        {
        
          throw new OAException(e.toString(),OAException.ERROR);
        }
	finally
        {
           try{
                if(ocs != null)
                   ocs.close();
              }
		   catch(Exception e){}
        }
  } //End of deleteTrans
  
   //Added By Reddy Sekhar K on 13 Nov 2018 for the Req# NAIT-61952 & 66520-----Start
   //The below method calls when we change the delivery method
   public String  billCompleteDlyMtdUpd(String curDocuType,String curDlyMtd, String payDocFlag )
   {
   String docTypeBC=curDocuType;
   String dlyMthdBC=curDlyMtd;
       OAViewObject billCompleteLookup= (OAViewObject)this.findViewObject("ODEBillingCompletePVO");
       billCompleteLookup.clearCache();
       billCompleteLookup.executeQuery();
       ODEBillingCompletePVORowImpl billCompleteRow=null;
       String resultBC="";
       int cnt=billCompleteLookup.getRowCount();
       if(cnt>0) {
          RowSetIterator rowiter= billCompleteLookup.createRowSetIterator("rowiterr9");
          rowiter.setRangeStart(0);
          rowiter.setRangeSize(cnt);
          for (int i=0;i<cnt;i++) {
             billCompleteRow = (ODEBillingCompletePVORowImpl)rowiter.getRowAtRangeIndex(i);
             if(billCompleteRow!=null) {
                  String deliveryMethod=billCompleteRow.getMeaning();
                  if(deliveryMethod.equals(dlyMthdBC) && "Consolidated Bill".equals(docTypeBC)&&"Y".equals(payDocFlag)) 
               {
               resultBC="Match";
       break;
                 }
             }
            
          }
          rowiter.closeRowSetIterator();
       
       }
       return resultBC; 
       
   } 
    //The below method calls to check the attribute6 value in hz_customer_profile         
  public String attribute6ValuePF(String CustAccountId)
  {
     ODUtil utl = new ODUtil(this);
     utl.log("execQuery :Begin execQuery");
     String atribute6QryPF1 = "SELECT Attribute6 FROM hz_customer_profiles "
     + " WHERE CUST_ACCOUNT_ID = " +CustAccountId 
      +" AND site_use_id is null";
     OracleCallableStatement ocs=null;
     ResultSet rs=null;
     OADBTransaction db=this.getOADBTransaction();
     String stmt = atribute6QryPF1;
     String rattr6PF=null;
     //utl.log("execQuery:"+ stmt);
     ocs = (OracleCallableStatement)db.createCallableStatement(stmt,1);

     try
     {
       rs = ocs.executeQuery();
       if (rs.next())
       {
         rattr6PF = rs.getString(1);
       }
       rs.close();
       ocs.close();
     }
     catch(SQLException e)
     {
       utl.log("execQuery:Error:"+ e.toString());
     }
         finally
       {
          try{
               if(rs != null)
                  rs.close();
               if(ocs != null)
                  ocs.close();
             }
                  catch(Exception e){}
       }
     utl.log("execQuery :End execQuery");
     return rattr6PF;
  }
    //This method is used to find the latest cust doc id created by using copy button
    public String bcPODFlag(String CustAccountId)
    {
       ODUtil utl = new ODUtil(this);
       utl.log("execQuery :Begin execQuery");
       String bcPODFlag = "SELECT max(N_EXT_ATTR2) FROM XX_CDH_CUST_ACCT_EXT_B "
        +" where CUST_ACCOUNT_ID="+CustAccountId;
    OracleCallableStatement ocs=null;
       ResultSet rs=null;
       OADBTransaction db=this.getOADBTransaction();
       String stmt = bcPODFlag;
       String custDocid=null;
       //utl.log("execQuery:"+ stmt);
       ocs = (OracleCallableStatement)db.createCallableStatement(stmt,1);

       try
       {
         rs = ocs.executeQuery();
         if (rs.next())
         {
           custDocid = rs.getString(1);
         }
         rs.close();
         ocs.close();
       }
       catch(SQLException e)
       {
         utl.log("execQuery:Error:"+ e.toString());
       }
           finally
         {
            try{
                 if(rs != null)
                    rs.close();
                 if(ocs != null)
                    ocs.close();
               }
                    catch(Exception e){}
         }
       utl.log("execQuery :End execQuery");
       return custDocid;
    }
    
    
    //Added By Reddy Sekhar K on 13 Nov 2018 for the Req# NAIT-61952 & 66520-----End
    
     
  /**
   * 
   * Container's getter for ODEBillPaymentFreqPVO
   */
  public ODEBillPaymentFreqPVOImpl getODEBillPaymentFreqPVO()
  {
    return (ODEBillPaymentFreqPVOImpl)findViewObject("ODEBillPaymentFreqPVO");
  }

  /**
   * 
   * Container's getter for ODEbillCustDocVO
   */
  public ODEbillCustDocVOImpl getODEbillCustDocVO()
  {
    return (ODEbillCustDocVOImpl)findViewObject("ODEbillCustDocVO");
  }

  /**
   * 
   * Container's getter for ODEBillCustDocHeaderVO
   */
  public ODEBillCustDocHeaderVOImpl getODEBillCustDocHeaderVO()
  {
    return (ODEBillCustDocHeaderVOImpl)findViewObject("ODEBillCustDocHeaderVO");
  }

    /**Container's getter for ODEBillDelyMethodPVO
     */
    public ODEBillDelyMethodPVOImpl getODEBillDelyMethodPVO() {
        return (ODEBillDelyMethodPVOImpl)findViewObject("ODEBillDelyMethodPVO");
    }

    /**Container's getter for ODEBillDelyMethodInvoicePVO
     */
    public ODEBillDelyMethodInvoicePVOImpl getODEBillDelyMethodInvoicePVO() {
        return (ODEBillDelyMethodInvoicePVOImpl)findViewObject("ODEBillDelyMethodInvoicePVO");
    }

    /**Container's getter for ODEBillDelyMethodePDFPVO
     */
    public OAViewObjectImpl getODEBillDelyMethodePDFPVO() {
        return (OAViewObjectImpl)findViewObject("ODEBillDelyMethodePDFPVO");
    }

    /**Container's getter for ODEBillCUSTDOCDelyMethodOpstchVO
     */
    public OAViewObjectImpl getODEBillCUSTDOCDelyMethodOpstchVO() {
        return (OAViewObjectImpl)findViewObject("ODEBillCUSTDOCDelyMethodOpstchVO");
    }

    /**Container's getter for ODEBillingCompletePVO
     */
    public ODEBillingCompletePVOImpl getODEBillingCompletePVO() {
        return (ODEBillingCompletePVOImpl)findViewObject("ODEBillingCompletePVO");
    }


    /**Container's getter for feeoptionType1
     */
    public feeoptionTypeImpl getfeeoptionType1() {
        return (feeoptionTypeImpl)findViewObject("feeoptionType1");
    }
}
