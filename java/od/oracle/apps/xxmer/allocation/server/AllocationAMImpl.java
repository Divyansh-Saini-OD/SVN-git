package od.oracle.apps.xxmer.allocation.server;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.OAException;
import od.oracle.apps.xxmer.poplist.server.POsVOImpl;
import od.oracle.apps.xxmer.poplist.server.POsVORowImpl;
import oracle.jbo.Row;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;
import od.oracle.apps.xxmer.poplist.server.StoresVOImpl;
import od.oracle.apps.xxmer.poplist.server.POsCreateVOImpl;
import oracle.apps.jtf.cache.CacheManager;
import oracle.apps.jtf.cache.generic.CacheContext;
import oracle.apps.fnd.framework.server.OADBTransactionImpl;

//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class AllocationAMImpl extends OAApplicationModuleImpl 
{
  /**
   * 
   * This is the default constructor (do not remove)
   */
  public AllocationAMImpl()
  {
  }

  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxmer.allocation.server", "AllocationAMLocal");
  }

  /**
   * 
   * Container's getter for SearchAllocationVO1
   */
  public SearchAllocationVOImpl getSearchAllocationVO1()
  {
    return (SearchAllocationVOImpl)findViewObject("SearchAllocationVO1");
  }

  /**
   * 
   * Container's getter for AllocationHeaderVO1
   */
  public AllocationHeaderVOImpl getAllocationHeaderVO1()
  {
    return (AllocationHeaderVOImpl)findViewObject("AllocationHeaderVO1");
  }

  public void apply()
  {
    getTransaction().commit();  
    System.out.println("Commited");
  }
  public String deleteSelected()
  {
    OAViewObject vo = (OAViewObject) getAllocationLinesVO1();
    AllocationLinesVORowImpl row = null;
    int fetchedRowCount = vo.getRowCount();
    int total = vo.getRowCount();
    int deletedCount = 0;
    String result = "";
    RowSetIterator rowIter = vo.createRowSetIterator("rowIter");
    if(fetchedRowCount>0)
    {
      rowIter.setRangeStart(0);
      rowIter.setRangeSize(fetchedRowCount);
      int rowsFound = 0;
      //String batchNumber = "";
      for(int i=0; i< fetchedRowCount; i++)
      {
            
        row = (AllocationLinesVORowImpl) rowIter.getRowAtRangeIndex(i);
       // batchNumber = row.getBatchNo().toString();
        System.out.println("delete?= "+row.getDeleteallocation());
        if(row.getDeleteallocation().equals("Y"))
        {
          row.remove();  
          deletedCount++;
         fetchedRowCount--;
         i--;
          
        }
      }
      rowIter.closeRowSetIterator();
      apply();  
      refreshDetail();
      if (deletedCount==total)
      {
        result= "true";
      }else
      {
        result= "false";
      }
     
    }
    return result;
  }
  public void refreshHeader()
  {
    //Refresh Header
    AllocationHeaderVOImpl vo = getAllocationHeaderVO1();   
    vo.executeQuery();
   
  }
  public void refreshDetail()
  {
    //Refresh Detail
    AllocationLinesVOImpl vo = getAllocationLinesVO1();
    vo.executeQuery();
  }

  public void initHeader(String batchNumber)
  {
    AllocationHeaderVOImpl vo = getAllocationHeaderVO1();
    //AllocationHeaderVOImpl vo2=  getAllocationHeaderVO2();
   //vo2.initQuery(batchNumber);
    if(vo==null)
    {
      throw new OAException("error");
    }
    vo.initQuery(batchNumber);
  }

   public void initDetail(String batchNumber,String PO)
  {
   // AllocationDetailVOImpl vo = getAllocationDetailVO1();
   AllocationLinesVOImpl vo = getAllocationLinesVO1();
  
    if(vo==null)
    {
      throw new OAException("error");
    }
    vo.initQuery(batchNumber, PO);
   
  }
 
  public void initPOList(String batchNbr,String all)
  {
    POsVOImpl vo = getPOsVO1();
    //vo.setPreparedForExecution(true);
    vo.clearCache();
    vo.reset();

    //vo.getCacheKey();
   //OADBTransactionImpl dbImpl= ((OADBTransactionImpl) getOADBTransaction());
   //dbImpl.getAppsContext();
   
    if(all.equals("true")){
     vo.setWhereClause("BATCH_NO="+batchNbr+" or BATCH_NO=-1 ");
    }else
    {
      vo.setWhereClause("BATCH_NO="+batchNbr);
    }
    vo.executeQuery();
   
  }
  public void initPOCreateList(String batchNbr,String all)
  {
    POsCreateVOImpl vo = getPOsCreateVO1();
    if(all.equals("true")){
     vo.setWhereClause("BATCH_NO="+batchNbr+" or BATCH_NO=-1 ");
    }else
    {
      vo.setWhereClause("BATCH_NO="+batchNbr);
    }
    vo.executeQuery();
  }

  public void initStoresList(String wh)
  {
    StoresVOImpl vo = getStoresVO1();
    vo.setWhereClause("ATTRIBUTE1="+wh);
    vo.executeQuery();    
  }
 
  public void handleShipToChangeEvent()
  {
    OAViewObjectImpl vo =getCreatePVO1();
    Row row = vo.first();
    AllocationLinesVOImpl allocLinesVO = getAllocationLinesVO1();
    Row alRow = allocLinesVO.getCurrentRow();
    Number poId = (Number) alRow.getAttribute("PoHeaderId");
    //Number allocLoc = (Number) alRow.getAttribute("AllocOrganizationId");
   
    
    System.out.println("poID: "+poId);
    if(poId==null)
    {
      row.setAttribute("ShipToRender",Boolean.FALSE);
      row.setAttribute("QtyRender",Boolean.FALSE);
    }else
    {
      String shipTo = "";
      POsVOImpl poVo = getPOsVO1();
      POsVORowImpl poVoRow = null;

      int fetchedRowCount = poVo.getRowCount();
      RowSetIterator poIter = poVo.createRowSetIterator("poIter");
      if(fetchedRowCount >0)
      {
        poIter.setRangeStart(0);
        poIter.setRangeSize(fetchedRowCount);
        for(int i=0; i<fetchedRowCount; i++)
        {
          poVoRow = (POsVORowImpl) poIter.getRowAtRangeIndex(i);
          Number primaryKey1 = poVoRow.getPoHeaderId();
          
          if(primaryKey1.compareTo(poId)==0)
          {
            shipTo = poVoRow.getShipTo();
            
            initStoresList(shipTo);
            break;
          }
        }
        poIter.closeRowSetIterator();
      }
      //Row poRow = poVo.getCurrentRow();

      
           System.out.println("shipTO: "+shipTo);
      alRow.setAttribute("Legacyshipto",shipTo);
      alRow.setAttribute("PoLineId",poVoRow.getPoLineId());
      alRow.setAttribute("LineLocationId",poVoRow.getLineLocationId());
      //alRow.setAttribute("AllocationQty",new Number(0));
      alRow.setAttribute("ShipToOrganizationId",poVoRow.getShipToOrganizationId());
      alRow.setAttribute("LockedIn","Y");
      alRow.setAttribute("AllocationType","EBS Allocation");
      alRow.setAttribute("PoLineShipment",poVoRow.getPolineship());
      alRow.setAttribute("JitaQty",new Number(0));
      alRow.setAttribute("WmosQty",new Number(0));
      row.setAttribute("ShipToRender",Boolean.TRUE);
       
    }
  }
  public void handleLocChangeEvent()
  {
    OAViewObjectImpl vo =getCreatePVO1();
    Row row = vo.first();
    AllocationLinesVOImpl allocLinesVO = getAllocationLinesVO1();
    Row alRow = allocLinesVO.getCurrentRow();
   
    Number allocLoc = (Number) alRow.getAttribute("AllocOrganizationId");
   
    Number poId = (Number) alRow.getAttribute("PoHeaderId");
     Number lineId = (Number) alRow.getAttribute("PoLineId");
     Number lineLocId = (Number) alRow.getAttribute("LineLocationId");
      Number shipTo = (Number) alRow.getAttribute("ShipToOrganizationId");
        
    
    System.out.println("allocLoc: "+allocLoc);
    if(allocLoc==null || poId == null)
    {
      
      row.setAttribute("QtyRender",Boolean.FALSE);
    }else
    {
      checkDups(poId,lineId,lineLocId,shipTo,allocLoc);
      alRow.setAttribute("Legacylocation",allocLoc);
       row.setAttribute("QtyRender",Boolean.TRUE);
    }
  }

  public void checkDups(Number pPoID, Number pLineId, Number pLineLoc, Number pShipTo, Number pAllocLoc )
  {
    OAViewObject vo = (OAViewObject) getAllocationLinesVO1();
    AllocationLinesVORowImpl row = null;
    int fetchedRowCount = vo.getRowCount();
    RowSetIterator rowIter = vo.createRowSetIterator("rowIter");
    if(fetchedRowCount>0)
    {
      rowIter.setRangeStart(0);
      rowIter.setRangeSize(fetchedRowCount);
      int rowsFound = 0;
      for(int i=0; i< fetchedRowCount; i++)
      {
        row = (AllocationLinesVORowImpl) rowIter.getRowAtRangeIndex(i);
        Number poId = row.getPoHeaderId();
        Number lineId = row.getPoLineId();
        Number  lineLocId  = row.getLineLocationId();
        Number shipTo = row.getShipToOrganizationId();
        Number allocLoc = row.getAllocOrganizationId();
        if(poId.equals(pPoID)&&lineId.equals(pLineId) && lineLocId.equals(pLineLoc)&& shipTo.equals(pShipTo)&& allocLoc.equals(pAllocLoc))
        {
         rowsFound++;
         if(rowsFound > 1){
          rowIter.closeRowSetIterator();
          OAViewObjectImpl voRender =getCreatePVO1();
          Row rowRender = voRender.first();
          rowRender.setAttribute("QtyRender",Boolean.FALSE);
          throw new OAException("Dup");          
         }
        }
      }
      rowIter.closeRowSetIterator();
    }
  }
  public void initCreateAllocLine()
  {
     //OAViewObject vo = getAllocationLinesVO1();
     
     AllocationLinesVOImpl vo = (AllocationLinesVOImpl) getAllocationLinesVO1();
     AllocationLinesVORowImpl row = (AllocationLinesVORowImpl) vo.createRow();

     AllocationHeaderVOImpl voHdr = (AllocationHeaderVOImpl) getAllocationHeaderVO1();
     AllocationHeaderVORowImpl hdrRow = (AllocationHeaderVORowImpl) voHdr.getCurrentRow();
     row.setAllocationHeaderId(hdrRow.getAllocationHeaderId());
     //row.setBatchNo(hdrRow.getBatchNo());
     row.setDeleteallocation("N");
     vo.insertRow(row);

  // Always call this after you perform a row insert. See the Entity Object
  // New / Initial section below for additional information.
  row.setNewRowState(Row.STATUS_INITIALIZED);
  
  vo.setCurrentRow(row);


  }
  
  public void initCreatePPRVO()
  {

   OAViewObjectImpl pprVO =getCreatePVO1();
//    OAViewObject pprVO = (OAViewObject)findViewObject("CreatePVO1");
    if(pprVO != null)
    {
   //   if(pprVO.getFetchedRowCount() == 0)
   //   {
        pprVO.setMaxFetchSize(0);
        pprVO.executeQuery();
        pprVO.insertRow(pprVO.createRow());
        Row row = pprVO.first();
        row.setAttribute("RowKey",new Number(1));
        handleShipToChangeEvent();
        handleLocChangeEvent();
       
   //   }
    
    
    }
    
  }

  /**
   * 
   * Container's getter for POsVO1
   */
  public POsVOImpl getPOsVO1()
  {
    return (POsVOImpl)findViewObject("POsVO1");
  }








  /**
   * 
   * Container's getter for CreatePVO1
   */
  public OAViewObjectImpl getCreatePVO1()
  {
    return (OAViewObjectImpl)findViewObject("CreatePVO1");
  }

  /**
   * 
   * Container's getter for StoresVO1
   */
  public StoresVOImpl getStoresVO1()
  {
    return (StoresVOImpl)findViewObject("StoresVO1");
  }

  /**
   * 
   * Container's getter for AllocationLinesVO1
   */
  public AllocationLinesVOImpl getAllocationLinesVO1()
  {
    return (AllocationLinesVOImpl)findViewObject("AllocationLinesVO1");
  }

  /**
   * 
   * Container's getter for POsCreateVO1
   */
  public POsCreateVOImpl getPOsCreateVO1()
  {
    return (POsCreateVOImpl)findViewObject("POsCreateVO1");
  }




























}