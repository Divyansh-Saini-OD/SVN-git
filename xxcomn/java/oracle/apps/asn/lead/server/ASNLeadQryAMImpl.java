/*===========================================================================+
 |                       Office Depot - Project Simplify                     |
 |            Oracle NAIO/WIPRO/Office Depot/Consulting Organization         |
 +===========================================================================+
 |  FILENAME                                                                 |
 |             ASNLeadQryAMImpl.java                                         |
 |                                                                           |
 |  DESCRIPTION                                                              |
 |    AM Implementation for the Lead Query Region.                           |
 |                                                                           |
 |  NOTES                                                                    |
 |         Modified for performance                                          |
 |  DEPENDENCIES                                                             |
 |    No dependencies.                                                       |
 |                                                                           |
 |  HISTORY                                                                  |
 |                                                                           |
 |    24-Jan-2008 Jasmine Sujithra   Created                                 |
 |                                                                           |                                            
 +===========================================================================*/
package oracle.apps.asn.lead.server;

import com.sun.java.util.collections.ArrayList;
import com.sun.java.util.collections.HashMap;

import java.util.Dictionary;

import oracle.apps.asn.common.fwk.server.ASNApplicationModuleImpl;
import oracle.apps.asn.common.fwk.server.ASNViewObjectImpl;
import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.common.VersionInfo;
import oracle.apps.fnd.framework.OAApplicationModule;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAViewRowImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ASNLeadQryAMImpl extends ASNApplicationModuleImpl
{
  public static final String RCS_ID="$Header: ASNLeadQryAMImpl.java 115.10 2005/02/08 00:15:20 asahoo noship $";
  public static final boolean RCS_ID_RECORDED =
        VersionInfo.recordClassVersion(RCS_ID, "oracle.apps.asn.lead.server");
  /**
   * 
   * This is the default constructor (do not remove)
   */
  public ASNLeadQryAMImpl()
  {
  }

  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("oracle.apps.asn.lead.server", "ASNLeadQryAMLocal");
  }

  /**
   * 
   * Container's getter for LeadSearchVO
   */
  public LeadSearchVOImpl getLeadSearchVO()
  {
    return (LeadSearchVOImpl)findViewObject("LeadSearchVO");
  }

  /**
   * initialize query for UWQ table and run the query
   *
   * @param searchHashMap search parameters
   * @param dispParam display parameters
   */

	public void initLeadQuery(HashMap criteriaDictMap, ArrayList renderedVwAttrs,
	                          HashMap dshBdSrchParams, HashMap miscSrchParams,
                            String defaultSort)
	{
    final String METHOD_NAME = "asn.lead.server.ASNLeadQryAMImpl.initLeadQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

     OAApplicationModule oam = (OAApplicationModule)this;
	   
	   Dictionary[] criteriaDicts = (Dictionary[])criteriaDictMap.get("ASNReqLeadQryCrtra");

      boolean mdefaultSort;
      if((defaultSort!=null) && defaultSort.equals("Y"))
         mdefaultSort = true;
      else
         mdefaultSort = false;

      if (isStatLogEnabled)
       {
         StringBuffer buf = new StringBuffer(100);
         buf.append(" mdefaultSort = ");
         buf.append(mdefaultSort);
         dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
        }
	
	   // set the SQL for the LeadsearchVO

	   LeadSearchManager LeadsrchMgr = new LeadSearchManager();

     LeadsrchMgr.setViewQuery(oam,
                              criteriaDicts,
                              renderedVwAttrs,
                              dshBdSrchParams,
                              miscSrchParams,
                              mdefaultSort);
         
	   // get the LeadSearchVO
	   ASNViewObjectImpl LeadsVo = (ASNViewObjectImpl)this.findViewObject("LeadSearchVO"); 
     if(LeadsVo == null)
     {
       MessageToken[] tokens = { new MessageToken("NAME", "LeadSearchVO") };
       throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
     }
    
	   // execute the LeadSearchVO
     if (!LeadsVo.isPreparedForExecution())
      {
         LeadsVo.executeQuery();
      }

     if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
	
	}

  public void resetQuery()
  {
    final String METHOD_NAME = "asn.lead.server.ASNLeadQryAMImpl.resetQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }
      ASNViewObjectImpl vo1 = (ASNViewObjectImpl)this.findViewObject("LeadSearchVO");
      if (vo1 == null)
      {
        MessageToken[] tokens = { new MessageToken("OBJECT_NAME", "LeadSearchVO") };
        throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
      }
      if(vo1.isPreparedForExecution())
      {
        vo1.setPreparedForExecution(false);
      }

    if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
       }

  }

  public String getLeadRowCount()
	{
    final String METHOD_NAME = "asn.lead.server.ASNLeadQryAMImpl.getLeadRowCount";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }
	   // get the LeadSearchVO
	   ASNViewObjectImpl leadsVo = (ASNViewObjectImpl)this.findViewObject("LeadSearchVO");      
     
	   
	   // get the estimated row count
	   long count = 0;//leadsVo.getRowCount();//getEstimatedRowCount();//leadsVo.getEstimatedRowCount();
	   
		    // check that the estimated row count is less than recommended size
	   long profValue = Long.parseLong(getOADBTransaction().getProfile("VO_MAX_FETCH_SIZE"));
        
     dbTrx.writeDiagnostics(METHOD_NAME,"Before starting count = " +count, OAFwkConstants.STATEMENT);      

     while (leadsVo.hasNext())
     {
            count = count +1;
            leadsVo.next();            
            if (count >= profValue)
            {
                count =  profValue + 1;
                break;
            }
       
      }
     
	    

     if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }

      if (isStatLogEnabled)
      {
       StringBuffer buf = new StringBuffer(100);
       buf.append(" getEstimatedRowCount = ");
       buf.append(count);
       dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
      }

	   return String.valueOf(count);
	
	 }


  public String getSelectedLeadId()
	{
     final String METHOD_NAME = "asn.lead.server.ASNLeadQryAMImpl.getSelectedLeadId";
     OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
     boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
     boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
	   // get the LeadSearchVO
	   ASNViewObjectImpl leadsVo = (ASNViewObjectImpl)this.findViewObject("LeadSearchVO");   
	   
	   // get the selected row
     if (leadsVo.getFetchedRowCount() > 0)
      {
        Row selectedRow = leadsVo.getFirstFilteredRow("SelectFlag", "Y"); 
        if(selectedRow != null)
        {
	       Number id = (Number)selectedRow.getAttribute("SalesLeadId");
	       if(id!=null)
	       {
	         // set the selected row as current row
	         leadsVo.setCurrentRow(selectedRow);

            if (isStatLogEnabled)
            {
             StringBuffer buf = new StringBuffer(100);
             buf.append(" SalesLeadId = ");
             buf.append(id);
             dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
            }
           
           if (isProcLogEnabled)
            {
              dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
            }
	       return id.stringValue();
	     }
     }
    }
	   return null;
	 }


  public void setLeadFirstRowAsSelected()
	{
     final String METHOD_NAME = "asn.lead.server.ASNLeadQryAMImpl.setLeadFirstRowAsSelected";
     OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
     boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
     boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
	   // get the LeadSearchVO
	   ASNViewObjectImpl leadsVo = (ASNViewObjectImpl)this.findViewObject("LeadSearchVO");   
	   
	   leadsVo.setRowValidation(false);
	   leadsVo.reset();
	   
	   if(leadsVo.hasNext())
	   {
	         // get the first row
	      OAViewRowImpl leadRow = (OAViewRowImpl)leadsVo.first();
	      if(leadRow!=null)
	      {
          if (isStatLogEnabled)
          {
            StringBuffer buf = new StringBuffer(100);
            buf.append(" leadsVo has next and leadRow is not null");
            dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
          }
	         // set the row as selected
	         leadRow.setAttribute("SelectFlag", "Y");
	      }
	   }  
     if (isProcLogEnabled)
      {
       dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
	}

   public String convertToOpportunity(String leadId)
	 {
      final String METHOD_NAME = "asn.lead.server.ASNLeadQryAMImpl.convertToOpportunity";
      OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
      boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
      boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
	    // get the LeadSearchVO
	    ASNViewObjectImpl leadVo = (ASNViewObjectImpl)this.findViewObject("LeadSearchVO");   
	    Number opptyId = null;
      OAViewRowImpl row = null;
      if(leadVo==null)
       {
         MessageToken[] tokens = { new MessageToken("NAME", "LeadSearchVO") };
         throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
       }

      if (isStatLogEnabled)
      {
        StringBuffer buf = new StringBuffer(100);
        buf.append("  leadId = ");
        buf.append(leadId);
        dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
      }

      if(leadId!=null && leadId.trim().length()>0)
      {
        int fetchedRowCount = leadVo.getFetchedRowCount();
        RowSetIterator leadSummaryItr = leadVo.findRowSetIterator("LeadSummaryIterator");
        if(leadSummaryItr==null)
          leadSummaryItr = leadVo.createRowSetIterator("LeadSummaryIterator");
        else
          leadSummaryItr.reset();

        if(leadSummaryItr!=null && fetchedRowCount>0)
        {
          leadSummaryItr.setRangeStart(0);
          leadSummaryItr.setRangeSize(fetchedRowCount);
          String id = null;
          for(int i=0; i<fetchedRowCount; i++)
          {
            row = (OAViewRowImpl)leadSummaryItr.getRowAtRangeIndex(i);
            if(row!=null)
              id = row.getAttribute("SalesLeadId").toString();
            if(leadId.equals(id))
            {
              opptyId = ((LeadSearchVORowImpl)row).convertLeadToOpportunity();
              if (isStatLogEnabled)
              {
                StringBuffer buf = new StringBuffer(100);
                buf.append(" opptyId = ");
                buf.append(opptyId);
                dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
              }
              break;
            }
           }
         }
          if(leadSummaryItr!=null)
          leadSummaryItr.closeRowSetIterator();
      }

       if (isProcLogEnabled)
       {
       dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
       } 

       if(opptyId!=null)
         return opptyId.toString();
       else
         return null;
    }
             

   /**
   * Refreshes the data of current or specified row of lead summary view object
   *
   * @param leadId lead id. This value will be used to identify the row if there is no current row exists
   *
   */
  public void refreshLeadUwqRow(String leadId, ArrayList mrenderedVwAttrs)
  {   
    final String METHOD_NAME = "asn.lead.server.ASNLeadQryAMImpl.refreshLeadUwqRow";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
    
    ASNViewObjectImpl leadSummaryVo = (ASNViewObjectImpl)findViewObject("LeadSearchVO");
    if(leadSummaryVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadSearchVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    if(leadSummaryVo!=null)
    {
      leadSummaryVo.setRowValidation(false);
      int fetchedRowCount = leadSummaryVo.getFetchedRowCount();
          // determine whether the specified row falls into the fetched rows
        if(fetchedRowCount > 0)
        {
          if(leadId!=null && leadId.trim().length()>=0)
          {
            RowSetIterator leadSummaryItr = null;         
            leadSummaryItr = leadSummaryVo.findRowSetIterator("LeadSummaryIterator");
            if(leadSummaryItr==null)
                leadSummaryItr = leadSummaryVo.createRowSetIterator("LeadSummaryIterator");
            else
                leadSummaryItr.reset();
            
            if(leadSummaryItr!=null)
            {
                leadSummaryItr.setRowValidation(false);
                leadSummaryItr.setRangeStart(0);
                leadSummaryItr.setRangeSize(fetchedRowCount);
                String id = null;
                LeadSearchVORowImpl leadUwqRow = null;
                for(int i=0; i<fetchedRowCount; i++)
                {
                  leadUwqRow = (LeadSearchVORowImpl)leadSummaryItr.getRowAtRangeIndex(i);
                  if(leadUwqRow!=null)
                    id = ((Number)leadUwqRow.getAttribute("SalesLeadId")).stringValue();
                  if(leadId.equals(id))
                  {
                    leadUwqRow.refreshLeadUwqViewRow(mrenderedVwAttrs);
                    if (isStatLogEnabled)
                    {
                      StringBuffer buf = new StringBuffer(100);
                      buf.append(" refreshLeadUwqViewRow is called and leadId = ");
                      buf.append(leadId);
                      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
                    }
                    break;
                  }
                }
               leadSummaryItr.closeRowSetIterator();
            }
          }
        }
    } 
      if (isProcLogEnabled)
       {
         dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
       } 
  }




  /**
   * 
   * Container's getter for LeadSearchVO2
   */
  public LeadSearchVOImpl getLeadSearchVO2()
  {
    return (LeadSearchVOImpl)findViewObject("LeadSearchVO2");
  }


}
