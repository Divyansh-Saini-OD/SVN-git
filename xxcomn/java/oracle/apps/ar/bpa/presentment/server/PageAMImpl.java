package oracle.apps.ar.bpa.presentment.server;

/*----------------------------------------------------------------------------
 -- Author: Sridevi Kondoju
 -- Component Id: E1293
 -- Script Location: $CUSTOM_JAVA_TOP/oracle/apps/ar/bpa/presentment/server
 -- Description: Considered R12 code version and added custom code.
 -- History:
 -- Name            Date         Version    Description
 -- -----           -----        -------    -----------
 -- Sridevi Kondoju 10-Sep-2013  1.0        Retrofitted for R12 Upgrade.
 -- Madhu Bolli     10-Mar-2017  1.1        Defect#41197 - Invoice PDFCopy returns 
 --                                      RequestId to ViewRequests if it submits concurrent request 
 --                                      and does not wait for request
---------------------------------------------------------------------------*/

import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Types;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.common.VersionInfo;

import oracle.apps.fnd.framework.server.OAViewObjectImpl;
import oracle.apps.ar.bpa.templatemgmt.templates.server.TemplateFileVOImpl;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.apps.fnd.framework.server.OADBTransactionImpl;

//import oracle.jbo.server.ViewLinkImpl;

//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class PageAMImpl extends OAApplicationModuleImpl 
{
  public static final String RCS_ID="$Header: PageAMImpl.java 120.3 2005/12/04 19:06:15 lishao noship $";
  public static final boolean RCS_ID_RECORDED =
        VersionInfo.recordClassVersion(RCS_ID, "oracle.apps.ar.bpa.presentment.server");
  /**
   * 
   * This is the default constructor (do not remove)
   */
  public PageAMImpl()
  {
  }

  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("oracle.apps.ar.bpa.presentment.server", "PageAMLocal");
  }

  /**
   * 
   * Container's getter for TemplatesVO
   */
  public OAViewObjectImpl getTemplatesVO()
  {
    return (OAViewObjectImpl)findViewObject("TemplatesVO");
  }



  /**
   * 
   * Container's getter for DataSourcesVO
   */
  public DataSourcesVOImpl getDataSourcesVO()
  {
    return (DataSourcesVOImpl)findViewObject("DataSourcesVO");
  }

  /**
   * 
   * Container's getter for DataSourceParamsVO
   */
  public DataSourceParamsVOImpl getDataSourceParamsVO()
  {
    return (DataSourceParamsVOImpl)findViewObject("DataSourceParamsVO");
  }




  /**
   * 
   * Container's getter for SecuringAttributesVO
   */
  public SecuringAttributesVOImpl getSecuringAttributesVO()
  {
    return (SecuringAttributesVOImpl)findViewObject("SecuringAttributesVO");
  }

  /**
   * 
   * Container's getter for DataSourcesVO1
   */
  public DataSourcesVO1Impl getDataSourcesVO1()
  {
    return (DataSourcesVO1Impl)findViewObject("DataSourcesVO1");
  }


  /**
   * 
   * Container's getter for VContentAreaDetail
   */
  public VContentAreaDetailImpl getVContentAreaDetail()
  {
    return (VContentAreaDetailImpl)findViewObject("VContentAreaDetail");
  }

  /**
   * 
   * Container's getter for VContentAreaDetail1
   */
  public VContentAreaDetail1Impl getVContentAreaDetail1()
  {
    return (VContentAreaDetail1Impl)findViewObject("VContentAreaDetail1");
  }






  /**
   * 
   * Container's getter for RuleAttributesVO
   */
  public RuleAttributesVOImpl getRuleAttributesVO()
  {
    return (RuleAttributesVOImpl)findViewObject("RuleAttributesVO");
  }

  /**
   * 
   * Container's getter for RulesVO
   */
  public RulesVOImpl getRulesVO()
  {
    return (RulesVOImpl)findViewObject("RulesVO");
  }

  /**
   * 
   * Container's getter for ContentAreasVO
   */
  public ContentAreasVOImpl getContentAreasVO()
  {
    return (ContentAreasVOImpl)findViewObject("ContentAreasVO");
  }

  /**
   * 
   * Container's getter for ContentAreasVO1
   */
  public ContentAreasVO1Impl getContentAreasVO1()
  {
    return (ContentAreasVO1Impl)findViewObject("ContentAreasVO1");
  }


  /**
   * 
   * Container's getter for ApplicationListVO
   */
  public OAViewObjectImpl getApplicationListVO()
  {
    return (OAViewObjectImpl)findViewObject("ApplicationListVO");
  }

  /**
   * 
   * Container's getter for HeaderDataSrcListVO
   */
  public HeaderDataSrcListVOImpl getHeaderDataSrcListVO()
  {
    return (HeaderDataSrcListVOImpl)findViewObject("HeaderDataSrcListVO");
  }

  /**
   * 
   * Container's getter for DataSrcItemListVO
   */
  public DataSrcItemListVOImpl getDataSrcItemListVO()
  {
    return (DataSrcItemListVOImpl)findViewObject("DataSrcItemListVO");
  }

  /**
   * 
   * Container's getter for DataSrcLineItemListVO
   */
  public DataSrcLineItemListVOImpl getDataSrcLineItemListVO()
  {
    return (DataSrcLineItemListVOImpl)findViewObject("DataSrcLineItemListVO");
  }





  /**
   * 
   * Container's getter for DataSourcesVO2
   */
  public OAViewObjectImpl getDataSourcesVO2()
  {
    return (OAViewObjectImpl)findViewObject("DataSourcesVO2");
  }

  /**
   * 
   * Container's getter for TemplateItemsVO
   */
  public OAViewObjectImpl getTemplateItemsVO()
  {
    return (OAViewObjectImpl)findViewObject("TemplateItemsVO");
  }


  /**
   * 
   * Container's getter for TemplateFieldsVO
   */
  public TemplateFieldsVOImpl getTemplateFieldsVO()
  {
    return (TemplateFieldsVOImpl)findViewObject("TemplateFieldsVO");
  }

  /**
   * 
   * Container's getter for TemplateFileVO
   */
  public TemplateFileVOImpl getTemplateFileVO()
  {
    return (TemplateFileVOImpl)findViewObject("TemplateFileVO");
  }

  /**
   * 
   * Container's getter for TemplateFilesVO
   */
  public TemplateFilesVOImpl getTemplateFilesVO()
  {
    return (TemplateFilesVOImpl)findViewObject("TemplateFilesVO");
  }

  /**
   * 
   * Container's getter for AttachFunCategoriesVO
   */
  public OAViewObjectImpl getAttachFunCategoriesVO()
  {
    return (OAViewObjectImpl)findViewObject("AttachFunCategoriesVO");
  }

  /**
   * 
   * Container's getter for AttachLobFilesVO
   */
  public OAViewObjectImpl getAttachLobFilesVO()
  {
    return (OAViewObjectImpl)findViewObject("AttachLobFilesVO");
  }




  /**
   * 
   * Container's getter for DataSourcePrintVO
   */
  public DataSourcePrintVOImpl getDataSourcePrintVO()
  {
    return (DataSourcePrintVOImpl)findViewObject("DataSourcePrintVO");
  }



   /**
   * 
   * Added as part of R12 upgrade retrofit
   */
    public String GetInvoiceURL(String sCustTrxID)
    {
      OADBTransaction txn = getOADBTransaction();
      CallableStatement s = null;
      String sURL = "";
      try
      {
        s = txn.createCallableStatement("call XX_ARI_INVOICE_COPY_PKG.get_invoice(?,?)",0);
        s.setString(1,sCustTrxID);
        s.registerOutParameter(2,Types.VARCHAR);
    
        s.execute();
    
        if (s != null) {
          sURL = s.getString(2);
          s.close();
        }
      }
      catch(Exception ex)
      {
        try {if (s != null) s.close();}
        catch(Exception ex2) {};
      }
      return (sURL);
    }

  /**
   * 
   * Added as part of R12 upgrade retrofit
   */
    public byte[] GetInvoiceBytes(String sCustTrxID) throws Exception
    {
      OADBTransaction txn = getOADBTransaction();
      CallableStatement s = null;
      byte[] baInvoice = null;
      Blob aBlob = null;
      try
      {
        s = txn.createCallableStatement("call XX_ARI_INVOICE_COPY_PKG.get_invoice(?,?,?,?)",0);
        s.setString(1,sCustTrxID);
        s.registerOutParameter(2,Types.BLOB);
        s.registerOutParameter(3,Types.VARCHAR);
        s.registerOutParameter(4,Types.VARCHAR);

        s.execute();

       if (s != null) {
            try
            {
              String requestId = s.getString(3); 
              if (requestId != null && ! "-1".equals(requestId) ) {
                  ((OADBTransactionImpl)this.getRootApplicationModule().getTransaction()).putValue("PDF_REQ_ID", requestId);
                  
                  String isPDFReqDuplicate = s.getString(4);
                  ((OADBTransactionImpl)this.getRootApplicationModule().getTransaction()).putValue("IS_PDF_REQ_DUPL", isPDFReqDuplicate);
                   
              } else {
               // Get as a BLOB
                 aBlob = s.getBlob(2);
                 baInvoice = aBlob.getBytes(1, (int) aBlob.length());
              }
            }
            catch(Exception ex)
            {
               // The driver could not handle this as a BLOB...
               // Fallback to default (and slower) byte[] handling
               baInvoice = s.getBytes(2);
            }

            s.close();
        }
      }
      catch(Exception ex)
      {
		this.writeDiagnostics(this, "PageAMImpl.GetInvoiceBytes() General Exception - "+ex.getStackTrace(), 1);
		throw new OAException(ex.toString());
      }
	  finally {
		try {if (s != null) s.close();}
        catch(Exception ex2) {};
	  }
      return (baInvoice);
    }


}

