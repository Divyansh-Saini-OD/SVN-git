package od.oracle.apps.xxmer.gsopo.milestone.server;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.OARow;
import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.common.MessageToken;
import java.io.Serializable;
import oracle.apps.fnd.framework.server.OADBTransaction; 
//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODGSOPOMilestoneAMImpl extends OAApplicationModuleImpl 
{
  Number poHeaderId; 
  /**
   * 
   * This is the default constructor (do not remove)
   */
  public ODGSOPOMilestoneAMImpl()
  {
  }

  public void initDetailsMilestoneInfo(String poHdrId)
  {
    ODmilestoneInfoVOImpl mileStoneVO = getODmilestoneInfoVO1();
    MileStoneNameVOImpl mileStoneNameVO  = getMileStoneNameVO1();
    Serializable[] methodParams = {poHdrId};
    Class[] methodParamTypes  = {poHdrId.getClass()};
    mileStoneVO.invokeMethod("ODMSInfoVOExecution",methodParams,methodParamTypes);
    disableMileStoneInfo(mileStoneVO);
    poHeaderId = new Number(Integer.parseInt(poHdrId));
  }
  public void upDateAction(String rowReference)
  {
     OARow   RowEvent=(OARow)findRowByRef(rowReference);    
     RowEvent.setAttribute("milestone_name_b",Boolean.FALSE);
     RowEvent.setAttribute("milestone_date_b",Boolean.FALSE);
     RowEvent.setAttribute("milestone_remarks_b",Boolean.FALSE);       
  }
  public void disableMileStoneInfo(ODmilestoneInfoVOImpl mileStoneVO)
  {
    for(ODmilestoneInfoVORowImpl row =(ODmilestoneInfoVORowImpl)mileStoneVO.first();row!=null;row = (ODmilestoneInfoVORowImpl)mileStoneVO.next())
    {
        row.setAttribute("milestone_name_b",Boolean.TRUE);    
        row.setAttribute("milestone_date_b",Boolean.TRUE);    
        row.setAttribute("milestone_remarks_b",Boolean.TRUE); 
        row.setAttribute("UpdateSwitcher","UpdateEnabled");   //Update Imgare Rendered      
    }
  }
  public void addLine()
  {
    /*
     * In this method initializing the VO Primary key here only to affect with 
     * Attachments
     */
     ODmilestoneInfoVOImpl mileStoneVO = getODmilestoneInfoVO1();
     OADBTransaction transaction = getOADBTransaction();
     Number po_mile_stone_id = transaction.getSequenceValue("XX_GSO_PO_MILESTONES_S");           
     ODmilestoneInfoVORowImpl row = (ODmilestoneInfoVORowImpl)mileStoneVO.createRow();
     row.setmilestone_name_b(Boolean.FALSE);
     row.setmilestone_date_b(Boolean.FALSE);
     row.setmilestone_remarks_b(Boolean.FALSE);
     row.setUpdateSwitcher("UpdateDisabled");
     row.setPoMilestoneId(po_mile_stone_id);
     mileStoneVO.insertRow(row);
  }
  public void validateSingleUpdate()
  {
    /*
     * This method will be used to check the modified changes 
     * before changing to another
     */
    ODmilestoneInfoVOImpl mileStoneVO = getODmilestoneInfoVO1();
    Boolean mile_stone_b;
    for(ODmilestoneInfoVORowImpl row =(ODmilestoneInfoVORowImpl)mileStoneVO.first();row!=null;row = (ODmilestoneInfoVORowImpl)mileStoneVO.next())
    {
      mile_stone_b  =   row.getmilestone_name_b()==null?Boolean.TRUE:row.getmilestone_name_b();
      if(!mile_stone_b.booleanValue())
      {
        throw new OAException("XXMER","XXOD_GSO_APPLY_CONFIRM",null,OAException.ERROR,null);        
      }
    }
  }
  public void lovAction(String rowReference)
  {
    OARow RowEvent = (OARow)findRowByRef(rowReference);
    String msName = "";
    ODmilestoneInfoVOImpl mileStoneVO       = getODmilestoneInfoVO1();
    ODMilestoneInfoEVOImpl mileStoneEVO     = getODMilestoneInfoEVO1();
    msName = RowEvent.getAttribute("MilestoneName")==null?"":RowEvent.getAttribute("MilestoneName").toString();            
    Serializable[] methodParams = {poHeaderId};
    Class[] methodParamTypes = {poHeaderId.getClass()};
    mileStoneEVO.invokeMethod("ODMSEVOPOHdrExecution",methodParams,methodParamTypes);
    for(ODMilestoneInfoEVORowImpl row = (ODMilestoneInfoEVORowImpl)mileStoneEVO.first();row != null; row = (ODMilestoneInfoEVORowImpl)mileStoneEVO.next())   
    {
      if(row.getMilestoneName().equals(msName))
      {
        MessageToken[] msNameObject = {new MessageToken("OBJECT_NAME",msName)};
        throw new OAException("XXMER","XXOD_GSO_MS_NAME_EXIST",msNameObject,OAException.ERROR,null);        
      }
    }
  }
  public void validateMilestone()
  {
    ODmilestoneInfoVOImpl mileStoneVO       = getODmilestoneInfoVO1();
    ODMilestoneInfoEVOImpl mileStoneEVO     = getODMilestoneInfoEVO1();    
    Date currentDate = getOADBTransaction().getCurrentDBDate();   
    Number mileStoneId = null;     
    Boolean ms_remarks_b;      
    int msExistCnt = 0;    
    for(ODmilestoneInfoVORowImpl row =(ODmilestoneInfoVORowImpl)mileStoneVO.first();row!=null;row = (ODmilestoneInfoVORowImpl)mileStoneVO.next())
    {
      ms_remarks_b    = row.getmilestone_remarks_b()==null?Boolean.TRUE:row.getmilestone_remarks_b();    
      mileStoneId       = row.getPoMilestoneId()==null?new Number(-1):row.getPoMilestoneId();      
      Serializable[] methodParams = {mileStoneId};
      Class[] methodParamTypes = {mileStoneId.getClass()};
      mileStoneEVO.invokeMethod("ODMSEVOExecution",methodParams,methodParamTypes);
      msExistCnt = mileStoneEVO.getRowCount();
      
      if(!ms_remarks_b.booleanValue())
      {      
        if(row.getMilestoneName()==null)
        {
          MessageToken[] msName = {new MessageToken("OBJECT_NAME","MileStone Name")};
          throw new OAException("XXMER","XXOD_GSO_OBJECT_NOT_FOUND",msName,OAException.ERROR,null);        
        }
        if(row.getMilestoneDate()==null)
        {
          MessageToken[] msDate = {new MessageToken("OBJECT_NAME","MileStone Date")};
          throw new OAException("XXMER","XXOD_GSO_OBJECT_NOT_FOUND",msDate,OAException.ERROR,null);        
        }      
        if(row.getRemarks()==null)
        {
          MessageToken[] msRemarks = {new MessageToken("OBJECT_NAME","MileStone Remarks")};
          throw new OAException("XXMER","XXOD_GSO_OBJECT_NOT_FOUND",msRemarks,OAException.ERROR,null);        
        }
        if(row.getMilestoneDate() != null)
        {
          if(row.getMilestoneDate().dateValue().before(currentDate.dateValue()))
          {        
            throw new OAException("XXMER","XXOD_GSO_LESS_MS_DATE",null,OAException.ERROR,null);        
          }  
        }
        if(msExistCnt == 0) ///Code to check for new record case only
        {
          Serializable[] methodParams1 = {poHeaderId};
          Class[] methodParamTypes1 = {poHeaderId.getClass()};
          mileStoneEVO.invokeMethod("ODMSEVOPOHdrExecution",methodParams1,methodParamTypes1);
          for(ODMilestoneInfoEVORowImpl Erow = (ODMilestoneInfoEVORowImpl)mileStoneEVO.first();Erow != null; Erow = (ODMilestoneInfoEVORowImpl)mileStoneEVO.next())   
          {
            if(Erow.getMilestoneName().equals(row.getMilestoneName()))
            {
              MessageToken[] msNameObject = {new MessageToken("OBJECT_NAME",row.getMilestoneName())};
              throw new OAException("XXMER","XXOD_GSO_MS_NAME_EXIST",msNameObject,OAException.ERROR,null);        
            }
          }
        }
      }
    }    
  }
  public void saveMilestone()
  {
    Number mileStoneId = null;       
    String mileStoneName = "";
    Date mileStoneDate = null;
    String mileStoneRemarks = "";
    Boolean ms_name_b;    
    Boolean ms_date_b;    
    Boolean ms_remarks_b;  
    int msExistCnt = 0;
    Number userId = new Number(getOADBTransaction().getUserId());
    Date currentDate = getOADBTransaction().getCurrentDBDate();    
    
    ODmilestoneInfoVOImpl mileStoneVO       = getODmilestoneInfoVO1();
    ODMilestoneInfoEVOImpl mileStoneEVO     = getODMilestoneInfoEVO1();
    
    for(ODmilestoneInfoVORowImpl row =(ODmilestoneInfoVORowImpl)mileStoneVO.first();row!=null;row = (ODmilestoneInfoVORowImpl)mileStoneVO.next())
    {
      mileStoneId       = row.getPoMilestoneId()==null?new Number(-1):row.getPoMilestoneId();
      mileStoneName     = row.getMilestoneName()==null?"":row.getMilestoneName();
      mileStoneDate     = row.getMilestoneDate()==null?currentDate:row.getMilestoneDate();
      mileStoneRemarks  = row.getRemarks()==null?"":row.getRemarks();
      ms_name_b         = row.getmilestone_name_b()==null?Boolean.TRUE:row.getmilestone_name_b();
      ms_date_b         = row.getmilestone_date_b()==null?Boolean.TRUE:row.getmilestone_date_b();
      ms_remarks_b      = row.getmilestone_remarks_b()==null?Boolean.TRUE:row.getmilestone_remarks_b();

      Serializable[] methodParams = {mileStoneId};
      Class[] methodParamTypes = {mileStoneId.getClass()};
      mileStoneEVO.invokeMethod("ODMSEVOExecution",methodParams,methodParamTypes);
      msExistCnt = mileStoneEVO.getRowCount();
      if(!ms_remarks_b.booleanValue())
      {
        if(msExistCnt > 0)
        {
          ODMilestoneInfoEVORowImpl msEVORow = (ODMilestoneInfoEVORowImpl)mileStoneEVO.first();
          msEVORow.setMilestoneName(mileStoneName);
          msEVORow.setMilestoneDate(mileStoneDate);
          msEVORow.setRemarks(mileStoneRemarks);
          getOADBTransaction().commit();
          disableMileStoneInfo(mileStoneVO);
          throw new OAException("XXMER","XXOD_GSO_UPD_CONFIRM",null,OAException.CONFIRMATION,null);
        }
        else
        {
          ODMilestoneInfoEVORowImpl msEVORow = (ODMilestoneInfoEVORowImpl)mileStoneEVO.createRow();
          msEVORow.setPoMilestoneId(mileStoneId);         
          msEVORow.setPoHeaderId(poHeaderId);
          msEVORow.setMilestoneName(mileStoneName);
          msEVORow.setMilestoneDate(mileStoneDate);
          msEVORow.setRemarks(mileStoneRemarks);
          getOADBTransaction().commit();          
          disableMileStoneInfo(mileStoneVO);
          throw new OAException("XXMER","XXOD_GSO_CREATE_CONFIRM",null,OAException.CONFIRMATION,null);        
        }
      }
    }
  }

  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxmer.gsopo.milestone.server", "ODGSOPOMilestoneAMLocal");
  }

  /**
   * 
   * Container's getter for ODmilestoneInfoVO1
   */
  public ODmilestoneInfoVOImpl getODmilestoneInfoVO1()
  {
    return (ODmilestoneInfoVOImpl)findViewObject("ODmilestoneInfoVO1");
  }


  /**
   * 
   * Container's getter for ODMilestoneInfoEVO1
   */
  public ODMilestoneInfoEVOImpl getODMilestoneInfoEVO1()
  {
    return (ODMilestoneInfoEVOImpl)findViewObject("ODMilestoneInfoEVO1");
  }

  /**
   * 
   * Container's getter for MileStoneNameVO1
   */
  public MileStoneNameVOImpl getMileStoneNameVO1()
  {
    return (MileStoneNameVOImpl)findViewObject("MileStoneNameVO1");
  }


}