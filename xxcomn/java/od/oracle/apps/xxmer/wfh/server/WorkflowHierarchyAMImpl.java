package od.oracle.apps.xxmer.wfh.server;
import oracle.jbo.Row;
import oracle.jbo.Transaction;
//import oracle.jbo.RowSetIterator;
//import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewLinkImpl;

//import oracle.apps.fnd.common.MessageToken;
//import oracle.apps.fnd.common.VersionInfo;

import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
//import oracle.apps.fnd.framework.OAException;
//import oracle.apps.fnd.framework.OARow;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;
//import oracle.apps.fnd.framework.server.OAViewObjectImpl;
//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class WorkflowHierarchyAMImpl extends OAApplicationModuleImpl 
{
  /**
   * 
   * This is the default constructor (do not remove)
   */
  public WorkflowHierarchyAMImpl()
  {
  }

  public void initPlannerHierarchy()
  {
    PlannerVOImpl vo = getPlannerVO1();
    vo.initQuery();
  }


  /*
   ****************************************************************************
   * Creates a new planner.
   ****************************************************************************
   */
  public void createPlanner()
  {
    OAViewObject vo = (OAViewObject)getNewPlannerVO1();

    // Per the coding standards, this is the proper way to initialize a
    // VO that is used for both inserts and queries.  See View Objects
    // in Detail in the Developer's Guide for additional information.

    vo.setMaxFetchSize(0);

    if (!vo.isPreparedForExecution()) 
    { 
      vo.executeQuery(); 
    } 

    Row row = vo.createRow();
    //Fix hardcoding of Org_id
    row.setAttribute(NewPlannerVORowImpl.ORGID,"141");
    vo.insertRow(row);

    // Required per OA Framework Model Coding Standard M69
    row.setNewRowState(Row.STATUS_INITIALIZED);

  }

  /*
   ****************************************************************************
   * Delete a planner.
   ****************************************************************************
   */
  public void deletePlanner(String plannerId)
  {
    System.out.println("deletePlanner[" + plannerId + "]");
    DeletePlannerVOImpl vo = (DeletePlannerVOImpl)getDeletePlannerVO1();
    vo.initQuery(plannerId);
    //Row row = vo.getCurrentRow();
    Row row = vo.next();
    DeletePlannerVORowImpl dp = (DeletePlannerVORowImpl)row;
    System.out.println("DeletePlannerVORowImpl[" + dp.getPlannerId() + "]");
    row.remove();
    apply();
  }

  /*
   ****************************************************************************
   * Prepare for an update of a planner.
   ****************************************************************************
   */
  public void prepUpdatePlannerVO(String plannerId)
  {
    System.out.println("prepUpdatePlannerVO[" + plannerId + "]");
    UpdatePlannerVOImpl vo = (UpdatePlannerVOImpl)getUpdatePlannerVO1();
    vo.initQuery(plannerId);
    Row row = vo.next();
    UpdatePlannerVORowImpl up = (UpdatePlannerVORowImpl)row;
    System.out.println("UpdatePlannerVORowImpl-managerId[" + up.getManagerId() + "]");
  }

  /*
   ****************************************************************************
   * Prepare for an update of a merch class id with a new planner.
   ****************************************************************************
   */
  public void prepUpdateClassVO(String merchClassId)
  {
    System.out.println("prepUpdateClassVO[" + merchClassId + "]");
    UpdateClassVOImpl vo = (UpdateClassVOImpl)getUpdateClassVO1();
    vo.initQuery(merchClassId);
    Row row = vo.next();
    UpdateClassVORowImpl up = (UpdateClassVORowImpl)row;
    System.out.println("UpdateClassVORowImpl-plannerId[" + up.getPlannerId() + "]");
  }

  /*
   ****************************************************************************
   * Prepare for an update of a merch class id with a new planner.
   ****************************************************************************
   */
  public void prepUpdateClassVendorVO(String merchClassId, String vendorSiteId)
  {
    System.out.println("prepUpdateClassVendorVO[" + merchClassId + ", " + vendorSiteId + "]");
    UpdateClassVendorVOImpl vo = (UpdateClassVendorVOImpl)getUpdateClassVendorVO1();
    vo.initQuery(merchClassId, vendorSiteId);
    Row row = vo.next();
    UpdateClassVendorVORowImpl up = (UpdateClassVendorVORowImpl)row;
    System.out.println("UpdateClassVendorVORowImpl-plannerId[" + up.getPlannerId() + "]");
  }

  /*
   *****************************************************************************
   * Commits the transaction.
   *****************************************************************************
   */
  public void apply()
  {
    getTransaction().commit();
  } // end apply()
  
  /*
   *****************************************************************************
   * Executes a rollback including the database and the middle tier.
   *****************************************************************************
   */
  public void rollback()
  {
    Transaction txn = getTransaction();

    // This small optimization ensures that we don't perform a middle tier
    // rollback if we don't have to.
    if (txn.isDirty())
    {
      txn.rollback();
    }  
  } // end rollback()

  public void initClassList()
  {
    ClassSummaryVOImpl vo = getClassSummaryVO1();
    vo.initQuery();
  }

  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxmer.wfh.server", "WorkflowHierarchyAMLocal");
  }

  /**
   * 
   * Container's getter for DeletePlannerVO1
   */
  public DeletePlannerVOImpl getDeletePlannerVO1()
  {
    return (DeletePlannerVOImpl)findViewObject("DeletePlannerVO1");
  }

  /**
   * 
   * Container's getter for NewPlannerVO1
   */
  public NewPlannerVOImpl getNewPlannerVO1()
  {
    return (NewPlannerVOImpl)findViewObject("NewPlannerVO1");
  }

  /**
   * 
   * Container's getter for PlannerVO1
   */
  public PlannerVOImpl getPlannerVO1()
  {
    return (PlannerVOImpl)findViewObject("PlannerVO1");
  }

  /**
   * 
   * Container's getter for PlannerVO2
   */
  public PlannerVOImpl getPlannerVO2()
  {
    return (PlannerVOImpl)findViewObject("PlannerVO2");
  }

  /**
   * 
   * Container's getter for ManagerToPlannerVL1
   */
  public ViewLinkImpl getManagerToPlannerVL1()
  {
    return (ViewLinkImpl)findViewLink("ManagerToPlannerVL1");
  }

  /**
   * 
   * Container's getter for UpdatePlannerVO1
   */
  public UpdatePlannerVOImpl getUpdatePlannerVO1()
  {
    return (UpdatePlannerVOImpl)findViewObject("UpdatePlannerVO1");
  }


  /**
   * 
   * Container's getter for MerchClassSummaryVO1
   */
  public OAViewObjectImpl getMerchClassSummaryVO1()
  {
    return (OAViewObjectImpl)findViewObject("MerchClassSummaryVO1");
  }

  /**
   * 
   * Container's getter for ClassSummaryVO1
   */
  public ClassSummaryVOImpl getClassSummaryVO1()
  {
    return (ClassSummaryVOImpl)findViewObject("ClassSummaryVO1");
  }

  /**
   * 
   * Container's getter for UpdateClassVO1
   */
  public UpdateClassVOImpl getUpdateClassVO1()
  {
    return (UpdateClassVOImpl)findViewObject("UpdateClassVO1");
  }

  /**
   * 
   * Container's getter for ClassVendorSummaryVO1
   */
  public ClassVendorSummaryVOImpl getClassVendorSummaryVO1()
  {
    return (ClassVendorSummaryVOImpl)findViewObject("ClassVendorSummaryVO1");
  }

  /**
   * 
   * Container's getter for UpdateClassVendorVO1
   */
  public UpdateClassVendorVOImpl getUpdateClassVendorVO1()
  {
    return (UpdateClassVendorVOImpl)findViewObject("UpdateClassVendorVO1");
  }


}