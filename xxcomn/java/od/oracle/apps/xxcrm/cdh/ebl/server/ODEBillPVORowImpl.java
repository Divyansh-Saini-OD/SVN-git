package od.oracle.apps.xxcrm.cdh.ebl.server;
import oracle.apps.fnd.framework.server.OAViewRowImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODEBillPVORowImpl extends OAViewRowImpl 
{

  protected static final int ROWKEY = 0;
  protected static final int EMAIL = 1;
  protected static final int CD = 2;
  protected static final int FTP = 3;
  protected static final int STD = 4;
  protected static final int NONSTD = 5;
  protected static final int NSTD = 6;
  protected static final int SPLIT = 7;
  protected static final int TRANSMISSIONTYPE = 0;

  /**
   * 
   * This is the default constructor (do not remove)
   */
  public ODEBillPVORowImpl()
  {
  }
  //  Generated method. Do not modify.

  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case ROWKEY:
        return getRowKey();
      case EMAIL:
        return getEmail();
      case CD:
        return getCD();
      case FTP:
        return getFTP();
      case STD:
        return getStd();
      case NONSTD:
        return getNonStd();
      case NSTD:
        return getNStd();
      case SPLIT:
        return getSplit();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }
  //  Generated method. Do not modify.

  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case ROWKEY:
        setRowKey((Number)value);
        return;
      case EMAIL:
        setEmail((Boolean)value);
        return;
      case CD:
        setCD((Boolean)value);
        return;
      case FTP:
        setFTP((Boolean)value);
        return;
      case STD:
        setStd((Boolean)value);
        return;
      case NONSTD:
        setNonStd((Boolean)value);
        return;
      case NSTD:
        setNStd((Boolean)value);
        return;
      case SPLIT:
        setSplit((Boolean)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }

  /**
   * 
   * Gets the attribute value for the calculated attribute TransmissionType
   */
  public Boolean getTransmissionType()
  {
    return (Boolean)getAttributeInternal(TRANSMISSIONTYPE);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for the calculated attribute TransmissionType
   */
  public void setTransmissionType(Boolean value)
  {
    setAttributeInternal(TRANSMISSIONTYPE, value);
  }

  /**
   * 
   * Gets the attribute value for the calculated attribute RowKey
   */
  public Number getRowKey()
  {
    return (Number)getAttributeInternal(ROWKEY);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for the calculated attribute RowKey
   */
  public void setRowKey(Number value)
  {
    setAttributeInternal(ROWKEY, value);
  }

  /**
   * 
   * Gets the attribute value for the calculated attribute Email
   */
  public Boolean getEmail()
  {
    return (Boolean)getAttributeInternal(EMAIL);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for the calculated attribute Email
   */
  public void setEmail(Boolean value)
  {
    setAttributeInternal(EMAIL, value);
  }

  /**
   * 
   * Gets the attribute value for the calculated attribute CD
   */
  public Boolean getCD()
  {
    return (Boolean)getAttributeInternal(CD);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for the calculated attribute CD
   */
  public void setCD(Boolean value)
  {
    setAttributeInternal(CD, value);
  }

  /**
   * 
   * Gets the attribute value for the calculated attribute FTP
   */
  public Boolean getFTP()
  {
    return (Boolean)getAttributeInternal(FTP);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for the calculated attribute FTP
   */
  public void setFTP(Boolean value)
  {
    setAttributeInternal(FTP, value);
  }

  /**
   * 
   * Gets the attribute value for the calculated attribute Std
   */
  public Boolean getStd()
  {
    return (Boolean)getAttributeInternal(STD);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for the calculated attribute Std
   */
  public void setStd(Boolean value)
  {
    setAttributeInternal(STD, value);
  }

  /**
   * 
   * Gets the attribute value for the calculated attribute NonStd
   */
  public Boolean getNonStd()
  {
    return (Boolean)getAttributeInternal(NONSTD);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for the calculated attribute NonStd
   */
  public void setNonStd(Boolean value)
  {
    setAttributeInternal(NONSTD, value);
  }

  /**
   * 
   * Gets the attribute value for the calculated attribute NStd
   */
  public Boolean getNStd()
  {
    return (Boolean)getAttributeInternal(NSTD);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for the calculated attribute NStd
   */
  public void setNStd(Boolean value)
  {
    setAttributeInternal(NSTD, value);
  }

  /**
   * 
   * Gets the attribute value for the calculated attribute Split
   */
  public Boolean getSplit()
  {
    return (Boolean)getAttributeInternal(SPLIT);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for the calculated attribute Split
   */
  public void setSplit(Boolean value)
  {
    setAttributeInternal(SPLIT, value);
  }
}