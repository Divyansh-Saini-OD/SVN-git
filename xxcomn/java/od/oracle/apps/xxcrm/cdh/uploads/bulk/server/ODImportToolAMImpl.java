package od.oracle.apps.xxcrm.cdh.uploads.bulk.server;
/* Subversion Info:
 * $HeadURL$
 * $Rev$
 * $Date$
*/
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;
//Added  by Mangala
import od.oracle.apps.xxcrm.cdh.ebl.server.ODUtil;
import java.sql.SQLException;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.jdbc.OracleCallableStatement;
import java.sql.Types;
import oracle.jbo.domain.Number;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;
//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODImportToolAMImpl extends OAApplicationModuleImpl 
{
  /**
   * 
   * This is the default constructor (do not remove)
   */
  public ODImportToolAMImpl()
  {
  }


  /**
   * 
   * Container's getter for ODImportToolsVO
   */
  public OAViewObjectImpl getODImportToolsVO()
  {
    return (OAViewObjectImpl)findViewObject("ODImportToolsVO");
  }

  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxcrm.cdh.uploads.bulk.server", "ODImportToolAMLocal");
  }

 //Added for File Upload Option 
  public String uploadAction( String strUserId, 
                              String strRespId,
                              String strRespApplId,
                              String fileUploadId)
  {
    ODUtil utl = new ODUtil(this);
    utl.log ("Inside AM: UploadAction");
    OADBTransaction db=this.getOADBTransaction();
    Number fileUpdId = null;
    String strReqId = "";
	OracleCallableStatement ocs1 =null;
    try
    {
	     String stmt = "BEGIN fnd_global.apps_initialize( user_id           => :1"
                                                        +", resp_id       => :2"
                                                        +", resp_appl_id  => :3);"
                                                        +" END;" ; 
	    ocs1 = (OracleCallableStatement)db.createCallableStatement(stmt,1);
        ocs1.setInt(1, Integer.parseInt(strUserId));
        ocs1.setInt(2, Integer.parseInt(strRespId));
        ocs1.setInt(3, Integer.parseInt(strRespApplId));
        ocs1.execute();
	      ocs1.close();
    } 
    
   catch(SQLException sqlexception)
   {
       throw OAException.wrapperException(sqlexception);
   }
   catch(Exception exception)
   {
       throw OAException.wrapperException(exception);
   } 
   finally
        {
           try{
                if(ocs1 != null)
                   ocs1.close();
              }
		   catch(Exception e){}
        }
     OracleCallableStatement ocs2 =null;		
     try
     { 
       fileUpdId= new Number(fileUploadId); 
       utl.log ("Inside AM: FileUploadId is:" + fileUpdId);
      /* String stmt1 = "BEGIN XXTPS_FILE_UPLOADS_PKG.XXTPS_FILE_UPLOAD(  X_ERROR_CODE    => :1"
                                                                +", X_ERROR_BUF         => :2"
                                                                +", P_FILE_UPLOAD_ID    =>:3);" 
                                                                +" END;" ;                  
      OracleCallableStatement ocs2 = (OracleCallableStatement)db.createCallableStatement(stmt1,1);
      ocs2.registerOutParameter(1,Types.NUMERIC);
      ocs2.registerOutParameter(2,Types.VARCHAR);
      ocs2.setNUMBER(3,fileUpdId); */

      // Modified the code to launch the conc pgm
      String stmt1 = "BEGIN XXTPS_FILE_UPLOADS_CMN_PKG.XXTPS_INITIATE_FILE_UPLOAD( X_REQUEST_ID        => :1"
                                                                               +", P_FILE_UPLOAD_ID    =>:2);" 
                                                                +" END;" ; 
      ocs2 = (OracleCallableStatement)db.createCallableStatement(stmt1,1);
      ocs2.registerOutParameter(1,Types.NUMERIC);
      ocs2.setNUMBER(2,fileUpdId);
      ocs2.execute();
      strReqId = ocs2.getString(1);      
      utl.log(" strReqId:"+  strReqId);
      if (strReqId == null)
      {
          strReqId ="Error in submitting concurrent program";
          utl.log ("Inside IF strReqId :" + strReqId);
      }
      ocs2.close();
     }

   catch(SQLException sqlexception)
   {
       throw OAException.wrapperException(sqlexception);
   }
   catch(Exception exception)
   {
       throw OAException.wrapperException(exception);
   } 
   finally
        {
           try{
                if(ocs2 != null)
                   ocs2.close();
              }
		   catch(Exception e){}
        }
      return strReqId;
  } // End of upLoad

  /**
   * 
   * Container's getter for ODImportToolTempVO
   */
  public OAViewObjectImpl getODImportToolTempVO()
  {
    return (OAViewObjectImpl)findViewObject("ODImportToolTempVO");
  }


  /**
   * 
   * Container's getter for ODImportToolTemplatePVO
   */
  public OAViewObjectImpl getODImportToolTemplatePVO()
  {
    return (OAViewObjectImpl)findViewObject("ODImportToolTemplatePVO");
  }


  /**
   * 
   * Container's getter for ODImportTempNameFilesPVO
   */
  public OAViewObjectImpl getODImportTempNameFilesPVO()
  {
    return (OAViewObjectImpl)findViewObject("ODImportTempNameFilesPVO");
  }

 
}