/*======================================================================================+
 |                       Office Depot - Project Simplify                                |
 |            Oracle NAIO/WIPRO/Office Depot/Consulting Organization                    |
 +======================================================================================+
 |  FILENAME                                                                            |
 |             ODSiteViewAMImpl.java                                                    |
 |                                                                                      |
 |  DESCRIPTION                                                                         |
 |    Root Application Module for View Party Site page.                                 |
 |                                                                                      |
 |  NOTES                                                                               |
 |                                                                                      |
 |                                                                                      |
 |  DEPENDENCIES                                                                        |
 |    This class file is called from ODSiteViewCOImpl.java                              |
 |                                                                                      |
 |  HISTORY                                                                             |
 |                                                                                      |
 |   04/09/2007  Ashok Kumar         Created                                            |
 |   24-Dec-2007 Anirban Chaudhuri   Fixed code for defect#187 in ASN Tracker           |
 |   14-FEB-2008 Jasmine Sujithra    Returned the Site Address instead of sitename      |
 +=====================================================================================*/
package od.oracle.apps.xxcrm.asn.partysite.server;
import od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNApplicationModuleImpl;
import od.oracle.apps.xxcrm.asn.partysite.common.server.ODPartySiteVOImpl;
import od.oracle.apps.xxcrm.asn.partysite.common.server.ODPartySiteVORowImpl;

import oracle.apps.asn.common.poplist.server.LookupsOrderByTagVOImpl;
import oracle.apps.asn.common.poplist.server.LookupsVOImpl;
import oracle.apps.asn.common.server.PartyVOImpl;
import oracle.apps.asn.common.server.PartyVORowImpl;
import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.common.VersionInfo;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.server.OADBTransaction;

//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODSiteViewAMImpl extends ODASNApplicationModuleImpl 
{
 /**
  * Oracle Applications internal source control identifier.
  */
  public static final String RCS_ID="$Header: ODSiteViewAMImpl.java 115.01 2007/09/04 18:25:36 Ashokuma noship $";

 /**
  * Oracle Applications internal source control identifier.
  */
  public static final boolean RCS_ID_RECORDED =
    VersionInfo.recordClassVersion(RCS_ID, "od.oracle.apps.xxcrm.asn.partysite.server");
    

  /**
   * 
   * This is the default constructor (do not remove)
   */
  public ODSiteViewAMImpl()
  {
  }

  /**
   * 
   * Container's getter for ODGetPartySiteIdForOpprIdVO
   */
  public ODGetPartySiteIdForOpprIdVOImpl getODGetPartySiteIdForOpprIdVO()
  {
    return (ODGetPartySiteIdForOpprIdVOImpl)findViewObject("ODGetPartySiteIdForOpprIdVO");
  }

  /**
   * 
   * Container's getter for ODGetPartySiteIdForLeadIdVO
   */
  public ODGetPartySiteIdForLeadIdVOImpl getODGetPartySiteIdForLeadIdVO()
  {
    return (ODGetPartySiteIdForLeadIdVOImpl)findViewObject("ODGetPartySiteIdForLeadIdVO");
  }

  /**
   * 
   * Container's getter for ODHZBasicPtySiteInfoVO
   */
  public ODHZBasicPtySiteInfoVOImpl getODHZBasicPtySiteInfoVO()
  {
    return (ODHZBasicPtySiteInfoVOImpl)findViewObject("ODHZBasicPtySiteInfoVO");
  }

  /**
   * 
   * Container's getter for ODHZBasicPartyInfoVO
   */
  public ODHZBasicPartyInfoVOImpl getODHZBasicPartyInfoVO()
  {
    return (ODHZBasicPartyInfoVOImpl)findViewObject("ODHZBasicPartyInfoVO");
  }

  /**
   * 
   * Container's getter for LookupsVO
   */
  public LookupsVOImpl getLookupsVO()
  {
    return (LookupsVOImpl)findViewObject("LookupsVO");
  }

  /**
   * 
   * Container's getter for LookupsOrderByTagVO
   */
  public LookupsOrderByTagVOImpl getLookupsOrderByTagVO()
  {
    return (LookupsOrderByTagVOImpl)findViewObject("LookupsOrderByTagVO");
  }

  /**
   * 
   * Container's getter for ODPartySiteVO
   */
  public ODPartySiteVOImpl getODPartySiteVO()
  {
    return (ODPartySiteVOImpl)findViewObject("ODPartySiteVO");
  }

  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxcrm.asn.partysite.server", "ODSiteViewAMLocal");
  }

  /**
   * 
   * Container's getter for PartyVO
   */
  public PartyVOImpl getPartyVO()
  {
    return (PartyVOImpl)findViewObject("PartyVO");
  }





  /**
   *
   * Initializes the query for the customer actions poplist.
   *
   */
  public void initCustomerActionsQuery()
  {
    LookupsVOImpl vo = getLookupsVO();
    if (vo == null)
    {
        MessageToken[] tokens = { new MessageToken("NAME", "LookupsVO") };
        throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.initQuery("XX_ASN_SITE_ACTIONS", "0");
  }  

   /**
   * Method for fetching the party name from the party identifier
   * 
   * @param partyId the customer party identifier
   */
  public String getPartyNameFromId(String partyId)
  {
    final String METHOD_NAME = "xxcrm.asn.partysite.server.ODSiteViewAMImpl.getPartyNameFromId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      StringBuffer buf = new StringBuffer();
      buf.append("Input Parameters: partyId = ");
      buf.append(partyId);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
    }

    PartyVOImpl vo = this.getPartyVO();
    if (vo == null)
    {
          MessageToken[] tokens = { new MessageToken("NAME", "PartyVO") };
          throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.initQuery(partyId);

    String partyName = null;

    if ( vo != null && vo.isExecuted() )
    {
         PartyVORowImpl cRow = (PartyVORowImpl)vo.first();
         partyName = ((Object)cRow.getAttribute("PartyName")).toString();
    }

    if (isProcLogEnabled) {
      StringBuffer buf = new StringBuffer();
      buf.append("Output Parameters: partyName = ");
      buf.append(partyName);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }

    return partyName;
  }
  
  /**
   * Method for fetching the party site identifier from the party and sales lead identifier.
   * 
   * @param salesLeadId  Sales Lead identifier
   * @param partyId      customer party identifier
   */  
	public String getPartySiteIdForLeadId (String salesLeadId, String partyId)
  {
    final String METHOD_NAME = "xxcrm.asn.partysite.server.ODSiteViewAMImpl.getPartySiteIdForLeadId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      StringBuffer buf = new StringBuffer();
      buf.append("Input Parameters: salesLeadId = ");
      buf.append(salesLeadId);
      buf.append(" and partyId = ");
      buf.append(partyId);      
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
    }

    ODGetPartySiteIdForLeadIdVOImpl vo = (ODGetPartySiteIdForLeadIdVOImpl) findViewObject("ODGetPartySiteIdForLeadIdVO");    
    if (vo == null)
    {
          MessageToken[] tokens = { new MessageToken("NAME", "ODGetPartySiteIdForLeadIdVO") };
          throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.initQuery(salesLeadId, partyId);

    String partySiteId = null;

    if ( vo != null && vo.isExecuted() )
    {
         ODGetPartySiteIdForLeadIdVORowImpl cRow = (ODGetPartySiteIdForLeadIdVORowImpl)vo.first();
		 //Anirban added for fixing defect#187 in ASN Tracker: Start
          if(cRow == null)
		  {
            OAException e = new OAException("XXCRM", "XX_SFA_081_PARTY_WOUT_SITE");
		    throw (e);
		  }

          if(cRow.getAttribute("AddressId") == null)
		  {
            OAException e = new OAException("XXCRM", "XX_SFA_081_PARTY_WOUT_SITE");
		    throw (e);
		  }
		 //Anirban added for fixing defect#187 in ASN Tracker: End
         partySiteId = cRow.getAddressId().toString();
    }

    if (isProcLogEnabled) {
      StringBuffer buf = new StringBuffer();
      buf.append("Output Parameters: partySiteId = ");
      buf.append(partySiteId);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }

    return partySiteId;
    
  }

  /**
   * Method for fetching the party site identifier from the party and lead(Opportunity) identifier.
   * 
   * @param leadId    Lead identifier
   * @param partyId   customer party identifier
   */  
	public String getPartySiteIdForOpprId (String leadId, String partyId)
  {
    final String METHOD_NAME = "xxcrm.asn.partysite.server.ODSiteViewAMImpl.getPartySiteIdForOpprId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      StringBuffer buf = new StringBuffer();
      buf.append("Input Parameters: leadId = ");
      buf.append(leadId);
      buf.append(" and partyId = ");
      buf.append(partyId);      
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
    }

    ODGetPartySiteIdForOpprIdVOImpl vo = (ODGetPartySiteIdForOpprIdVOImpl) findViewObject("ODGetPartySiteIdForOpprIdVO");    
    if (vo == null)
    {
          MessageToken[] tokens = { new MessageToken("NAME", "ODGetPartySiteIdForOpprIdVO") };
          throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.initQuery(leadId, partyId);

    String partySiteId = null;

    if ( vo != null && vo.isExecuted() )
    {
         ODGetPartySiteIdForOpprIdVORowImpl cRow = (ODGetPartySiteIdForOpprIdVORowImpl)vo.first();
		 //Anirban added for fixing defect#187 in ASN Tracker: Start
          if(cRow == null)
		  {
            OAException e = new OAException("XXCRM", "XX_SFA_081_PARTY_WOUT_SITE");
		    throw (e);
		  }

          if(cRow.getAttribute("AddressId") == null)
		  {
            OAException e = new OAException("XXCRM", "XX_SFA_081_PARTY_WOUT_SITE");
		    throw (e);
		  }
		 //Anirban added for fixing defect#187 in ASN Tracker: End
         partySiteId = cRow.getAddressId().toString();
    }

    if (isProcLogEnabled) {
      StringBuffer buf = new StringBuffer();
      buf.append("Output Parameters: partySiteId = ");
      buf.append(partySiteId);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }

    return partySiteId;
    
  }


   /**
   * Method for fetching the party site details
   *
   * @param partId       Customer Party identifier
   * @param partySiteId  Customer Party Site identifier
   */
  public String getSiteNameFromId(String  partyId, String partySiteId)
  {
    final String METHOD_NAME = "xxcrm.asn.partysite.server.ODSiteViewAMImpl.getSiteNameFromId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      StringBuffer buf = new StringBuffer();
      buf.append("Input Parameters: partyId = ");
      buf.append(partyId);
      buf.append(", partySiteId = ");
      buf.append(partySiteId);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
    }

    ODPartySiteVOImpl vo = this.getODPartySiteVO();
    if (vo == null)
    {
          MessageToken[] tokens = { new MessageToken("NAME", "ODPartySiteVO") };
          throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.initQuery(partyId, partySiteId);

    String partySiteName = null;

    if ( vo != null && vo.isExecuted() )
    {
         ODPartySiteVORowImpl cRow = (ODPartySiteVORowImpl)vo.first();
		 //Anirban added for fixing defect#187 in ASN Tracker: Start
		 dbTrx.writeDiagnostics(this,  "anirban20dec: line 371 in AM", OAFwkConstants.STATEMENT);
          if(cRow == null)
		  {
            OAException ex = new OAException("XXCRM", "XX_SFA_081_PARTY_WOUT_SITE");
			throw (ex);			
		  }          
		 //Anirban added for fixing defect#187 in ASN Tracker: End
         partySiteName = cRow.getPartySiteName();
         /* Modified for getting Site address instead of name */
         if(partySiteName == null)
         {
            partySiteName = cRow.getPartySiteAddress();
         }

        

		 if(cRow!=null)
			 dbTrx.writeDiagnostics(this,  "anirban20dec: line 389 in AM", OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled) {
      StringBuffer buf = new StringBuffer();
      buf.append("Output Parameters: partySiteName = ");
      buf.append(partySiteName);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }

    return partySiteName;
  }  

   /**
   * Method for fetching the primary party site identifier
   *
   * @param partId       Customer Party identifier
   * @param partySiteId  Customer Party Site identifier
   */
  public String getPrmySiteId(String  partyId, String partySiteId)
  {
    final String METHOD_NAME = "xxcrm.asn.partysite.server.ODSiteViewAMImpl.getPrmySiteId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    ODPartySiteVOImpl vo = this.getODPartySiteVO();
    if (vo == null)
    {
          MessageToken[] tokens = { new MessageToken("NAME", "ODPartySiteVO") };
          throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    //vo.initQuery(partyId, partySiteId);

    String prmySiteId = null;

    if ( vo != null && vo.isExecuted() )
    {
         ODPartySiteVORowImpl cRow = (ODPartySiteVORowImpl)vo.first();
		 //Anirban added for fixing defect#187 in ASN Tracker: Start
          if(cRow == null)
		  {
            OAException e = new OAException("XXCRM", "XX_SFA_081_PARTY_WOUT_SITE");
		    throw (e);
		  }

          if(cRow.getAttribute("PartySiteId") == null)
		  {
            OAException e = new OAException("XXCRM", "XX_SFA_081_PARTY_WOUT_SITE");
		    throw (e);
		  }
		 //Anirban added for fixing defect#187 in ASN Tracker: End
         prmySiteId = cRow.getPartySiteId().toString();
    }

    if (isProcLogEnabled) {
      StringBuffer buf = new StringBuffer();
      buf.append("Output Parameters: prmySiteId = ");
      buf.append(prmySiteId);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }

    return prmySiteId;
  }  

  /**
   * Method for fetching basic party information from party identifier
   * 
   * @param partyId  Customer Party identifier
   */
  public void getPartyInfo(String partyId)
  {
    this.getODHZBasicPartyInfoVO().initQuery(partyId);    
  }

  /**
   * Method for fetching basic site information from party site identifier
   * 
   * @param partySiteId  Customer Party Site identifier
   */
  public void getSiteInfo(String partySiteId) 
  {
    this.getODHZBasicPtySiteInfoVO().initQuery(partySiteId);    
    
  }
  
}