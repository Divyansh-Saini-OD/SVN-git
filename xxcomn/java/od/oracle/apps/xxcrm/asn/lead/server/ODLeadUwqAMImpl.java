/*===========================================================================+
 |      Copyright (c) 2001 Oracle Corporation, Redwood Shores, CA, USA       |
 |                         All rights reserved.                              |
 +===========================================================================+
 |  HISTORY                                                                  |
 |  05-Feb-08   Anirban Chaudhuri          Created                           |
 +===========================================================================*/

package od.oracle.apps.xxcrm.asn.lead.server;

import com.sun.java.util.collections.ArrayList;
import com.sun.java.util.collections.HashMap;

import java.io.Serializable;
import oracle.apps.asn.lead.server.*;
import od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNApplicationModuleImpl;
import oracle.apps.asn.common.fwk.server.ASNConstants;
import oracle.apps.asn.common.fwk.server.ASNViewObjectImpl;
import oracle.apps.asn.common.fwk.server.ASNViewRowImpl;
import oracle.apps.asn.common.poplist.server.ContactActionsVOImpl;
import oracle.apps.asn.common.poplist.server.SalesMethodologiesVOImpl;
import oracle.apps.asn.common.server.CurrencyVOImpl;
import oracle.apps.asn.common.server.CurrencyVORowImpl;
import oracle.apps.asn.common.server.SalesMethDefaultStageVOImpl;
import oracle.apps.asn.common.server.SalesMethDefaultStageVORowImpl;
import oracle.apps.asn.common.server.StatusDetailsVOImpl;
import oracle.apps.asn.common.server.StatusDetailsVORowImpl;
import oracle.apps.asn.lead.poplist.server.LeadCloseReasonsVOImpl;
import oracle.apps.asn.lead.poplist.server.LeadDetCloseReasonsVOImpl;
import oracle.apps.asn.lead.poplist.server.LeadMethSalesStagesVOImpl;
import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.common.VersionInfo;
import oracle.apps.fnd.framework.OAApplicationModule;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;
import oracle.apps.fnd.framework.server.OAViewRowImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewLinkImpl;

import org.w3c.dom.Element;

//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODLeadUwqAMImpl extends ODASNApplicationModuleImpl
{

  public static final String RCS_ID="$Header: ODLeadUwqAMImpl.java 115.58 2005/02/15 20:39:15 pchalaga ship $";
  public static final boolean RCS_ID_RECORDED =
        VersionInfo.recordClassVersion(RCS_ID, "oracle.apps.asn.lead.server");


  /**
   * Prepares the query for re-execution
   *
   * @param viewUsageName  usage or instance name of the view object.
   */
  public void resetQuery(String viewUsageName)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.resetQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    if("LeadHeaderDetailsVO".equals(viewUsageName))
    {
        // reset the Lead Header Details view instance
      OAViewObject viewObject = (OAViewObject)this.getLeadHeaderDetailsVO();
      if(viewObject!=null && viewObject.isPreparedForExecution())
      {
        viewObject.setPreparedForExecution(false);
      }
        // reset the Lead Header Details properties view instance      
      viewObject = (OAViewObject)this.getLeadDetAppPropertiesVO();
      if(viewObject!=null && viewObject.isPreparedForExecution())
      {
        viewObject.setPreparedForExecution(false);
      }
        // reset the Proposal list view objects
      OAApplicationModuleImpl oami = (OAApplicationModuleImpl)findApplicationModule("ASNPrpLstAM");
      if(oami!=null)
      {
        oami.invokeMethod("resetQuery");
      }
        // reset the Notes view objects
      oami = (OAApplicationModuleImpl)findApplicationModule("ASNNotesAM");
      if(oami!=null)
      {
        oami.invokeMethod("resetQuery");
        oami.invokeMethod("resetNewNote");
        oami.invokeMethod("resetNotePoplist", new Serializable[]{"LEAD"});        
      }
        // reset the Suggested Contacts view objects
      oami = (OAApplicationModuleImpl)findApplicationModule("ASNSugCtctLstAM");
      if(oami!=null)
      {
        oami.invokeMethod("resetQueryForLead");
      }
        // reset the Sales Cycle view objects
      oami = (OAApplicationModuleImpl)findApplicationModule("ASNSCStgStackAM");
      if(oami!=null)
      {
        oami.invokeMethod("resetQuery");
      }
        // reset the Products Under Contract view objects
      oami = (OAApplicationModuleImpl)findApplicationModule("ASNPrdtCntrLstAM");
      if(oami!=null)
      {
        oami.invokeMethod("resetQuery");
      }
        // reset the Customer Opportunity view objects
      oami = (OAApplicationModuleImpl)findApplicationModule("ASNCustOpptyLstAM");
      if(oami!=null)
      {
        oami.invokeMethod("resetQuery");
      }
        // reset the Customer Opportunity view objects
      oami = (OAApplicationModuleImpl)findApplicationModule("ASNCustomerServiceAM");
      if(oami!=null)
      {
        oami.invokeMethod("resetQuery");
      }      
        // reset the Task Summary view objects
      oami = (OAApplicationModuleImpl)findApplicationModule("CacTaskSummAM");
      if(oami!=null)
      {
        oami.invokeMethod("resetQuery");
      }      

        // reset the external sales team
      oami = (OAApplicationModuleImpl)findApplicationModule("PvLeadPartnerAM");
      if(oami!=null)
      {
        oami.invokeMethod("resetLeadPartners");
      }      

    }      
    else if("LeadDetailsVO".equals(viewUsageName))
    {
        // reset the Lead Details view instance
      OAViewObject viewObject = (OAViewObject)this.getLeadDetailsVO();
      if(viewObject!=null && viewObject.isPreparedForExecution())
      {
        viewObject.setPreparedForExecution(false);
      }
        // get Lead Details properties view instance      
      viewObject = (OAViewObject)this.getLeadUwqAppPropertiesVO();
      if(viewObject!=null && viewObject.isPreparedForExecution())
      {
        viewObject.setPreparedForExecution(false);
      }
        // reset the Notes view objects
      OAApplicationModuleImpl oami = (OAApplicationModuleImpl)findApplicationModule("ASNNotesAM");
      if(oami!=null)
      {
        oami.invokeMethod("resetQuery");
        oami.invokeMethod("resetNewNote");
        oami.invokeMethod("resetNotePoplist", new Serializable[]{"LEAD"});                
      }
        // reset the Task Summary view objects
      oami = (OAApplicationModuleImpl)findApplicationModule("CacTaskSummAM");
      if(oami!=null)
      {
        oami.invokeMethod("resetQuery");
      }            
    }   
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }


  /**
   * Prepares this AM for Activation. This is required to re-create the passivated LeadSearchVO
   *
   * @param parent - the parent XML element under which the application module custom state is stored
   */
  public void prepareForActivation(Element parent)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.prepareForActivation";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    super.prepareForActivation(parent);
    OADBTransaction oaTxn = this.getOADBTransaction();
    String searchParamsStr = (String)oaTxn.getValue("ASNTxnLeadUwqSrchParam");
    String dispColumnsStr = (String)oaTxn.getValue("ASNTxnLeadUwqDispCols");
    HashMap searchParams = LeadSearchManager.getSearchParams(searchParamsStr);
    ArrayList dispColumns = LeadSearchManager.getDisplayColumns(dispColumnsStr);
    LeadSearchManager leadSearchManager = new LeadSearchManager();
// Commented Out for time being
// ASNViewObjectImpl vo = (ASNViewObjectImpl)leadSearchManager.getSearchVO(this, searchParams, dispColumns);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

  }


  /**
   * Retrieves the lead header information. The view object is executed if it is not already executed.
   *
   * @param viewUsageName View usage name. Possible values are LeadDetailsVO and LeadHeaderDetailsVO
   * @param leadId Lead identifier
   *
   * @return hashmap of lead header details
   */
  public HashMap getLeadInfo(String viewUsageName, String leadId)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.getLeadInfo";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    HashMap leadInfo = null;
      // get view instance/object
    ASNViewObjectImpl leadDetailsVo = (ASNViewObjectImpl)findViewObject(viewUsageName);
    ASNViewRowImpl leadRow = null;
    if(leadDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    if(!leadDetailsVo.isPreparedForExecution())
    {
      if(leadId==null || "".equals(leadId.trim()))
      {
        return null;
      }
      leadDetailsVo.initQuery(leadId);
    }
    else
    {
        // make sure that the lead in memory matches with that of requested lead id
      leadRow = (ASNViewRowImpl)leadDetailsVo.first();
      if(leadRow!=null)
      {
        Number val = (Number)leadRow.getAttribute("SalesLeadId");
        if(val!=null)
        {
          boolean isMatched = (val.stringValue()).equals(leadId);
          if(!isMatched && leadId!=null && !"".equals(leadId.trim()))
          {
              // reload the requested lead
            leadDetailsVo.initQuery(leadId);
          }
        }
      }
    }

    leadRow = (ASNViewRowImpl)leadDetailsVo.first();
    if(leadRow!=null)
    {
      leadInfo = new HashMap(13);
      Number value = null;
      value = (Number)leadRow.getAttribute("SalesLeadId");
      if(value!=null)
      {
        leadInfo.put("SalesLeadId",value.toString());
      }
      value = (Number)leadRow.getAttribute("CustomerId");
      if(value!=null)
      {
        leadInfo.put("CustomerId",value.toString());
      }
      value = (Number)leadRow.getAttribute("PrimaryContactPartyId");
      if(value!=null)
      {
        leadInfo.put("PrimaryContactPartyId",value.toString());
      }
      leadInfo.put("CurrencyCode",(String)leadRow.getAttribute("CurrencyCode"));
      if("LeadHeaderDetailsVO".equals(viewUsageName))
      {
        value = (Number)leadRow.getAttribute("SalesMethodologyId");
        if(value!=null)
        {
          leadInfo.put("SalesMethodologyId",value.toString());
        }
        value = (Number)leadRow.getAttribute("SalesStageId");
        if(value!=null)
        {
          leadInfo.put("SalesStageId",value.toString());
        }
        leadInfo.put("SalesMethFlag",(String)leadRow.getAttribute("SalesMethFlag"));
        leadInfo.put("SourceCode",(String)leadRow.getAttribute("SourceCode"));
        value = (Number)leadRow.getAttribute("AddressId");
        if(value!=null)
        {
          leadInfo.put("AddressId",value.toString());
        }
        leadInfo.put("Address",(String)leadRow.getAttribute("Address"));
      }
      leadInfo.put("StatusCode",(String)leadRow.getAttribute("StatusCode"));
      leadInfo.put("Description",(String)leadRow.getAttribute("Description"));
      leadInfo.put("CurrencyName",(String)leadRow.getAttribute("CurrencyName"));
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  leadInfo : ");
      buf.append(leadInfo.toString());
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }


    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return leadInfo;
  }


  /**
   * Identifies the absolute row index (0-based) of a given lead in the lead summary view object
   *
   * @param viewUsageName  usage or instance name of the view object. Possible values are
   *                       &quot;LeadSearchVO&quot;
   * @param leadId    lead identifier
   * @return  String indicates the row index
   */
  public String getLeadRowIndex( String viewUsageName,
                                 String leadId
                               )
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.getLeadRowIndex";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  viewUsageName : ");
      buf.append(viewUsageName);
      buf.append("  leadId : ");
      buf.append(leadId);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    OAApplicationModule queryAM = (OAApplicationModule)this.findApplicationModule("ASNLeadQryAM");
      // get view instance/object
    OAViewObject leadSummaryVo = (OAViewObject)queryAM.findViewObject(viewUsageName);
    if (leadSummaryVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    int index = 0;
      // determine the row index based on the requested lead
    if(leadId!=null && leadId.trim().length()>=0)
    {
      RowSetIterator leadSummaryItr = null;
      OAViewRowImpl row = null;
      if(leadSummaryVo!=null) {
        leadSummaryItr = leadSummaryVo.findRowSetIterator("LeadSummaryIterator");
        if(leadSummaryItr==null)
          leadSummaryItr = leadSummaryVo.createRowSetIterator("LeadSummaryIterator");
        else
          leadSummaryItr.reset();
      }
      if(leadSummaryItr!=null)
      {
        leadSummaryItr.setRowValidation(false);
        String id = null;
        while(leadSummaryItr.hasNext())
        {
          row = (OAViewRowImpl)leadSummaryItr.next();
          if(row!=null)
            id = row.getAttribute("SalesLeadId").toString();
          if(leadId.equals(id))
          {
            index = leadSummaryItr.getCurrentRowIndex();
            break;
          }
        }
        leadSummaryItr.closeRowSetIterator();
//      leadSummaryItr.setRangeStart(currentValue-1);
//      leadSummaryItr.setCurrentRowAtRangeIndex((currentValue-1)-idx);
//      row = (OAViewRowImpl)leadSummaryItr.getCurrentRow();
//      leadSummaryVo.setCurrentRow(row);
      }
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return String.valueOf(index);
  }

  /**
   * Identifies and returns the lead information from the lead summary view object based on
   * specified absolute row index
   *
   * @param viewUsageName  usage or instance name of the view object. Possible values are
   *                       &quot;LeadSearchVO&quot;
   * @param rowIndex row index (0-based) on view object
   * @return HashMap lead information like lead id and customer id
   */
  public HashMap findLeadInfoByRowIndex( String viewUsageName,
                                         String rowIndex
                                       )
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.findLeadInfoByRowIndex";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    HashMap leadInfo = null;
    OAApplicationModule queryAM = (OAApplicationModule)this.findApplicationModule("ASNLeadQryAM");
    // get view instance/object
    OAViewObject leadSummaryVo = (OAViewObject)queryAM.findViewObject(viewUsageName);
    if (leadSummaryVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
      // determine the lead id based on the row index
    if(rowIndex!=null && rowIndex.trim().length()>=0)
    {
      RowSetIterator leadSummaryItr = null;
      if(leadSummaryVo!=null) {
        leadSummaryItr = leadSummaryVo.findRowSetIterator("LeadSummaryIterator");
        if(leadSummaryItr==null)
          leadSummaryItr = leadSummaryVo.createRowSetIterator("LeadSummaryIterator");
        else
          leadSummaryItr.reset();
      }
      if(leadSummaryItr!=null)
      {
        leadSummaryItr.setRowValidation(false);
        int idx = Integer.parseInt(rowIndex);
        int setidx = leadSummaryItr.setRangeStart(idx);
        boolean bln = leadSummaryItr.setCurrentRowAtRangeIndex(idx - setidx);
        if(bln)
        {
          OAViewRowImpl row = (OAViewRowImpl)leadSummaryItr.getCurrentRow();
          if(row!=null)
          {
            leadInfo = new HashMap(3);
            Number id = (Number)row.getAttribute("SalesLeadId");
            if(id!=null)
              leadInfo.put("ASNReqFrmLeadId", id.toString());
            id = (Number)row.getAttribute("CustomerId");
            if(id!=null)
              leadInfo.put("ASNReqFrmCustId", id.toString());
//          leadSummaryVo.setCurrentRow(row);
          }
        }
        leadSummaryItr.closeRowSetIterator();
      }
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  leadInfo : ");
      buf.append(leadInfo.toString());
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return leadInfo;
  }

  /**
   * Retrieves the lead id from the lead detail view object.
   *
   * @param viewUsageName View usage name. Possible values are LeadDetailsVO and LeadHeaderDetailsVO
   *
   * @return String Lead identifier
   */
  public String getLeadId(String viewUsageName)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.getLeadId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    String leadId = null;
      // get view instance/object
    ASNViewObjectImpl leadDetailsVo = (ASNViewObjectImpl)findViewObject(viewUsageName);
    ASNViewRowImpl leadRow = null;
    if(leadDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    
    if (leadDetailsVo.getFetchedRowCount() > 0)
     {leadRow = (ASNViewRowImpl)leadDetailsVo.first();
       if(leadRow!=null)
        {
          Number value = null;
          value = (Number)leadRow.getAttribute("SalesLeadId");
          if(value!=null)
           {
             leadId = value.stringValue();
           }
         }
     }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  leadId : ");
      buf.append(leadId);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }


    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return leadId;
  }

  /**
   * Retrieves the lead name from the lead detail view object.
   *
   * @param viewUsageName View usage name. Possible values are LeadDetailsVO and LeadHeaderDetailsVO
   *
   * @return String Lead name
   */
  public String getLeadName(String viewUsageName)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.getLeadName";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    String leadName = null;
      // get view instance/object
    ASNViewObjectImpl leadDetailsVo = (ASNViewObjectImpl)findViewObject(viewUsageName);
    ASNViewRowImpl leadRow = null;
    if(leadDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    leadRow = (ASNViewRowImpl)leadDetailsVo.first();
    if(leadRow!=null)
    {
      leadName = (String)leadRow.getAttribute("Description");
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  leadName : ");
      buf.append(leadName);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return leadName;
  }

  /**
   * Retrieves the lead customer id from the lead view object.
   *
   * @param viewUsageName View usage name. Possible values are LeadDetailsVO and LeadHeaderDetailsVO
   *
   * @return String Customer identifier
   */
  public String getLeadCustomerId(String viewUsageName)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.getLeadCustomerId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    String customerId = null;
      // get view instance/object
    ASNViewObjectImpl leadDetailsVo = (ASNViewObjectImpl)findViewObject(viewUsageName);
    ASNViewRowImpl leadRow = null;
    if(leadDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    leadRow = (ASNViewRowImpl)leadDetailsVo.first();
    if(leadRow!=null)
    {
      Number value = null;
      value = (Number)leadRow.getAttribute("CustomerId");
      if(value!=null)
      {
        customerId = value.toString();
      }
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  customerId : ");
      buf.append(customerId);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return customerId;
  }

  /**
   * Retrieves the lead source code from the lead view object.
   *
   * @param viewUsageName View usage name. Possible values are LeadDetailsVO and LeadHeaderDetailsVO
   *
   * @return String Source Code
   */
  public String getLeadSourceCode(String viewUsageName)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.getLeadSourceCode";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    String sourceCode = null;
      // get view instance/object
    ASNViewObjectImpl leadDetailsVo = (ASNViewObjectImpl)findViewObject(viewUsageName);
    ASNViewRowImpl leadRow = null;
    if(leadDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    leadRow = (ASNViewRowImpl)leadDetailsVo.first();
    if(leadRow!=null)
    {
      sourceCode = (String)leadRow.getAttribute("SourceCode");
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  sourceCode : ");
      buf.append(sourceCode);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return sourceCode;
  }

  /**
   * Retrieves the lead sales stage id from the lead view object.
   *
   * @param viewUsageName View usage name. Possible values are LeadDetailsVO and LeadHeaderDetailsVO
   *
   * @return String Lead sales stage id
   */
  public String getLeadSalesStageId(String viewUsageName)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.getLeadSalesStageId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    String stageId = null;
      // get view instance/object
    ASNViewObjectImpl leadDetailsVo = (ASNViewObjectImpl)findViewObject(viewUsageName);
    ASNViewRowImpl leadRow = null;
    if(leadDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    leadRow = (ASNViewRowImpl)leadDetailsVo.first();
    if(leadRow!=null)
    {
      Number stageIdNbr = (Number)leadRow.getAttribute("SalesStageId");
      if(stageIdNbr!=null)
        stageId = stageIdNbr.stringValue();
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  stageId : ");
      buf.append(stageId);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return stageId;
  }

  /**
   * Initializes and executes the query for LeadMethSalesStagesVO
   *
   * @param methdologyId    sales methodology identifier
   * @param stageId    sales stage identifier
   */
  public void initStagePoplistQuery(String methodologyId, String stageId)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.initStagePoplistQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    LeadMethSalesStagesVOImpl stagesVo = getLeadMethSalesStagesVO();
    if (stagesVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadMethSalesStagesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    stagesVo.initQuery(methodologyId, stageId);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

  }

  /**
   * Initializes and executes the query for SalesMethodologiesVO
   *
   * @param stageId    sales stage identifier
   */
  public void initMethPoplistQuery(String stageId)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.initMethPoplistQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    SalesMethodologiesVOImpl methodologiesVo = this.getSalesMethodologiesVO();
    if(methodologiesVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "SalesMethodologiesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    methodologiesVo.initQuery(stageId);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * Initializes and executes the query for LeadCloseReasonsVO
   *
   * @param excludeCnvdToOppty  indicates whether to exclude "Converted to Opportunity"
   *        reason in the poplist. Default value is "Y". Possible values are "Y" or "N".
   *
   */
  public void initCloseReasonPoplistQuery(String closeReason)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.initCloseReasonPoplistQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    LeadDetCloseReasonsVOImpl closeReasonsVo = this.getLeadDetCloseReasonsVO();
    if(closeReasonsVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadDetCloseReasonsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    closeReasonsVo.initQuery(closeReason);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * Ranks, Qualification, Channelizes and Routes the lead by runnning the lead engines on the selected lead
   * @param viewUsageName  usage or instance name of the view object. Possible values are
   *                       &quot;LeadDetailsVO&quot; and &quot;LeadHeaderDetailsVO&quot;
   *
   */
  public void runLeadEngines(String viewUsageName)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.runLeadEngines";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObject leadDetailsVo = (OAViewObject)findViewObject(viewUsageName);
    OAViewRowImpl row = null;
    if(leadDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    row = (OAViewRowImpl)leadDetailsVo.getCurrentRow();
    if(row!=null)
    {
      if("LeadHeaderDetailsVO".equals(viewUsageName))
      {
       ((LeadHeaderDetailsVORowImpl)row).runLeadEngines();
      }
      else if("LeadDetailsVO".equals(viewUsageName))
      {
       ((LeadDetailsVORowImpl)row).runLeadEngines();
      }
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

  }

  /**
   * Converts the specified to lead to opportunity
   * @param viewUsageName  usage or instance name of the view object. Possible values are
   *                       &quot;LeadSearchVO&quot; and &quot;LeadHeaderDetailsVO&quot;
   * @param leadId    lead identifier. It is optional if the view usage is &quot;LeadHeaderDetailsVO&quot;
   * @return opportunity identifier
   *
   */
  public String convertToOpportunity(String viewUsageName, String leadId)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.convertToOpportunity";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    Number opptyId = null;
    OAViewObject leadVo = (OAViewObject)findViewObject(viewUsageName);
    OAViewRowImpl row = null;
    if(leadVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    
    if("LeadHeaderDetailsVO".equals(viewUsageName))
    {
      row = (OAViewRowImpl)leadVo.getCurrentRow();
      if(row!=null)
        opptyId = ((LeadHeaderDetailsVORowImpl)row).convertLeadToOpportunity();
    }
    
    if(opptyId!=null)
    {    
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return opptyId.toString();
    }
    else 
    {
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return null;
    }
  }

  /**
   * Identifies whether the sepcified status is open or not, by executing the
   * query of StatusDetailsVO.
   *
   * @param statusCode Status Code
   * @return Indicates whether the status is in open status
   */
  public String isStatusOpen(String statusCode)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.isStatusOpen";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

      // get view instance/object
    StatusDetailsVOImpl statusDetailsVo = this.getStatusDetailsVO();
    String statusChk = "N";
    if(statusDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "StatusDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
     // initialize query
    if(statusCode!=null && statusCode.trim().length()>0)
    {
      statusDetailsVo.initQuery(statusCode);
      if(statusDetailsVo!=null)
      {
        if(statusDetailsVo.hasNext())
        {
          StatusDetailsVORowImpl row = (StatusDetailsVORowImpl)statusDetailsVo.first();
          if(row!=null)
          {
            statusChk = (String)row.getOppOpenStatusFlag();
          }
        }
      }
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  statusChk : ");
      buf.append(statusChk);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return statusChk;
  }

  /**
   * Checks whether the lead is converted to opportunity
   *
   * @param viewUsageName  usage or instance name of the view object.
   * @return Indicates whether the lead is converted to opportunity
   *
   */
  public String isLeadConvertedToOppty(String viewUsageName)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.isLeadConvertedToOppty";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObject leadDetailsVo = (OAViewObject)findViewObject(viewUsageName);
    OAViewRowImpl leadRow = null;
    if(leadDetailsVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    int fetchedRowCount = leadDetailsVo.getFetchedRowCount();
    if(fetchedRowCount > 0) {
      leadRow = (OAViewRowImpl)leadDetailsVo.first();
    }
    if(leadRow!=null)
    {
      if("CONVERTED_TO_OPPORTUNITY".equals((String)leadRow.getAttribute("StatusCode")))
      {
        if (isStatLogEnabled)
        {
          StringBuffer buf = new StringBuffer(100);
          buf.append("  Lead is Converted to Opportunity ");
          dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
        }

        if (isProcLogEnabled)
        {
          dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
        }
        return "Y";
      }
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  Lead is not Converted to Opportunity ");
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return "N";
  }

  /**
   * Checks whether the methodology contains atleast one applicable stage
   * for the lead
   *
   * @return Indicates whether the methodology contains any applicable stage
   *
   */
  private boolean hasMethContainsStage()
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.hasMethContainsStage";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    LeadMethSalesStagesVOImpl stagesVo = this.getLeadMethSalesStagesVO();
    OAViewRowImpl row = null;
    if(stagesVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadMethSalesStagesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    if(!stagesVo.isPreparedForExecution())
    {
      if (isStatLogEnabled)
      {
        StringBuffer buf = new StringBuffer(100);
        buf.append("  hasMethContainsStage returns False ");
        dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
      }

      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return false;
    }
    stagesVo.reset();
    boolean returnFlag = stagesVo.hasNext();
    stagesVo.reset();

    if (isStatLogEnabled)
    {
        StringBuffer buf = new StringBuffer(100);
        buf.append("  hasMethContainsStage returnFlag : ");
        buf.append(returnFlag);
        dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return returnFlag;
  }

  /**
   * Adds Contact to the lead
   *
   * @param contactRelPartyId contact relationship party id
   * @param contactPartyId contact party id
   * @param relationshipId relationship id
   *
   * @return indiacates whether the contact is added to the lead successfully
   */
  public String addLeadContact(String contactRelPartyId,
                               String contactPartyId,
                               String relationshipId)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.addLeadContact";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    if (isStatLogEnabled)
    {
        StringBuffer buf = new StringBuffer(100);
        buf.append("  contactRelPartyId : ");
        buf.append(contactRelPartyId);
        buf.append("  contactPartyId : ");
        buf.append(contactPartyId);
        buf.append("  relationshipId : ");
        buf.append(relationshipId);
        dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    String isSuccess = "N";
      // get view instance/object
    LeadHeaderDetailsVOImpl leadHdrDetailsVo = this.getLeadHeaderDetailsVO();
    if(leadHdrDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadHeaderDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    LeadHeaderDetailsVORowImpl leadHdrRow = (LeadHeaderDetailsVORowImpl)leadHdrDetailsVo.getCurrentRow();
    OAViewObject contactDetailsVo = (OAViewObject)this.getLeadHeaderContactDetailsVO();
    if(contactDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadHeaderContactDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    if(contactRelPartyId!=null && !("".equals(contactRelPartyId.trim())))
    {
      int rangeSize = contactDetailsVo.getRangeSize();
      int totalSize = 10;
      int numOfRowsToInsert = 1;
      int rowCount = contactDetailsVo.getRowCountInRange();
      int rangeStart = contactDetailsVo.getRangeStart();
      if(rowCount < rangeSize)
      {
        int savedRangeStart = contactDetailsVo.getRangeStart();
        contactDetailsVo.setRangeSize((rowCount > 0)? rowCount : 1);
        contactDetailsVo.setRangeStart(savedRangeStart);
        rangeSize = rowCount;
      }
      if((rangeSize+numOfRowsToInsert) > totalSize)
      {
          // out of range
        int insertStartIndex =
           ((totalSize - numOfRowsToInsert) < 0) ? 0:(totalSize - numOfRowsToInsert);
        String idValue = null;
        for( int i=1; i<=numOfRowsToInsert; i++) {
          idValue = contactRelPartyId;
          try
          {
            OAViewRowImpl newrow = (OAViewRowImpl)contactDetailsVo.createRow();
            newrow.setAttribute("ContactPartyId", new Number(idValue));
            if(contactPartyId!=null && !("".equals(contactPartyId.trim())))
            {
              idValue = contactPartyId;
              newrow.setAttribute("SubjectId", new Number(idValue));
            }
            if(relationshipId!=null && !("".equals(relationshipId.trim())))
            {
              idValue = relationshipId;
              newrow.setAttribute("PartyRelationshipId", new Number(idValue));
            }
            contactDetailsVo.insertRowAtRangeIndex(insertStartIndex, newrow);
            isSuccess = "Y";
          }
          catch(Exception e)
          {
            MessageToken tokens[] = {new MessageToken("IDNAME", idValue)};
            throw new OAException("ASN", "ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
          }
        }
      }
      else
      {
          // within range
        OAViewRowImpl savedCurrentRow = (OAViewRowImpl)contactDetailsVo.getCurrentRow();
        int savedRangeStart = contactDetailsVo.getRangeStart();
        contactDetailsVo.last();
        contactDetailsVo.next();
        String idValue = null;
        for( int i=0; i<numOfRowsToInsert; i++) {
          idValue = contactRelPartyId;
          try
          {
            OAViewRowImpl newrow = (OAViewRowImpl)contactDetailsVo.createRow();
            newrow.setAttribute("ContactPartyId", new Number(idValue));
            if(contactPartyId!=null && !("".equals(contactPartyId.trim())))
            {
              idValue = contactPartyId;
              newrow.setAttribute("SubjectId", new Number(idValue));
            }
            if(relationshipId!=null && !("".equals(relationshipId.trim())))
            {
              idValue = relationshipId;
              newrow.setAttribute("PartyRelationshipId", new Number(idValue));
            }
            contactDetailsVo.insertRow(newrow);
            isSuccess = "Y";
          }
          catch(Exception e)
          {
            MessageToken tokens[] = {new MessageToken("IDNAME", idValue)};
            throw new OAException("ASN", "ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
          }
        }
        contactDetailsVo.setRangeSize(rangeSize + numOfRowsToInsert);
        contactDetailsVo.setCurrentRow(savedCurrentRow);
        contactDetailsVo.setRangeStart(savedRangeStart);
      }
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return isSuccess;
  }

  /**
   * Sets a Contact as a primary contact to the lead
   *
   * @param contactRelPartyId contact relationship party id
   * @return indicates whether the contact is added as primary to the lead successfully
   */
  public String setPrimaryLeadContact(String contactRelPartyId)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.setPrimaryLeadContact";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  contactRelPartyId : ");
      buf.append(contactRelPartyId);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    String isSuccess = "N";
      // get view instance/object
    LeadDetailsVOImpl leadDetailsVo = this.getLeadDetailsVO();
    if(leadDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    LeadDetailsVORowImpl leadDetailRow = (LeadDetailsVORowImpl)leadDetailsVo.getCurrentRow();
    if(contactRelPartyId!=null && !("".equals(contactRelPartyId.trim())))
    {
      if(leadDetailRow!=null)
      {
        try
        {
          leadDetailRow.setPrimaryContact(new Number(contactRelPartyId));
          isSuccess = "Y";
        }
        catch(Exception e) {}
      }
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return isSuccess;
  }

  /**
   * Gets primary contact of the lead and sets it as the current row on LeadContactDetailsVO
   *
   * @return indicates whether the primary contact exists for the lead
   */
  public String getPrimaryLeadContact()
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.getPrimaryLeadContact";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    String isExists = "N";
    boolean isFound = false;
    OAViewObject leadContactsVO = (OAViewObject)this.getLeadContactDetailsVO();
    if(leadContactsVO==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadContactDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    leadContactsVO.setAssociationConsistent(true);
    leadContactsVO.setRowValidation(false);
    leadContactsVO.reset();
    while(leadContactsVO.hasNext())
    {
      LeadContactDetailsVORowImpl primaryCtctRow = (LeadContactDetailsVORowImpl)leadContactsVO.next();
      if("Y".equals(primaryCtctRow.getPrimaryContactFlag()))
      {
        isFound = true;
        isExists = "Y";
        break;
      }
    }
    if(!isFound)
    {
      leadContactsVO.reset();
      leadContactsVO.setCurrentRow(null);
      leadContactsVO.setPreparedForExecution(false);
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return isExists;
  }

  /**
   * Sets the customer address attributes like party site id and address on LeadHeaderDetailsVO
   *
   * @param addressId  Party site id of the organization
   * @param address  Address of the organization
   *
   */
  public void setCustAddressAttributes(String addressId, String address)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.setCustAddressAttributes";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  addressId : ");
      buf.append(addressId);
      buf.append("  address : ");
      buf.append(address);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    LeadHeaderDetailsVOImpl leadVo = this.getLeadHeaderDetailsVO();
    LeadHeaderDetailsVORowImpl leadRow = null;
    if(leadVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadHeaderDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    leadRow = (LeadHeaderDetailsVORowImpl)leadVo.getCurrentRow();
    if(leadRow!=null)
    {
      if(addressId!=null && !("".equals(addressId)))
      {
        try
        {
          leadRow.setAddressId(new Number(addressId));
          leadRow.setAddress(address);
        }
        catch(Exception e)
        {
          MessageToken tokens[] = {new MessageToken("IDNAME", addressId)};
          throw new OAException("ASN", "ASN_CMMN_STR_TO_JBONUM_ERR", tokens);
        }
      }
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

  }

  /**
   * Get Contact related details
   * @param viewUsageName view usage name
   * @return hashmap of contact related details
   */
  public HashMap getSelectedContactDetails(String viewUsageName)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.getSelectedContactDetails";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    HashMap details = null;
      // get view instance/object
    OAViewObject contactDetailsVo = (OAViewObject)findViewObject(viewUsageName);
    if(contactDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    OAViewRowImpl row = null;
    int fetchedRowCount = contactDetailsVo.getFetchedRowCount();
    RowSetIterator contactDetailsItr = contactDetailsVo.findRowSetIterator("AsnContactDetailsIterator");
    if(contactDetailsItr==null)
      contactDetailsItr = contactDetailsVo.createRowSetIterator("AsnContactDetailsIterator");
    else
      contactDetailsItr.reset();

    if(contactDetailsItr!=null && fetchedRowCount>0)
    {
      contactDetailsItr.setRowValidation(false);
      contactDetailsItr.setRangeStart(0);
      contactDetailsItr.setRangeSize(fetchedRowCount);
      for(int i=0; i<fetchedRowCount; i++)
      {
        row = (OAViewRowImpl)contactDetailsItr.getRowAtRangeIndex(i);
        if(row!=null)
        {
          if("Y".equals(row.getAttribute("SelectFlag")))
          {
            break;
          }
          else
          {
            row = null;
          }
        }
      }
      if(row!=null)
      {
        details = new HashMap(7);
        Number value = null;
        value = (Number)row.getAttribute("SubjectId");
        if(value!=null)
        {
          details.put("ASNReqFrmCtctId",value.toString());
        }
        value = (Number)row.getAttribute("CustomerId");
        if(value!=null)
        {
          details.put("ASNReqFrmCustId",value.toString());
        }
        value = (Number)row.getAttribute("PartyRelationshipId");
        if(value!=null)
        {
          details.put("ASNReqFrmRelId",value.toString());
        }
        value = (Number)row.getAttribute("ContactPartyId");
        if(value!=null)
        {
          details.put("ASNReqFrmRelPtyId",value.toString());
        }
      }
    }
    if(contactDetailsItr!=null)
      contactDetailsItr.closeRowSetIterator();

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  details : ");
      buf.append(details.toString());
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
    {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return details;
  }

  /**
   * Retrieves the name of lead's currency code
   *
   * @param viewUsageName view usage name
   * @return currency name of the lead
   */
  public String getLeadCurrencyName(String viewUsageName)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.getLeadCurrencyName";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    String currencyCd = null;
    String currencyNm = "";

      // get view instance/object
    ASNViewObjectImpl leadDetailsVo = (ASNViewObjectImpl)findViewObject(viewUsageName);
    ASNViewRowImpl leadRow = null;
    if(leadDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    leadRow = (ASNViewRowImpl)leadDetailsVo.first();
    if(leadRow!=null)
    {
      currencyCd = (String)leadRow.getAttribute("CurrencyCode");
    }

      // get view instance/object
    CurrencyVOImpl currencyVo = this.getCurrencyVO();
    if(currencyVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "CurrencyVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    currencyVo.initQuery(currencyCd);
    currencyVo.reset();
    if(currencyVo.hasNext())
    {
      CurrencyVORowImpl currencyRow = (CurrencyVORowImpl)currencyVo.first();
      if(currencyRow!=null)
        currencyNm = (String)currencyRow.getCurrencyName();
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append(" getLeadCurrencyName - currencyNm : ");
      buf.append(currencyNm);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return currencyNm;
  }

  /**
   * Retrieves the log-in user's default currency
   *
   * @return currency name of the log-in user
   */
  public String getUserCurrencyName()
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.getUserCurrencyName";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    String currencyCd = null;
    String currencyNm = "";

      // get view instance/object
    CurrencyVOImpl currencyVo = this.getCurrencyVO();
    if(currencyVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "CurrencyVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    OADBTransaction txn = this.getOADBTransaction();
    currencyCd = txn.getProfile("JTF_PROFILE_DEFAULT_CURRENCY");
    if(currencyCd==null || "".equals(currencyCd.trim()))
    {
      currencyCd = "USD";
    }
    if(!currencyVo.isPreparedForExecution())
      currencyVo.initQuery(currencyCd);
    else
      currencyVo.reset();
    if(currencyVo.hasNext())
    {
      CurrencyVORowImpl currencyRow = (CurrencyVORowImpl)currencyVo.first();
      currencyNm = (String)currencyRow.getCurrencyName();
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append(" getUserCurrencyName - currencyNm : ");
      buf.append(currencyNm);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return currencyNm;
  }

  /**
   * Sets the default stage for the selected methodology. If there is no methodology
   * exists, then the stage will be emptied
   *
   * @param viewUsageName  usage or instance name of the view object.
   *
   */
  public void setLeadDefaultStage(String viewUsageName)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.setLeadDefaultStage";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObject leadDetailsVo = (OAViewObject)findViewObject(viewUsageName);
    OAViewRowImpl leadRow = null;
    if(leadDetailsVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    int fetchedRowCount = leadDetailsVo.getFetchedRowCount();
    if(fetchedRowCount > 0) {
      leadRow = (OAViewRowImpl)leadDetailsVo.first();
    }
    if(leadRow!=null)
    {
      Number methId = (Number)leadRow.getAttribute("SalesMethodologyId");
      if(methId!=null)
      {
        SalesMethDefaultStageVOImpl defaultStageVo = (SalesMethDefaultStageVOImpl)this.getSalesMethDefaultStageVO();
        SalesMethDefaultStageVORowImpl stageRow = null;
        if(defaultStageVo == null)
        {
          MessageToken[] tokens = { new MessageToken("NAME", "SalesMethDefaultStageVO") };
          throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
        }
        defaultStageVo.initQuery(methId.toString(), "LEAD");
        defaultStageVo.reset();
        if(defaultStageVo.hasNext())
        {
          stageRow = (SalesMethDefaultStageVORowImpl)defaultStageVo.first();
          Number stageId = (Number)stageRow.getSalesStageId();
          
          if (isStatLogEnabled)
          {
            StringBuffer buf = new StringBuffer(100);
            buf.append(" StageId : ");
            buf.append(stageId);
            dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
          }

          leadRow.setAttribute("SalesStageId", stageId);
        }
      }
      else
      {
        leadRow.setAttribute("SalesStageId", null);
      }
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * Sets the close reason for the lead.
   *
   * @param viewUsageName  usage or instance name of the view object.
   * @param closeReason  lead close reason.
   *
   */
  public void setLeadCloseReason(String viewUsageName, String closeReason)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.setLeadCloseReason";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append(" setLeadCloseReason - closeReason : ");
      buf.append(closeReason);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    OAViewObject leadDetailsVo = (OAViewObject)findViewObject(viewUsageName);
    OAViewRowImpl leadRow = null;
    if(leadDetailsVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    int fetchedRowCount = leadDetailsVo.getFetchedRowCount();
    if(fetchedRowCount > 0) {
      leadRow = (OAViewRowImpl)leadDetailsVo.first();
    }
    if(leadRow!=null)
    {
      leadRow.setAttribute("CloseReason", closeReason);
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

  }

  /**
   * Initializes the lead page properties view object and sets the attributes
   *
   * @param leadId  lead identifier
   * @param leadAccessMode  access mode on the lead. Possible values are ASNConstants.READ_ACCESS,
   *                    ASNConstants.UPDATE_ACCESS or ASNConstants.NO_ACCESS
   * @param uwqMode  navigation mode of the lead detail page. Possible values are "Y" or "N"
   *
   */
  public void setLeadDetProperties(String leadId, String leadAccessMode, String uwqMode)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.setLeadDetProperties";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append(" setLeadDetProperties - leadId : ");
      buf.append(leadId);
      buf.append(" setLeadDetProperties - leadAccessMode : ");
      buf.append(leadAccessMode);
      buf.append(" setLeadDetProperties - uwqMode : ");
      buf.append(uwqMode);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    OAViewObjectImpl leadDetailsVo = (OAViewObjectImpl)this.getLeadHeaderDetailsVO();
    LeadHeaderDetailsVORowImpl leadRow = null;
    if(leadDetailsVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadHeaderDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    OAViewObjectImpl appPropertiesVo = this.getLeadDetAppPropertiesVO();
    LeadDetAppPropertiesVORowImpl propertiesRow = null;
    if(appPropertiesVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadDetAppPropertiesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    int fetchedRowCount = leadDetailsVo.getFetchedRowCount();
    if(fetchedRowCount > 0) {
      leadRow = (LeadHeaderDetailsVORowImpl)leadDetailsVo.first();
    }

    fetchedRowCount = appPropertiesVo.getFetchedRowCount();
    if(fetchedRowCount <= 0)
    {
      appPropertiesVo.setMaxFetchSize(0);
      appPropertiesVo.insertRow(appPropertiesVo.createRow());
    }
    propertiesRow = (LeadDetAppPropertiesVORowImpl)appPropertiesVo.first();

      /*** Set the properties based on the lead details  **/
    if(propertiesRow!=null)
    {
      if("Y".equals(uwqMode))
      {
        propertiesRow.setNAV_BAR_RENDERED(Boolean.TRUE);
      }
      else
      {
        propertiesRow.setNAV_BAR_RENDERED(Boolean.FALSE);
      }
      if(leadAccessMode==null || ASNConstants.NO_ACCESS.equals(leadAccessMode))
      {
        propertiesRow.setDET_RENDERED(Boolean.FALSE);
        propertiesRow.setPAGE_BUTTONS_RENDERED(Boolean.TRUE);
        propertiesRow.setBUTTON_RENDERED(Boolean.FALSE);
        propertiesRow.setRANK_LEAD_RENDERED(Boolean.FALSE);
        appPropertiesVo.setCurrentRow(propertiesRow);
        return;
      }
      if(leadId==null || "".equals(leadId.trim()))
      {
        propertiesRow.setDET_RENDERED(Boolean.FALSE);
        propertiesRow.setPAGE_BUTTONS_RENDERED(Boolean.FALSE);
        appPropertiesVo.setCurrentRow(propertiesRow);
        return;
      }

      if(leadRow!=null)
      {
        boolean isLeadCnvtd = "CONVERTED_TO_OPPORTUNITY".equals((String)leadRow.getStatusCode());
        boolean isUpdateAccess = false;
        String closeReasonCode = (String)leadRow.getCloseReason();

        if(ASNConstants.UPDATE_ACCESS.equals(leadAccessMode))
        {
          isUpdateAccess = true;
        }
        if(isLeadCnvtd)
        {
          isUpdateAccess = false;
        }

        propertiesRow.setDET_RENDERED(Boolean.TRUE);
        propertiesRow.setPAGE_BUTTONS_RENDERED(Boolean.TRUE);
        if(isUpdateAccess)
        {
            /** Instantiate the sales supplements for the methodology associated with the lead */
          if(leadRow.isSalesCycleMissing())
          {
            if(leadRow.createSalesCycle())
            {
              this.getOADBTransaction().commit();
            }
          }
          propertiesRow.setBUTTON_RENDERED(Boolean.TRUE);
          if("Y".equals(getOADBTransaction().getProfile("AS_AUTO_RUN_LEAD_ENGINES")))
          {
            propertiesRow.setRANK_LEAD_RENDERED(Boolean.FALSE);
          }
          else
          {
            propertiesRow.setRANK_LEAD_RENDERED(Boolean.TRUE);
          }
          propertiesRow.setFIELD_READ_ONLY(Boolean.FALSE);
          propertiesRow.setFIELD_CSS("");
          propertiesRow.setCLSRSN_READ_ONLY(Boolean.FALSE);
          propertiesRow.setCLSRSN_CSS("");
          propertiesRow.setCTCT_FLDS_READ_ONLY(Boolean.FALSE);
          propertiesRow.setCTCT_FIRSTNM_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_LASTNM_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_NM_RENDERED(Boolean.FALSE);
          propertiesRow.setREMOVE_COLUMN_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_PHONFLDS_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_PHONNBRFMTD_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_ACTIONS_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_SELECTCOL_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_REMOVECOL_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_ADDBTN_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_CRTEBTN_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_ROLE_READ_ONLY(Boolean.FALSE);
          propertiesRow.setCTCT_PRIMARY_READ_ONLY(Boolean.FALSE);
          propertiesRow.setSTAGE_READ_ONLY(Boolean.FALSE);
          propertiesRow.setSTAGE_CSS("");
          propertiesRow.setADDRESS_READ_ONLY(Boolean.FALSE);
          propertiesRow.setADDRESS_SELBTN_RENDERED(Boolean.TRUE);
          // Setting the Read Only property for the Products additional info Flex field
          propertiesRow.setPRDT_FLEX_READ_ONLY(Boolean.FALSE);
          // Setting the Read Only property for the Contacts additional info Flex field
          propertiesRow.setCTCT_FLEX_READ_ONLY(Boolean.FALSE);
          // Setting the Read Only property for the Sales Team additional info Flex field
          propertiesRow.setST_FLEX_READ_ONLY(Boolean.FALSE);
          // Setting the Rendered property for the Products Select Column
          propertiesRow.setPRDT_SELECTCOL_RENDERED(Boolean.TRUE);
          // Setting the Rendered property for the SalesTeam Select Column
          propertiesRow.setST_SELECTCOL_RENDERED(Boolean.TRUE);
        }
        else
        {
          propertiesRow.setBUTTON_RENDERED(Boolean.FALSE);
          propertiesRow.setRANK_LEAD_RENDERED(Boolean.FALSE);
          propertiesRow.setFIELD_READ_ONLY(Boolean.TRUE);
          propertiesRow.setFIELD_CSS("OraDataText");
          propertiesRow.setCLSRSN_READ_ONLY(Boolean.TRUE);
          propertiesRow.setCLSRSN_CSS("OraDataText");
          propertiesRow.setCTCT_FLDS_READ_ONLY(Boolean.TRUE);
          propertiesRow.setCTCT_FIRSTNM_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_LASTNM_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_NM_RENDERED(Boolean.TRUE);
          propertiesRow.setREMOVE_COLUMN_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_PHONFLDS_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_PHONNBRFMTD_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_ACTIONS_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_SELECTCOL_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_REMOVECOL_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_ADDBTN_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_CRTEBTN_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_ROLE_READ_ONLY(Boolean.TRUE);
          propertiesRow.setCTCT_PRIMARY_READ_ONLY(Boolean.TRUE);
          propertiesRow.setSTAGE_READ_ONLY(Boolean.TRUE);
          propertiesRow.setSTAGE_CSS("OraDataText");
          propertiesRow.setADDRESS_READ_ONLY(Boolean.TRUE);
          propertiesRow.setADDRESS_SELBTN_RENDERED(Boolean.FALSE);
          // Setting the Read Only property for the Products additional info Flex field
          propertiesRow.setPRDT_FLEX_READ_ONLY(Boolean.TRUE);
          // Setting the Read Only property for the Contacts additional info Flex field
          propertiesRow.setCTCT_FLEX_READ_ONLY(Boolean.TRUE);
          // Setting the Read Only property for the Sales Team additional info Flex field
          propertiesRow.setST_FLEX_READ_ONLY(Boolean.TRUE);
          // Setting the Rendered property for the Products Select Column
          propertiesRow.setPRDT_SELECTCOL_RENDERED(Boolean.FALSE);
          // Setting the Rendered property for the SalesTeam Select Column
          propertiesRow.setST_SELECTCOL_RENDERED(Boolean.FALSE);
        }

        if(isLeadCnvtd)
        {
          propertiesRow.setSTATUS_RENDERED(Boolean.FALSE);
          propertiesRow.setCNVTD_STATUS_RENDERED(Boolean.TRUE);
            /** Initialize the close reason poplist **/
          initCloseReasonPoplistQuery(closeReasonCode);
        }
        else
        {
          propertiesRow.setSTATUS_RENDERED(Boolean.TRUE);
          propertiesRow.setCNVTD_STATUS_RENDERED(Boolean.FALSE);
            /** Initialize the close reason poplist **/
          initCloseReasonPoplistQuery(closeReasonCode);
        }

        Number methId = (Number)leadRow.getSalesMethodologyId();
        Number stageId = (Number)leadRow.getSalesStageId();
        boolean isMethInstExists = "Y".equals(leadRow.getSalesMethFlag());
        boolean isStageExists = "Y".equals(leadRow.getSalesStageFlag());

        if(isMethInstExists)
        {
            /** Initialize the methodology poplist **/
          initMethPoplistQuery(null);
          propertiesRow.setMETH_READ_ONLY(Boolean.TRUE);
          propertiesRow.setMETH_CSS("OraDataText");
          propertiesRow.setMETH_REQUIRED("no");
            /** Refresh the stage poplist **/
          initStagePoplistQuery(methId.stringValue(), null);
          if(hasMethContainsStage())
          {
            propertiesRow.setSTAGE_REQUIRED("yes");
          }
          else
          {
            propertiesRow.setSTAGE_REQUIRED("no");
          }
          propertiesRow.setSTAGE_READ_ONLY(Boolean.FALSE);
          propertiesRow.setSTAGE_CSS("");
        }
        else
        {
          propertiesRow.setMETH_READ_ONLY(Boolean.FALSE);
          propertiesRow.setMETH_CSS("");
          if(isStageExists)
          {
              /** Initialize the methodology poplist **/
            initMethPoplistQuery(stageId.stringValue());
              /** Refresh the stage poplist **/
            initStagePoplistQuery((methId!=null?methId.stringValue():"-1"),
                                  (stageId!=null?stageId.stringValue():(String)null));
            propertiesRow.setMETH_REQUIRED("yes");
            propertiesRow.setSTAGE_READ_ONLY(Boolean.TRUE);
            propertiesRow.setSTAGE_CSS("OraDataText");
            propertiesRow.setSTAGE_REQUIRED("no");
          }
          else
          {
              /** Initialize the methodology poplist **/
            initMethPoplistQuery(null);
              /** Refresh the stage poplist **/
            initStagePoplistQuery((methId!=null?methId.stringValue():"-1"), null);
            propertiesRow.setMETH_REQUIRED("no");
            propertiesRow.setSTAGE_READ_ONLY(Boolean.FALSE);
            propertiesRow.setSTAGE_CSS("");
            if(methId!=null && hasMethContainsStage())
            {
              propertiesRow.setSTAGE_REQUIRED("yes");
            }
            else
            {
              propertiesRow.setSTAGE_REQUIRED("no");
            }
          }
        }

        if(!isUpdateAccess)
         {
          propertiesRow.setMETH_REQUIRED("no");
          propertiesRow.setMETH_READ_ONLY(Boolean.TRUE);
          propertiesRow.setMETH_CSS("OraDataText");
          propertiesRow.setSTAGE_REQUIRED("no");
          propertiesRow.setSTAGE_READ_ONLY(Boolean.TRUE);
          propertiesRow.setSTAGE_CSS("OraDataText");
        }

        if("ASNLeadDetSrcNmLnk".equals(leadRow.getSourceNameUpdFlag()))
        {
          propertiesRow.setSRC_NM_RENDERED(Boolean.FALSE);
          propertiesRow.setSRC_LNK_RENDERED(Boolean.TRUE);
        }
        else
        {
          propertiesRow.setSRC_LNK_RENDERED(Boolean.FALSE);
          propertiesRow.setSRC_NM_RENDERED(Boolean.TRUE);
        }
       
      }
      appPropertiesVo.setCurrentRow(propertiesRow);
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

  }

  /**
   * Initializes the detail page properties view object attributes for cusotmer and contact fields
   *
   * @param custAccessMode  access mode on the customer. Possible values are ASNConstants.READ_ACCESS,
   *                    ASNConstants.UPDATE_ACCESS or ASNConstants.NO_ACCESS
   * @param customerType  type of the customer e.g. PERSON or ORGANIZATION
   * @param leadReadOnlyMode  read-only mode of the lead. Possible values are "Y" or "N"
   *
   */
  public void setLeadDetCustProperties(String custAccessMode, String customerType, String leadReadOnlyMode) 
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.setLeadDetCustProperties";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObjectImpl appPropertiesVo = (OAViewObjectImpl)this.getLeadDetAppPropertiesVO();
    LeadDetAppPropertiesVORowImpl propertiesRow = null;
    if(appPropertiesVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadDetAppPropertiesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
      // by this time, the properties view object should've already been initialized
    propertiesRow = (LeadDetAppPropertiesVORowImpl)appPropertiesVo.first();

      /*** Set the customer related properties of the lead **/
    if(propertiesRow!=null)
    {
      if("PERSON".equals(customerType))
      {
        propertiesRow.setCTCT_FLDS_READ_ONLY(Boolean.TRUE);
        propertiesRow.setCTCT_FIRSTNM_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_LASTNM_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_NM_RENDERED(Boolean.TRUE);
        propertiesRow.setCTCT_PHONFLDS_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_PHONNBRFMTD_RENDERED(Boolean.TRUE);
        propertiesRow.setCTCT_ACTIONS_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_SELECTCOL_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_REMOVECOL_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_ADDBTN_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_CRTEBTN_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_ROLE_READ_ONLY(Boolean.TRUE);
        propertiesRow.setCTCT_PRIMARY_READ_ONLY(Boolean.TRUE);
        propertiesRow.setADDRESS_READ_ONLY(Boolean.TRUE);
        propertiesRow.setADDRESS_SELBTN_RENDERED(Boolean.FALSE);
        return;
      }

      if(!ASNConstants.UPDATE_ACCESS.equals(custAccessMode))
      {
        propertiesRow.setCTCT_FLDS_READ_ONLY(Boolean.TRUE);
        propertiesRow.setCTCT_FIRSTNM_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_LASTNM_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_NM_RENDERED(Boolean.TRUE);
        propertiesRow.setCTCT_PHONFLDS_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_PHONNBRFMTD_RENDERED(Boolean.TRUE);
        propertiesRow.setCTCT_CRTEBTN_RENDERED(Boolean.FALSE);

      }
    }

      /*** Change the Contact Actions drop-down in Contacts table **/
    if("N".equals(leadReadOnlyMode))
    {
      ContactActionsVOImpl actionVo = this.getContactActionsVO();
      if(actionVo == null)
      {
        MessageToken[] tokens = { new MessageToken("NAME", "ContactActionsVO") };
        throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
      }
      if(ASNConstants.UPDATE_ACCESS.equals(custAccessMode))
      {
          // actions with "View Details"
        actionVo.initQuery("N");
      }
      else
      {
        actionVo.initQuery("Y");
      }
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * Initializes the detail page properties view object attributes for cusotmer and contact fields
   *
   * @param leadReadOnlyMode  read-only mode of the lead. Possible values are "Y" or "N"
   *
   */
  public void setLeadDetCustFlexProperties(String leadReadOnlyMode, String flexFieldEnabled)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.setLeadDetCustFlexProperties";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObjectImpl appPropertiesVo = (OAViewObjectImpl)this.getLeadDetAppPropertiesVO();
    LeadDetAppPropertiesVORowImpl propertiesRow = null;
    if(appPropertiesVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadDetAppPropertiesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
      // by this time, the properties view object should've already been initialized
    propertiesRow = (LeadDetAppPropertiesVORowImpl)appPropertiesVo.first();

    // Flexfield Changes
    // Render the Detail Selection Column and 
    // disable the Action fields in Read-Only mode whenever the Flexfield is rendered.
    if("Y".equals(leadReadOnlyMode))
    {
      if("Y".equals(flexFieldEnabled))
      {
        propertiesRow.setCTCT_ACTIONS_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_SELECTCOL_RENDERED(Boolean.TRUE);
        return;
      }
    }
    
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * Handles the Select Column on Products Tab of Lead Details Page
   *
   * @param leadReadOnlyMode  read-only mode of the lead. Possible values are "Y" or "N"
   *
   */
  public void setLeadDetPrdtProperties(String flexFieldEnabled)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.setLeadDetPrdtProperties";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObjectImpl appPropertiesVo = (OAViewObjectImpl)this.getLeadDetAppPropertiesVO();
    LeadDetAppPropertiesVORowImpl propertiesRow = null;
    if(appPropertiesVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadDetAppPropertiesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
      // by this time, the properties view object should've already been initialized
    propertiesRow = (LeadDetAppPropertiesVORowImpl)appPropertiesVo.first();


    // Flexfield Changes
    // Render the Detail Selection Column and 
    if("Y".equals(flexFieldEnabled))
    {
      propertiesRow.setPRDT_SELECTCOL_RENDERED(Boolean.TRUE);
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return;
    }
    else
    {
      propertiesRow.setPRDT_SELECTCOL_RENDERED(Boolean.FALSE);
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return;
    }    
  }


  /**
   * Handles the Select Column on Sales Team Tab of Lead Details Page
   *
   * @param leadReadOnlyMode  read-only mode of the lead. Possible values are "Y" or "N"
   *
   */
  public void setLeadDetSTProperties(String flexFieldEnabled)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.setLeadDetSTProperties";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObjectImpl appPropertiesVo = (OAViewObjectImpl)this.getLeadDetAppPropertiesVO();
    LeadDetAppPropertiesVORowImpl propertiesRow = null;
    if(appPropertiesVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadDetAppPropertiesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
      // by this time, the properties view object should've already been initialized
    propertiesRow = (LeadDetAppPropertiesVORowImpl)appPropertiesVo.first();


    // Flexfield Changes
    // Render the Detail Selection Column and 
    if("Y".equals(flexFieldEnabled))
    {
      propertiesRow.setST_SELECTCOL_RENDERED(Boolean.TRUE);
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return;
    }
    else
    {
      propertiesRow.setST_SELECTCOL_RENDERED(Boolean.FALSE);
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return;
    }
    
  }

  /**
   * Handles the Methodology update PPR event in the UI
   * Refreshes the Stages query and sets the default stage for the selected methodology.
   * If there is no methodology exists, then the stage will be emptied
   *
   * @param detailViewUsageName  usage or instance name of the detail view object.
   *                             Possible values are &quot;LeadDetailsVO&quot; and &quot;LeadHeaderDetailsVO&quot;
   * @param propertyViewUsageName  usage or instance name of the property view object.
   *                             Possible values are &quot;LeadDetAppPropertiesVO&quot; and &quot;LeadUwqAppPropertiesVO&quot;
   *
   */
  public void handleMethChg(String detailViewUsageName, String propertyViewUsageName)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.handleMethChg";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObject leadDetailsVo = (OAViewObject)findViewObject(detailViewUsageName);
    OAViewObject appPropertiesVo = (OAViewObject)findViewObject(propertyViewUsageName);
    OAViewRowImpl leadRow = null;
    OAViewRowImpl propertiesRow = null;
    if(leadDetailsVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", detailViewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    if(appPropertiesVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", propertyViewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    int fetchedRowCount = leadDetailsVo.getFetchedRowCount();
    if(fetchedRowCount > 0) {
      leadRow = (OAViewRowImpl)leadDetailsVo.first();
    }
    propertiesRow = (OAViewRowImpl)appPropertiesVo.first();

    if(leadRow!=null)
    {
      Number methId = (Number)leadRow.getAttribute("SalesMethodologyId");
      boolean isMethInstExists = "Y".equals((String)leadRow.getAttribute("SalesMethFlag"));
      boolean isStageExists = "Y".equals((String)leadRow.getAttribute("SalesStageFlag"));
      boolean refreshStages = true;
      if(isMethInstExists==false)
      {
        if(isStageExists)
        {
          refreshStages = false;
        }
      }

      if(refreshStages)
      {
          /** Refresh the stage poplist **/
        initStagePoplistQuery((methId!=null?methId.stringValue():"-1"), null);
      }
      if(propertiesRow!=null)
      {
        if(methId!=null && refreshStages && hasMethContainsStage())
        {
          propertiesRow.setAttribute("STAGE_REQUIRED", "yes");
        }
        else
        {
          propertiesRow.setAttribute("STAGE_REQUIRED", "no");
        }
        appPropertiesVo.setCurrentRow(propertiesRow);
      }
      if(refreshStages)
      {
        setLeadDefaultStage(detailViewUsageName);
      }
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * Handles the Uwq radio button selection PPR event in the UI.
   * Loads the lead details and sets the UI attributes as per business requirement
   *
   * @param leadId  lead identifier
   * @param accessMode  access mode on the lead. Possible values are ASNConstants.READ_ACCESS,
   *                    ASNConstants.UPDATE_ACCESS or ASNConstants.NO_ACCESS
   * @return hashmap of lead header etails
   *
   */
  public HashMap handleRdoBtnChg(String leadId, String accessMode)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.handleRdoBtnChg";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    HashMap leadInfo = null;
    if(leadId!=null && !("".equals(leadId.trim())))
    {
        // reset the prev.lead details
      this.resetQuery("LeadDetailsVO");
        // load the lead details
      leadInfo = this.getLeadInfo("LeadDetailsVO", leadId);
        // set the UI properties
        this.setLeadUwqProperties(accessMode);
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  handleRdoBtnChg - leadInfo : ");
      buf.append(leadInfo.toString());
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return leadInfo;
  }

  /**
   * Initializes the uwq page properties view object and sets the attributes
   *
   * @param leadAccessMode  access mode on the lead. Possible values are ASNConstants.READ_ACCESS,
   *                    ASNConstants.UPDATE_ACCESS or ASNConstants.NO_ACCESS
   *
   */
  public void setLeadUwqProperties(String leadAccessMode)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.setLeadUwqProperties";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAApplicationModule queryAM = (OAApplicationModule)this.findApplicationModule("ASNLeadQryAM");
    OAViewObjectImpl leadDetailsVo = (OAViewObjectImpl)this.getLeadDetailsVO();
    OAViewObjectImpl appPropertiesVo = (OAViewObjectImpl)this.getLeadUwqAppPropertiesVO();
    LeadDetailsVORowImpl leadRow = null;
    LeadUwqAppPropertiesVORowImpl propertiesRow = null;
    if(leadDetailsVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    if(appPropertiesVo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadUwqAppPropertiesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    int fetchedRowCount = leadDetailsVo.getFetchedRowCount();
    if(fetchedRowCount > 0) {
      leadRow = (LeadDetailsVORowImpl)leadDetailsVo.first();
    }
    fetchedRowCount = appPropertiesVo.getFetchedRowCount();
    if(fetchedRowCount <= 0)
    {
      appPropertiesVo.setMaxFetchSize(0);
      appPropertiesVo.insertRow(appPropertiesVo.createRow());
    }
    propertiesRow = (LeadUwqAppPropertiesVORowImpl)appPropertiesVo.first();

      // Set the properties based on the lead details  
    if(propertiesRow!=null)
    {
      OAViewObjectImpl leadSummaryVo = (OAViewObjectImpl)queryAM.findViewObject("LeadSearchVO");
      if(leadSummaryVo == null)
      {
        MessageToken[] tokens = { new MessageToken("NAME", "LeadSearchVO") };
        throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
      }

      boolean summaryExists = false;
      if (leadSummaryVo.isPreparedForExecution())
          summaryExists = (leadSummaryVo.getFetchedRowCount()>0);
      else
         summaryExists = false;
     
      if(summaryExists==false || leadAccessMode==null
         || ASNConstants.NO_ACCESS.equals(leadAccessMode))
      {
        propertiesRow.setUWQ_DET_RENDERED(Boolean.FALSE);
        appPropertiesVo.setCurrentRow(propertiesRow);
        return;
      }

      if(leadRow!=null)
      {
        String leadNm = (String)leadRow.getDescription();
        String currencyNm = (String)leadRow.getCurrencyName();
        boolean isLeadCnvtd = "CONVERTED_TO_OPPORTUNITY".equals((String)leadRow.getStatusCode());
        boolean isUpdateAccess = false;
        String closeReasonCode = (String)leadRow.getCloseReason();

        if(ASNConstants.UPDATE_ACCESS.equals(leadAccessMode))
        {
          isUpdateAccess = true;
        }
        if(isLeadCnvtd)
        {
          isUpdateAccess = false;
        }

        String uwqDetTitle = dbTrx.getMessage("ASN", "ASN_LEAD_UWQPG_TITLE",
                                              new MessageToken[]{new MessageToken("NAME", leadNm)});
        propertiesRow.setUWQ_DET_TITLE(uwqDetTitle);

        String fmtdCurrNmTxt = dbTrx.getMessage("ASN", "ASN_CMMN_CURR_DETS",
                                     new MessageToken[]{new MessageToken("CURRCODE", currencyNm)});
        propertiesRow.setUWQ_DET_CURRENCY(fmtdCurrNmTxt);

        if(isUpdateAccess)
        {
          propertiesRow.setUWQ_DET_RENDERED(Boolean.TRUE);
          propertiesRow.setBUTTON_RENDERED(Boolean.TRUE);
          propertiesRow.setFIELD_READ_ONLY(Boolean.FALSE);
          propertiesRow.setFIELD_CSS("");
          propertiesRow.setCLSRSN_READ_ONLY(Boolean.FALSE);
          propertiesRow.setCLSRSN_CSS("");
          propertiesRow.setCTCT_FIRSTNM_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_LASTNM_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_NM_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_PHONFLDS_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_PHONNBRFMTD_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_FLDS_READ_ONLY(Boolean.FALSE);
          propertiesRow.setCTCT_SELECTPRIBTN_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_FLDS_CSS("");
        }
        else
        {
          propertiesRow.setUWQ_DET_RENDERED(Boolean.TRUE);
          propertiesRow.setBUTTON_RENDERED(Boolean.FALSE);
          propertiesRow.setFIELD_READ_ONLY(Boolean.TRUE);
          propertiesRow.setFIELD_CSS("OraDataText");
          propertiesRow.setCLSRSN_READ_ONLY(Boolean.TRUE);
          propertiesRow.setCLSRSN_CSS("OraDataText");
          propertiesRow.setCTCT_FIRSTNM_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_LASTNM_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_NM_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_PHONFLDS_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_PHONNBRFMTD_RENDERED(Boolean.TRUE);
          propertiesRow.setCTCT_FLDS_READ_ONLY(Boolean.TRUE);
          propertiesRow.setCTCT_SELECTPRIBTN_RENDERED(Boolean.FALSE);
          propertiesRow.setCTCT_FLDS_CSS("OraDataText");
        }

          // load primary contact  
        boolean isPrimaryExists = "Y".equals(this.getPrimaryLeadContact());
        if(isPrimaryExists)
        {
          propertiesRow.setCTCT_FLDS_DISABLED(Boolean.FALSE);
        }
        else
        {
          propertiesRow.setCTCT_FLDS_DISABLED(Boolean.TRUE);
        }

        if(isLeadCnvtd)
        {
          propertiesRow.setSTATUS_RENDERED(Boolean.FALSE);
          propertiesRow.setCNVTD_STATUS_RENDERED(Boolean.TRUE);
          propertiesRow.setCLSRSN_READ_ONLY(Boolean.TRUE);
          propertiesRow.setCLSRSN_CSS("OraDataText");
            // Initialize the close reason poplist 
          initCloseReasonPoplistQuery(closeReasonCode);
        }
        else
        {
          propertiesRow.setSTATUS_RENDERED(Boolean.TRUE);
          propertiesRow.setCNVTD_STATUS_RENDERED(Boolean.FALSE);
            // Initialize the close reason poplist 
          initCloseReasonPoplistQuery(closeReasonCode);
        }

        if("ASNLeadDetSrcNmLnk".equals(leadRow.getSourceNameUpdFlag()))
        {
          propertiesRow.setSRC_NM_RENDERED(Boolean.FALSE);
          propertiesRow.setSRC_LNK_RENDERED(Boolean.TRUE);
        }
        else
        {
          propertiesRow.setSRC_LNK_RENDERED(Boolean.FALSE);
          propertiesRow.setSRC_NM_RENDERED(Boolean.TRUE);
        }
       
        appPropertiesVo.setCurrentRow(propertiesRow);
      }
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * Initializes the uwq page properties view object attributes for cusotmer and contact fields
   *
   * @param custAccessMode  access mode on the customer. Possible values are ASNConstants.READ_ACCESS,
   *                    ASNConstants.UPDATE_ACCESS or ASNConstants.NO_ACCESS
   * @param custType   type of the customer e.g. PERSON or ORGANIZATION.
   *
   */
  public void setLeadUwqCustProperties(String custAccessMode, String custType)
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.setLeadUwqCustProperties";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    OAViewObjectImpl appPropertiesVo = (OAViewObjectImpl)this.getLeadUwqAppPropertiesVO();
    LeadUwqAppPropertiesVORowImpl propertiesRow = null;
    if(appPropertiesVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadUwqAppPropertiesVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
      // by this time, the properties view object should've already been initilized
    propertiesRow = (LeadUwqAppPropertiesVORowImpl)appPropertiesVo.first();

      /*** Set the customer related properties of the lead **/
    if(propertiesRow!=null)
    {
      if("PERSON".equals(custType))
      {
        propertiesRow.setCTCT_FIRSTNM_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_LASTNM_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_NM_RENDERED(Boolean.TRUE);
        propertiesRow.setCTCT_PHONFLDS_RENDERED(Boolean.FALSE);
        propertiesRow.setCTCT_PHONNBRFMTD_RENDERED(Boolean.TRUE);
        propertiesRow.setCTCT_FLDS_DISABLED(Boolean.TRUE);
        propertiesRow.setCTCT_FLDS_READ_ONLY(Boolean.TRUE);
        propertiesRow.setCTCT_FLDS_CSS("OraDataText");
        propertiesRow.setCTCT_SELECTPRIBTN_RENDERED(Boolean.FALSE);
        return;
      }

      boolean isPrimaryExists = "Y".equals(this.getPrimaryLeadContact());
      if(isPrimaryExists && (ASNConstants.UPDATE_ACCESS.equals(custAccessMode)))
      {
       propertiesRow.setCTCT_FLDS_DISABLED(Boolean.FALSE);
      }
      else
      {
       propertiesRow.setCTCT_FLDS_DISABLED(Boolean.TRUE);
       }
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }


  /**
   *
   * This is the default constructor (do not remove)
   */
  public ODLeadUwqAMImpl()
  {
  }

  /**
   *
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("oracle.apps.asn.lead.server", "LeadUwqAMLocal");
  }

  /**
   *
   * Container's getter for StatusDetailsVO
   */
  public StatusDetailsVOImpl getStatusDetailsVO()
  {
    return (StatusDetailsVOImpl)findViewObject("StatusDetailsVO");
  }

  /**
   *
   * Container's getter for LeadMethSalesStagesVO
   */
  public LeadMethSalesStagesVOImpl getLeadMethSalesStagesVO()
  {
    return (LeadMethSalesStagesVOImpl)findViewObject("LeadMethSalesStagesVO");
  }

  /**
   *
   * Container's getter for LeadHeaderDetailsVO
   */
  public LeadHeaderDetailsVOImpl getLeadHeaderDetailsVO()
  {
    return (LeadHeaderDetailsVOImpl)findViewObject("LeadHeaderDetailsVO");
  }

  /**
   *
   * Container's getter for LeadDetailsVO
   */
  public LeadDetailsVOImpl getLeadDetailsVO()
  {
    return (LeadDetailsVOImpl)findViewObject("LeadDetailsVO");
  }

  /**
   *
   * Container's getter for LeadHeaderAccessDetailsVO
   */
  public ASNViewObjectImpl getLeadHeaderAccessDetailsVO()
  {
    return (ASNViewObjectImpl)findViewObject("LeadHeaderAccessDetailsVO");
  }

  /**
   *
   * Container's getter for LeadHeaderToAccessesVL1
   */
  public ViewLinkImpl getLeadHeaderToAccessesVL1()
  {
    return (ViewLinkImpl)findViewLink("LeadHeaderToAccessesVL1");
  }

  /**
   *
   * Container's getter for LeadHeaderContactDetailsVO
   */
  public ASNViewObjectImpl getLeadHeaderContactDetailsVO()
  {
    return (ASNViewObjectImpl)findViewObject("LeadHeaderContactDetailsVO");
  }

  /**
   *
   * Container's getter for LeadHeaderToContactsVL1
   */
  public ViewLinkImpl getLeadHeaderToContactsVL1()
  {
    return (ViewLinkImpl)findViewLink("LeadHeaderToContactsVL1");
  }

  /**
   *
   * Container's getter for LeadHeaderLineDetailsVO
   */
  public ASNViewObjectImpl getLeadHeaderLineDetailsVO()
  {
    return (ASNViewObjectImpl)findViewObject("LeadHeaderLineDetailsVO");
  }

  /**
   *
   * Container's getter for LeadHeaderDetailsToLinesVL1
   */
  public ViewLinkImpl getLeadHeaderDetailsToLinesVL1()
  {
    return (ViewLinkImpl)findViewLink("LeadHeaderDetailsToLinesVL1");
  }

  /**
   *
   * Container's getter for LeadLineDetailsVO
   */
  public ASNViewObjectImpl getLeadLineDetailsVO()
  {
    return (ASNViewObjectImpl)findViewObject("LeadLineDetailsVO");
  }


  /**
   *
   * Container's getter for LeadDetailsToLinesVL1
   */
  public ViewLinkImpl getLeadDetailsToLinesVL1()
  {
    return (ViewLinkImpl)findViewLink("LeadDetailsToLinesVL1");
  }

  /**
   *
   * Container's getter for LeadContactDetailsVO
   */
  public ASNViewObjectImpl getLeadContactDetailsVO()
  {
    return (ASNViewObjectImpl)findViewObject("LeadContactDetailsVO");
  }

  /**
   *
   * Container's getter for LeadDetailsToPrimaryContactVL1
   */
  public ViewLinkImpl getLeadDetailsToPrimaryContactVL1()
  {
    return (ViewLinkImpl)findViewLink("LeadDetailsToPrimaryContactVL1");
  }

  /**
   *
   * Container's getter for CurrencyVO
   */
  public CurrencyVOImpl getCurrencyVO()
  {
    return (CurrencyVOImpl)findViewObject("CurrencyVO");
  }

  /**
   *
   * Container's getter for LeadCloseReasonsVO
   */
  public LeadCloseReasonsVOImpl getLeadCloseReasonsVO()
  {
    return (LeadCloseReasonsVOImpl)findViewObject("LeadCloseReasonsVO");
  }

  /**
   *
   * Container's getter for SalesMethDefaultStageVO
   */
  public SalesMethDefaultStageVOImpl getSalesMethDefaultStageVO()
  {
    return (SalesMethDefaultStageVOImpl)findViewObject("SalesMethDefaultStageVO");
  }

  /**
   *
   * Container's getter for LeadDetAppPropertiesVO
   */
  public OAViewObjectImpl getLeadDetAppPropertiesVO()
  {
    return (OAViewObjectImpl)findViewObject("LeadDetAppPropertiesVO");
  }

  /**
   *
   * Container's getter for LeadUwqAppPropertiesVO
   */
  public ASNViewObjectImpl getLeadUwqAppPropertiesVO()
  {
    return (ASNViewObjectImpl)findViewObject("LeadUwqAppPropertiesVO");
  }

  /**
   *
   * Container's getter for ContactActionsVO
   */
  public ContactActionsVOImpl getContactActionsVO()
  {
    return (ContactActionsVOImpl)findViewObject("ContactActionsVO");
  }

  /**
   *
   * Container's getter for SalesMethodologiesVO
   */
  public SalesMethodologiesVOImpl getSalesMethodologiesVO()
  {
    return (SalesMethodologiesVOImpl)findViewObject("SalesMethodologiesVO");
  }

   /**
   * Loops thru and sets the  specified row of Contact Details view object as Current
   */
  public void refreshContactDetailsRow()
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.refreshContactDetailsRow";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    // get view instance/object
    OAViewObject leadContactDetailsVo = (OAViewObject)findViewObject("LeadHeaderContactDetailsVO");
    if(leadContactDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadHeaderContactDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    // If the Contact Details VO exists
    if(leadContactDetailsVo!=null) 
    {
      leadContactDetailsVo.reset();
      // Get the Current Row from the VO
      LeadContactDetailsVORowImpl leadContactDetailsRow = (LeadContactDetailsVORowImpl)leadContactDetailsVo.getCurrentRow();

      // Check if the Current Row Exists
      if(leadContactDetailsRow!=null)
      {
        leadContactDetailsVo.setCurrentRow(leadContactDetailsRow);
      }
      else
      {  
        // Loop through the VO
        String contactSelectFlag = null;
        while(leadContactDetailsVo.hasNext())
        {
          leadContactDetailsRow = (LeadContactDetailsVORowImpl)leadContactDetailsVo.next();
          if(leadContactDetailsRow!=null)
          {
            String contactSelect = (String)leadContactDetailsRow.getAttribute("SelectFlag");
            // Check to see which Row the User has selected
            if("Y".equals(contactSelect))
            {
              // Set the selected Row as Current Row and exit
              leadContactDetailsVo.setCurrentRow(leadContactDetailsRow);
              // Store the value Y into a temp variable to indicate there is a selected row
              contactSelectFlag = "Y";
              break;
            }
          }
        }        
        if(!("Y".equals(contactSelectFlag)))
        {
          leadContactDetailsVo.setRowValidation(false);
          leadContactDetailsVo.reset();
          if(leadContactDetailsVo.hasNext())
          {
            // get the first row
            leadContactDetailsRow = (LeadContactDetailsVORowImpl)leadContactDetailsVo.first();
            if(leadContactDetailsRow!=null)
            {
	            // set the first row as selected
              leadContactDetailsRow.setAttribute("SelectFlag", "Y");              
            }
          }
        }
      }
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   *
   * Following method checks whether Rows exists in the Contact Details VO or not
   */
  public Boolean rowExistsInContactDetails()
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.rowExistsInContactDetails";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

     // get view instance/object
    OAViewObject leadContactDetailsVo = (OAViewObject)findViewObject("LeadHeaderContactDetailsVO"); 
    // Throw an error msg if Object doesnt exist.
    if(leadContactDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadHeaderContactDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    } 
    if(leadContactDetailsVo!=null) 
    {       
        // Create a RowSetIterator on the VO Instance
        RowSetIterator leadContactDetailsItr = null;
        leadContactDetailsItr=leadContactDetailsVo.findRowSetIterator("CtctIterator");
        if(leadContactDetailsItr==null)
          leadContactDetailsItr = leadContactDetailsVo.createRowSetIterator("CtctIterator");
        else
          leadContactDetailsItr.reset();        
    
        if(leadContactDetailsItr!=null)
        {
          // check if any rows exist and If so, return True
          if(leadContactDetailsItr.hasNext())
          {
            leadContactDetailsItr.closeRowSetIterator();  

            if (isProcLogEnabled)
            {
              dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
            }

            return Boolean.TRUE;
          }
          else
          // return False as no rows exist
          {
            leadContactDetailsItr.closeRowSetIterator();
            if (isProcLogEnabled)
            {
              dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
            }
            return Boolean.FALSE;
          }
        } 
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
      return Boolean.FALSE;
  }

   /**
   * Loops thru and sets the  specified row of Product Details view object as Current
   */
  public void refreshProductDetailsRow()
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.refreshProductDetailsRow";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    // get view instance/object
    OAViewObject leadProductDetailsVo = (OAViewObject)findViewObject("LeadHeaderLineDetailsVO");
    if(leadProductDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadHeaderLineDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    // If the Product Details VO exists
    if(leadProductDetailsVo!=null) 
    {
      leadProductDetailsVo.reset();
      // Get the Current Row from the VO
      LeadLineDetailsVORowImpl leadProductDetailsRow = (LeadLineDetailsVORowImpl)leadProductDetailsVo.getCurrentRow();

      // Check if the Current Row Exists
      if(leadProductDetailsRow!=null)
      {
        leadProductDetailsVo.setCurrentRow(leadProductDetailsRow);
      }
      else
      {  
        // Loop through the VO
        String productSelectFlag = null;
        while(leadProductDetailsVo.hasNext())
        {
          leadProductDetailsRow = (LeadLineDetailsVORowImpl)leadProductDetailsVo.next();
          if(leadProductDetailsRow!=null)
          {
            String productSelect = (String)leadProductDetailsRow.getAttribute("SelectFlag");
            // Check to see which Row the User has selected
            if("Y".equals(productSelect))
            {
              // Set the selected Row as Current Row and exit
              leadProductDetailsVo.setCurrentRow(leadProductDetailsRow);
              // leadProductDetailsRow.setAttribute("SelectFlag", "Y");
              // Store the value Y into a temp variable to indicate there is a selected row
              productSelectFlag = "Y";              
              break;
            }
          }
        }
        if(!("Y".equals(productSelectFlag)))
        {
          leadProductDetailsVo.setRowValidation(false);
          leadProductDetailsVo.reset();
          if(leadProductDetailsVo.hasNext())
          {
            // get the first row
            leadProductDetailsRow = (LeadLineDetailsVORowImpl)leadProductDetailsVo.first();
            if(leadProductDetailsRow!=null)
            {
	            // set the first row as selected
              leadProductDetailsRow.setAttribute("SelectFlag", "Y");              
            }
          }
        }
      }
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }    
  }


  /**
   *
   * Following method checks whether Rows exists in the Product Details VO or not
   */
  public Boolean rowExistsInProductDetails()
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.rowExistsInProductDetails";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

     // get view instance/object
    OAViewObject leadProductDetailsVo = (OAViewObject)findViewObject("LeadHeaderLineDetailsVO"); 
    // Throw an error msg if Object doesnt exist.
    if(leadProductDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadHeaderLineDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    } 
    if(leadProductDetailsVo!=null) 
    {       
        // Create a RowSetIterator on the VO Instance
        RowSetIterator leadProductDetailsItr = null;
        leadProductDetailsItr=leadProductDetailsVo.findRowSetIterator("PrdtIterator");
        if(leadProductDetailsItr==null)
          leadProductDetailsItr = leadProductDetailsVo.createRowSetIterator("PrdtIterator");
        else
          leadProductDetailsItr.reset();
    
        if(leadProductDetailsItr!=null)
        {
          // check if any rows exist and If so, return True
          if(leadProductDetailsItr.hasNext())
          {
            leadProductDetailsItr.closeRowSetIterator();  

            if (isProcLogEnabled)
            {
              dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
            }
            return Boolean.TRUE;
          }
          else
          // return False as no rows exist
          {
            leadProductDetailsItr.closeRowSetIterator();
            if (isProcLogEnabled)
            {
              dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
            }
            return Boolean.FALSE;
          }
        } 
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
    return Boolean.FALSE;
  }

   /**
   * Loops thru and sets the  specified row of Sales Team view object as Current
   */
  public void refreshSalesteamDetailsRow()
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.refreshSalesteamDetailsRow";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    // get view instance/object
    OAViewObject leadSalesteamDetailsVo = (OAViewObject)findViewObject("LeadHeaderAccessDetailsVO");
    if(leadSalesteamDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadHeaderAccessDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    // If the Sales Team VO exists
    if(leadSalesteamDetailsVo!=null) 
    {
      leadSalesteamDetailsVo.reset();
      // Get the Current Row from the VO
      LeadAccessDetailsVORowImpl leadSalesteamDetailsRow = (LeadAccessDetailsVORowImpl)leadSalesteamDetailsVo.getCurrentRow();

      // Check if the Current Row Exists
      if(leadSalesteamDetailsRow!=null)
      {
        leadSalesteamDetailsVo.setCurrentRow(leadSalesteamDetailsRow);
      }
      else
      {  
        // Loop through the VO
        String salesteamSelectFlag = null;
        while(leadSalesteamDetailsVo.hasNext())
        {
          leadSalesteamDetailsRow = (LeadAccessDetailsVORowImpl)leadSalesteamDetailsVo.next();
          if(leadSalesteamDetailsRow!=null)
          {
            String salesteamSelect = (String)leadSalesteamDetailsRow.getAttribute("SelectFlag");
            // Check to see which Row the User has selected
            if("Y".equals(salesteamSelect))
            {
              // Set the selected Row as Current Row and exit
              leadSalesteamDetailsVo.setCurrentRow(leadSalesteamDetailsRow);
              // leadSalesteamDetailsRow.setAttribute("SelectFlag", "Y");
              // Store the value Y into a temp variable to indicate there is a selected row
              salesteamSelectFlag = "Y";              
              break;
            }
          }
        }        
        if(!("Y".equals(salesteamSelectFlag)))
        {
          leadSalesteamDetailsVo.setRowValidation(false);
          leadSalesteamDetailsVo.reset();
          if(leadSalesteamDetailsVo.hasNext())
          {
            // get the first row
            leadSalesteamDetailsRow = (LeadAccessDetailsVORowImpl)leadSalesteamDetailsVo.first();
            if(leadSalesteamDetailsRow!=null)
            {
	            // set the first row as selected
              leadSalesteamDetailsRow.setAttribute("SelectFlag", "Y");
            }
          }
        }
      }
    }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }


  /**
   *
   * Following method checks whether Rows exists in the Sales Team Details VO or not
   */
  public Boolean rowExistsInSalesteamDetails()
  {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.rowExistsInSalesteamDetails";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

     // get view instance/object
    OAViewObject leadSalesteamDetailsVo = (OAViewObject)findViewObject("LeadHeaderAccessDetailsVO"); 
    // Throw an error msg if Object doesnt exist.
    if(leadSalesteamDetailsVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "LeadHeaderAccessDetailsVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    } 
    if(leadSalesteamDetailsVo!=null) 
    {       
        // Create a RowSetIterator on the VO Instance
        RowSetIterator leadSalesteamDetailsItr = null;
        leadSalesteamDetailsItr=leadSalesteamDetailsVo.findRowSetIterator("SalesteamIterator");
        if(leadSalesteamDetailsItr==null)
          leadSalesteamDetailsItr = leadSalesteamDetailsVo.createRowSetIterator("SalesteamIterator");
        else
          leadSalesteamDetailsItr.reset();
    
        if(leadSalesteamDetailsItr!=null)
        {
          // check if any rows exist and If so, return True
          if(leadSalesteamDetailsItr.hasNext())
          {
            leadSalesteamDetailsItr.closeRowSetIterator();  

            if (isProcLogEnabled)
            {
              dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
            }
            return Boolean.TRUE;
          }
          else
          // return False as no rows exist
          {
            leadSalesteamDetailsItr.closeRowSetIterator();  
            
            if (isProcLogEnabled)
            {
              dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
            }

            return Boolean.FALSE;
          }
        } 
    }

      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return Boolean.FALSE;
  }

  
/**
  * handle detail status update event
  */
 public void handleDetailStatusUpdateEvent()
 {
    final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.handleDetailStatusUpdateEvent";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

   String detailViewUsageName = "LeadHeaderDetailsVO";

   ViewObject detailVo = findViewObject(detailViewUsageName);
   if(detailVo == null)
   {
     MessageToken[] tokens = { new MessageToken("NAME", detailViewUsageName) };
     throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
   }

   Row detailRow = detailVo.first();

   String status = (String) detailRow.getAttribute("StatusCode");
   String closeReason = (String) detailRow.getAttribute("CloseReason");

   // new trial code //
   Boolean isOpenStatus  = isOpenStatus(status);
     if (isOpenStatus.booleanValue() == true)
   {
    if(closeReason!=null && !("".equals(closeReason.trim())))
    {
      detailRow.setAttribute("CloseReason", null);
    }
   }
    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
 } 

public Boolean isOpenStatus(String status)
 {
   final String METHOD_NAME = "asn.lead.server.LeadUwqAMImpl.isOpenStatus";
   OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
   boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
   StringBuffer buf = new StringBuffer(100);
   if (isProcLogEnabled)
   {
     dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
   }

   if(status == null)
   {
     return Boolean.FALSE;
   }

   StatusDetailsVOImpl vo = getStatusDetailsVO();

   if (vo == null)
   {
     MessageToken[] tokens = { new MessageToken("NAME", "StatusDetailsVO") };
     throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
   }

   vo.initQuery(status);
   Row row = vo.first();

   if(row != null)
   {
     String flag = (String) row.getAttribute("OppOpenStatusFlag");
     if("Y".equals(flag))
     {
       if (isProcLogEnabled)
       {
         dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
         dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
       }
       return Boolean.TRUE;
     }
     else
     {
       if (isProcLogEnabled)
       {
         dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
         dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
       }
       return Boolean.FALSE;
     }
   }
   else
   {
     if (isProcLogEnabled)
     {
       dbTrx.writeDiagnostics(METHOD_NAME,buf.toString() , OAFwkConstants.PROCEDURE);
       dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
     }
     return Boolean.FALSE;
   }
 } 

  /**
   * 
   * Container's getter for LeadDetCloseReasonsVO
   */
  public LeadDetCloseReasonsVOImpl getLeadDetCloseReasonsVO()
  {
    return (LeadDetCloseReasonsVOImpl)findViewObject("LeadDetCloseReasonsVO");
  }


}
