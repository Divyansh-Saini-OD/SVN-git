package od.oracle.apps.xxcrm.asn.common.customer.server;
import com.sun.java.util.collections.ArrayList;
import com.sun.java.util.collections.HashMap;
import oracle.apps.asn.common.customer.schema.server.CustomerAccessEOImpl;
import oracle.apps.asn.common.customer.schema.server.CustomerAccessExpert;
import oracle.apps.asn.common.schema.server.ASNUtil;
import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.common.VersionInfo;
import oracle.apps.fnd.framework.OARowValException;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;
import oracle.jbo.*;
import oracle.jbo.domain.Number;

//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODCustomerAccessesVOImpl extends OAViewObjectImpl 
{
  /**
   * 
   * This is the default constructor (do not remove)
   */
  public ODCustomerAccessesVOImpl()
  {
  }

    public static final String RCS_ID = "$Header: ODCustomerAccessesVOImpl.java 115.18.115200.2 2005/10/17 20:32:42 appldev" +
" ship $"
;
    public static final boolean RCS_ID_RECORDED = VersionInfo.recordClassVersion("$Header: ODCustomerAccessesVOImpl.java 115.18.115200.2 2005/10/17 20:32:42 appldev" +
" ship $"
, "oracle.apps.asn.common.customer.server");

    public void initQuery(String s)
    {
        setWhereClauseParams(null);
        if(s != null && !"".equals(s.trim()))
        {
            MessageToken amessagetoken[] = {
                new MessageToken("IDNAME", s)
            };
            Number number = ASNUtil.stringToJboNumber(s, "ASN_CMMN_STR_TO_JBONUM_ERR", amessagetoken);
            setWhereClauseParam(0, number);
            setPreparedForExecution(true);
        }
    }

    public void addLoginUser(Number number)
    {
        String s = "asn.common.customer.server.CustomerAccessesVOImpl.addLoginUser";
        OADBTransaction oadbtransaction = (OADBTransaction)getDBTransaction();
        boolean flag = oadbtransaction.isLoggingEnabled(2);
        boolean flag1 = oadbtransaction.isLoggingEnabled(1);
        if(flag)
        {
            oadbtransaction.writeDiagnostics(s, "begin", 2);
            StringBuffer stringbuffer = (new StringBuffer(50)).append("Input Parameters: ").append("customerId=").append(number);
            oadbtransaction.writeDiagnostics(s, stringbuffer.toString(), 2);
            stringbuffer = null;
        }
        setMaxFetchSize(0);
        Number number1 = determineLoginResourceId();
        boolean flag2 = false;
        RowSetIterator rowsetiterator = findRowSetIterator("custAccessIter");
        if(rowsetiterator == null)
        {
            rowsetiterator = createRowSetIterator("custAccessIter");
            if(rowsetiterator == null)
            {
                if(flag1)
                {
                    oadbtransaction.writeDiagnostics(s, "Could not create RowSetIterator", 1);
                }
                if(flag)
                {
                    oadbtransaction.writeDiagnostics(s, "end", 2);
                }
                return;
            }
        } else
        {
            rowsetiterator.reset();
        }
        try
        {
            rowsetiterator.setRowValidation(false);
            while(rowsetiterator.hasNext() && !flag2) 
            {
                ODCustomerAccessesVORowImpl customeraccessesvorowimpl = (ODCustomerAccessesVORowImpl)rowsetiterator.next();
                if(customeraccessesvorowimpl.getSalesforceId().equals(number1) && customeraccessesvorowimpl.getCustomerId().equals(number))
                {
                    flag2 = true;
                }
            }
            if(!flag2)
            {
                CustomerAccessExpert customeraccessexpert = (CustomerAccessExpert)oadbtransaction.getExpert(CustomerAccessEOImpl.getDefinitionObject());
                ODCustomerAccessesVORowImpl customeraccessesvorowimpl1 = (ODCustomerAccessesVORowImpl)rowsetiterator.createRow();
                customeraccessesvorowimpl1.setCustomerId(number);
                customeraccessesvorowimpl1.setSalesforceId(number1);
                Number number2 = determineLoginGroupId();
                if(number2 != null && !customeraccessexpert.isResourceIdGroupIdValid(number1, number2))
                {
                    customeraccessesvorowimpl1.setSalesGroupId(null);
                } else
                {
                    customeraccessesvorowimpl1.setSalesGroupId(number2);
                }
                rowsetiterator.insertRow(customeraccessesvorowimpl1);
                if(flag1)
                {
                    StringBuffer stringbuffer1 = (new StringBuffer(50)).append("Added login user to sales team:").append("SalesforceId=").append(customeraccessesvorowimpl1.getSalesforceId()).append(", SalesGroupId=").append(customeraccessesvorowimpl1.getSalesGroupId());
                    oadbtransaction.writeDiagnostics(s, stringbuffer1.toString(), 1);
                    stringbuffer1 = null;
                }
            }
        }
        finally
        {
            rowsetiterator.closeRowSetIterator();
        }
        if(flag)
        {
            oadbtransaction.writeDiagnostics(s, "end", 2);
        }
    }

    private Number determineLoginGroupId()
    {
        String s = "asn.common.customer.server.CustomerAccessesVOImpl.determineLoginGroupId";
        OADBTransaction oadbtransaction = (OADBTransaction)getDBTransaction();
        boolean flag = oadbtransaction.isLoggingEnabled(2);
        boolean flag1 = oadbtransaction.isLoggingEnabled(4);
        if(flag)
        {
            oadbtransaction.writeDiagnostics(s, "begin", 2);
        }
        Number number = null;
        try
        {
            number = new Number(oadbtransaction.getValue("ASNSsnResourceGroupId"));
        }
        catch(Exception exception)
        {
            if(flag1)
            {
                StringBuffer stringbuffer1 = new StringBuffer(100);
                stringbuffer1.append("Exception while retreiving def group id from trxn, ge=").append(exception);
                oadbtransaction.writeDiagnostics(s, stringbuffer1.toString(), 4);
                stringbuffer1 = null;
            }
        }
        if(number == null)
        {
            CustomerAccessExpert customeraccessexpert = (CustomerAccessExpert)oadbtransaction.getExpert(CustomerAccessEOImpl.getDefinitionObject());
            number = customeraccessexpert.getDefaultResourceGroupId(determineLoginResourceId());
        }
        if(flag)
        {
            StringBuffer stringbuffer = (new StringBuffer(25)).append("Return Value=").append(number);
            oadbtransaction.writeDiagnostics(s, stringbuffer.toString(), 2);
            stringbuffer = null;
            oadbtransaction.writeDiagnostics(s, "end", 2);
        }
        return number;
    }

    private Number determineLoginResourceId()
    {
        String s = "asn.common.customer.server.CustomerAccessesVOImpl.determineLoginResourceId";
        OADBTransaction oadbtransaction = (OADBTransaction)getDBTransaction();
        boolean flag = oadbtransaction.isLoggingEnabled(2);
        if(flag)
        {
            oadbtransaction.writeDiagnostics(s, "begin", 2);
        }
        CustomerAccessExpert customeraccessexpert = (CustomerAccessExpert)oadbtransaction.getExpert(CustomerAccessEOImpl.getDefinitionObject());
        int i = oadbtransaction.getUserId();
        Number number = customeraccessexpert.getResourceIdForUserId(new Number(i));
        if(flag)
        {
            StringBuffer stringbuffer = (new StringBuffer(25)).append("Return value=").append(number);
            oadbtransaction.writeDiagnostics(s, stringbuffer.toString(), 2);
            stringbuffer = null;
            oadbtransaction.writeDiagnostics(s, "end", 2);
        }
        return number;
    }

    public void checkUniqueness()
    {
        String s = "asn.common.customer.server.CustomerAccessesVOImpl.checkUniqueness";
        OADBTransaction oadbtransaction = (OADBTransaction)getDBTransaction();
        boolean flag = oadbtransaction.isLoggingEnabled(2);
        boolean flag1 = oadbtransaction.isLoggingEnabled(1);
        if(flag)
        {
            oadbtransaction.writeDiagnostics(s, "begin", 2);
        }
        if(!isDirty())
        {
            if(flag1)
            {
                oadbtransaction.writeDiagnostics(s, "VO is not dirty", 1);
            }
            if(flag)
            {
                oadbtransaction.writeDiagnostics(s, "end", 2);
            }
            return;
        }
        RowSetIterator rowsetiterator = findRowSetIterator("custAccessIter");
        if(rowsetiterator == null)
        {
            rowsetiterator = createRowSetIterator("custAccessIter");
            if(rowsetiterator == null)
            {
                if(flag1)
                {
                    oadbtransaction.writeDiagnostics(s, "Could not create RowSetIterator", 1);
                }
                if(flag)
                {
                    oadbtransaction.writeDiagnostics(s, "end", 2);
                }
                return;
            }
        } else
        {
            rowsetiterator.reset();
        }
        try
        {
            rowsetiterator.setRowValidation(false);
            HashMap hashmap = new HashMap(10);
            while(rowsetiterator.hasNext()) 
            {
                ODCustomerAccessesVORowImpl customeraccessesvorowimpl = (ODCustomerAccessesVORowImpl)rowsetiterator.next();
                Number number = customeraccessesvorowimpl.getSalesforceId();
                Number number1 = customeraccessesvorowimpl.getSalesGroupId();
                if(hashmap.containsKey(number))
                {
                    ArrayList arraylist = (ArrayList)hashmap.get(number);
                    if(number1 == null || arraylist.contains(number1))
                    {
                        if(oadbtransaction.isLoggingEnabled(4))
                        {
                            StringBuffer stringbuffer = (new StringBuffer(100)).append("Sales team resource and group not unique:").append("SalesforceId=").append(number).append(", SalesGroupId=").append(number1);
                            oadbtransaction.writeDiagnostics(s, stringbuffer.toString(), 4);
                            stringbuffer = null;
                        }
                        throw new OARowValException(111, getViewObject().getFullName(), customeraccessesvorowimpl.getKey(), "ASN", "ASN_CMMN_ACSS_NOUNIQ_ERR");
                    }
                    number1.add(number1);
                } else
                {
                    ArrayList arraylist1 = new ArrayList(5);
                    arraylist1.add(number1);
                    hashmap.put(number, arraylist1);
                }
            }
        }
        finally
        {
            rowsetiterator.closeRowSetIterator();
        }
        if(flag)
        {
            oadbtransaction.writeDiagnostics(s, "end", 2);
        }
    }

    public void removeDuplicateAccesses()
    {
        String s = "asn.common.customer.server.CustomerAccessesVOImpl.removeDuplicateAccesses";
        OADBTransaction oadbtransaction = (OADBTransaction)getDBTransaction();
        boolean flag = oadbtransaction.isLoggingEnabled(2);
        boolean flag1 = oadbtransaction.isLoggingEnabled(1);
        if(flag)
        {
            oadbtransaction.writeDiagnostics(s, "begin", 2);
        }
        executeQuery();
        RowSetIterator rowsetiterator = findRowSetIterator("custAccessIter");
        if(rowsetiterator == null)
        {
            rowsetiterator = createRowSetIterator("custAccessIter");
            if(rowsetiterator == null)
            {
                if(flag1)
                {
                    oadbtransaction.writeDiagnostics(s, "Could not create RowSetIterator", 1);
                }
                if(flag)
                {
                    oadbtransaction.writeDiagnostics(s, "end", 2);
                }
                return;
            }
        } else
        {
            rowsetiterator.reset();
        }
        try
        {
            rowsetiterator.setRowValidation(false);
            HashMap hashmap = new HashMap();
            while(rowsetiterator.hasNext()) 
            {
                ODCustomerAccessesVORowImpl customeraccessesvorowimpl = (ODCustomerAccessesVORowImpl)rowsetiterator.next();
                customeraccessesvorowimpl.getAccessId();
                Number number = customeraccessesvorowimpl.getSalesforceId();
                Number number1 = customeraccessesvorowimpl.getSalesGroupId();
                if(!hashmap.containsKey(number))
                {
                    hashmap.put(number, number1);
                } else
                if(number1 == null || number1 != null && number1.equals(hashmap.get(number)))
                {
                    rowsetiterator.removeCurrentRow();
                }
            }
        }
        finally
        {
            rowsetiterator.closeRowSetIterator();
            if(flag)
            {
                oadbtransaction.writeDiagnostics(s, "end", 2);
            }
        }
    }
  
}