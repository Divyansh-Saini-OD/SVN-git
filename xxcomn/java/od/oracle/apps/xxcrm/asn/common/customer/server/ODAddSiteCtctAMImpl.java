/*===========================================================================+
 |                       Office Depot - Project Simplify                     |
 |            Oracle NAIO/WIPRO/Office Depot/Consulting Organization         |
 +===========================================================================+
 |  FILENAME                                                                 |
 |             ODAddSiteCtctAMImpl.java                                      |
 |                                                                           |
 |  DESCRIPTION                                                              |
 |    Root Application Module for Add Site Contact Page ODAddSiteCtctPG      |
 |                                                                           |
 |  NOTES                                                                    |
 |         Used for the Add Site Contact Page                                |
 |                                                                           |
 |  DEPENDENCIES                                                             |
 |    No dependencies.                                                       |
 |                                                                           |
 |  HISTORY                                                                  |
 |                                                                           |
 |    21-Sep-2007 Jasmine Sujithra   Created                                 |
 |    04-Mar-2008 Jasmine Sujithra   Updated for Performance                 |
 +===========================================================================*/

package od.oracle.apps.xxcrm.asn.common.customer.server;

import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.asn.common.fwk.server.ASNApplicationModuleImpl;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.asn.common.server.PartyVOImpl;
import oracle.apps.asn.common.server.PartyVORowImpl;
import od.oracle.apps.xxcrm.asn.common.customer.server.ODPartySiteVOImpl;
import od.oracle.apps.xxcrm.asn.common.customer.server.ODPartySiteVORowImpl;
import java.util.Vector;
import com.sun.java.util.collections.HashMap;
import oracle.apps.asn.common.fwk.server.PartyTypeVOImpl;
import oracle.apps.asn.common.fwk.server.ResourceIdForUserIdVOImpl;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;

//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODAddSiteCtctAMImpl extends ASNApplicationModuleImpl  
{
public static final int SINGLE_SELECT             = 1;
  public static final int MULTI_SELECT              = 2;

  /**
   * 
   * This is the default constructor (do not remove)
   */
  public ODAddSiteCtctAMImpl()
  {
  }

   public String getPartyNameFromId(String partyId)
  {
    final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.common.customer.server.ODAddSiteCtctAMImpl.getPartyNameFromId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      StringBuffer buf = new StringBuffer();
      buf.append("Input Parameters: partyId = ");
      buf.append(partyId);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
    }

    PartyVOImpl vo = this.getPartyVO();
    if (vo == null)
    {
          MessageToken[] tokens = { new MessageToken("NAME", "PartyVO") };
          throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.initQuery(partyId);

    String partyName = null;

   if ( vo != null && vo.isExecuted() )
    {
         PartyVORowImpl cRow = (PartyVORowImpl)vo.first();
         partyName = ((Object)cRow.getAttribute("PartyName")).toString();
    }

    if (isProcLogEnabled) 
    {
      StringBuffer buf = new StringBuffer();
      buf.append("Output Parameters: partyName = ");
      buf.append(partyName);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }

    return partyName;
  }


  public String getPartySiteDetFromId(String partySiteId)
  {
    final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.common.customer.server.ODAddSiteCtctAMImpl.getPartySiteDetFromId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      StringBuffer buf = new StringBuffer();
      buf.append("Input Parameters: partySiteId = ");
      buf.append(partySiteId);
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
    }
     String partySiteDet = null;
    try
    {
    ODPartySiteVOImpl vo = this.getODPartySiteVO();
    if (vo == null)
    {
          MessageToken[] tokens = { new MessageToken("NAME", "PartyVO") };
          throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    vo.initQuery(partySiteId);

   

   if ( vo != null && vo.isExecuted() )
    {
         Object address1obj = null;
         Object cityobj = null;
         Object stateobj = null;
         Object countryobj = null;
         Object postalCodeobj = null;
         String address1 =null;
         String city = null;
         String state = null;
         String country = null;
         String postalCode = null;
         
         ODPartySiteVORowImpl cRow = (ODPartySiteVORowImpl)vo.first();
         address1obj = (Object)cRow.getAttribute("Address1");
         if (address1obj != null)
            address1 = (address1obj).toString();

         cityobj = (Object)cRow.getAttribute("City");
         if (cityobj != null)
            city =(cityobj).toString();

         stateobj =   (Object)cRow.getAttribute("State");
         if (stateobj !=null)
            state =(stateobj).toString();
            
         countryobj = (Object)cRow.getAttribute("Country");
         if (countryobj !=null)
            country =(countryobj).toString();

         postalCodeobj =  (Object)cRow.getAttribute("PostalCode");
         if (postalCodeobj != null)
            postalCode =(postalCodeobj).toString();
            
         partySiteDet = address1;
         if (city != null)
         partySiteDet = partySiteDet+" "+city;
         if (state != null)
         partySiteDet = partySiteDet+" "+state;
         if(postalCode != null)
         partySiteDet = partySiteDet+" - "+postalCode;
    }   
    }
    catch(Exception ex)
    {
        dbTrx.writeDiagnostics(METHOD_NAME,"Inside Exception Block", OAFwkConstants.PROCEDURE);
    }
    if (isProcLogEnabled)  
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }
    if (partySiteDet != null)
        return partySiteDet.trim();
    else
        return partySiteDet;
  }


public void applyTransaction()
{
   final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.common.customer.server.ODAddSiteCtctAMImpl.applyTransaction";
   OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
   boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
   if (isProcLogEnabled)  
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }
   dbTrx.commit();
   if (isProcLogEnabled)  
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }
}

 public void insertRecords(String partyId, String partySiteId)
 {
    final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.common.customer.server.ODAddSiteCtctAMImpl.insertRecords";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    if (isProcLogEnabled)  
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      StringBuffer buf = new StringBuffer();
      buf.append("Input Parameters: Party Id = ");
      buf.append(partyId);
      buf.append("  ,Party Site ID = ");
      buf.append(partySiteId);      
      dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
    }

    String viewUsageName = "ODHzPartySitesExtVLVO";
    OAViewObject vo = getODHzPartySitesExtVLVO();
   
    if(vo == null)
    {
      MessageToken[] tokens = { new MessageToken("OBJECT_NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
 
   
    vo.reset();
    vo.setRowValidation(false);
   
    String attrSql = " select attr_group_id from ego_attr_groups_v egoag where  egoag.attr_group_type = 'HZ_PARTY_SITES_GROUP' AND egoag.attr_group_name = 'SITE_CONTACTS'";
    oracle.jbo.ViewObject attrgrpidvo = createViewObjectFromQueryStmt("AttrGrpIdVO", attrSql); 
    attrgrpidvo.executeQuery();
    attrgrpidvo.first();
    String attrGroupId = attrgrpidvo.getCurrentRow().getAttribute(0).toString(); 
    attrgrpidvo.remove();

    Vector selectedContacts = getSelectedContacts( 2);
    if(selectedContacts == null || selectedContacts.size() == 0)
    {
      throw new OAException("ASN","ASN_CMMN_CHKBOX_MISS_ERR");
    }
    if ( selectedContacts != null ) {
      for(int contact=0; contact<selectedContacts.size();contact++)
      {
        // Diagnostic.println("Getting each selectedContact record");
         HashMap hTemp = (HashMap)selectedContacts.elementAt(contact);
       //  String relPartyId = (String)hTemp.get("RelPartyId");
         String relId = (String)hTemp.get("RelationshipId");
        
         
              Row newrow = vo.createRow();
              newrow.setAttribute("AttrGroupId",attrGroupId);
              newrow.setAttribute("PartySiteId", partySiteId);              
              newrow.setAttribute("NExtAttr1", relId);
              vo.insertRow(newrow);
              newrow.setNewRowState(Row.STATUS_NEW);         

           
          }
        }    
    if (isProcLogEnabled) {
      dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    }
  }


  public Vector getSelectedContacts( int selectMode )
  {
     boolean bDataFound = false;
     Vector  contacts = null;

    
     OAViewObject vo = getODHzPartySiteContactsVO();
     Object o = null;
     if ( vo != null && vo.isExecuted() )
     {
         vo.reset();
         //Diagnostic.println("HzPuiServerUtil.getSelectedContacts(). VO is not NULL");
         while (vo.hasNext()) 
         {
            Row cRow = (Row)vo.next(); 
            HashMap contactRec = new HashMap(); 
            //Diagnostic.println("HzPuiServerUtil Record Found");

            String selectFlag = (String) cRow.getAttribute("SelectFlag") ;       
            if ("Y".equals(selectFlag)) 
            {
                //Diagnostic.println("HzPuiServerUtil Select Flag Found");

                if ( !bDataFound )
                {
                  contacts = new Vector(5,5);
                  bDataFound = true;
                }

                o = (Object)cRow.getAttribute("RelationshipId");
                if ( o != null ) 
                {
                     contactRec.put( "RelationshipId", o.toString() ); 
                }

                //Add the hash to the vector
                contacts.addElement(contactRec);
                
                //If called for single select then break
                if ( selectMode == SINGLE_SELECT )
                     break; 
            }    
         }
		 //VJ-Added for Issue no.171 on tracker - BEGIN
		 vo.first();
		 //VJ-Added for Issue no.171 on tracker - END
     }   

     if ( contacts == null )
     {
          throw new OAException("AR",
                                "HZ_RM_HIER_ACTION_REQ_BUT",
                                null,
                                OAException.ERROR,
                                null);
     }     
     
     return contacts;
  }



  public void clearContactsVOCache()
  {
    	final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.common.customer.server.ODAddSiteCtctAMImpl.clearContactsVOCache";
    	OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    	boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    	if (isProcLogEnabled) 
      {
      		dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
      }
      OAViewObject vo = (OAViewObject) findViewObject("ODHzPartySiteContactsVO");
      if(vo != null)
      {
            vo.clearCache();
            vo.setPreparedForExecution(false);
      }
    
    	if (isProcLogEnabled) {
      		dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
    	}
  }

  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxcrm.asn.common.customer.server", "ODAddSiteCtctAMLocal");
  }


  /**
   * 
   * Container's getter for PartyVO
   */
  public PartyVOImpl getPartyVO()
  {
    return (PartyVOImpl)findViewObject("PartyVO");
  }

  /**
   * 
   * Container's getter for ODPartySiteVO
   */
  public ODPartySiteVOImpl getODPartySiteVO()
  {
    return (ODPartySiteVOImpl)findViewObject("ODPartySiteVO");
  }


  /**
   * 
   * Container's getter for ASNSecurityAM
   */
  public ApplicationModuleImpl getASNSecurityAM()
  {
    return (ApplicationModuleImpl)findApplicationModule("ASNSecurityAM");
  }

  /**
   * 
   * Container's getter for ASNApplicationModule
   */
  public ApplicationModuleImpl getASNApplicationModule()
  {
    return (ApplicationModuleImpl)findApplicationModule("ASNApplicationModule");
  }

  /**
   * 
   * Container's getter for PartyTypeVO
   */
  public PartyTypeVOImpl getPartyTypeVO()
  {
    return (PartyTypeVOImpl)findViewObject("PartyTypeVO");
  }

  /**
   * 
   * Container's getter for ResourceIdForUserIdVO
   */
  public ResourceIdForUserIdVOImpl getResourceIdForUserIdVO()
  {
    return (ResourceIdForUserIdVOImpl)findViewObject("ResourceIdForUserIdVO");
  }

  /**
   * 
   * Container's getter for ODHzPartySitesExtVLVO
   */
  public ODHzPartySitesExtVLVOImpl getODHzPartySitesExtVLVO()
  {
    return (ODHzPartySitesExtVLVOImpl)findViewObject("ODHzPartySitesExtVLVO");
  }

  /**
   * 
   * Container's getter for ODHzPartySiteContactsVO
   */
  public ODHzPartySiteContactsVOImpl getODHzPartySiteContactsVO()
  {
    return (ODHzPartySiteContactsVOImpl)findViewObject("ODHzPartySiteContactsVO");
  }

}