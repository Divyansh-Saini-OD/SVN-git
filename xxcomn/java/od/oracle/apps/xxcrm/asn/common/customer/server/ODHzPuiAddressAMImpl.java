/*===========================================================================+
 |                       Office Depot - Project Simplify                     |
 |            Oracle NAIO/WIPRO/Office Depot/Consulting Organization         |
 +===========================================================================+
 |  FILENAME                                                                 |
 |             ODHzPuiAddressAMImpl.java                                     |
 |                                                                           |
 |  DESCRIPTION                                                              |
 |    Application Module Implementation for the Create Update Address Region |
 |                                                                           |
 |  NOTES                                                                    |
 |         Used for the Customization on the Create Contact Page             |
 |         and Create Update Contact Address Page                            |
 |  DEPENDENCIES                                                             |
 |    No dependencies.                                                       |
 |                                                                           |
 |  HISTORY                                                                  |
 |                                                                           |
 |   27-Sep-2007 Jasmine Sujithra   Created                                 |
 |   24-Dec-2007 Anirban Chaudhuri   Fixed code for defect#187 in ASN Tracker|
 +===========================================================================*/
package od.oracle.apps.xxcrm.asn.common.customer.server;
import oracle.apps.ar.hz.components.address.server.HzPuiAddressAMImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.asn.common.server.PartyVOImpl;
import oracle.apps.asn.common.server.PartyVORowImpl;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.jbo.RowSetIterator;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.server.OAViewRowImpl;
import java.io.Serializable;
import oracle.apps.fnd.framework.OARow;
import oracle.jbo.common.Diagnostic;




//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODHzPuiAddressAMImpl extends HzPuiAddressAMImpl 
{

  public String  getPartySiteId( String partyId )
  {
      final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.common.customer.server.ODHzPuiAddressAMImpl.getPartySiteId";
      OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
      boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
      if (isProcLogEnabled)  
      {
        dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
        StringBuffer buf = new StringBuffer();
        buf.append("Input Parameters: partyId = ");
        buf.append(partyId);
        dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
      }

      ODPartySiteListVOImpl vo = this.getODPartySiteListVO();
      if (vo == null)
      {
          MessageToken[] tokens = { new MessageToken("NAME", "PartySiteListVO") };
          throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
      }
      vo.initQuery(partyId);

      String partySiteId = null;

      if ( vo != null && vo.isExecuted() )
      {
         ODPartySiteListVORowImpl cRow = (ODPartySiteListVORowImpl)vo.first();
        
		 //Anirban added for fixing defect#187 in ASN Tracker: Start
          if(cRow == null)
		  {
            OAException e = new OAException("XXCRM", "XX_SFA_081_PARTY_WOUT_SITE");
		    throw (e);
		  }

          if(cRow.getAttribute("PartySiteId") == null)
		  {
            OAException e = new OAException("XXCRM", "XX_SFA_081_PARTY_WOUT_SITE");
		    throw (e);
		  }
		 //Anirban added for fixing defect#187 in ASN Tracker: End


         partySiteId = ((Object)cRow.getAttribute("PartySiteId")).toString();
       
      }   
      if (isProcLogEnabled)  
      {
          StringBuffer buf = new StringBuffer();
          buf.append("Output Parameters: partySiteId = ");
          buf.append(partySiteId);
          dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
          dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
      }
      return partySiteId.trim();
  }

  public String getPartyNameFromId(String partyId)
  {
      final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.common.customer.server.ODHzPuiAddressAMImpl.getPartyNameFromId";
      OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
      boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
      if (isProcLogEnabled)  
      {
        dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
        StringBuffer buf = new StringBuffer();
        buf.append("Input Parameters: partyId = ");
        buf.append(partyId);
        dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
      }

      PartyVOImpl vo = this.getPartyVO();
      if (vo == null)
      {
          MessageToken[] tokens = { new MessageToken("NAME", "PartyVO") };
          throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
      }
      vo.initQuery(partyId);

      String partyName = null;

      if ( vo != null && vo.isExecuted() )
      {
         PartyVORowImpl cRow = (PartyVORowImpl)vo.first();
         partyName = ((Object)cRow.getAttribute("PartyName")).toString();
      }

      if (isProcLogEnabled) 
      {
        StringBuffer buf = new StringBuffer();
        buf.append("Output Parameters: partyName = ");
        buf.append(partyName);
        dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
        dbTrx.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);
      }

      return partyName;
  }

   public String  getPartySiteIndex( String partySiteId )
  {
    final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.common.customer.server.ODHzPuiAddressAMImpl.getPartySiteIndex";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  partySiteId : ");
      buf.append(partySiteId);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }
    
      // get view instance/object
    String viewUsageName = "ODPartySiteListVO";
    OAViewObject partysitelistvo = (OAViewObject)getODPartySiteListVO();
    String rowindex = null;
   
    if (partysitelistvo == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    int index = 0;
      // determine the row index based on the requested lead
    if(partySiteId!=null && partySiteId.trim().length()>=0)
    {
      RowSetIterator partySiteItr = null;
      OAViewRowImpl row = null;
      if(partysitelistvo!=null) {
        partySiteItr = partysitelistvo.findRowSetIterator("PartySiteIterator");
        if(partySiteItr==null)
          partySiteItr = partysitelistvo.createRowSetIterator("PartySiteIterator");
        else
          partySiteItr.reset();
      }
      if(partySiteItr!=null)
      {
        partySiteItr.setRowValidation(false);
        String id = null;
        while(partySiteItr.hasNext())
        {
          row = (OAViewRowImpl)partySiteItr.next();
          if(row!=null)
            id = row.getAttribute("PartySiteId").toString();
          if(partySiteId.equals(id))
          {
            index = partySiteItr.getCurrentRowIndex();
            rowindex = ""+index;          
            break;
          }
        }
        partySiteItr.closeRowSetIterator();

      }
    }
    if (isProcLogEnabled)
    {
        StringBuffer buf = new StringBuffer();
        buf.append("Output Parameters: rowindex = ");
        buf.append(rowindex);
        dbTrx.writeDiagnostics(METHOD_NAME,buf.toString(), OAFwkConstants.PROCEDURE);
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }

    return rowindex;
  }

  public void initAddressViewQuery(String partyId)
  {
    final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.common.customer.server.ODHzPuiAddressAMImpl.initAddressViewQuery";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    if (isStatLogEnabled)
    {
      StringBuffer buf = new StringBuffer(100);
      buf.append("  partyId : ");
      buf.append(partyId);
      dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }
      // Initialize  initAddressViewQuery
      //All parameters passed using invokeMethod() must be serializable.
      Serializable[] parameters =  { partyId };
      OAViewObject vo = (OAViewObject)findViewObject("ODHzContactAddressesVO");
      vo.setMaxFetchSize(-1);                 
      vo.invokeMethod("initQuery", parameters);

      
     
  }

  public void initAddressViewQuery(String partyId, String countryCode, String purpose)
  {
      // Initialize  initAddressViewQuery
      //All parameters passed using invokeMethod() must be serializable.
      Serializable[] parameters =  { partyId,  countryCode, purpose};
      OAViewObject vo = (OAViewObject)findViewObject("ODHzContactAddressesVO");
      vo.setMaxFetchSize(-1);                 
      vo.invokeMethod("initQuery", parameters);

    
  }

  public void deleteRelationships(String partyId,String extensionId)
  {
    final String METHOD_NAME = "od.oracle.apps.xxcrm.asn.common.customer.server.ODHzPuiAddressAMImpl.deleteRelationships";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }


   
    
    // Here we may need to code the logic to initiualize the VO with
    // default values
    OAViewObject relationshipVo = (OAViewObject)findViewObject("ODHzContactAddressesVO");

    OARow row = null;
    relationshipVo.reset();

    while (relationshipVo.hasNext())
    {
        row = (OARow)relationshipVo.next();
        if (extensionId.equals(row.getAttribute("ExtensionId").toString()))
        {
          Diagnostic.println("Found row - Extension ID: " + extensionId);
          if (isStatLogEnabled)
          {
              StringBuffer buf = new StringBuffer(100);
              buf.append("  Deleting Extension ID: ");
              buf.append(extensionId);
              dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
          }
          row.remove();
          dbTrx.writeDiagnostics(METHOD_NAME, "Committing the transaction", OAFwkConstants.STATEMENT);
          getTransaction().commit();
          
          //break; // only one possible selected row in this case
        }
    }
    
    relationshipVo.reset();
     initAddressViewQuery(partyId);
    if (isProcLogEnabled)
    {
        
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
    }
  }

  /**
   * 
   * This is the default constructor (do not remove)
   */
  public ODHzPuiAddressAMImpl()
  {
  }

  /**
   * 
   * Container's getter for ODPartySiteListVO
   */
  public ODPartySiteListVOImpl getODPartySiteListVO()
  {
    return (ODPartySiteListVOImpl)findViewObject("ODPartySiteListVO");
  }

  /**
   * 
   * Container's getter for ODPartySiteVO
   */
  public ODPartySiteVOImpl getODPartySiteVO()
  {
    return (ODPartySiteVOImpl)findViewObject("ODPartySiteVO");
  }

  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxcrm.asn.common.customer.server", "ODHzPuiAddressAMLocal");
  }

  /**
   * 
   * Container's getter for PartyVO
   */
  public PartyVOImpl getPartyVO()
  {
    return (PartyVOImpl)findViewObject("PartyVO");
  }


  /**
   * 
   * Container's getter for ODHzPartySitesExtVLVO
   */
  public ODHzPartySitesExtVLVOImpl getODHzPartySitesExtVLVO()
  {
    return (ODHzPartySitesExtVLVOImpl)findViewObject("ODHzPartySitesExtVLVO");
  }

  /**
   * 
   * Container's getter for ODHzContactAddressesVO
   */
  public ODHzContactAddressesVOImpl getODHzContactAddressesVO()
  {
    return (ODHzContactAddressesVOImpl)findViewObject("ODHzContactAddressesVO");
  }
}