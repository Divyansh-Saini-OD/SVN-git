#!/bin/ksh
# ----------------------------------------------------------------------------------------
# Filename:   XXODXMLMAILER
# Purpose:    This Program is used to send the Concurrent Program Request XML Output as an 
#             Email to the user based on the Attachment Flag.If the Flag is selected as 
#             N (No),then the output is sent as the Email body.If the Flag is selected as
#	      Y (Yes),then the output file is sent as an Attachment with the Email.
#             The user has to enter the Program Name,Email Address(es),Email Subject,  
#             Email Body and the value for the Attachment Flag. 
# ----------------------------------------------------------------------------------------

#  Concurrent Program Definitions Parameters

#  var1  is --> Job name 
#  var2  is --> Concurrent Program Request ID.
#  var3  is --> Login Credentials

#  User defined Parameters

#  var9  is --> Concurrent Program Short Name
#  var10 is --> Email Address(es)
#  var11 is --> Email Subject
#  var12 is --> Email Body Text
#  var13 is --> Email Attachment Flag
#  var14 is --> Request ID

# VERSION  AUTHOR                        COMMENTS           DATE          |
# ------------------------------------------------------------------------|
# 1.0      Senthil Kumar                 Initial Version    18-SEP-2007   |
# 1.1      Samitha U M                   Variable changed   26-OCT-2007   |
#                                        for the soft link                |
#                                        (Defect 2482)                    |
#1.2       Anitha Devarajulu             Fixed defect 1084  30-JUL-2009   |
# | 1.3      09-SEP-2016    Praveen Vanga          Defect 39261     |
# ------------------------------------------------------------------------|
#Commented for defect 2482
# Parsing System Defined Parameters.
#var1=`echo $1 | awk '{print $1}'| tr -d '"'`
#var2=`echo $1 | awk '{print $2}'| tr -d '"'`
#var3=`echo $1 | awk '{print $3}'| tr -d '"'`

#Commented for defect 2482
# Defining User Defined Parameters.
#var9=`echo $1 | cut -f8 -d '"'`
#var10=`echo $1 | cut -f10 -d '"'`
#var11=`echo $1 | cut -f12 -d '"'`
#var12=`echo $1 | cut -f14 -d '"'`
#var13=`echo $1 | cut -f16 -d '"'`
#var14=`echo $1 | cut -f18 -d '"'`
#var15=`echo $1 | cut -f20 -d '"'`

#Added for the defect 2482
var2=$4
var9=${5}
var10=${6}
var11=${7}
var12=${8}
var13=${9}
var14=${10}
var15=${11}

#Added for the defect 1084
var16=${12}

echo "Current Request Id            : "${var2}
echo 
echo "Concurrent Program Name :"${var9}
echo "Email Address(es)       :"${var10}
echo "Email Subject           :"${var11}
echo "Email Body Text         :"${var12}
echo "Email Attachment Flag   :"${var13}
echo "Request ID              :"${var14}
echo "Request Short Name      :"${var15}
#Added for the defect 1084
echo "Sender Address          : "${var16}

# Assigning Required Parameters to the Shell variables.

program_name=${var9}
to_email_address=${var10}
email_sub=`echo $var11 | sed 's/ /_/g'`
email_body=${var12}
email_attachment=${var13}
req_id=0
short_name=${var15}

#Added for the defect 1084
if [ "$var15" != "" ] 
then
sender_address=${var15}
else
sender_address="noreply@officedepot.com"
fi

# Defining Constants.

u_mail_subject=${email_sub}
filepath=$APPLCSF/$APPLOUT/
cust_path=$XXFIN_DATA/inbound/

# Printing User Defined Parameters in the Request Log File.

if [ "$var14" != "" ]
then
p_req_id=$var14
p_program_name=$var9
p_short_name=$var15

# Constructing the names of the request output and email attachment files.
filename=o${p_req_id}.out
pdf_filename=${p_short_name}"_"${p_req_id}"_1.PDF"
file=$filepath$filename
pdffile=$filepath$pdf_filename

#Added for defect 2482
echo
echo "File Name              : "$filename
echo "PDF File Name          : "$pdf_filename
echo "File Path              : "$filepath
echo
echo


if [ ! -f $file ]
then
echo "No Request Output file found.   Email not sent."
else
attachment=XX_${email_sub}_${p_req_id}.txt
pdf_attachment=$pdf_filename

cp $file $cust_path$attachment
cp $pdffile $cust_path$pdf_attachment

if [ "${email_attachment}" = "Y" ]
then

# Send an email the user with the attachment.
#Commented for the defect 1084
#(/usr/bin/uuencode $cust_path$pdf_attachment $cust_path$pdf_attachment > /dev/null 2>&1)| mailx -s ${u_mail_subject}_${p_req_id} -a $cust_path$pdf_attachment ${to_email_address} <<-EOF
#Added for the defect 1084
(/usr/bin/uuencode $cust_path$pdf_attachment $cust_path$pdf_attachment > /dev/null 2>&1)| mailx -r ${sender_address} -s ${u_mail_subject}_${p_req_id} -a $cust_path$pdf_attachment ${to_email_address} <<-EOF
${email_body}

---------------------------------------------------
This is a system generated mail.Please do not reply.
----------------------------------------------------
EOF
echo "Email Sent with Request Output as Attachment."
chmod 777 $cust_path$pdf_attachment
rm $cust_path$pdf_attachment

else 
#Commented for the defect 1084
#cat $file|mailx -s ${u_mail_subject}_${p_req_id} ${to_email_address}
#Added for the defect 1084
cat $file|mailx -r ${sender_address} -s ${u_mail_subject}_${p_req_id} ${to_email_address}
fi

fi

else

# Getting the request id of the Current emailer shell program.
#Commented for Defect 2482
#shell_req=`echo $var2|awk -F= '{print $2}'`

shell_req=${var2}

#commented for defect 2482
# Setting up database connection credentials.
#appspw=`echo $var3|awk -F= '{print $2}'`
#connect=$appspw@$TWO_TASK
#echo "conne  : "${connect}

export SQLPATH=$APPL_TOP
 

#Connecting to ORACLE and determining the request id of the output file.

req_id=`sqlplus -s /nolog <<EOF
set heading off
set pagesize 0
set linesize 255
set sqlprompt ""
set echo off
set feedback off
set verify off
set serveroutput on 
VARIABLE ln_fileid NUMBER;
VARIABLE ln_sname  VARCHAR2(30);
VARIABLE ln_filename VARCHAR2(50);
DECLARE
   ln_req_id     NUMBER;
   ln_short_name  VARCHAR2(30);
BEGIN
   SELECT fcr2.request_id,fcp.concurrent_program_name
     INTO ln_req_id,ln_short_name
     FROM fnd_concurrent_programs FCP,
          fnd_concurrent_requests FCR2,
          fnd_concurrent_requests FCR1
    WHERE FCR1.request_id = ${shell_req}
      AND FCR2.priority_request_id = FCR1.priority_request_id
      AND FCR2.concurrent_program_id = FCP.concurrent_program_id
      AND FCP.concurrent_program_name = UPPER('${program_name}');
      :ln_fileid := ln_req_id;
      :ln_sname  := ln_short_name;
      
      :ln_filename:=ln_short_name||'_'||ln_req_id||'_1.PDF';
      DBMS_OUTPUT.PUT_LINE(ln_req_id);
      DBMS_OUTPUT.PUT_LINE(ln_short_name);
EXCEPTION
WHEN NO_DATA_FOUND THEN
:ln_fileid := 0;
WHEN OTHERS THEN
:ln_fileid := 0;
END;
/
EOF`
 
req_id=`echo $req_id |  sed 's/"//g'`
echo  "Output File Request ID  : "  ${req_id}
echo


if [ "${req_id}" -ne 0 ]
then

# Constructing the names of the request output and email attachment files.

filename=o$req_id.out
file=$filepath$filename
attachment=XX_${email_sub}_$req_id.txt
cp $file $cust_path$attachment

if [ "${email_attachment}" = "Y" ]
then

# Send an email the user with the attachment.

#Commented for the defect 1084
#(/usr/bin/uuencode $cust_path$attachment $cust_path$attachment > /dev/null 2>&1) | mailx -s ${u_mail_subject}_$req_id -a $cust_path$attachment ${to_email_address} <<-EOF
#Added for the defect 1084
(/usr/bin/uuencode $cust_path$attachment $cust_path$attachment > /dev/null 2>&1) | mailx -r ${sender_address} -s ${u_mail_subject}_$req_id -a $cust_path$attachment ${to_email_address} <<-EOF
${email_body}
----------------------------------------------------
This is a system generated mail.Please do not reply.
----------------------------------------------------
EOF
echo "Email sent with attachment."
chmod 777 $cust_path$attachment
rm $cust_path$attachment

else 
#Commented for the defect 1084
#cat $file|mailx -s ${u_mail_subject}_$req_id ${to_email_address}
#Added for the defect 1084
cat $file|mailx -r ${sender_address} -s ${u_mail_subject}_$req_id ${to_email_address}
fi

else
echo "No Request Output file found.   Email not sent."
fi

fi

# Exiting from the shell program.
exit 0   # Success.
