#!/bin/ksh
# ----------------------------------------------------------------------------------------
# Filename:   XXODROEMAILER
# Purpose:    This Program is used to send the Concurrent Program Request Output as an 
#             Email to the user based on the Attachment Flag.If the Flag is selected as 
#             N (No),then the output is sent as the Email body.If the Flag is selected as
#	      Y (Yes),then the output file is sent as an Attachment with the Email.
#             The user has to enter the Program Name,Email Address(es),Email Subject,  
#             Email Body and the value for the Attachment Flag. 
# ----------------------------------------------------------------------------------------

#  Concurrent Program Definitions Parameters

#  var1  is --> Job name 
#  var2  is --> Concurrent Program Request ID.
#  var3  is --> Login Credentials

#  User defined Parameters

#  var9  is --> Concurrent Program Short Name
#  var10 is --> Email Address(es)
#  var11 is --> Email Subject
#  var12 is --> Email Body Text
#  var13 is --> Email Attachment Flag
#  var14 is  --> Request ID

# |VERSION  AUTHOR                        COMMENTS           DATE            |
# |--------------------------------------------------------------------------|
# |1.0     Shivkumar Arunachalam Iyer    Initial Version    13-FEB-2007     |
# |1.1     Samitha U M                   Variable changed   22-OCT-2007     |
# |                                      for the soft link                  |
# |                                      (Defect 2482)                      |
# | 1.2      09-SEP-2016    Praveen Vanga          Defect 39261     |
# --------------------------------------------------------------------------|

# Parsing System Defined Parameters.

# Comment for the defect 2482..
#var1=`echo $1| awk '{print $1}'| tr -d '"'`
#var2=`echo $1| awk '{print $2}'| tr -d '"'`
#var3=`echo $1| awk '{print $3}'| tr -d '"'`

# Defining User Defined Parameters.
# Comment for the defect 2482

#var9=`echo $1 | cut -f8 -d '"'`
#var10=`echo $1 | cut -f10 -d '"'`
#var11=`echo $1 | cut -f12 -d '"'`
#var12=`echo $1 | cut -f14 -d '"'`
#var13=`echo $1 | cut -f16 -d '"'`
#var14=`echo $1 | cut -f18 -d '"'`

#Added for the defect 2482

var9=${5}
var10=${6}
var11=${7}
var12=${8}
var13=${9}
var14=${10}

echo "Concurrent Program Short Name  : "${var9}
echo "Email Address(es)              : "${var10}
echo "Email Subject                  : "${var11}
echo "Email Body Text                : "${var12}
echo "Email Attachment Flag          : "${var13}
echo "Request ID                     : "${var14}
echo

# Assigning Required Parameters to the Shell variables.

program_name=${var9}
to_email_address=${var10}
email_sub=`echo $var11 |sed 's/ /_/g'`
email_body=${var12}
email_attachment=${var13}
req_id=0

# Defining Constants.

u_mail_subject=${email_sub}
filepath=$APPLCSF/$APPLOUT/
cust_path=$XXFIN_DATA/inbound/

# Printing User Defined Parameters in the Request Log File.


if [ "$var14" != "" ]
then

p_req_id=$var14

# Constructing the names of the request output and email attachment files.

filename=o${p_req_id}.out
file=$filepath$filename

export SQLPATH=$APPL_TOP
 

# Connecting to ORACLE .
#req_id=`sqlplus -s ${connect} <<EOF
stat_code=`sqlplus -s /nolog <<EOF
set pagesize 0
set linesize 255
set sqlprompt " "
set serveroutput on 
set verify off
DECLARE
   lb_req_status        BOOLEAN;
   lc_phase             VARCHAR2(50);
   lc_status            VARCHAR2(50);
   lc_devphase          VARCHAR2(50);
   lc_devstatus         VARCHAR2(50);
   lc_message           VARCHAR2(50);
BEGIN
lb_req_status := fnd_concurrent.wait_for_request (
                                              '$p_req_id'
                                             ,'10'
                                             ,''
                                             ,lc_phase
                                             ,lc_status
                                             ,lc_devphase
                                             ,lc_devstatus
                                             ,lc_message );
END;
/
SET FEEDBACK OFF
EOF`

if [ ! -f $file ]
then
echo "No Request Output file found.   Email not sent."
else
#attachment=XX_${email_sub}_${p_req_id}.txt

attachment=OD_COGS_INTERFACE_REPORT_${p_req_id}.txt

#cp $file $cust_path$attachment

cat $file >>$cust_path$attachment

for file in `ls $XXFIN_DATA/inbound/${p_req_id}_*` 
do 
cat $file >>  $cust_path$attachment 
echo "deleting file: "$file
rm -f -v $file
done

if [ "${email_attachment}" = "Y" ]
then

# Send an email the user with the attachment.

(/usr/bin/uuencode $cust_path$attachment $cust_path$attachment   > /dev/null 2>&1)| mailx -s ${u_mail_subject}_${p_req_id} -a $cust_path$attachment ${to_email_address} <<-EOF
${email_body}
----------------------------------------------------
This is a system generated mail.Please do not reply.
----------------------------------------------------
EOF
echo "Email Sent with Request Output as Attachment."
chmod 777 $cust_path$attachment
rm $cust_path$attachment

else 
cat $file|mailx -s ${u_mail_subject}_${p_req_id} ${to_email_address}
fi

fi

else
echo "Program Name      : "${var9}

# Getting the request id of the Current emailer shell program.

shell_req=`echo $var2|awk -F= '{print $2}'`

# Setting up database connection credentials.

# Connecting to ORACLE and determining the request id of the output file.

req_id=`sqlplus -s /nolog <<EOF

set heading off
set pagesize 0
set linesize 255
set sqlprompt ""
set echo off
set feedback off
set verify off
set serveroutput on 
VARIABLE ln_fileid NUMBER;
DECLARE
   ln_req_id     NUMBER;
BEGIN
   SELECT fcr2.request_id
     INTO ln_req_id
     FROM fnd_concurrent_programs FCP,
          fnd_concurrent_requests FCR2,
          fnd_concurrent_requests FCR1
    WHERE FCR1.request_id = ${shell_req}
      AND FCR2.priority_request_id = FCR1.priority_request_id
      AND FCR2.concurrent_program_id = FCP.concurrent_program_id
      AND FCP.concurrent_program_name = UPPER('${program_name}');
      :ln_fileid := ln_req_id;
      DBMS_OUTPUT.PUT_LINE(ln_req_id);
EXCEPTION
WHEN NO_DATA_FOUND THEN
:ln_fileid := 0;
WHEN OTHERS THEN
:ln_fileid := 0;
END;
/
EOF`

if [ "${req_id}" -ne 0 ]
then

# Constructing the names of the request output and email attachment files.

filename=o$req_id.out
file=$filepath$filename
attachment=XX_${email_sub}_$req_id.txt
cp $file $cust_path$attachment

if [ "${email_attachment}" = "Y" ]
then

# Send an email the user with the attachment.

(/usr/bin/uuencode $cust_path$attachment $cust_path$attachment  > /dev/null 2>&1)| mailx -s ${u_mail_subject}_$req_id -a $cust_path$attachment ${to_email_address} <<-EOF
${email_body}
----------------------------------------------------
This is a system generated mail.Please do not reply.
----------------------------------------------------
EOF
echo "Email sent with attachment."
chmod 777 $cust_path$attachment
rm $cust_path$attachment

else 
cat $file|mailx -s ${u_mail_subject}_$req_id ${to_email_address}
fi

else
echo "No Request Output file found.   Email not sent."
fi

fi

# Exiting from the shell program.
exit 0   # Success.
