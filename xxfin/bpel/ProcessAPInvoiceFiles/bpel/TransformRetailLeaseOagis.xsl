<?xml version="1.0" encoding="UTF-8" ?>
<?oracle-xsl-mapper
  <!-- SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY. -->
  <mapSources>
    <source type="XSD">
      <schema location="Retailease.xsd"/>
      <rootElement name="RetailLeases" namespace="http://TargetNamespace.com/FTPRetailLease"/>
    </source>
  </mapSources>
  <mapTargets>
    <target type="XSD">
      <schema location="http://esbdev01.na.odcorp.net:80/orabpel/xmllib/eaixml/oagis/v91/message/bod/ProcessInvoice.xsd"/>
      <rootElement name="ProcessInvoice" namespace="http://www.openapplications.org/oagis/9"/>
    </target>
  </mapTargets>
  <!-- GENERATED BY ORACLE XSL MAPPER 10.1.3.3.0(build 070615.0525) AT [THU JUN 12 15:35:18 IST 2008]. -->
?>
<xsl:stylesheet version="1.0"
                xmlns:ns5="http://www.openapplications.org/oagis/9/unqualifieddatatypes/1.1"
                xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
                xmlns:ns8="http://www.openapplications.org/oagis/9/currencycode/54217:2001"
                xmlns:ns4="http://www.openapplications.org/oagis/9/qualifieddatatypes/1.1"
                xmlns:ns1="http://www.openapplications.org/oagis/9/officedepot/1/codelists"
                xmlns:ehdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions"
                xmlns:ns2="http://www.openapplications.org/oagis/9/IANAMIMEMediaTypes:2003"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:ns3="http://www.openapplications.org/oagis/9/codelists"
                xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
                xmlns:nxsd="http://xmlns.oracle.com/pcbpel/nxsd"
                xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
                xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
                xmlns:ns7="http://www.openapplications.org/oagis/9/officedepot/1"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:ora="http://schemas.oracle.com/xpath/extension"
                xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
                xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
                xmlns:ns0="http://www.openapplications.org/oagis/9"
                xmlns:ns6="http://www.openapplications.org/oagis/9/unitcode/66411:2001"
                xmlns:ns9="http://www.openapplications.org/oagis/9/languagecode/5639:1988"
                xmlns:tns="http://TargetNamespace.com/FTPRetailLease"
                exclude-result-prefixes="xsl xsd nxsd tns ns5 ns8 ns4 ns1 ns2 ns3 ns7 ns0 ns6 ns9 bpws ehdr hwf xp20 xref ora ids orcl">
    <xsl:param name="Batch_Id"/>
   <xsl:template match="/">
    <ns0:ProcessInvoice>
      <ns0:DataArea>
         <xsl:for-each select="/tns:RetailLeases/tns:Retailease">
          <ns0:Invoice>
            <ns0:InvoiceHeader>
              <ns0:Description>
                <xsl:value-of select="tns:ReferenceNo"/>
              </ns0:Description>
              <ns0:DocumentReference>
                <ns0:DocumentID>
                  <ns0:ID>
                    <xsl:value-of select="normalize-space(tns:PaymentID)"/>
                  </ns0:ID>
                </ns0:DocumentID>
                <ns0:DocumentDateTime>
                  <xsl:call-template name="formatDate">
                    <xsl:with-param name="date"
                                    select="normalize-space(tns:PostDate)"/>
                  </xsl:call-template>
                </ns0:DocumentDateTime>
              </ns0:DocumentReference>
              <ns0:TotalAmount>
                 <xsl:value-of select="format-number(normalize-space(tns:PaymentAmount) + normalize-space(tns:Tax1Amount), '#.##')"/>
              </ns0:TotalAmount>
              <ns0:SupplierParty>
                <ns0:PartyIDs>
                  <ns0:ID>
                    <xsl:value-of select="concat('0',normalize-space(tns:VendorNo))"/>
                  </ns0:ID>
                </ns0:PartyIDs>                
              </ns0:SupplierParty>
              <ns0:PaymentTerm>
                <ns0:Term>
                  <ns0:Description>
                    <xsl:text disable-output-escaping="no">00</xsl:text>
                  </ns0:Description>
                </ns0:Term>
              </ns0:PaymentTerm>
              <ns7:SourceSystemCode>
                <xsl:value-of select='"US_OD_RENT"'/>
              </ns7:SourceSystemCode>
              <ns7:Batch>
                <ns7:Name>
                   <xsl:value-of select="$Batch_Id"/>
                  </ns7:Name>
                <ns7:FileName>
                  <xsl:text disable-output-escaping="no">AP_EXPENSE_NA_RETAILEASE</xsl:text>
                </ns7:FileName>
                <ns7:Communication>
                    <ns7:URI>
                  <xsl:text disable-output-escaping="no">support@accruent.com</xsl:text>
                  </ns7:URI>
                </ns7:Communication>
                <ns0:CreationDateTime>
                  <xsl:value-of select="xp20:current-date()"/>
                </ns0:CreationDateTime>
              </ns7:Batch>
            </ns0:InvoiceHeader>
            <ns0:InvoiceLine>
                <ns0:Description>
                  <xsl:value-of select="normalize-space(tns:ReferenceNo)"/>
                </ns0:Description>
                  <ns0:DocumentReference>
                    <ns0:DocumentID>
                    <xsl:text disable-output-escaping="no">ITEM</xsl:text>
                    </ns0:DocumentID>
                  </ns0:DocumentReference>
                 
            <xsl:if test="substring-before(substring-after(substring-after(substring-after(tns:Tax1RecoverGL,'-'),'-'),'-'),'-') 
                             = 'xxxxxx'">
               <ns0:Item>
		<ns0:Description>
                 <xsl:value-of select="concat(substring-before(tns:Tax1RecoverGL,'-'),'.',
                 substring-before(substring-after(tns:Tax1RecoverGL,'-'),'-'),'.',
                 substring-before(substring-after(substring-after(tns:Tax1RecoverGL,'-'),'-'),'-'),'.',
                 concat(0,substring(tns:Lease,1,5)),'.',
                 '0000','.',
                 substring-after(substring-after(substring-after(substring-after(tns:Tax1RecoverGL,'-'),'-'),'-'),'-'),'.',
                 '000000')"/>
                  </ns0:Description>
	     </ns0:Item>
               </xsl:if>
            <xsl:if test="substring-before(substring-after(substring-after(substring-after(tns:Tax1RecoverGL,'-'),'-'),'-'),'-') 
                             != 'xxxxxx'">
              <ns0:Item>
		<ns0:Description>
                 <xsl:value-of select="concat(substring-before(tns:Tax1RecoverGL,'-'),'.',
                 substring-before(substring-after(tns:Tax1RecoverGL,'-'),'-'),'.',
                 substring-before(substring-after(substring-after(tns:Tax1RecoverGL,'-'),'-'),'-'),'.',
                 substring-before(substring-after(substring-after(substring-after(tns:Tax1RecoverGL,'-'),'-'),'-'),'-'),'.',
                 '0000','.',
                 substring-after(substring-after(substring-after(substring-after(tns:Tax1RecoverGL,'-'),'-'),'-'),'-'),'.',
                 '000000')"/>
               </ns0:Description>
	     </ns0:Item>
            </xsl:if>
                <ns0:TotalAmount>
                  <xsl:value-of select="normalize-space(tns:PaymentAmount)"/>
                </ns0:TotalAmount> 
                <ns0:Tax>
                    <ns0:Amount>
                    <xsl:value-of select="normalize-space(tns:Tax1Amount)"/>
                    </ns0:Amount>
                </ns0:Tax>
		<xsl:if test="substring(normalize-space(tns:Tax1),1,6)  = 'Canada'">
		  <ns0:Tax>
            	     <ns0:TaxJurisdicationCodes>
                  	  <ns0:Code>
					<xsl:text disable-output-escaping="no">GST_INPUT_CR</xsl:text>
	                    </ns0:Code>
	                 </ns0:TaxJurisdicationCodes>
              </ns0:Tax>
            </xsl:if>
		<xsl:if test="substring(normalize-space(tns:Tax1),1,6) != 'Canada'">
		  <ns0:Tax>
            	     <ns0:TaxJurisdicationCodes>
                  	  <ns0:Code>
					<xsl:text disable-output-escaping="no">SALES</xsl:text>
	                    </ns0:Code>
	                 </ns0:TaxJurisdicationCodes>
              </ns0:Tax>
            </xsl:if>
              <ns0:Distribution>
               <xsl:if test="substring-before(substring-after(substring-after(substring-after(tns:GLAccount,'-'),'-'),'-'),'-') 
                             = 'xxxxxx'">
                <ns0:GLNominalAccount>
                 <xsl:value-of select="concat(substring-before(tns:GLAccount,'-'),'.',
                 substring-before(substring-after(tns:GLAccount,'-'),'-'),'.',
                 substring-before(substring-after(substring-after(tns:GLAccount,'-'),'-'),'-'),'.',
                 concat(0,substring(tns:Lease,1,5)),'.',
                 '0000','.',
                 substring-after(substring-after(substring-after(substring-after(tns:GLAccount,'-'),'-'),'-'),'-'),'.',
                 '000000')"/>
                </ns0:GLNominalAccount>
               </xsl:if>
               <xsl:if test="substring-before(substring-after(substring-after(substring-after(tns:GLAccount,'-'),'-'),'-'),'-') 
                             != 'xxxxxx'">
                <ns0:GLNominalAccount>
                 <xsl:value-of select="concat(substring-before(tns:GLAccount,'-'),'.',
                 substring-before(substring-after(tns:GLAccount,'-'),'-'),'.',
                 substring-before(substring-after(substring-after(tns:GLAccount,'-'),'-'),'-'),'.',
                 substring-before(substring-after(substring-after(substring-after(tns:GLAccount,'-'),'-'),'-'),'-'),'.',
                 '0000','.',
                 substring-after(substring-after(substring-after(substring-after(tns:GLAccount,'-'),'-'),'-'),'-'),'.',
                 '000000')"/>
                </ns0:GLNominalAccount>
               </xsl:if>
                    <ns0:GLAccount>
                      <ns0:GLElement>
                          <ns0:Element>
                            <xsl:attribute name="sequence">
                              <xsl:text disable-output-escaping="no">1</xsl:text>
                            </xsl:attribute>
                            <xsl:attribute name="sequenceName">
                              <xsl:text disable-output-escaping="no">Company</xsl:text>
                            </xsl:attribute>
                            <xsl:value-of select="tns:Group"/>
                          </ns0:Element>                      
                          <ns0:Element>
                            <xsl:attribute name="sequence">
                              <xsl:text disable-output-escaping="no">2</xsl:text>
                            </xsl:attribute>
                            <xsl:attribute name="sequenceName">
                              <xsl:text disable-output-escaping="no">CostCenter</xsl:text>
                            </xsl:attribute>
                            <xsl:value-of select="substring(tns:GLAccount,6,5)"/>
                          </ns0:Element>
                         <ns0:Element>
                            <xsl:attribute name="sequence">
                              <xsl:text disable-output-escaping="no">3</xsl:text>
                            </xsl:attribute>
                            <xsl:attribute name="sequenceName">
                              <xsl:text disable-output-escaping="no">Location</xsl:text>
                            </xsl:attribute>
                            <xsl:value-of select="concat(0,substring(tns:Lease,1,5))"/>
                          </ns0:Element>
                          <ns0:Element>
                            <xsl:attribute name="sequence">
                              <xsl:text disable-output-escaping="no">4</xsl:text>
                            </xsl:attribute>
                            <xsl:attribute name="sequenceName">
                              <xsl:text disable-output-escaping="no">LineOfBusiness</xsl:text>
                            </xsl:attribute>                      
                            <xsl:value-of select="substring(tns:GLAccount,28,2)"/>
                          </ns0:Element>
                          <ns0:Element>
                            <xsl:attribute name="sequence">
                              <xsl:text disable-output-escaping="no">5</xsl:text>
                            </xsl:attribute>
                            <xsl:attribute name="sequenceName">
                              <xsl:text disable-output-escaping="no">Account</xsl:text>
                            </xsl:attribute>
                            <xsl:value-of select="substring(tns:GLAccount,12,8)"/>
                          </ns0:Element>
                      </ns0:GLElement>
                    </ns0:GLAccount>
                  <ns0:ProjectReference>
                <ns0:ID>
                  <xsl:value-of select='substring-before(tns:CommentField,"|")'/>
                </ns0:ID>
                <ns0:ActivityID>
                  <xsl:value-of select="substring-before(substring-after(tns:CommentField,&quot;|&quot;),'|')"/>
                </ns0:ActivityID>
              </ns0:ProjectReference>
              <ns7:ExpenditureTypeCode>
                <xsl:value-of select="substring-before(substring-after(substring-after(tns:CommentField,&quot;|&quot;),&quot;|&quot;),'|')"/>
              </ns7:ExpenditureTypeCode>
              <ns7:ExpenditureOrganizationCode>
                <xsl:value-of select="substring-after(substring-after(substring-after(tns:CommentField,&quot;|&quot;),&quot;|&quot;),'|')"/>
            </ns7:ExpenditureOrganizationCode>
                   </ns0:Distribution>
            </ns0:InvoiceLine>
          </ns0:Invoice>
        </xsl:for-each>
      </ns0:DataArea>
    </ns0:ProcessInvoice>
  </xsl:template>
   
  <!--  User Defined Templates  -->
   
    <xsl:template name="formatDate">
        <xsl:param name="date"/>
        <xsl:variable name="currDateTime" select="xp20:current-dateTime()"/>
        <xsl:if test="normalize-space($date) &gt; '0'">
            <xsl:variable name="mm" select="substring($date, 1, 2)"/>
            <xsl:variable name="dd" select="substring($date, 4, 2)"/>
            <xsl:variable name="yyyy" select="substring($date, 7, 4)"/>
            <xsl:variable name="newDate" select="concat($yyyy,'-', $mm, '-', $dd)"/>
            <xsl:value-of select="concat($newDate, substring($currDateTime, 11))"/>
        </xsl:if>
    </xsl:template>
</xsl:stylesheet>
