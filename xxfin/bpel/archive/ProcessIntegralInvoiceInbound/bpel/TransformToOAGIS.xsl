<?xml version="1.0" encoding="UTF-8" ?>
<?oracle-xsl-mapper
  <!-- SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY. -->
  <mapSources>
    <source type="XSD">
      <schema location="Integral.xsd"/>
      <rootElement name="container" namespace="http://TargetNamespace.com/Integral"/>
    </source>
  </mapSources>
  <mapTargets>
    <target type="XSD">
      <schema location="http://chilsoa01d.na.odcorp.net:7778/orabpel/xmllib/eaixml/oagis/v91/message/bod/ProcessInvoice.xsd"/>
      <rootElement name="ProcessInvoice" namespace="http://www.openapplications.org/oagis/9"/>
    </target>
  </mapTargets>
  <!-- GENERATED BY ORACLE XSL MAPPER 10.1.3.1.0(build 061009.0802) AT [TUE JUL 24 16:35:14 EDT 2007]. -->
?>
<xsl:stylesheet version="1.0"
                xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
                xmlns:ns4="http://www.openapplications.org/oagis/9/unqualifieddatatypes/1.1"
                xmlns:tns="http://TargetNamespace.com/Integral"
                xmlns:ehdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions"
                xmlns:ns9="http://www.openapplications.org/oagis/9/officedepot/1/codelists"
                xmlns:ns7="http://www.openapplications.org/oagis/9/currencycode/54217:2001"
                xmlns:ns3="http://www.openapplications.org/oagis/9/qualifieddatatypes/1.1"
                xmlns:ns1="http://www.openapplications.org/oagis/9/IANAMIMEMediaTypes:2003"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:ns2="http://www.openapplications.org/oagis/9/codelists"
                xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
                xmlns:nxsd="http://xmlns.oracle.com/pcbpel/nxsd"
                xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
                xmlns:ns6="http://www.openapplications.org/oagis/9/officedepot/1"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:ora="http://schemas.oracle.com/xpath/extension"
                xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
                xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
                xmlns:ns0="http://www.openapplications.org/oagis/9"
                xmlns:ns5="http://www.openapplications.org/oagis/9/unitcode/66411:2001"
                xmlns:ns8="http://www.openapplications.org/oagis/9/languagecode/5639:1988"
                exclude-result-prefixes="xsl tns xsd nxsd ns4 ns9 ns7 ns3 ns1 ns2 ns6 ns0 ns5 ns8 bpws ehdr hwf xp20 ora ids orcl">
  <xsl:template match="/">
    <ns0:ProcessInvoice>
      <ns0:DataArea>
   <xsl:if test = "not(/tns:container/tns:InvoiceHeader)">
     <ns0:Invoice>
      <ns0:InvoiceHeader>
		 <ns6:Batch>
                  <ns0:FileName>
                    <xsl:value-of select="/tns:container/tns:Trailer/tns:FileName"/>
                  </ns0:FileName>
                <ns0:CreationDateTime>                   
                      <xsl:call-template name="formatDateTime">
                        <xsl:with-param name="datetime"
                        select="concat(normalize-space(/tns:container/tns:Trailer/tns:CreationDate),normalize-space(/tns:container/tns:Trailer/tns:CreationTime))"/>
                    </xsl:call-template>                       
                </ns0:CreationDateTime>
                <ns6:NumberOfRecords>
                  <xsl:value-of select="orcl:right-trim(orcl:left-trim(/tns:container/tns:Trailer/tns:NumberOfRecords))"/>
                </ns6:NumberOfRecords>
                <xsl:if test="normalize-space(/tns:container/tns:Trailer/tns:TotalInvoiceAmount) > '0'">
			<ns0:TotalAmount>
                  <xsl:value-of select="orcl:left-trim(orcl:right-trim(/tns:container/tns:Trailer/tns:TotalInvoiceAmount div 100))"/>
                </ns0:TotalAmount>
		    </xsl:if>
              </ns6:Batch>
	</ns0:InvoiceHeader>
     </ns0:Invoice>
  </xsl:if>
        <xsl:for-each select="/tns:container/tns:InvoiceHeader">
          <ns0:Invoice>
            <ns0:InvoiceHeader>
              <ns0:Description>
                <xsl:value-of select="tns:CheckDescription"/>
              </ns0:Description>
              <ns0:DocumentReference>
                <ns0:DocumentID>
                  <ns0:ID>
                    <xsl:value-of select="tns:InvoiceNumber"/>
                  </ns0:ID>
                </ns0:DocumentID>
                <ns0:DocumentDateTime>                
                    <xsl:call-template name="formatDate">
                        <xsl:with-param name="date"
                                    select="normalize-space(tns:InvoiceDate)"/>
                    </xsl:call-template>                                  
                </ns0:DocumentDateTime>
              </ns0:DocumentReference>
             <xsl:if test="normalize-space(tns:InvoiceGrossAmount) > '0'">
              <ns0:TotalAmount>
                <xsl:value-of select="concat(tns:InvoiceGrossAmountSign,orcl:right-trim(orcl:left-trim(tns:InvoiceGrossAmount div 100)))"/>
              </ns0:TotalAmount>
		  </xsl:if>
              <ns0:SupplierParty>
                <ns0:PartyIDs>
                  <ns0:ID>
                    <xsl:value-of select="tns:ODGlobalVendorID"/>
                  </ns0:ID>
                </ns0:PartyIDs>
              </ns0:SupplierParty>
              <ns0:ReasonCode>
                <xsl:value-of select="tns:Lines/tns:Line-Invoice/tns:Reasoncode"/>
              </ns0:ReasonCode>
              <ns0:PurchaseOrderReference>
                <ns0:AlternateDocumentID>
                  <ns0:ID>
                    <xsl:value-of select="tns:IntegralPONumber"/>
                  </ns0:ID>
                </ns0:AlternateDocumentID>
              </ns0:PurchaseOrderReference>
              <ns6:PayGroupID>
                <xsl:value-of select="normalize-space(tns:PayGroup_Id)"/>
              </ns6:PayGroupID>
	<ns0:Facility>
            <ns0:IDs>
                <ns0:ID>
                    <xsl:value-of select="normalize-space(tns:Accts_Pay_Code_Combination_Id)"/>
                </ns0:ID>
            </ns0:IDs>
        </ns0:Facility>
        <xsl:if test="normalize-space(tns:PayGroup_Id) = 'US_OD_TRADE_NON_DISCOUNT'">
              <ns0:PaymentTerm>
                 <ns0:Note>
                   <xsl:text disable-output-escaping="no">CHECK</xsl:text>
	           </ns0:Note>
              </ns0:PaymentTerm>
             </xsl:if>
		<xsl:if test="normalize-space(tns:PayGroup_Id) = 'US_OD_TRADE_EFT'">
              <ns0:PaymentTerm>
                 <ns0:Note>
                   <xsl:text disable-output-escaping="no">EFT</xsl:text>
	           </ns0:Note>
              </ns0:PaymentTerm>
            </xsl:if>
           <ns6:VoucherReference>
                <ns0:DocumentID>
                  <ns0:ID>
                    <xsl:value-of select="tns:IntegralVoucherNumber"/>
                  </ns0:ID>
                </ns0:DocumentID>
                <ns6:VoucherTypeCode>
                  <xsl:value-of select="tns:InvoiceVoucherTypeCode"/>
                </ns6:VoucherTypeCode>
              </ns6:VoucherReference>
              <ns6:DocumentControlNumber>
                <xsl:value-of select="tns:DCNNumber"/>
              </ns6:DocumentControlNumber>
              <ns0:PaymentTerm>
                <ns0:Term>
			<ns0:Description>
			  <xsl:value-of select="normalize-space(tns:Company)"/>
			</ns0:Description> 
                  <ns0:EffectiveDateTime>                  
                     <xsl:call-template name="formatDate">
                        <xsl:with-param name="date"
                         select="normalize-space(tns:InvoiceDueDate)"/>
                    </xsl:call-template>                  
                  </ns0:EffectiveDateTime>
                  <ns0:DueDateTime>                  
                   <xsl:call-template name="formatDate">
                        <xsl:with-param name="date"
                         select="normalize-space(tns:InvoiceDueDate)"/>
                    </xsl:call-template>                                                  
                  </ns0:DueDateTime>
                </ns0:Term>
              </ns0:PaymentTerm>
              <xsl:if test="normalize-space(tns:DiscountAmount) > '0'">
              <ns6:DiscountAmount>
                <xsl:value-of select="concat(tns:DiscountAmountSign,orcl:right-trim(orcl:left-trim(tns:DiscountAmount div 100)))"/>
              </ns6:DiscountAmount>
              </xsl:if>
              <ns6:SourceSystemCode>
                <xsl:value-of select="tns:InvoiceSource"/>
              </ns6:SourceSystemCode>
              <ns6:Batch>
                  <ns0:FileName>
                    <xsl:value-of select="../tns:Trailer/tns:FileName"/>
                  </ns0:FileName>
                <ns0:CreationDateTime>                   
                      <xsl:call-template name="formatDateTime">
                        <xsl:with-param name="datetime"
                                    select="concat(normalize-space(../tns:Trailer/tns:CreationDate),normalize-space(../tns:Trailer/tns:CreationTime))"/>
                    </xsl:call-template>                       
                </ns0:CreationDateTime>
                <ns6:NumberOfRecords>
                  <xsl:value-of select="orcl:right-trim(orcl:left-trim(../tns:Trailer/tns:NumberOfRecords))"/>
                </ns6:NumberOfRecords>
                <xsl:if test="normalize-space(../tns:Trailer/tns:TotalInvoiceAmount) > '0'">
			<ns0:TotalAmount>
                  <xsl:value-of select="orcl:left-trim(orcl:right-trim(../tns:Trailer/tns:TotalInvoiceAmount div 100))"/>
                </ns0:TotalAmount>
		    </xsl:if>
              </ns6:Batch>
              <xsl:choose>
                 <xsl:when test='orcl:right-trim(tns:InvoiceSource) = "US_OD_TDM"'>
                    <ns6:InvoiceGroupID>
                       <xsl:text disable-output-escaping="no">TDM-TRADE</xsl:text>
                    </ns6:InvoiceGroupID>
                 </xsl:when>   
              </xsl:choose>              
            </ns0:InvoiceHeader>
            <xsl:for-each select="tns:Lines/tns:Line-Invoice">
              <ns0:InvoiceLine>
                <ns0:LineNumber>
                  <xsl:value-of select="tns:LineNumber"/>
                </ns0:LineNumber>
                <ns0:Description>
                  <xsl:value-of select="tns:InvoiceLineDescription"/>
                </ns0:Description>
            
            <ns6:InvoiceCharge>
              <ns0:ReasonCode>
                <xsl:value-of select="tns:Reasoncode"/>
              </ns0:ReasonCode>
             </ns6:InvoiceCharge>
             
     <xsl:if test="normalize-space(tns:Reasoncode) =  'GS'">
            <ns0:DocumentReference>
              <ns0:DocumentID>
                <xsl:text disable-output-escaping="no">Tax</xsl:text>
              </ns0:DocumentID>
              </ns0:DocumentReference>
     </xsl:if>
           
    <xsl:if test="normalize-space(tns:Reasoncode) !=  'GS'">
            <ns0:DocumentReference>
              <ns0:DocumentID>
                <xsl:text disable-output-escaping="no">Item</xsl:text>
              </ns0:DocumentID>
              </ns0:DocumentReference>
           </xsl:if>
           
      <xsl:if test="normalize-space(tns:Reasoncode) =  'GS'">
             <ns0:Tax>
                 <ns0:TaxJurisdicationCodes>
                    <ns0:Code>
                      <xsl:text disable-output-escaping="no">GST_INPUT_CR</xsl:text>
                    </ns0:Code>
                 </ns0:TaxJurisdicationCodes>
               </ns0:Tax>
            </xsl:if>
           <xsl:if test="normalize-space(tns:InvoiceLineAmount) > '0'">
             <ns0:TotalAmount>
                  <xsl:value-of select="concat(tns:InvoiceLineAmountSign,orcl:right-trim(orcl:left-trim(tns:InvoiceLineAmount div 100)))"/>
                </ns0:TotalAmount>
           </xsl:if>
           <ns0:Distribution>
                <ns0:GLNominalAccount>
                    <xsl:value-of 
                          select="concat(normalize-space(tns:GLCompany),'.',
                          normalize-space(tns:GLCostCenter),'.',
                          normalize-space(tns:GLAccount),'.',
                          normalize-space(tns:GLLocation),'.',
                          '0000','.',
                          normalize-space(tns:GLLineOfBusiness),'.',
                          '000000')"/>
                </ns0:GLNominalAccount>               
                  <ns0:GLAccount>
                       <ns0:GLElement>
                        <ns0:Element>
                          <xsl:attribute name="sequenceName">
                            <xsl:text disable-output-escaping="no">Company</xsl:text>
                          </xsl:attribute>
                          <xsl:value-of select="tns:GLCompany"/>
                        </ns0:Element>
                        <ns0:Element>
                          <xsl:attribute name="sequenceName">
                             <xsl:text disable-output-escaping="no">CostCenter</xsl:text>
                          </xsl:attribute>
                          <xsl:value-of select="tns:GLCostCenter"/>
                        </ns0:Element>
                        <ns0:Element>
                          <xsl:attribute name="sequenceName">
                             <xsl:text disable-output-escaping="no">Location</xsl:text>
                          </xsl:attribute>
                          <xsl:value-of select="tns:GLLocation"/>
                        </ns0:Element>
                        <ns0:Element>
                          <xsl:attribute name="sequenceName">
                             <xsl:text disable-output-escaping="no">Account</xsl:text>
                          </xsl:attribute>
                          <xsl:value-of select="tns:GLAccount"/>
                        </ns0:Element>
                        <ns0:Element>
                          <xsl:attribute name="sequenceName">
                             <xsl:text disable-output-escaping="no">LineOfBusiness</xsl:text>
                          </xsl:attribute>
                          <xsl:value-of select="tns:GLLineOfBusiness"/>
                        </ns0:Element>
                    </ns0:GLElement>
                  </ns0:GLAccount>
                </ns0:Distribution>  
               </ns0:InvoiceLine>
            </xsl:for-each>
          </ns0:Invoice>
        </xsl:for-each>
      </ns0:DataArea>
    </ns0:ProcessInvoice>
  </xsl:template>

  <xsl:template name="formatDate">
    <xsl:param name="date"/>
    <xsl:if test="normalize-space($date) > '0'">
      <xsl:variable name="yy" select="substring($date, 1, 2)"/>
      <xsl:variable name="mm" select="substring($date, 3, 2)"/>
      <xsl:variable name="dd" select="substring($date, 5, 4)"/>
      <xsl:variable name="newDate" select="concat('20', $yy, '-', $mm, '-', $dd)"/>
      <xsl:value-of select="$newDate"/>
    </xsl:if>
  </xsl:template>
  
    <xsl:template name="formatDateDue">
    <xsl:param name="date"/>
    <xsl:if test="normalize-space($date) > '0'">
      <xsl:variable name="mm" select="substring($date, 1, 2)"/>
      <xsl:variable name="dd" select="substring($date, 3, 2)"/>
      <xsl:variable name="yy" select="substring($date, 5, 4)"/>
      <xsl:variable name="newDate" select="concat('20', $yy, '-', $mm, '-', $dd)"/>
      <xsl:value-of select="$newDate"/>
    </xsl:if>
  </xsl:template>
  
  <xsl:template name="formatDateTime">
    <xsl:param name="datetime"/>
    <xsl:if test="normalize-space($datetime) > '0'">
      <xsl:variable name="yy" select="substring($datetime, 1, 2)"/>
      <xsl:variable name="mm" select="substring($datetime, 3, 2)"/>
      <xsl:variable name="dd" select="substring($datetime, 5, 2)"/>
      <xsl:variable name="hh" select="substring($datetime, 7, 2)"/>
      <xsl:variable name="mi" select="substring($datetime, 10, 2)"/>
      <xsl:variable name="ss" select="substring($datetime, 13, 2)"/>
      <xsl:variable name="newDateTime" select="concat('20', $yy, '-', $mm, '-', $dd,$hh,':',$mi,':',$ss )"/>
      <xsl:value-of select="$newDateTime"/>
    </xsl:if>
  </xsl:template>  
</xsl:stylesheet>