-- Declare the SQL type for the PL/SQL type XX_PO_ASL_IN_PKG.G_ITEM_SUPP_REC_TYPE
CREATE OR REPLACE TYPE XX_PO_ASL_IN_PKG_G_ITEM_SUPP_ AS OBJECT (
      ITEM VARCHAR2(40),
      SUPPLIER VARCHAR2(150),
      PRIMARY_SUPP_IND VARCHAR2(150),
      VPN VARCHAR2(25),
      CARCINOGENIC_FLG VARCHAR2(1),
      DROP_SHIP_CD VARCHAR2(10),
      GOVT_COMPLIANCE_CD VARCHAR2(6),
      HAZARDOUS_FLG VARCHAR2(1),
      HS_TARIFF_NBR NUMBER,
      MINORITY_BUS_FLG VARCHAR2(3),
      NON_SHIPPABLE_INNER_QTY NUMBER,
      VENDOR_DESIGN_ID VARCHAR2(10),
      RANK_PRIORITY NUMBER,
      BACKORDERS_ALLOWED VARCHAR2(1)
);
/
show errors
-- Declare the SQL type for the PL/SQL type XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COO_REC_TYPE
CREATE OR REPLACE TYPE XX_PO_ASL_IN_PKG_G_ITEM_SUPP1 AS OBJECT (
      ITEM VARCHAR2(40),
      SUPPLIER VARCHAR2(150),
      CNTRY_OF_ORIGIN_CD VARCHAR2(2)
);
/
show errors
-- Declare the SQL type for the PL/SQL type XX_PO_ASL_IN_PKG.G_ITEM_SUPP_UPC_REC_TYPE
CREATE OR REPLACE TYPE XX_PO_ASL_IN_PKG_G_ITEM_SUPP2 AS OBJECT (
      ITEM VARCHAR2(40),
      SUPPLIER VARCHAR2(150),
      UPC VARCHAR2(25)
);
/
show errors
-- Declare the SQL type for the PL/SQL type XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COUNTRY_REC_TYPE
CREATE OR REPLACE TYPE XX_PO_ASL_IN_PKG_G_ITEM_SUPP3 AS OBJECT (
      ITEM VARCHAR2(40),
      SUPPLIER VARCHAR2(150),
      ORIGIN_COUNTRY_ID VARCHAR2(9),
      HI NUMBER,
      INNER_PACK_SIZE NUMBER,
      MAX_ORDER_QTY NUMBER,
      MIN_ORDER_QTY NUMBER,
      SUPP_PACK_SIZE NUMBER,
      TI NUMBER
);
/
show errors
-- Declare the SQL type for the PL/SQL type XX_PO_ASL_IN_PKG.G_ITEM_SUPP_DIM_REC_TYPE
CREATE OR REPLACE TYPE XX_PO_ASL_IN_PKG_G_ITEM_SUPP4 AS OBJECT (
      ITEM VARCHAR2(40),
      SUPPLIER VARCHAR2(150),
      ORIGIN_COUNTRY VARCHAR2(9),
      DIM_OBJECT VARCHAR2(6),
      HEIGHT NUMBER,
      LENGTH NUMBER,
      LWH_UOM VARCHAR2(4),
      WEIGHT NUMBER,
      WEIGHT_UOM VARCHAR2(4),
      WIDTH NUMBER
);
/
show errors
-- Declare the SQL type for the PL/SQL type XX_PO_ASL_IN_PKG.G_ITEM_SUPP_LOC_REC_TYPE
CREATE OR REPLACE TYPE XX_PO_ASL_IN_PKG_G_ITEM_SUPP5 AS OBJECT (
      ITEM VARCHAR2(40),
      SUPPLIER VARCHAR2(150),
      ORIGIN_COUNTRY_ID VARCHAR2(9),
      LOC VARCHAR2(150),
      OD_GSS_REPL_FLG VARCHAR2(150),
      PICKUP_LEAD_TIME VARCHAR2(150)
);
/
show errors
-- Declare package containing conversion functions between SQL and PL/SQL types
CREATE OR REPLACE PACKAGE BPEL_WRAPPER_XX_PO_ASL_IN_PKG AS
	-- Declare the conversion functions the PL/SQL type XX_PO_ASL_IN_PKG.G_ITEM_SUPP_REC_TYPE
	FUNCTION PL_TO_SQL0(aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_REC_TYPE)
 	RETURN XX_PO_ASL_IN_PKG_G_ITEM_SUPP_;
	FUNCTION SQL_TO_PL0(aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP_)
	RETURN XX_PO_ASL_IN_PKG.G_ITEM_SUPP_REC_TYPE;
	-- Declare the conversion functions the PL/SQL type XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COO_REC_TYPE
	FUNCTION PL_TO_SQL1(aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COO_REC_TYPE)
 	RETURN XX_PO_ASL_IN_PKG_G_ITEM_SUPP1;
	FUNCTION SQL_TO_PL1(aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP1)
	RETURN XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COO_REC_TYPE;
	-- Declare the conversion functions the PL/SQL type XX_PO_ASL_IN_PKG.G_ITEM_SUPP_UPC_REC_TYPE
	FUNCTION PL_TO_SQL2(aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_UPC_REC_TYPE)
 	RETURN XX_PO_ASL_IN_PKG_G_ITEM_SUPP2;
	FUNCTION SQL_TO_PL2(aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP2)
	RETURN XX_PO_ASL_IN_PKG.G_ITEM_SUPP_UPC_REC_TYPE;
	-- Declare the conversion functions the PL/SQL type XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COUNTRY_REC_TYPE
	FUNCTION PL_TO_SQL3(aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COUNTRY_REC_TYPE)
 	RETURN XX_PO_ASL_IN_PKG_G_ITEM_SUPP3;
	FUNCTION SQL_TO_PL3(aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP3)
	RETURN XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COUNTRY_REC_TYPE;
	-- Declare the conversion functions the PL/SQL type XX_PO_ASL_IN_PKG.G_ITEM_SUPP_DIM_REC_TYPE
	FUNCTION PL_TO_SQL4(aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_DIM_REC_TYPE)
 	RETURN XX_PO_ASL_IN_PKG_G_ITEM_SUPP4;
	FUNCTION SQL_TO_PL4(aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP4)
	RETURN XX_PO_ASL_IN_PKG.G_ITEM_SUPP_DIM_REC_TYPE;
	-- Declare the conversion functions the PL/SQL type XX_PO_ASL_IN_PKG.G_ITEM_SUPP_LOC_REC_TYPE
	FUNCTION PL_TO_SQL5(aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_LOC_REC_TYPE)
 	RETURN XX_PO_ASL_IN_PKG_G_ITEM_SUPP5;
	FUNCTION SQL_TO_PL5(aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP5)
	RETURN XX_PO_ASL_IN_PKG.G_ITEM_SUPP_LOC_REC_TYPE;
   PROCEDURE XX_PO_ASL_IN_PKG$INTERFACE_AS (P_ACTIONEXPRESSION VARCHAR2,P_REASON_CODE VARCHAR2,P_RMS_TIMESTAMP VARCHAR2,P_ITEM_SUPP_REC XX_PO_ASL_IN_PKG_G_ITEM_SUPP_,P_ITEM_SUPP_COO_REC XX_PO_ASL_IN_PKG_G_ITEM_SUPP1,P_ITEM_SUPP_UPC_REC XX_PO_ASL_IN_PKG_G_ITEM_SUPP2,P_ITEM_SUPP_COUNTRY_REC XX_PO_ASL_IN_PKG_G_ITEM_SUPP3,P_ITEM_SUPP_DIM_REC XX_PO_ASL_IN_PKG_G_ITEM_SUPP4,G_ITEM_SUPP_LOC_REC XX_PO_ASL_IN_PKG_G_ITEM_SUPP5,X_MESSAGE_CODE OUT NUMBER,X_MESSAGE_DATA OUT VARCHAR2);
END BPEL_WRAPPER_XX_PO_ASL_IN_PKG;
/
show errors
CREATE OR REPLACE PACKAGE BODY BPEL_WRAPPER_XX_PO_ASL_IN_PKG IS
	FUNCTION PL_TO_SQL0(aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_REC_TYPE)
 	RETURN XX_PO_ASL_IN_PKG_G_ITEM_SUPP_ IS 
	aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP_; 
	BEGIN 
		-- initialize the object
		aSqlItem := XX_PO_ASL_IN_PKG_G_ITEM_SUPP_(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
		aSqlItem.ITEM := aPlsqlItem.ITEM;
		aSqlItem.SUPPLIER := aPlsqlItem.SUPPLIER;
		aSqlItem.PRIMARY_SUPP_IND := aPlsqlItem.PRIMARY_SUPP_IND;
		aSqlItem.VPN := aPlsqlItem.VPN;
		aSqlItem.CARCINOGENIC_FLG := aPlsqlItem.CARCINOGENIC_FLG;
		aSqlItem.DROP_SHIP_CD := aPlsqlItem.DROP_SHIP_CD;
		aSqlItem.GOVT_COMPLIANCE_CD := aPlsqlItem.GOVT_COMPLIANCE_CD;
		aSqlItem.HAZARDOUS_FLG := aPlsqlItem.HAZARDOUS_FLG;
		aSqlItem.HS_TARIFF_NBR := aPlsqlItem.HS_TARIFF_NBR;
		aSqlItem.MINORITY_BUS_FLG := aPlsqlItem.MINORITY_BUS_FLG;
		aSqlItem.NON_SHIPPABLE_INNER_QTY := aPlsqlItem.NON_SHIPPABLE_INNER_QTY;
		aSqlItem.VENDOR_DESIGN_ID := aPlsqlItem.VENDOR_DESIGN_ID;
		aSqlItem.RANK_PRIORITY := aPlsqlItem.RANK_PRIORITY;
		aSqlItem.BACKORDERS_ALLOWED := aPlsqlItem.BACKORDERS_ALLOWED;
		RETURN aSqlItem;
	END PL_TO_SQL0;
	FUNCTION SQL_TO_PL0(aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP_) 
	RETURN XX_PO_ASL_IN_PKG.G_ITEM_SUPP_REC_TYPE IS 
	aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_REC_TYPE; 
	BEGIN 
		aPlsqlItem.ITEM := aSqlItem.ITEM;
		aPlsqlItem.SUPPLIER := aSqlItem.SUPPLIER;
		aPlsqlItem.PRIMARY_SUPP_IND := aSqlItem.PRIMARY_SUPP_IND;
		aPlsqlItem.VPN := aSqlItem.VPN;
		aPlsqlItem.CARCINOGENIC_FLG := aSqlItem.CARCINOGENIC_FLG;
		aPlsqlItem.DROP_SHIP_CD := aSqlItem.DROP_SHIP_CD;
		aPlsqlItem.GOVT_COMPLIANCE_CD := aSqlItem.GOVT_COMPLIANCE_CD;
		aPlsqlItem.HAZARDOUS_FLG := aSqlItem.HAZARDOUS_FLG;
		aPlsqlItem.HS_TARIFF_NBR := aSqlItem.HS_TARIFF_NBR;
		aPlsqlItem.MINORITY_BUS_FLG := aSqlItem.MINORITY_BUS_FLG;
		aPlsqlItem.NON_SHIPPABLE_INNER_QTY := aSqlItem.NON_SHIPPABLE_INNER_QTY;
		aPlsqlItem.VENDOR_DESIGN_ID := aSqlItem.VENDOR_DESIGN_ID;
		aPlsqlItem.RANK_PRIORITY := aSqlItem.RANK_PRIORITY;
		aPlsqlItem.BACKORDERS_ALLOWED := aSqlItem.BACKORDERS_ALLOWED;
		RETURN aPlsqlItem;
	END SQL_TO_PL0;
	FUNCTION PL_TO_SQL1(aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COO_REC_TYPE)
 	RETURN XX_PO_ASL_IN_PKG_G_ITEM_SUPP1 IS 
	aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP1; 
	BEGIN 
		-- initialize the object
		aSqlItem := XX_PO_ASL_IN_PKG_G_ITEM_SUPP1(NULL, NULL, NULL);
		aSqlItem.ITEM := aPlsqlItem.ITEM;
		aSqlItem.SUPPLIER := aPlsqlItem.SUPPLIER;
		aSqlItem.CNTRY_OF_ORIGIN_CD := aPlsqlItem.CNTRY_OF_ORIGIN_CD;
		RETURN aSqlItem;
	END PL_TO_SQL1;
	FUNCTION SQL_TO_PL1(aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP1) 
	RETURN XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COO_REC_TYPE IS 
	aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COO_REC_TYPE; 
	BEGIN 
		aPlsqlItem.ITEM := aSqlItem.ITEM;
		aPlsqlItem.SUPPLIER := aSqlItem.SUPPLIER;
		aPlsqlItem.CNTRY_OF_ORIGIN_CD := aSqlItem.CNTRY_OF_ORIGIN_CD;
		RETURN aPlsqlItem;
	END SQL_TO_PL1;
	FUNCTION PL_TO_SQL2(aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_UPC_REC_TYPE)
 	RETURN XX_PO_ASL_IN_PKG_G_ITEM_SUPP2 IS 
	aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP2; 
	BEGIN 
		-- initialize the object
		aSqlItem := XX_PO_ASL_IN_PKG_G_ITEM_SUPP2(NULL, NULL, NULL);
		aSqlItem.ITEM := aPlsqlItem.ITEM;
		aSqlItem.SUPPLIER := aPlsqlItem.SUPPLIER;
		aSqlItem.UPC := aPlsqlItem.UPC;
		RETURN aSqlItem;
	END PL_TO_SQL2;
	FUNCTION SQL_TO_PL2(aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP2) 
	RETURN XX_PO_ASL_IN_PKG.G_ITEM_SUPP_UPC_REC_TYPE IS 
	aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_UPC_REC_TYPE; 
	BEGIN 
		aPlsqlItem.ITEM := aSqlItem.ITEM;
		aPlsqlItem.SUPPLIER := aSqlItem.SUPPLIER;
		aPlsqlItem.UPC := aSqlItem.UPC;
		RETURN aPlsqlItem;
	END SQL_TO_PL2;
	FUNCTION PL_TO_SQL3(aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COUNTRY_REC_TYPE)
 	RETURN XX_PO_ASL_IN_PKG_G_ITEM_SUPP3 IS 
	aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP3; 
	BEGIN 
		-- initialize the object
		aSqlItem := XX_PO_ASL_IN_PKG_G_ITEM_SUPP3(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
		aSqlItem.ITEM := aPlsqlItem.ITEM;
		aSqlItem.SUPPLIER := aPlsqlItem.SUPPLIER;
		aSqlItem.ORIGIN_COUNTRY_ID := aPlsqlItem.ORIGIN_COUNTRY_ID;
		aSqlItem.HI := aPlsqlItem.HI;
		aSqlItem.INNER_PACK_SIZE := aPlsqlItem.INNER_PACK_SIZE;
		aSqlItem.MAX_ORDER_QTY := aPlsqlItem.MAX_ORDER_QTY;
		aSqlItem.MIN_ORDER_QTY := aPlsqlItem.MIN_ORDER_QTY;
		aSqlItem.SUPP_PACK_SIZE := aPlsqlItem.SUPP_PACK_SIZE;
		aSqlItem.TI := aPlsqlItem.TI;
		RETURN aSqlItem;
	END PL_TO_SQL3;
	FUNCTION SQL_TO_PL3(aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP3) 
	RETURN XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COUNTRY_REC_TYPE IS 
	aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COUNTRY_REC_TYPE; 
	BEGIN 
		aPlsqlItem.ITEM := aSqlItem.ITEM;
		aPlsqlItem.SUPPLIER := aSqlItem.SUPPLIER;
		aPlsqlItem.ORIGIN_COUNTRY_ID := aSqlItem.ORIGIN_COUNTRY_ID;
		aPlsqlItem.HI := aSqlItem.HI;
		aPlsqlItem.INNER_PACK_SIZE := aSqlItem.INNER_PACK_SIZE;
		aPlsqlItem.MAX_ORDER_QTY := aSqlItem.MAX_ORDER_QTY;
		aPlsqlItem.MIN_ORDER_QTY := aSqlItem.MIN_ORDER_QTY;
		aPlsqlItem.SUPP_PACK_SIZE := aSqlItem.SUPP_PACK_SIZE;
		aPlsqlItem.TI := aSqlItem.TI;
		RETURN aPlsqlItem;
	END SQL_TO_PL3;
	FUNCTION PL_TO_SQL4(aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_DIM_REC_TYPE)
 	RETURN XX_PO_ASL_IN_PKG_G_ITEM_SUPP4 IS 
	aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP4; 
	BEGIN 
		-- initialize the object
		aSqlItem := XX_PO_ASL_IN_PKG_G_ITEM_SUPP4(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
		aSqlItem.ITEM := aPlsqlItem.ITEM;
		aSqlItem.SUPPLIER := aPlsqlItem.SUPPLIER;
		aSqlItem.ORIGIN_COUNTRY := aPlsqlItem.ORIGIN_COUNTRY;
		aSqlItem.DIM_OBJECT := aPlsqlItem.DIM_OBJECT;
		aSqlItem.HEIGHT := aPlsqlItem.HEIGHT;
		aSqlItem.LENGTH := aPlsqlItem.LENGTH;
		aSqlItem.LWH_UOM := aPlsqlItem.LWH_UOM;
		aSqlItem.WEIGHT := aPlsqlItem.WEIGHT;
		aSqlItem.WEIGHT_UOM := aPlsqlItem.WEIGHT_UOM;
		aSqlItem.WIDTH := aPlsqlItem.WIDTH;
		RETURN aSqlItem;
	END PL_TO_SQL4;
	FUNCTION SQL_TO_PL4(aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP4) 
	RETURN XX_PO_ASL_IN_PKG.G_ITEM_SUPP_DIM_REC_TYPE IS 
	aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_DIM_REC_TYPE; 
	BEGIN 
		aPlsqlItem.ITEM := aSqlItem.ITEM;
		aPlsqlItem.SUPPLIER := aSqlItem.SUPPLIER;
		aPlsqlItem.ORIGIN_COUNTRY := aSqlItem.ORIGIN_COUNTRY;
		aPlsqlItem.DIM_OBJECT := aSqlItem.DIM_OBJECT;
		aPlsqlItem.HEIGHT := aSqlItem.HEIGHT;
		aPlsqlItem.LENGTH := aSqlItem.LENGTH;
		aPlsqlItem.LWH_UOM := aSqlItem.LWH_UOM;
		aPlsqlItem.WEIGHT := aSqlItem.WEIGHT;
		aPlsqlItem.WEIGHT_UOM := aSqlItem.WEIGHT_UOM;
		aPlsqlItem.WIDTH := aSqlItem.WIDTH;
		RETURN aPlsqlItem;
	END SQL_TO_PL4;
	FUNCTION PL_TO_SQL5(aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_LOC_REC_TYPE)
 	RETURN XX_PO_ASL_IN_PKG_G_ITEM_SUPP5 IS 
	aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP5; 
	BEGIN 
		-- initialize the object
		aSqlItem := XX_PO_ASL_IN_PKG_G_ITEM_SUPP5(NULL, NULL, NULL, NULL, NULL, NULL);
		aSqlItem.ITEM := aPlsqlItem.ITEM;
		aSqlItem.SUPPLIER := aPlsqlItem.SUPPLIER;
		aSqlItem.ORIGIN_COUNTRY_ID := aPlsqlItem.ORIGIN_COUNTRY_ID;
		aSqlItem.LOC := aPlsqlItem.LOC;
		aSqlItem.OD_GSS_REPL_FLG := aPlsqlItem.OD_GSS_REPL_FLG;
		aSqlItem.PICKUP_LEAD_TIME := aPlsqlItem.PICKUP_LEAD_TIME;
		RETURN aSqlItem;
	END PL_TO_SQL5;
	FUNCTION SQL_TO_PL5(aSqlItem XX_PO_ASL_IN_PKG_G_ITEM_SUPP5) 
	RETURN XX_PO_ASL_IN_PKG.G_ITEM_SUPP_LOC_REC_TYPE IS 
	aPlsqlItem XX_PO_ASL_IN_PKG.G_ITEM_SUPP_LOC_REC_TYPE; 
	BEGIN 
		aPlsqlItem.ITEM := aSqlItem.ITEM;
		aPlsqlItem.SUPPLIER := aSqlItem.SUPPLIER;
		aPlsqlItem.ORIGIN_COUNTRY_ID := aSqlItem.ORIGIN_COUNTRY_ID;
		aPlsqlItem.LOC := aSqlItem.LOC;
		aPlsqlItem.OD_GSS_REPL_FLG := aSqlItem.OD_GSS_REPL_FLG;
		aPlsqlItem.PICKUP_LEAD_TIME := aSqlItem.PICKUP_LEAD_TIME;
		RETURN aPlsqlItem;
	END SQL_TO_PL5;

   PROCEDURE XX_PO_ASL_IN_PKG$INTERFACE_AS (P_ACTIONEXPRESSION VARCHAR2,P_REASON_CODE VARCHAR2,P_RMS_TIMESTAMP VARCHAR2,P_ITEM_SUPP_REC XX_PO_ASL_IN_PKG_G_ITEM_SUPP_,P_ITEM_SUPP_COO_REC XX_PO_ASL_IN_PKG_G_ITEM_SUPP1,P_ITEM_SUPP_UPC_REC XX_PO_ASL_IN_PKG_G_ITEM_SUPP2,P_ITEM_SUPP_COUNTRY_REC XX_PO_ASL_IN_PKG_G_ITEM_SUPP3,P_ITEM_SUPP_DIM_REC XX_PO_ASL_IN_PKG_G_ITEM_SUPP4,G_ITEM_SUPP_LOC_REC XX_PO_ASL_IN_PKG_G_ITEM_SUPP5,X_MESSAGE_CODE OUT NUMBER,X_MESSAGE_DATA OUT VARCHAR2) IS
      P_ITEM_SUPP_REC_ APPS.XX_PO_ASL_IN_PKG.G_ITEM_SUPP_REC_TYPE;
      P_ITEM_SUPP_COO_REC_ APPS.XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COO_REC_TYPE;
      P_ITEM_SUPP_UPC_REC_ APPS.XX_PO_ASL_IN_PKG.G_ITEM_SUPP_UPC_REC_TYPE;
      P_ITEM_SUPP_COUNTRY_REC_ APPS.XX_PO_ASL_IN_PKG.G_ITEM_SUPP_COUNTRY_REC_TYPE;
      P_ITEM_SUPP_DIM_REC_ APPS.XX_PO_ASL_IN_PKG.G_ITEM_SUPP_DIM_REC_TYPE;
      G_ITEM_SUPP_LOC_REC_ APPS.XX_PO_ASL_IN_PKG.G_ITEM_SUPP_LOC_REC_TYPE;
   BEGIN
      P_ITEM_SUPP_REC_ := BPEL_WRAPPER_XX_PO_ASL_IN_PKG.SQL_TO_PL0(P_ITEM_SUPP_REC);
      P_ITEM_SUPP_COO_REC_ := BPEL_WRAPPER_XX_PO_ASL_IN_PKG.SQL_TO_PL1(P_ITEM_SUPP_COO_REC);
      P_ITEM_SUPP_UPC_REC_ := BPEL_WRAPPER_XX_PO_ASL_IN_PKG.SQL_TO_PL2(P_ITEM_SUPP_UPC_REC);
      P_ITEM_SUPP_COUNTRY_REC_ := BPEL_WRAPPER_XX_PO_ASL_IN_PKG.SQL_TO_PL3(P_ITEM_SUPP_COUNTRY_REC);
      P_ITEM_SUPP_DIM_REC_ := BPEL_WRAPPER_XX_PO_ASL_IN_PKG.SQL_TO_PL4(P_ITEM_SUPP_DIM_REC);
      G_ITEM_SUPP_LOC_REC_ := BPEL_WRAPPER_XX_PO_ASL_IN_PKG.SQL_TO_PL5(G_ITEM_SUPP_LOC_REC);
      APPS.XX_PO_ASL_IN_PKG.INTERFACE_ASL_DATA(P_ACTIONEXPRESSION,P_REASON_CODE,P_RMS_TIMESTAMP,P_ITEM_SUPP_REC_,P_ITEM_SUPP_COO_REC_,P_ITEM_SUPP_UPC_REC_,P_ITEM_SUPP_COUNTRY_REC_,P_ITEM_SUPP_DIM_REC_,G_ITEM_SUPP_LOC_REC_,X_MESSAGE_CODE,X_MESSAGE_DATA);
   END XX_PO_ASL_IN_PKG$INTERFACE_AS;

END BPEL_WRAPPER_XX_PO_ASL_IN_PKG;
/
show errors
exit
