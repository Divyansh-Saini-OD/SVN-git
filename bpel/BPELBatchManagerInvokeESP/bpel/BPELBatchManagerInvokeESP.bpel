<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Thu Aug 07 23:07:42 EDT 2008
  Purpose: Empty BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="BPELBatchManagerInvokeESP"
         targetNamespace="http://xmlns.oracle.com/BPELBatchManagerInvokeESP"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:ns4="http://xmlns.oracle.com/ODErrorLogger"
         xmlns:ns7="http://xmlns.oracle.com/TransactionData"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns5="ODError"
         xmlns:client="http://xmlns.oracle.com/BPELBatchManagerInvokeESP"
         xmlns:ns6="http://xmlns.oracle.com/ODTransactionLogger"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ns1="http://xmlns.oracle.com/pcbpel/batching"
         xmlns:ehdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions"
         xmlns:ns3="http://xmlns.oracle.com/BPELInvokeESP"
         xmlns:ns2="http://xmlns.oracle.com/pcbpel/batching/types"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc">
  <bpelx:exec import="java.util.*"/>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <partnerLinks>
    <partnerLink myRole="BatchManagerInterfaceRole" name="BatchManagerInterface"
                 partnerLinkType="ns1:BatchManagerInterfacePartnerLinkType"/>
    <partnerLink name="BPELInvokeESP" myRole="BPELInvokeESPRequester"
                 partnerRole="BPELInvokeESPProvider"
                 partnerLinkType="ns3:BPELInvokeESP"/>
    <partnerLink name="ODErrorLogger" myRole="ODErrorLoggerRequester"
                 partnerRole="ODErrorLoggerProvider"
                 partnerLinkType="ns4:ODErrorLogger"/>
    <partnerLink myRole="ODTransactionLoggerRequester"
                 name="ODTransactionLogger"
                 partnerRole="ODTransactionLoggerProvider"
                 partnerLinkType="ns6:ODTransactionLogger"/>
  </partnerLinks>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <variable name="batchReadStartInput"
              messageType="ns1:batchReadInitiateMessage"/>
    <variable name="batchReadCompleteInput"
              messageType="ns1:batchReadCompleteMessage"/>
    <variable name="batchProcessCompleteInput"
              messageType="ns1:batchProcessCompleteMessage"/>
    <variable name="batchReadFailureInput"
              messageType="ns1:batchReadFailureMessage"/>
    <variable name="processName" type="xsd:string"/>
    <variable name="batchID" type="xsd:string"/>
    <variable name="pendingProcessCount" type="xsd:int"/>
    <variable name="waitTime" type="xsd:string"/>
    <variable name="maxWaitTime" type="xsd:string"/>
    <variable name="invokeESPInput"
              messageType="ns3:BPELInvokeESPRequestMessage"/>
    <variable name="ODErroLoggerInput"
              messageType="ns4:ODErrorLoggerRequestMessage"/>
    <variable name="ESPJobName" type="xsd:string"/>
    <variable name="ProcessFileName" type="xsd:string"/>
    <variable name="FileCountryCode" type="xsd:string"/>
    <variable name="startTime" type="xsd:long"/>
    <variable name="readFileDuration" type="xsd:long"/>
    <variable name="readFileInProgress" type="xsd:boolean"/>
    <variable name="logTransactionInput"
              messageType="ns6:ODTransactionLoggerRequestMessage"/>
    <variable name="xmlFragment" type="xsd:string"/>
  </variables>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">
    <pick name="PickBatchManagerNotification" createInstance="yes">
      <onMessage portType="ns1:BatchManagerInterface"
                 operation="onBatchReadStart" variable="batchReadStartInput"
                 partnerLink="BatchManagerInterface">
        <sequence name="seqReadStart">
          <scope name="logTransactionStart">
            <sequence name="Sequence_5">
              <assign name="copyTransactionData">
                <copy>
                  <from variable="batchReadStartInput" part="event"
                        query="/ns2:batchReadInitiateElement/ns2:domain"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:Domain"/>
                </copy>
                <copy>
                  <from expression="ora:getProcessId()"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessName"/>
                </copy>
                <copy>
                  <from expression="ora:getInstanceId()"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:InstanceId"/>
                </copy>
                <copy>
                  <from expression="'Start'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessStatus"/>
                </copy>
                <copy>
                  <from expression="'BPELBatchManagerInvokeESP'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:SystemName"/>
                </copy>
                <copy>
                  <from expression="'XML File'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageOperation"/>
                </copy>
                <copy>
                  <from variable="batchReadStartInput" part="event"
                        query="/ns2:batchReadInitiateElement/ns2:process"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageSourceSystem"/>
                </copy>
                <copy>
                  <from expression="ora:getCurrentDateTime()"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageDateTime"/>
                </copy>
                <copy>
                  <from expression="'payload'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageType"/>
                </copy>
                <copy>
                  <from expression="concat('&lt;EntityList xmlns=&quot;http://xmlns.oracle.com/TransactionData&quot;>&lt;EntityID EntityType=&quot;Event&quot;>BatchReadStart&lt;/EntityID>&lt;EntityID EntityType=&quot;BatchMetadata&quot;>',bpws:getVariableData('batchReadStartInput','event','/ns2:batchReadInitiateElement/ns2:batchMetaData'),'&lt;/EntityID>&lt;EntityID EntityType=&quot;BatchID&quot;>',bpws:getVariableData('batchReadStartInput','event','/ns2:batchReadInitiateElement/ns2:batchId'),'&lt;/EntityID>&lt;EntityID EntityType=&quot;Process&quot;>',bpws:getVariableData('batchReadStartInput','event','/ns2:batchReadInitiateElement/ns2:process'),'&lt;/EntityID>&lt;/EntityList>')"/>
                  <to variable="xmlFragment"/>
                </copy>
                <copy>
                  <from expression="ora:parseEscapedXML(bpws:getVariableData('xmlFragment'))"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:EntiltyList"/>
                </copy>
                <copy>
                  <from variable="batchReadStartInput" part="event"
                        query="/ns2:batchReadInitiateElement/ns2:process"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:TradingPartnerDetails/ns7:TPFrom"/>
                </copy>
              </assign>
              <invoke name="logTransaction" partnerLink="ODTransactionLogger"
                      portType="ns6:ODTransactionLogger" operation="initiate"
                      inputVariable="logTransactionInput"/>
            </sequence>
          </scope>
          <assign name="getInputData">
            <copy>
              <from variable="batchReadStartInput" part="event"
                    query="/ns2:batchReadInitiateElement/ns2:batchMetaData"/>
              <to variable="ProcessFileName"/>
            </copy>
          </assign>
          <bpelx:exec name="setTitle" language="java" version="1.5">
            <![CDATA[try                   
{                   
                 
  String title      = "";        
  String header      = "";     
  String eventName   = "Start"; 
   
  int    pos;        
  int    length;       
                    
  header = (String)getVariableData( "ProcessFileName");            
  length = header.length();       
         
  if (length > 40 ) {       
     pos = header.lastIndexOf("\\");        
     if (pos == -1) {        
        pos = header.lastIndexOf("/");        
     }        
          
     if (pos > 0) {        
        title = header.substring(pos+1);        
     }        
     else {        
         title = header;        
     }      
  }      
  else {        
     title = header;        
  }       
   
  title = eventName + " : " + title; 
         
  if (title.length() > 50 ) {        
     title = title.substring(0,49);        
  }        
          
  setTitle(title);                   
                   
}                   
catch (Exception ex)                   
{                   
  addAuditTrailEntry(ex.toString());                   
 ex.printStackTrace();                   
}]]>
          </bpelx:exec>
          <scope name="logTransactionEnd">
            <sequence name="Sequence_6">
              <assign name="logTransactionInput">
                <copy>
                  <from expression="'Success'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessStatus"/>
                </copy>
              </assign>
              <invoke name="logTransaction" partnerLink="ODTransactionLogger"
                      portType="ns6:ODTransactionLogger" operation="initiate"
                      inputVariable="logTransactionInput"/>
            </sequence>
          </scope>
        </sequence>
      </onMessage>
      <onMessage portType="ns1:BatchManagerInterface"
                 operation="onBatchReadComplete"
                 variable="batchReadCompleteInput"
                 partnerLink="BatchManagerInterface">
        <sequence name="seqReadComplete">
          <scope name="processReadComplete">
            <faultHandlers>
              <catchAll>
                <sequence name="seqCatchAllException">
                  <assign name="setCatchAllException">
                    <copy>
                      <from expression="'batchReadComplete'"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorCode"/>
                    </copy>
                    <copy>
                      <from expression="concat('Process: ',bpws:getVariableData('batchReadCompleteInput','event','/ns2:batchReadCompleteElement/ns2:process'), ' with the batch ID: ', bpws:getVariableData('batchReadCompleteInput','event','/ns2:batchReadCompleteElement/ns2:batchId'), ', failed when processing file: ', bpws:getVariableData('batchReadCompleteInput','event','/ns2:batchReadCompleteElement/ns2:batchMetaData'), ' batch Expected Size  ', bpws:getVariableData('batchReadCompleteInput','event','/ns2:batchReadCompleteElement/ns2:batchExpectedSize'))"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorText"/>
                    </copy>
                    <copy>
                      <from variable="batchReadCompleteInput" part="event"
                            query="/ns2:batchReadCompleteElement/ns2:process"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessName"/>
                    </copy>
                    <copy>
                      <from variable="batchReadCompleteInput" part="event"
                            query="/ns2:batchReadCompleteElement/ns2:domain"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessDomain"/>
                    </copy>
                    <copy>
                      <from expression="ora:getProcessId()"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessName"/>
                    </copy>
                    <copy>
                      <from expression="ora:getInstanceId()"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessId"/>
                    </copy>
                    <copy>
                      <from expression="ora:getDomainId()"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessDomain"/>
                    </copy>
                    <copy>
                      <from expression="ora:getProcessURL()"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ProcessInfo/ns5:SystemName"/>
                    </copy>
                    <copy>
                      <from expression="ora:getCurrentDateTime()"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorDateTime"/>
                    </copy>
                    <copy>
                      <from expression="'Catch All on the Main Sequence'"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessStep"/>
                    </copy>
                    <copy>
                      <from expression="concat(ora:getFaultName(),'')"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorCode"/>
                    </copy>
                    <copy>
                      <from expression="concat(ora:getFaultAsString(),'')"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorText"/>
                    </copy>
                    <copy>
                      <from expression="'system'"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorType"/>
                    </copy>
                    <copy>
                      <from expression="'fatal'"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorSeverity"/>
                    </copy>
                    <copy>
                      <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/FaultNotification/SendNotification')"/>
                      <to variable="ODErroLoggerInput" part="payload"
                          query="/ns5:ErrorData/ns5:Notification/ns5:sendNotification"/>
                    </copy>
                  </assign>
                  <invoke name="invODErrorLogger" partnerLink="ODErrorLogger"
                          portType="ns4:ODErrorLogger" operation="initiate"
                          inputVariable="ODErroLoggerInput"/>
                  <scope name="logTransactionError_ReadComplete">
                    <sequence name="Sequence_24">
                      <assign name="copyTransactionData">
                        <copy>
                          <from expression="'Error'"/>
                          <to variable="logTransactionInput" part="payload"
                              query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessStatus"/>
                        </copy>
                      </assign>
                      <invoke name="logTransaction"
                              partnerLink="ODTransactionLogger"
                              portType="ns6:ODTransactionLogger"
                              operation="initiate"
                              inputVariable="logTransactionInput"/>
                    </sequence>
                  </scope>
                  <terminate name="Exception"/>
                </sequence>
              </catchAll>
            </faultHandlers>
            <sequence name="seqProcessReadComplete">
              <scope name="logTransactionStart_ReadComplete">
                <sequence name="Sequence_21">
                  <assign name="copyTransactionData">
                    <copy>
                      <from variable="batchReadCompleteInput" part="event"
                            query="/ns2:batchReadCompleteElement/ns2:domain"/>
                      <to variable="logTransactionInput" part="payload"
                          query="/ns7:TransactionData/ns7:ProcessInfo/ns7:Domain"/>
                    </copy>
                    <copy>
                      <from expression="ora:getProcessId()"/>
                      <to variable="logTransactionInput" part="payload"
                          query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessName"/>
                    </copy>
                    <copy>
                      <from expression="ora:getInstanceId()"/>
                      <to variable="logTransactionInput" part="payload"
                          query="/ns7:TransactionData/ns7:ProcessInfo/ns7:InstanceId"/>
                    </copy>
                    <copy>
                      <from expression="'Start'"/>
                      <to variable="logTransactionInput" part="payload"
                          query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessStatus"/>
                    </copy>
                    <copy>
                      <from expression="'BPELBatchManagerInvokeESP'"/>
                      <to variable="logTransactionInput" part="payload"
                          query="/ns7:TransactionData/ns7:ProcessInfo/ns7:SystemName"/>
                    </copy>
                    <copy>
                      <from expression="'XML File'"/>
                      <to variable="logTransactionInput" part="payload"
                          query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageOperation"/>
                    </copy>
                    <copy>
                      <from variable="batchReadCompleteInput" part="event"
                            query="/ns2:batchReadCompleteElement/ns2:process"/>
                      <to variable="logTransactionInput" part="payload"
                          query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageSourceSystem"/>
                    </copy>
                    <copy>
                      <from expression="ora:getCurrentDateTime()"/>
                      <to variable="logTransactionInput" part="payload"
                          query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageDateTime"/>
                    </copy>
                    <copy>
                      <from expression="'payload'"/>
                      <to variable="logTransactionInput" part="payload"
                          query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageType"/>
                    </copy>
                    <copy>
                      <from expression="concat('&lt;EntityList xmlns=&quot;http://xmlns.oracle.com/TransactionData&quot;>&lt;EntityID EntityType=&quot;Event&quot;>BatchReadComplete&lt;/EntityID>&lt;EntityID EntityType=&quot;BatchMetadata&quot;>',bpws:getVariableData('batchReadCompleteInput','event','/ns2:batchReadCompleteElement/ns2:batchMetaData'),'&lt;/EntityID>&lt;EntityID EntityType=&quot;BatchExpectedSize&quot;>',bpws:getVariableData('batchReadCompleteInput','event','/ns2:batchReadCompleteElement/ns2:batchExpectedSize'),'&lt;/EntityID>&lt;EntityID EntityType=&quot;BatchID&quot;>',bpws:getVariableData('batchReadCompleteInput','event','/ns2:batchReadCompleteElement/ns2:batchId'),'&lt;/EntityID>&lt;EntityID EntityType=&quot;Process&quot;>',bpws:getVariableData('batchReadCompleteInput','event','/ns2:batchReadCompleteElement/ns2:process'),'&lt;/EntityID>&lt;/EntityList>')"/>
                      <to variable="xmlFragment"/>
                    </copy>
                    <copy>
                      <from expression="ora:parseEscapedXML(bpws:getVariableData('xmlFragment'))"/>
                      <to variable="logTransactionInput" part="payload"
                          query="/ns7:TransactionData/ns7:EntiltyList"/>
                    </copy>
                    <copy>
                      <from variable="batchReadCompleteInput" part="event"
                            query="/ns2:batchReadCompleteElement/ns2:process"/>
                      <to variable="logTransactionInput" part="payload"
                          query="/ns7:TransactionData/ns7:ProcessInfo/ns7:TradingPartnerDetails/ns7:TPFrom"/>
                    </copy>
                  </assign>
                  <invoke name="logTransaction"
                          partnerLink="ODTransactionLogger"
                          portType="ns6:ODTransactionLogger"
                          operation="initiate"
                          inputVariable="logTransactionInput"/>
                </sequence>
              </scope>
              <assign name="getInputData">
                <copy>
                  <from variable="batchReadCompleteInput" part="event"
                        query="/ns2:batchReadCompleteElement/ns2:process"/>
                  <to variable="processName"/>
                </copy>
                <copy>
                  <from variable="batchReadCompleteInput" part="event"
                        query="/ns2:batchReadCompleteElement/ns2:batchId"/>
                  <to variable="batchID"/>
                </copy>
                <copy>
                  <from variable="batchReadCompleteInput" part="event"
                        query="/ns2:batchReadCompleteElement/ns2:batchMetaData"/>
                  <to variable="ProcessFileName"/>
                </copy>
              </assign>
              <scope name="setTitle">
                <bpelx:exec name="setTitle" language="java" version="1.5">
                  <![CDATA[try                     
{                     
                   
  String title      = "";          
  String header      = "";       
  String eventName   = "Read";   
     
  int    pos;          
  int    length;         
                      
  header = (String)getVariableData( "ProcessFileName");              
  length = header.length();         
           
  if (length > 40 ) {         
     pos = header.lastIndexOf("\\");          
     if (pos == -1) {          
        pos = header.lastIndexOf("/");          
     }          
            
     if (pos > 0) {          
        title = header.substring(pos+1);          
     }          
     else {          
         title = header;          
     }        
  }        
  else {          
     title = header;          
  }         
     
  title = eventName + " : " + title;   
           
  if (title.length() > 50 ) {          
     title = title.substring(0,49);          
  }          
            
  setTitle(title);                     
                     
}                     
catch (Exception ex)                     
{                     
  addAuditTrailEntry(ex.toString());                     
 ex.printStackTrace();                     
}]]>
                </bpelx:exec>
              </scope>
              <assign name="InitLoop">
                <copy>
                  <from expression="substring(substring-after(bpws:getVariableData('ProcessFileName'),'XX_AR_EDI_'),1,2)"/>
                  <to variable="FileCountryCode"/>
                </copy>
                <copy>
                  <from variable="batchReadCompleteInput" part="event"
                        query="/ns2:batchReadCompleteElement/ns2:batchExpectedSize"/>
                  <to variable="pendingProcessCount"/>
                </copy>
                <copy>
                  <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/BPELBatchManagerInvokeESP/WaitTime')"/>
                  <to variable="waitTime"/>
                </copy>
                <copy>
                  <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/BPELBatchManagerInvokeESP/MaxWaitTime')"/>
                  <to variable="maxWaitTime"/>
                </copy>
                <copy>
                  <from expression="0"/>
                  <to variable="readFileDuration"/>
                </copy>
                <copy>
                  <from expression="true()"/>
                  <to variable="readFileInProgress"/>
                </copy>
              </assign>
              <bpelx:exec name="GetStartTime" language="java" version="1.5">
                <![CDATA[/*Write your java code below e.g.        
	System.out.println("Hello, World");       
*/       
GregorianCalendar gc = (GregorianCalendar) Calendar.getInstance();                      
long startTime = gc.getTimeInMillis();                      
setVariableData("startTime", new Long(startTime));                              
addAuditTrailEntry("Start Time: " + startTime);     
     
addAuditTrailEntry("pendingProcessCount: " + getVariableData("pendingProcessCount"));     
addAuditTrailEntry("readFileDuration: " + getVariableData("readFileDuration"));]]>
              </bpelx:exec>
              <while name="While_1"
                     condition="bpws:getVariableData('readFileInProgress') = true()">
                <sequence name="waitForActiveProcessesCompletion">
                  <switch name="hasActiveProcesses">
                    <case condition="bpws:getVariableData('pendingProcessCount')  >= 1">
                      <bpelx:annotation>
                        <bpelx:pattern>has active processes</bpelx:pattern>
                      </bpelx:annotation>
                      <sequence name="Sequence_4">
                        <switch name="checkTimeout">
                          <case condition="bpws:getVariableData('readFileDuration') > bpws:getVariableData('maxWaitTime')">
                            <bpelx:annotation>
                              <bpelx:pattern>is timeout</bpelx:pattern>
                            </bpelx:annotation>
                            <sequence name="Sequence_1">
                              <assign name="setTimeoutError">
                                <copy>
                                  <from variable="batchReadCompleteInput"
                                        part="event"
                                        query="/ns2:batchReadCompleteElement/ns2:process"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessName"/>
                                </copy>
                                <copy>
                                  <from variable="batchReadCompleteInput"
                                        part="event"
                                        query="/ns2:batchReadCompleteElement/ns2:domain"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessDomain"/>
                                </copy>
                                <copy>
                                  <from expression="ora:getProcessId()"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessName"/>
                                </copy>
                                <copy>
                                  <from expression="ora:getInstanceId()"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessId"/>
                                </copy>
                                <copy>
                                  <from expression="ora:getDomainId()"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessDomain"/>
                                </copy>
                                <copy>
                                  <from expression="ora:getProcessURL()"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:ProcessInfo/ns5:SystemName"/>
                                </copy>
                                <copy>
                                  <from expression="ora:getCurrentDateTime()"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorDateTime"/>
                                </copy>
                                <copy>
                                  <from expression="'Catch All on the Read Timeout'"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessStep"/>
                                </copy>
                                <copy>
                                  <from expression="'TimeoutError'"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorCode"/>
                                </copy>
                                <copy>
                                  <from expression="concat('Process: ',bpws:getVariableData('batchReadCompleteInput','event','/ns2:batchReadCompleteElement/ns2:process'), ' with the batch ID: ', bpws:getVariableData('batchReadCompleteInput','event','/ns2:batchReadCompleteElement/ns2:batchId'), ', timed out when processing file: ', bpws:getVariableData('batchReadCompleteInput','event','/ns2:batchReadCompleteElement/ns2:batchMetaData'), '. Expected batch size is', bpws:getVariableData('batchReadCompleteInput','event','/ns2:batchReadCompleteElement/ns2:batchExpectedSize'), '. The pendingProcessCount is ', bpws:getVariableData('pendingProcessCount'), '. The read file duration is ', bpws:getVariableData('readFileDuration'))"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorText"/>
                                </copy>
                                <copy>
                                  <from expression="'system'"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorType"/>
                                </copy>
                                <copy>
                                  <from expression="'fatal'"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorSeverity"/>
                                </copy>
                                <copy>
                                  <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/FaultNotification/SendNotification')"/>
                                  <to variable="ODErroLoggerInput"
                                      part="payload"
                                      query="/ns5:ErrorData/ns5:Notification/ns5:sendNotification"/>
                                </copy>
                              </assign>
                              <invoke name="invODErrorLooger"
                                      partnerLink="ODErrorLogger"
                                      portType="ns4:ODErrorLogger"
                                      operation="initiate"
                                      inputVariable="ODErroLoggerInput"/>
                              <scope name="logTransaction_Error">
                                <sequence name="Sequence_22">
                                  <assign name="copyTransactionData">
                                    <copy>
                                      <from expression="'Error'"/>
                                      <to variable="logTransactionInput"
                                          part="payload"
                                          query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessStatus"/>
                                    </copy>
                                  </assign>
                                  <invoke name="logTransaction"
                                          partnerLink="ODTransactionLogger"
                                          portType="ns6:ODTransactionLogger"
                                          operation="initiate"
                                          inputVariable="logTransactionInput"/>
                                </sequence>
                              </scope>
                              <terminate name="Timeout"/>
                            </sequence>
                          </case>
                          <otherwise>
                            <sequence name="Sequence_2">
                              <wait name="waitForRetry"
                                    for="bpws:getVariableData('waitTime')"/>
                              <assign name="getActiveProcessCount">
                                <copy>
                                  <from expression="ora:batchProcessActive(bpws:getVariableData('batchID'), bpws:getVariableData('processName'))"/>
                                  <to variable="pendingProcessCount"/>
                                </copy>
                              </assign>
                              <bpelx:exec name="calculateDuration"
                                          language="java" version="1.5">
                                <![CDATA[/*Write your java code below e.g.           
	System.out.println("Hello, World");          
*/          
Long startTimeLong = (Long)getVariableData("startTime");       
long startTime = startTimeLong.longValue();          
GregorianCalendar gc = (GregorianCalendar) Calendar.getInstance();                           
long currentTime = gc.getTimeInMillis();             
addAuditTrailEntry("Current Time: " + currentTime);          
  
long duration = currentTime - startTime;          
setVariableData("readFileDuration", new Long(duration));                                   
addAuditTrailEntry("Duration: " + duration);]]>
                              </bpelx:exec>
                            </sequence>
                          </otherwise>
                        </switch>
                      </sequence>
                    </case>
                    <otherwise>
                      <sequence name="Sequence_3">
                        <assign name="setReadFileInProgress">
                          <copy>
                            <from expression="false()"/>
                            <to variable="readFileInProgress"/>
                          </copy>
                        </assign>
                      </sequence>
                    </otherwise>
                  </switch>
                </sequence>
              </while>
              <scope name="logTransactionEnd">
                <sequence name="Sequence_23">
                  <assign name="copyTransactionData">
                    <copy>
                      <from expression="'Success'"/>
                      <to variable="logTransactionInput" part="payload"
                          query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessStatus"/>
                    </copy>
                  </assign>
                  <invoke name="logTransaction"
                          partnerLink="ODTransactionLogger"
                          portType="ns6:ODTransactionLogger"
                          operation="initiate"
                          inputVariable="logTransactionInput"/>
                </sequence>
              </scope>
              <bpelx:exec name="SetESPJobName" language="java" version="1.5">
                <![CDATA[try   
{   
String processName = (String)getVariableData("processName");    
addAuditTrailEntry("processName: " + processName);   
String espName = ""; 
        
if(processName.startsWith("ProcessAREDIInvoiceEBSOutbound")){        
   String fileCountry = (String)getVariableData("FileCountryCode");   
   addAuditTrailEntry("FileCountryCode: " + fileCountry);   
   if(fileCountry.startsWith("US")){   
      espName = "XX_AR_EDI_US";   
   }    
   else if (fileCountry.startsWith("CA")){   
      espName = "XX_AR_EDI_CA";         
   }   
}       
else if(processName.startsWith("ProcessODAmexL3CreditSettlement")){    
   espName = "ODAMEXCPC";    
}      
      
setVariableData("ESPJobName",espName);   
}   
catch (Exception e)   
{   
addAuditTrailEntry(e.toString());   
}]]>
              </bpelx:exec>
              <assign name="setESPParameters">
                <copy>
                  <from variable="batchReadCompleteInput" part="event"
                        query="/ns2:batchReadCompleteElement/ns2:domain"/>
                  <to variable="invokeESPInput" part="payload"
                      query="/ns3:BPELInvokeESPProcessRequest/ns3:processDomain"/>
                </copy>
                <copy>
                  <from variable="processName"/>
                  <to variable="invokeESPInput" part="payload"
                      query="/ns3:BPELInvokeESPProcessRequest/ns3:processName"/>
                </copy>
                <copy>
                  <from variable="ESPJobName"/>
                  <to variable="invokeESPInput" part="payload"
                      query="/ns3:BPELInvokeESPProcessRequest/ns3:filePattern"/>
                </copy>
              </assign>
              <invoke name="invBPELInvokeESP" partnerLink="BPELInvokeESP"
                      portType="ns3:BPELInvokeESP" operation="initiate"
                      inputVariable="invokeESPInput"/>
            </sequence>
          </scope>
        </sequence>
      </onMessage>
      <onMessage portType="ns1:BatchManagerInterface"
                 operation="onBatchProcessComplete"
                 variable="batchProcessCompleteInput"
                 partnerLink="BatchManagerInterface">
        <sequence name="seqProcessComplete">
          <scope name="logTransactionStart_ProcessComplete">
            <sequence name="Sequence_19">
              <assign name="copyTransactionData">
                <copy>
                  <from variable="batchProcessCompleteInput" part="event"
                        query="/ns2:batchProcessCompleteElement/ns2:domain"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:Domain"/>
                </copy>
                <copy>
                  <from expression="ora:getProcessId()"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessName"/>
                </copy>
                <copy>
                  <from expression="ora:getInstanceId()"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:InstanceId"/>
                </copy>
                <copy>
                  <from expression="'Start'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessStatus"/>
                </copy>
                <copy>
                  <from expression="'BPELBatchManagerInvokeESP'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:SystemName"/>
                </copy>
                <copy>
                  <from expression="'XML File'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageOperation"/>
                </copy>
                <copy>
                  <from variable="batchProcessCompleteInput" part="event"
                        query="/ns2:batchProcessCompleteElement/ns2:process"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageSourceSystem"/>
                </copy>
                <copy>
                  <from expression="ora:getCurrentDateTime()"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageDateTime"/>
                </copy>
                <copy>
                  <from expression="'payload'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageType"/>
                </copy>
                <copy>
                  <from expression="concat('&lt;EntityList xmlns=&quot;http://xmlns.oracle.com/TransactionData&quot;>&lt;EntityID EntityType=&quot;Event&quot;>BatchProcessComplete&lt;/EntityID>&lt;EntityID EntityType=&quot;BatchMetadata&quot;>',bpws:getVariableData('batchProcessCompleteInput','event','/ns2:batchProcessCompleteElement/ns2:batchMetaData'),'&lt;/EntityID>&lt;EntityID EntityType=&quot;BatchID&quot;>',bpws:getVariableData('batchProcessCompleteInput','event','/ns2:batchProcessCompleteElement/ns2:batchId'),'&lt;/EntityID>&lt;EntityID EntityType=&quot;Process&quot;>',bpws:getVariableData('batchProcessCompleteInput','event','/ns2:batchProcessCompleteElement/ns2:process'),'&lt;/EntityID>&lt;/EntityList>')"/>
                  <to variable="xmlFragment"/>
                </copy>
                <copy>
                  <from expression="ora:parseEscapedXML(bpws:getVariableData('xmlFragment'))"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:EntiltyList"/>
                </copy>
                <copy>
                  <from variable="batchProcessCompleteInput" part="event"
                        query="/ns2:batchProcessCompleteElement/ns2:batchMetaData"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:TradingPartnerDetails/ns7:TPFrom"/>
                </copy>
              </assign>
              <invoke name="logTransaction" partnerLink="ODTransactionLogger"
                      portType="ns6:ODTransactionLogger" operation="initiate"
                      inputVariable="logTransactionInput"/>
            </sequence>
          </scope>
          <assign name="getInputData">
            <copy>
              <from variable="batchProcessCompleteInput" part="event"
                    query="/ns2:batchProcessCompleteElement/ns2:batchMetaData"/>
              <to variable="ProcessFileName"/>
            </copy>
          </assign>
          <bpelx:exec name="setTitle" language="java" version="1.5">
            <![CDATA[try                   
{                   
                 
  String title      = "";        
  String header      = "";     
  String eventName   = "Processed"; 
   
  int    pos;        
  int    length;       
                    
  header = (String)getVariableData( "ProcessFileName");            
  length = header.length();       
         
  if (length > 40 ) {       
     pos = header.lastIndexOf("\\");        
     if (pos == -1) {        
        pos = header.lastIndexOf("/");        
     }        
          
     if (pos > 0) {        
        title = header.substring(pos+1);        
     }        
     else {        
         title = header;        
     }      
  }      
  else {        
     title = header;        
  }       
   
  title = eventName + " : " + title; 
         
  if (title.length() > 50 ) {        
     title = title.substring(0,49);        
  }        
          
  setTitle(title);                   
                   
}                   
catch (Exception ex)                   
{                   
  addAuditTrailEntry(ex.toString());                   
 ex.printStackTrace();                   
}]]>
          </bpelx:exec>
          <scope name="logTransactionEnd_processComplete">
            <sequence name="Sequence_20">
              <assign name="copyTransactionData">
                <copy>
                  <from expression="'Success'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessStatus"/>
                </copy>
              </assign>
              <invoke name="logTransaction" partnerLink="ODTransactionLogger"
                      portType="ns6:ODTransactionLogger" operation="initiate"
                      inputVariable="logTransactionInput"/>
            </sequence>
          </scope>
        </sequence>
      </onMessage>
      <onMessage portType="ns1:BatchManagerInterface"
                 operation="onBatchReadFailure" variable="batchReadFailureInput"
                 partnerLink="BatchManagerInterface">
        <sequence name="seqReadError">
          <scope name="logTransactionStart_ReadFailure">
            <sequence name="Sequence_17">
              <assign name="copyTransactionData">
                <copy>
                  <from variable="batchReadFailureInput" part="event"
                        query="/ns2:batchReadFailureElement/ns2:domain"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:Domain"/>
                </copy>
                <copy>
                  <from expression="ora:getProcessId()"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessName"/>
                </copy>
                <copy>
                  <from expression="ora:getInstanceId()"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:InstanceId"/>
                </copy>
                <copy>
                  <from expression="'Start'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessStatus"/>
                </copy>
                <copy>
                  <from expression="'BPELBatchManagerInvokeESP'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:SystemName"/>
                </copy>
                <copy>
                  <from expression="'XML File'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageOperation"/>
                </copy>
                <copy>
                  <from variable="batchReadFailureInput" part="event"
                        query="/ns2:batchReadFailureElement/ns2:batchMetaData"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageSourceSystem"/>
                </copy>
                <copy>
                  <from expression="ora:getCurrentDateTime()"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageDateTime"/>
                </copy>
                <copy>
                  <from expression="'payload'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:MessageDetails/ns7:MessageType"/>
                </copy>
                <copy>
                  <from expression="concat('&lt;EntityList xmlns=&quot;http://xmlns.oracle.com/TransactionData&quot;>&lt;EntityID EntityType=&quot;Event&quot;>BatchReadFailure&lt;/EntityID>&lt;EntityID EntityType=&quot;BatchMetadata&quot;>',bpws:getVariableData('batchReadFailureInput','event','/ns2:batchReadFailureElement/ns2:batchMetaData'),'&lt;/EntityID>&lt;EntityID EntityType=&quot;BatchPartialSize&quot;>',bpws:getVariableData('batchReadFailureInput','event','/ns2:batchReadFailureElement/ns2:batchPartialSize'),'&lt;/EntityID>&lt;EntityID EntityType=&quot;BatchID&quot;>',bpws:getVariableData('batchReadFailureInput','event','/ns2:batchReadFailureElement/ns2:batchId'),'&lt;/EntityID>&lt;EntityID EntityType=&quot;Process&quot;>',bpws:getVariableData('batchReadFailureInput','event','/ns2:batchReadFailureElement/ns2:process'),'&lt;/EntityID>&lt;/EntityList>')"/>
                  <to variable="xmlFragment"/>
                </copy>
                <copy>
                  <from expression="ora:parseEscapedXML(bpws:getVariableData('xmlFragment'))"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:EntiltyList"/>
                </copy>
                <copy>
                  <from variable="batchReadFailureInput" part="event"
                        query="/ns2:batchReadFailureElement/ns2:process"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:TradingPartnerDetails/ns7:TPFrom"/>
                </copy>
              </assign>
              <invoke name="logTransaction" partnerLink="ODTransactionLogger"
                      portType="ns6:ODTransactionLogger" operation="initiate"
                      inputVariable="logTransactionInput"/>
            </sequence>
          </scope>
          <assign name="getInputData">
            <copy>
              <from variable="batchReadFailureInput" part="event"
                    query="/ns2:batchReadFailureElement/ns2:batchMetaData"/>
              <to variable="ProcessFileName"/>
            </copy>
          </assign>
          <bpelx:exec name="setTitle" language="java" version="1.5">
            <![CDATA[try                   
{                   
                 
  String title      = "";        
  String header      = "";     
  String eventName   = "Processed"; 
   
  int    pos;        
  int    length;       
                    
  header = (String)getVariableData( "ProcessFileName");            
  length = header.length();       
         
  if (length > 40 ) {       
     pos = header.lastIndexOf("\\");        
     if (pos == -1) {        
        pos = header.lastIndexOf("/");        
     }        
          
     if (pos > 0) {        
        title = header.substring(pos+1);        
     }        
     else {        
         title = header;        
     }      
  }      
  else {        
     title = header;        
  }       
   
  title = eventName + " : " + title; 
         
  if (title.length() > 50 ) {        
     title = title.substring(0,49);        
  }        
          
  setTitle(title);                   
                   
}                   
catch (Exception ex)                   
{                   
  addAuditTrailEntry(ex.toString());                   
 ex.printStackTrace();                   
}]]>
          </bpelx:exec>
          <assign name="setReadError">
            <copy>
              <from expression="'batchReadFailure'"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorCode"/>
            </copy>
            <copy>
              <from expression="concat('Process: ',bpws:getVariableData('batchReadFailureInput','event','/ns2:batchReadFailureElement/ns2:process'), ' with the batch ID: ', bpws:getVariableData('batchReadFailureInput','event','/ns2:batchReadFailureElement/ns2:batchId'), ', failed when processing file: ', bpws:getVariableData('batchReadFailureInput','event','/ns2:batchReadFailureElement/ns2:batchMetaData'), ' while processing of the ', bpws:getVariableData('batchReadFailureInput','event','/ns2:batchReadFailureElement/ns2:batchPartialSize'), ' batch')"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorText"/>
            </copy>
            <copy>
              <from variable="batchReadFailureInput" part="event"
                    query="/ns2:batchReadFailureElement/ns2:process"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessName"/>
            </copy>
            <copy>
              <from variable="batchReadFailureInput" part="event"
                    query="/ns2:batchReadFailureElement/ns2:domain"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessDomain"/>
            </copy>
            <copy>
              <from expression="ora:getProcessId()"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessName"/>
            </copy>
            <copy>
              <from expression="ora:getInstanceId()"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessId"/>
            </copy>
            <copy>
              <from expression="ora:getDomainId()"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessDomain"/>
            </copy>
            <copy>
              <from expression="ora:getProcessURL()"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:ProcessInfo/ns5:SystemName"/>
            </copy>
            <copy>
              <from expression="ora:getCurrentDateTime()"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorDateTime"/>
            </copy>
            <copy>
              <from expression="'Catch All on the Read Error block'"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessStep"/>
            </copy>
            <copy>
              <from expression="'system'"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorType"/>
            </copy>
            <copy>
              <from expression="'fatal'"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorSeverity"/>
            </copy>
            <copy>
              <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/FaultNotification/SendNotification')"/>
              <to variable="ODErroLoggerInput" part="payload"
                  query="/ns5:ErrorData/ns5:Notification/ns5:sendNotification"/>
            </copy>
          </assign>
          <invoke name="invODErroLogger" partnerLink="ODErrorLogger"
                  portType="ns4:ODErrorLogger" operation="initiate"
                  inputVariable="ODErroLoggerInput"/>
          <scope name="logTransactionEnd_ReadFailure">
            <sequence name="Sequence_18">
              <assign name="copyTransactionData">
                <copy>
                  <from expression="'Error'"/>
                  <to variable="logTransactionInput" part="payload"
                      query="/ns7:TransactionData/ns7:ProcessInfo/ns7:ProcessStatus"/>
                </copy>
              </assign>
              <invoke name="logTransaction" partnerLink="ODTransactionLogger"
                      portType="ns6:ODTransactionLogger" operation="initiate"
                      inputVariable="logTransactionInput"/>
            </sequence>
          </scope>
          <terminate name="ReadError"/>
        </sequence>
      </onMessage>
    </pick>
  </sequence>
</process>