-- Declare the SQL type for the PL/SQL type XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_REC_TYPE
CREATE OR REPLACE TYPE XX_CS_TDS_PARTS_X1327045X1X4 AS OBJECT (
      ITEM_NUMBER VARCHAR2(25),
      ITEM_DESCRIPTION VARCHAR2(250),
      RMS_SKU VARCHAR2(25),
      QUANTITY NUMBER,
      ITEM_CATEGORY VARCHAR2(25),
      PURCHASE_PRICE NUMBER,
      EXCHANGE_PRICE NUMBER,
      CORE_FLAG VARCHAR2(1),
      UOM VARCHAR2(5),
      SCHEDULE_DATE DATE,
      ATTRIBUE1 VARCHAR2(250),
      ATTRIBUE2 VARCHAR2(250),
      ATTRIBUE3 VARCHAR2(250),
      ATTRIBUE4 VARCHAR2(250),
      ATTRIBUE5 VARCHAR2(250),
      MANUFACTURER VARCHAR2(50),
      MODEL VARCHAR2(25),
      SERIAL_NUMBER VARCHAR2(25),
      PROB_DESCR VARCHAR2(250),
      SPECIAL_INSTR VARCHAR2(1000)
);
/
show errors
CREATE OR REPLACE TYPE XX_CS_TDS_PARTS_X1327045X1X3 AS TABLE OF APPS.XX_CS_TDS_PARTS_X1327045X1X4; 
/
show errors
-- Declare package containing conversion functions between SQL and PL/SQL types
CREATE OR REPLACE PACKAGE XX_CS_TDS_PARTS_BPEL_PKG AS
	-- Declare the conversion functions the PL/SQL type XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_REC_TYPE
	FUNCTION PL_TO_SQL0(aPlsqlItem XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_REC_TYPE)
 	RETURN XX_CS_TDS_PARTS_X1327045X1X4;
	FUNCTION SQL_TO_PL1(aSqlItem XX_CS_TDS_PARTS_X1327045X1X4)
	RETURN XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_REC_TYPE;
	-- Declare the conversion functions the PL/SQL type XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_TBL_TYPE
	FUNCTION PL_TO_SQL1(aPlsqlItem XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_TBL_TYPE)
 	RETURN XX_CS_TDS_PARTS_X1327045X1X3;
	FUNCTION SQL_TO_PL0(aSqlItem XX_CS_TDS_PARTS_X1327045X1X3)
	RETURN XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_TBL_TYPE;
   PROCEDURE xx_cs_tds_parts_pkg$add_parts (P_SR_NUMBER VARCHAR2,
	P_STORE_NUMBER VARCHAR2,
	P_PARTS_TABLE APPS.XX_CS_TDS_PARTS_X1327045X1X3,
	X_RETURN_STATUS IN OUT VARCHAR2,
	X_RETURN_MESSAGE IN OUT VARCHAR2
	);
END XX_CS_TDS_PARTS_BPEL_PKG;
/
show errors
CREATE OR REPLACE PACKAGE BODY XX_CS_TDS_PARTS_BPEL_PKG IS
	FUNCTION PL_TO_SQL0(aPlsqlItem XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_REC_TYPE)
 	RETURN XX_CS_TDS_PARTS_X1327045X1X4 IS 
	aSqlItem XX_CS_TDS_PARTS_X1327045X1X4; 
	BEGIN 
		-- initialize the object
		aSqlItem := XX_CS_TDS_PARTS_X1327045X1X4(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
		aSqlItem.ITEM_NUMBER := aPlsqlItem.ITEM_NUMBER;
		aSqlItem.ITEM_DESCRIPTION := aPlsqlItem.ITEM_DESCRIPTION;
		aSqlItem.RMS_SKU := aPlsqlItem.RMS_SKU;
		aSqlItem.QUANTITY := aPlsqlItem.QUANTITY;
		aSqlItem.ITEM_CATEGORY := aPlsqlItem.ITEM_CATEGORY;
		aSqlItem.PURCHASE_PRICE := aPlsqlItem.PURCHASE_PRICE;
		aSqlItem.EXCHANGE_PRICE := aPlsqlItem.EXCHANGE_PRICE;
		aSqlItem.CORE_FLAG := aPlsqlItem.CORE_FLAG;
		aSqlItem.UOM := aPlsqlItem.UOM;
		aSqlItem.SCHEDULE_DATE := aPlsqlItem.SCHEDULE_DATE;
		aSqlItem.ATTRIBUE1 := aPlsqlItem.ATTRIBUE1;
		aSqlItem.ATTRIBUE2 := aPlsqlItem.ATTRIBUE2;
		aSqlItem.ATTRIBUE3 := aPlsqlItem.ATTRIBUE3;
		aSqlItem.ATTRIBUE4 := aPlsqlItem.ATTRIBUE4;
		aSqlItem.ATTRIBUE5 := aPlsqlItem.ATTRIBUE5;
		aSqlItem.MANUFACTURER := aPlsqlItem.MANUFACTURER;
		aSqlItem.MODEL := aPlsqlItem.MODEL;
		aSqlItem.SERIAL_NUMBER := aPlsqlItem.SERIAL_NUMBER;
		aSqlItem.PROB_DESCR := aPlsqlItem.PROB_DESCR;
		aSqlItem.SPECIAL_INSTR := aPlsqlItem.SPECIAL_INSTR;
		RETURN aSqlItem;
	END PL_TO_SQL0;
	FUNCTION SQL_TO_PL1(aSqlItem XX_CS_TDS_PARTS_X1327045X1X4) 
	RETURN XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_REC_TYPE IS 
	aPlsqlItem XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_REC_TYPE; 
	BEGIN 
		aPlsqlItem.ITEM_NUMBER := aSqlItem.ITEM_NUMBER;
		aPlsqlItem.ITEM_DESCRIPTION := aSqlItem.ITEM_DESCRIPTION;
		aPlsqlItem.RMS_SKU := aSqlItem.RMS_SKU;
		aPlsqlItem.QUANTITY := aSqlItem.QUANTITY;
		aPlsqlItem.ITEM_CATEGORY := aSqlItem.ITEM_CATEGORY;
		aPlsqlItem.PURCHASE_PRICE := aSqlItem.PURCHASE_PRICE;
		aPlsqlItem.EXCHANGE_PRICE := aSqlItem.EXCHANGE_PRICE;
		aPlsqlItem.CORE_FLAG := aSqlItem.CORE_FLAG;
		aPlsqlItem.UOM := aSqlItem.UOM;
		aPlsqlItem.SCHEDULE_DATE := aSqlItem.SCHEDULE_DATE;
		aPlsqlItem.ATTRIBUE1 := aSqlItem.ATTRIBUE1;
		aPlsqlItem.ATTRIBUE2 := aSqlItem.ATTRIBUE2;
		aPlsqlItem.ATTRIBUE3 := aSqlItem.ATTRIBUE3;
		aPlsqlItem.ATTRIBUE4 := aSqlItem.ATTRIBUE4;
		aPlsqlItem.ATTRIBUE5 := aSqlItem.ATTRIBUE5;
		aPlsqlItem.MANUFACTURER := aSqlItem.MANUFACTURER;
		aPlsqlItem.MODEL := aSqlItem.MODEL;
		aPlsqlItem.SERIAL_NUMBER := aSqlItem.SERIAL_NUMBER;
		aPlsqlItem.PROB_DESCR := aSqlItem.PROB_DESCR;
		aPlsqlItem.SPECIAL_INSTR := aSqlItem.SPECIAL_INSTR;
		RETURN aPlsqlItem;
	END SQL_TO_PL1;
	FUNCTION PL_TO_SQL1(aPlsqlItem XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_TBL_TYPE)
 	RETURN XX_CS_TDS_PARTS_X1327045X1X3 IS 
	aSqlItem XX_CS_TDS_PARTS_X1327045X1X3; 
	BEGIN 
		-- initialize the table 
		aSqlItem := XX_CS_TDS_PARTS_X1327045X1X3();
		IF aPlsqlItem IS NOT NULL THEN
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		IF aPlsqlItem.COUNT>0 THEN
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := PL_TO_SQL0(aPlsqlItem(I));
		END LOOP; 
		END IF; 
		END IF; 
		RETURN aSqlItem;
	END PL_TO_SQL1;
	FUNCTION SQL_TO_PL0(aSqlItem XX_CS_TDS_PARTS_X1327045X1X3) 
	RETURN XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_TBL_TYPE IS 
	aPlsqlItem XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_TBL_TYPE; 
	BEGIN 
		IF aSqlItem.COUNT>0 THEN
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := SQL_TO_PL1(aSqlItem(I));
		END LOOP; 
		END IF;
		RETURN aPlsqlItem;
	END SQL_TO_PL0;

   PROCEDURE xx_cs_tds_parts_pkg$add_parts (P_SR_NUMBER VARCHAR2,
	P_STORE_NUMBER VARCHAR2,
	P_PARTS_TABLE APPS.XX_CS_TDS_PARTS_X1327045X1X3,
	X_RETURN_STATUS IN OUT VARCHAR2,
	X_RETURN_MESSAGE IN OUT VARCHAR2
	) IS
 P_PARTS_TABLE_ APPS.XX_CS_TDS_PARTS_PKG.XX_CS_TDS_PARTS_TBL_TYPE;
   BEGIN
 P_PARTS_TABLE_ := XX_CS_TDS_PARTS_BPEL_PKG.SQL_TO_PL0(P_PARTS_TABLE);
      APPS.XX_CS_TDS_PARTS_PKG.ADD_PARTS(P_SR_NUMBER,
	P_STORE_NUMBER,
	P_PARTS_TABLE_,
	X_RETURN_STATUS,
	X_RETURN_MESSAGE
	);
   END xx_cs_tds_parts_pkg$add_parts;

END XX_CS_TDS_PARTS_BPEL_PKG;
/
show errors
exit
