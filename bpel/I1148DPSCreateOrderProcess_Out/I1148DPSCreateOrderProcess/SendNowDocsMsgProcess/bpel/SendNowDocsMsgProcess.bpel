<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Wed May 23 10:34:29 IST 2007
  Author:  dharma
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="SendNowDocsMsgProcess"
         targetNamespace="http://xmlns.oracle.com/SendNowDocsMsgProcess"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ns4="http://xmlns.oracle.com/pcbpel/adapter/db/DBErrorWrite/"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:ns5="http://xmlns.oracle.com/pcbpel/adapter/db/APPS/XXOD_GLOBAL_EXCEPTION_PKG/INSERT_EXCEPTION/"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:ns9="http://xmlns.oracle.com/pcbpel/adapter/aq/EnqueueMsg/"
         xmlns:ns1="http://xmlns.oracle.com/ProcessNowDocsReceive"
         xmlns:ns2="http://www.openapplications.org/oagis/9"
         xmlns:ns15="http://xmlns.oracle.com/pcbpel/adapter/db/APPS/XX_OM_GLOBAL_EXCEPTION_PKG/INSERT_EXCEPTION/"
         xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:ns10="ODError"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:ns13="http://xmlns.oracle.com/pcbpel/adapter/db/AppsInitialize/"
         xmlns:ns7="http://xmlns.oracle.com/pcbpel/adapter/apps/BusinessEventRead/"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns12="http://xmlns.oracle.com/pcbpel/adapter/db/XXOM/XX_OM_GLOBAL_EXCEPTION_PKG/INSERT_EXCEPTION/"
         xmlns:client="http://xmlns.oracle.com/SendNowDocsMsgProcess"
         xmlns:ns6="http://xmlns.oracle.com/SendSalesOrderInfo"
         xmlns:ns11="http://xmlns.oracle.com/pcbpel/adapter/aq/outbound/"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ehdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions"
         xmlns:ns3="http://xmlns.oracle.com/UpdateSuccessAckProcess"
         xmlns:ns14="http://xmlns.oracle.com/pcbpel/adapter/db/APPS/XX_OM_DPS_APPS_INIT_PKG/DPS_APPS_INIT/"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:ns8="http://xmlns.oracle.com/ODErrorLogger">
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="client" partnerLinkType="client:SendNowDocsMsgProcess"
                 myRole="SendNowDocsMsgProcessProvider"/>
    <partnerLink name="ProcessNowDocsReceive"
                 partnerRole="ProcessNowDocsReceiveProvider"
                 partnerLinkType="ns1:ProcessNowDocsReceive"/>
    <partnerLink name="UpdateSuccessAckProcess"
                 partnerRole="UpdateSuccessAckProcessProvider"
                 partnerLinkType="ns3:UpdateSuccessAckProcess"/>
    <partnerLink name="DBErrorWrite" partnerRole="DBErrorWrite_role"
                 partnerLinkType="ns4:DBErrorWrite_plt"/>
    <partnerLink name="ODErrorLogger" partnerRole="ODErrorLoggerProvider"
                 partnerLinkType="ns8:ODErrorLogger"/>
    <partnerLink name="EnqueueMessage" partnerRole="Enqueue_role"
                 partnerLinkType="ns9:Enqueue_plt"/>
    <partnerLink name="AppsInitialize" partnerRole="AppsInitialize_role"
                 partnerLinkType="ns13:AppsInitialize_plt"/>
  </partnerLinks>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable"
              messageType="client:SendNowDocsMsgProcessRequestMessage"/>
    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable"
              messageType="client:SendNowDocsMsgProcessResponseMessage"/>
    <variable name="InvokeNowDocsIn"
              messageType="ns1:ProcessNowDocsReceiveRequestMessage"/>
    <variable name="InvokeNowDocsOut"
              messageType="ns1:ProcessNowDocsReceiveResponseMessage"/>
    <variable name="InvokeSuccessAckIn"
              messageType="ns3:UpdateSuccessAckProcessRequestMessage"/>
    <variable name="InvokeSuccessAckOut"
              messageType="ns3:UpdateSuccessAckProcessResponseMessage"/>
    <variable name="InvokeHeader"
              element="ns6:SendSalesOrderInfoProcessRequest"/>
    <variable name="InvokeCatchAllErrorLoggerIn"
              messageType="ns8:ODErrorLoggerRequestMessage"/>
    <variable name="InvokeBindErrorLoggerIn"
              messageType="ns8:ODErrorLoggerRequestMessage"/>
    <variable name="InvokeRemErrorLoggerIn"
              messageType="ns8:ODErrorLoggerRequestMessage"/>
    <variable name="RemoteFaultVar" messageType="bpelx:RuntimeFaultMessage"/>
    <variable name="BindingFaultVar" messageType="bpelx:RuntimeFaultMessage"/>
    <variable name="EnqueueHeaderVar" messageType="ns11:Header"/>
    <variable name="ReplyClientRemoteOut"
              messageType="client:SendNowDocsMsgProcessResponseMessage"/>
    <variable name="ReplyClientBindOut"
              messageType="client:SendNowDocsMsgProcessResponseMessage"/>
    <variable name="ReplyClientCatchAllOut"
              messageType="client:SendNowDocsMsgProcessResponseMessage"/>
    <variable name="InvokeRemEnqueueIn" messageType="ns9:CreateSalesOrder_msg"/>
    <variable name="InvokeBindEnqueueIn"
              messageType="ns9:CreateSalesOrder_msg"/>
    <variable name="InvokeCatchAllEnqueueIn"
              messageType="ns9:CreateSalesOrder_msg"/>
    <variable name="InvokeErrorWriteIn" messageType="ns4:args_in_msg"/>
    <variable name="InvokeErrorWriteOut" messageType="ns4:args_out_msg"/>
    <variable name="InvokeAppsInitIn" messageType="ns13:args_in_msg"/>
    <variable name="InvokeAppsInitOut" messageType="ns13:args_out_msg"/>
    <variable name="activityNameVar" type="xsd:string"/>
  </variables>
  <faultHandlers>
    <catch faultName="bpelx:remoteFault" faultVariable="RemoteFaultVar">
      <sequence name="SequenceRemoteFault">
        <assign name="AssignRemEnqueueMsg">
          <bpelx:annotation>
            <bpelx:documentation>Assigns required exception variables to be
                                 logged into ErrorLogger</bpelx:documentation>
          </bpelx:annotation>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/ns2:CreateSalesOrder"/>
            <to variable="InvokeRemEnqueueIn" part="CreateSalesOrder"
                query="/ns2:CreateSalesOrder"/>
          </copy>
          <copy>
            <from expression="ora:getProcessId()"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:BusinessProcessName"/>
          </copy>
          <copy>
            <from expression="ora:getDomainId()"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:BusinessProcessDomain"/>
          </copy>
          <copy>
            <from variable="RemoteFaultVar" part="code"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorCode"/>
          </copy>
          <copy>
            <from variable="RemoteFaultVar" part="detail"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorDescription"/>
          </copy>
          <copy>
            <from variable="RemoteFaultVar" part="detail"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorText"/>
          </copy>
          <copy>
            <from expression="'Fatal'"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorSeverity"/>
          </copy>
          <copy>
            <from expression="ora:getCurrentDateTime()"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorDateTime"/>
          </copy>
          <copy>
            <from expression="ora:getCurrentDateTime()"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:MessageDetails/ns10:MessageDateTime"/>
          </copy>
          <copy>
            <from expression="ids:getDefaultRealmName()"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:SystemName"/>
          </copy>
          <copy>
            <from expression="ora:generateGUID()"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:BusinessProcessId"/>
          </copy>
          <copy>
            <from variable="activityNameVar"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:BusinessProcessStep"/>
          </copy>
          <copy>
            <from expression="ora:getContentAsString(bpws:getVariableData('inputVariable','payload','/ns2:CreateSalesOrder'))"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:MessageDetails/ns10:MessageData"/>
          </copy>
          <copy>
            <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/EnqueueDelay")'/>
            <to variable="EnqueueHeaderVar" part="Header"
                query="/ns11:Header/ns11:Delay"/>
          </copy>
          <copy>
            <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/ReplyException")'/>
            <to variable="ReplyClientRemoteOut" part="payload"
                query="/client:SendNowDocsMsgProcessProcessResponse/client:result"/>
          </copy>
        </assign>
        <invoke name="InvokeRemErrorLogger" partnerLink="ODErrorLogger"
                portType="ns8:ODErrorLogger" operation="initiate"
                inputVariable="InvokeRemErrorLoggerIn">
          <bpelx:annotation>
            <bpelx:documentation>Invokes ODErrorLogger to log exceptions</bpelx:documentation>
          </bpelx:annotation>
        </invoke>
        <invoke name="InvokeRemEnqueue" inputVariable="InvokeRemEnqueueIn"
                partnerLink="EnqueueMessage" portType="ns9:Enqueue_ptt"
                operation="Enqueue"
                bpelx:inputHeaderVariable="EnqueueHeaderVar">
          <bpelx:annotation>
            <bpelx:documentation>Invokes the AQ adapter to enqueue the message</bpelx:documentation>
          </bpelx:annotation>
        </invoke>
        <reply name="ReplyClientRemote" partnerLink="client"
               portType="client:SendNowDocsMsgProcess" operation="process"
               variable="ReplyClientRemoteOut">
          <bpelx:annotation>
            <bpelx:documentation>Replying back the client</bpelx:documentation>
          </bpelx:annotation>
        </reply>
      </sequence>
    </catch>
    <catch faultName="bpelx:bindingFault" faultVariable="BindingFaultVar">
      <sequence name="SequenceBindingFault">
        <assign name="AssignBindEnqueueMsg">
          <bpelx:annotation>
            <bpelx:documentation>Assigns required exception variables to be
                                 logged into ErrorLogger</bpelx:documentation>
          </bpelx:annotation>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/ns2:CreateSalesOrder"/>
            <to variable="InvokeBindEnqueueIn" part="CreateSalesOrder"/>
          </copy>
          <copy>
            <from expression="ora:getProcessId()"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:BusinessProcessName"/>
          </copy>
          <copy>
            <from expression="ora:getDomainId()"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:BusinessProcessDomain"/>
          </copy>
          <copy>
            <from variable="RemoteFaultVar" part="code"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorCode"/>
          </copy>
          <copy>
            <from variable="RemoteFaultVar" part="detail"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorDescription"/>
          </copy>
          <copy>
            <from variable="RemoteFaultVar" part="detail"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorText"/>
          </copy>
          <copy>
            <from expression="'Fatal'"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorSeverity"/>
          </copy>
          <copy>
            <from expression="ora:getCurrentDateTime()"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorDateTime"/>
          </copy>
          <copy>
            <from expression="ora:getCurrentDateTime()"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:MessageDetails/ns10:MessageDateTime"/>
          </copy>
          <copy>
            <from expression="ids:getDefaultRealmName()"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:SystemName"/>
          </copy>
          <copy>
            <from expression="ora:generateGUID()"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:BusinessProcessId"/>
          </copy>
          <copy>
            <from variable="activityNameVar"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:BusinessProcessStep"/>
          </copy>
          <copy>
            <from expression="ora:getContentAsString(bpws:getVariableData('inputVariable','payload','/ns2:CreateSalesOrder'))"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:MessageDetails/ns10:MessageData"/>
          </copy>
          <copy>
            <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/EnqueueDelay")'/>
            <to variable="EnqueueHeaderVar" part="Header"
                query="/ns11:Header/ns11:Delay"/>
          </copy>
          <copy>
            <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/ReplyException")'/>
            <to variable="ReplyClientBindOut" part="payload"
                query="/client:SendNowDocsMsgProcessProcessResponse/client:result"/>
          </copy>
        </assign>
        <invoke name="InvokeBindErrorLogger" partnerLink="ODErrorLogger"
                portType="ns8:ODErrorLogger" operation="initiate"
                inputVariable="InvokeBindErrorLoggerIn">
          <bpelx:annotation>
            <bpelx:documentation>Invokes ODErrorLogger to log exceptions</bpelx:documentation>
          </bpelx:annotation>
        </invoke>
        <invoke name="InvokeBindEnqueue" inputVariable="InvokeBindEnqueueIn"
                partnerLink="EnqueueMessage" portType="ns9:Enqueue_ptt"
                operation="Enqueue"
                bpelx:inputHeaderVariable="EnqueueHeaderVar">
          <bpelx:annotation>
            <bpelx:documentation>Invokes the AQ adapter to enqueue the message</bpelx:documentation>
          </bpelx:annotation>
        </invoke>
        <reply name="ReplyClientBind" partnerLink="client"
               portType="client:SendNowDocsMsgProcess" operation="process"
               variable="ReplyClientBindOut">
          <bpelx:annotation>
            <bpelx:documentation>Replying back the client</bpelx:documentation>
          </bpelx:annotation>
        </reply>
      </sequence>
    </catch>
    <catchAll>
      <sequence name="SequenceCatchAll">
        <assign name="AssignCatchAllEnqueueMsg">
          <bpelx:annotation>
            <bpelx:documentation>Assigns required exception variables to be
                                 logged into ErrorLogger</bpelx:documentation>
          </bpelx:annotation>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/ns2:CreateSalesOrder"/>
            <to variable="InvokeCatchAllEnqueueIn" part="CreateSalesOrder"/>
          </copy>
          <copy>
            <from expression="ora:getProcessId()"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:BusinessProcessName"/>
          </copy>
          <copy>
            <from expression="ora:getDomainId()"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:BusinessProcessDomain"/>
          </copy>
          <copy>
            <from expression="'Fatal'"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorSeverity"/>
          </copy>
          <copy>
            <from expression="ora:getCurrentDateTime()"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorDateTime"/>
          </copy>
          <copy>
            <from expression="ora:getCurrentDateTime()"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:MessageDetails/ns10:MessageDateTime"/>
          </copy>
          <copy>
            <from expression="ids:getDefaultRealmName()"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:SystemName"/>
          </copy>
          <copy>
            <from expression="ora:generateGUID()"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:BusinessProcessId"/>
          </copy>
          <copy>
            <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/EnqueueDelay")'/>
            <to variable="EnqueueHeaderVar" part="Header"
                query="/ns11:Header/ns11:Delay"/>
          </copy>
          <copy>
            <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/ReplyException")'/>
            <to variable="ReplyClientCatchAllOut" part="payload"
                query="/client:SendNowDocsMsgProcessProcessResponse/client:result"/>
          </copy>
          <copy>
            <from expression="concat('Error Occurred In This Step',ora:getContentAsString(bpws:getVariableData('activityNameVar')))"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorDescription"/>
          </copy>
          <copy>
            <from expression="concat('Error Occurred In This Step',ora:getContentAsString(bpws:getVariableData('activityNameVar')))"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorText"/>
          </copy>
          <copy>
            <from expression="concat('Error Occurred In This Step',ora:getContentAsString(bpws:getVariableData('activityNameVar')))"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ErrorDetails/ns10:ErrorCode"/>
          </copy>
          <copy>
            <from variable="activityNameVar"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:ProcessInfo/ns10:BusinessProcessStep"/>
          </copy>
          <copy>
            <from expression="ora:getContentAsString(bpws:getVariableData('inputVariable','payload','/ns2:CreateSalesOrder'))"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns10:ErrorData/ns10:MessageDetails/ns10:MessageData"/>
          </copy>
        </assign>
        <invoke name="InvokeCatchAllErrorLogger" partnerLink="ODErrorLogger"
                portType="ns8:ODErrorLogger" operation="initiate"
                inputVariable="InvokeCatchAllErrorLoggerIn">
          <bpelx:annotation>
            <bpelx:documentation>Invokes ODErrorLogger to log exceptions</bpelx:documentation>
          </bpelx:annotation>
        </invoke>
        <invoke name="InvokeCatchAllEnqueue"
                inputVariable="InvokeCatchAllEnqueueIn"
                partnerLink="EnqueueMessage" portType="ns9:Enqueue_ptt"
                operation="Enqueue"
                bpelx:inputHeaderVariable="EnqueueHeaderVar">
          <bpelx:annotation>
            <bpelx:documentation>Invokes the AQ adapter to enqueue the message</bpelx:documentation>
          </bpelx:annotation>
        </invoke>
        <reply name="ReplyClientCatchAll" partnerLink="client"
               portType="client:SendNowDocsMsgProcess" operation="process"
               variable="ReplyClientCatchAllOut">
          <bpelx:annotation>
            <bpelx:documentation>Replying back the client</bpelx:documentation>
          </bpelx:annotation>
        </reply>
      </sequence>
    </catchAll>
  </faultHandlers>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">
    <!-- Receive input from requestor. (Note: This maps to operation defined in SendNowDocsMsgProcess.wsdl) -->
    <receive name="receiveInput" partnerLink="client"
             portType="client:SendNowDocsMsgProcess" operation="process"
             variable="inputVariable" createInstance="yes">
      <bpelx:annotation>
        <bpelx:documentation>Receives input to invoke the NowDocs sub process</bpelx:documentation>
      </bpelx:annotation>
    </receive>
    <!-- Generate reply to synchronous request -->
    <assign name="AssignNowDocsInVar">
      <bpelx:annotation>
        <bpelx:documentation>Assigns in variable for NowDocs sub process</bpelx:documentation>
      </bpelx:annotation>
      <copy>
        <from variable="inputVariable" part="payload"
              query="/ns2:CreateSalesOrder"/>
        <to variable="InvokeNowDocsIn" part="payload"
            query="/ns2:CreateSalesOrder"/>
      </copy>
      <copy>
        <from expression="'Invoking the Process Nowdocs receive'"/>
        <to variable="activityNameVar"/>
      </copy>
    </assign>
    <invoke name="InvokeNowDocs" partnerLink="ProcessNowDocsReceive"
            portType="ns1:ProcessNowDocsReceive" operation="process"
            inputVariable="InvokeNowDocsIn" outputVariable="InvokeNowDocsOut">
      <bpelx:annotation>
        <bpelx:documentation>Invokes the NowDocs subprocess passing required
                             variables</bpelx:documentation>
      </bpelx:annotation>
    </invoke>
    <switch name="CheckNowDocsResponse">
      <case condition="bpws:getVariableData('InvokeNowDocsOut','payload','/ns1:ProcessNowDocsReceiveProcessResponse/ns1:result') = 'Ok'">
        <sequence name="SequenceOk">
          <assign name="AssignActivityName">
            <copy>
              <from expression="'Transforming the Parent line ID'"/>
              <to variable="activityNameVar"/>
            </copy>
          </assign>
          <assign name="TransformParentLineID">
            <bpelx:annotation>
              <bpelx:pattern>transformation</bpelx:pattern>
            </bpelx:annotation>
            <copy>
              <from expression="ora:processXSLT('mapper.xsl',bpws:getVariableData('InvokeNowDocsIn','payload'))"/>
              <to variable="InvokeSuccessAckIn" part="payload"/>
            </copy>
          </assign>
          <invoke name="InvokeSuccessAck" partnerLink="UpdateSuccessAckProcess"
                  portType="ns3:UpdateSuccessAckProcess" operation="process"
                  inputVariable="InvokeSuccessAckIn"
                  outputVariable="InvokeSuccessAckOut"
                  bpelx:inputHeaderVariable="InvokeHeader">
            <bpelx:annotation>
              <bpelx:documentation>Invokes the Update sub process</bpelx:documentation>
            </bpelx:annotation>
          </invoke>
        </sequence>
      </case>
      <otherwise>
        <sequence name="SequenceOtherwise">
          <assign name="AssignErrVar">
            <copy>
              <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/CreateOrder/ExceptionHeader")'/>
              <to variable="InvokeErrorWriteIn" part="InputParameters"
                  query="/ns15:InputParameters/P_REPORT_EXCEPTION/P_EXCEPTION_HEADER"/>
            </copy>
            <copy>
              <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/CreateOrder/TrackCode")'/>
              <to variable="InvokeErrorWriteIn" part="InputParameters"
                  query="/ns15:InputParameters/P_REPORT_EXCEPTION/P_TRACK_CODE"/>
            </copy>
            <copy>
              <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/CreateOrder/SolutionDomain")'/>
              <to variable="InvokeErrorWriteIn" part="InputParameters"
                  query="/ns15:InputParameters/P_REPORT_EXCEPTION/P_SOLUTION_DOMAIN"/>
            </copy>
            <copy>
              <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/CreateOrder/Function")'/>
              <to variable="InvokeErrorWriteIn" part="InputParameters"
                  query="/ns15:InputParameters/P_REPORT_EXCEPTION/P_FUNCTION"/>
            </copy>
            <copy>
              <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/CreateOrder/ErrorCode")'/>
              <to variable="InvokeErrorWriteIn" part="InputParameters"
                  query="/ns15:InputParameters/P_REPORT_EXCEPTION/P_ERROR_CODE"/>
            </copy>
            <copy>
              <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/CreateOrder/ErrorDescription")'/>
              <to variable="InvokeErrorWriteIn" part="InputParameters"
                  query="/ns15:InputParameters/P_REPORT_EXCEPTION/P_ERROR_DESCRIPTION"/>
            </copy>
            <copy>
              <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/CreateOrder/EntityRef")'/>
              <to variable="InvokeErrorWriteIn" part="InputParameters"
                  query="/ns15:InputParameters/P_REPORT_EXCEPTION/P_ENTITY_REF"/>
            </copy>
            <copy>
              <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/CreateOrder/EntityRefID")'/>
              <to variable="InvokeErrorWriteIn" part="InputParameters"
                  query="/ns15:InputParameters/P_REPORT_EXCEPTION/P_ENTITY_REF_ID"/>
            </copy>
            <copy>
              <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/UserName")'/>
              <to variable="InvokeAppsInitIn" part="InputParameters"
                  query="/ns14:InputParameters/P_USER_NAME"/>
            </copy>
            <copy>
              <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/RespName")'/>
              <to variable="InvokeAppsInitIn" part="InputParameters"
                  query="/ns14:InputParameters/P_RESP_NAME"/>
            </copy>
            <copy>
              <from expression="'Invoking AppsInit'"/>
              <to variable="activityNameVar"/>
            </copy>
          </assign>
          <invoke name="InvokeAppsInit" partnerLink="AppsInitialize"
                  portType="ns13:AppsInitialize_ptt" operation="AppsInitialize"
                  inputVariable="InvokeAppsInitIn"
                  outputVariable="InvokeAppsInitOut"/>
          <invoke name="InvokeErrorWrite" inputVariable="InvokeErrorWriteIn"
                  outputVariable="InvokeErrorWriteOut"
                  partnerLink="DBErrorWrite" portType="ns4:DBErrorWrite_ptt"
                  operation="DBErrorWrite">
            <bpelx:annotation>
              <bpelx:documentation>Invokes the global exception procedure to log
                                   error</bpelx:documentation>
            </bpelx:annotation>
          </invoke>
        </sequence>
      </otherwise>
    </switch>
    <assign name="AssignActivityname">
      <copy>
        <from expression="'Replying back'"/>
        <to variable="activityNameVar"/>
      </copy>
    </assign>
    <reply name="replyOutput" partnerLink="client"
           portType="client:SendNowDocsMsgProcess" operation="process"
           variable="outputVariable"/>
  </sequence>
</process>