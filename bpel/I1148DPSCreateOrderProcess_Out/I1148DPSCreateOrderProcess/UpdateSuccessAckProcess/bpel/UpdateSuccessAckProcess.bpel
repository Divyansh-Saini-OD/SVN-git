<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Tue May 22 09:59:01 IST 2007
  Author:  dharma
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="UpdateSuccessAckProcess"
         targetNamespace="http://xmlns.oracle.com/UpdateSuccessAckProcess"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:ns4="http://xmlns.oracle.com/ODErrorLogger"
         xmlns:ns7="http://xmlns.oracle.com/pcbpel/adapter/aq/outbound/"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns5="ODError"
         xmlns:client="http://xmlns.oracle.com/UpdateSuccessAckProcess"
         xmlns:ns6="http://xmlns.oracle.com/pcbpel/adapter/opaque/"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ns1="http://xmlns.oracle.com/pcbpel/adapter/db/DBSuccessAck/"
         xmlns:ehdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions"
         xmlns:ns3="http://xmlns.oracle.com/pcbpel/adapter/aq/EnqueueMessage/"
         xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/db/APPS/XX_OM_DPSINTERFACE_PKG/UPDATE_ACKNOWLEDGEMENT/"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc">
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="client" partnerLinkType="client:UpdateSuccessAckProcess"
                 myRole="UpdateSuccessAckProcessProvider"/>
    <partnerLink name="DBSuccessAck" partnerRole="DBSuccessAck_role"
                 partnerLinkType="ns1:DBSuccessAck_plt"/>
    <partnerLink name="EnqueueMessage" partnerRole="Enqueue_role"
                 partnerLinkType="ns3:Enqueue_plt"/>
    <partnerLink name="ODErrorLogger" partnerRole="ODErrorLoggerProvider"
                 partnerLinkType="ns4:ODErrorLogger"/>
  </partnerLinks>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable"
              messageType="client:UpdateSuccessAckProcessRequestMessage"/>
    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable"
              messageType="client:UpdateSuccessAckProcessResponseMessage"/>
    <variable name="InvokeSuccessWriteIn" messageType="ns1:args_in_msg"/>
    <variable name="InvokeSuccessWriteOut" messageType="ns1:args_out_msg"/>
    <variable name="InvokeCatchAllErrorLoggerIn"
              messageType="ns4:ODErrorLoggerRequestMessage"/>
    <variable name="InvokeBindErrorLoggerIn"
              messageType="ns4:ODErrorLoggerRequestMessage"/>
    <variable name="InvokeRemErrorLoggerIn"
              messageType="ns4:ODErrorLoggerRequestMessage"/>
    <variable name="RemoteFaultVar" messageType="bpelx:RuntimeFaultMessage"/>
    <variable name="BindingFaultVar" messageType="bpelx:RuntimeFaultMessage"/>
    <variable name="EnqueueHeaderVar" messageType="ns3:Header_msg"/>
    <variable name="ReplyClientRemoteOut"
              messageType="client:UpdateSuccessAckProcessResponseMessage"/>
    <variable name="ReplyClientBindOut"
              messageType="client:UpdateSuccessAckProcessResponseMessage"/>
    <variable name="ReplyClientCatchAllOut"
              messageType="client:UpdateSuccessAckProcessResponseMessage"/>
    <variable name="InvokeRemEnqueueIn"
              messageType="ns3:UpdateSuccessAckProcessProcessRequest_msg"/>
    <variable name="InvokeRemEnqueueOut"
              messageType="ns3:UpdateSuccessAckProcessProcessRequest_msg"/>
    <variable name="InvokeCatchAllEnqueueIn"
              messageType="ns3:UpdateSuccessAckProcessProcessRequest_msg"/>
    <variable name="InvokeBindEnqueueIn"
              messageType="ns3:UpdateSuccessAckProcessProcessRequest_msg"/>
    <variable name="ActivityNameVar" type="xsd:string"/>
  </variables>
  <faultHandlers>
    <catch faultName="bpelx:remoteFault" faultVariable="RemoteFaultVar">
      <sequence name="SequenceRemoteFault">
        <assign name="AssignRemEnqueueMsg">
          <bpelx:annotation>
            <bpelx:documentation>Assigns required exception variables to be
                                 logged into ErrorLogger</bpelx:documentation>
          </bpelx:annotation>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/client:UpdateSuccessAckProcessProcessRequest/client:input"/>
            <to part="UpdateSuccessAckProcessProcessRequest"
                query="/client:UpdateSuccessAckProcessProcessRequest/client:input"
                variable="InvokeRemEnqueueIn"/>
          </copy>
          <copy>
            <from expression="ora:getProcessId()"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessName"/>
          </copy>
          <copy>
            <from expression="ora:getDomainId()"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessDomain"/>
          </copy>
          <copy>
            <from variable="RemoteFaultVar" part="code"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorCode"/>
          </copy>
          <copy>
            <from variable="RemoteFaultVar" part="detail"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorDescription"/>
          </copy>
          <copy>
            <from variable="RemoteFaultVar" part="detail"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorText"/>
          </copy>
          <copy>
            <from expression="'Fatal'"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorSeverity"/>
          </copy>
          <copy>
            <from expression="ora:getCurrentDateTime()"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorDateTime"/>
          </copy>
          <copy>
            <from expression="ora:getCurrentDateTime()"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:MessageDetails/ns5:MessageDateTime"/>
          </copy>
          <copy>
            <from expression="ids:getDefaultRealmName()"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:SystemName"/>
          </copy>
          <copy>
            <from expression="ora:generateGUID()"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessId"/>
          </copy>
          <copy>
            <from variable="ActivityNameVar"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessStep"/>
          </copy>
          <copy>
            <from expression="ora:getContentAsString(bpws:getVariableData('inputVariable','payload','/client:UpdateSuccessAckProcessProcessRequest/client:input'))"/>
            <to variable="InvokeRemErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:MessageDetails/ns5:MessageData"/>
          </copy>
          <copy>
            <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/EnqueueDelay")'/>
            <to variable="EnqueueHeaderVar" part="Header"
                query="/ns3:Header/ns3:QueueHeader/ns7:Delay"/>
          </copy>
          <copy>
            <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/ReplyException")'/>
            <to variable="ReplyClientRemoteOut" part="payload"
                query="/client:UpdateSuccessAckProcessProcessResponse/client:result"/>
          </copy>
        </assign>
        <invoke name="InvokeRemErrorLogger" partnerLink="ODErrorLogger"
                portType="ns4:ODErrorLogger" operation="initiate"
                inputVariable="InvokeRemErrorLoggerIn">
          <bpelx:annotation>
            <bpelx:documentation>Invokes ODErrorLogger to log exceptions</bpelx:documentation>
          </bpelx:annotation>
        </invoke>
        <invoke name="InvokeRemEnqueue" partnerLink="EnqueueMessage"
                portType="ns3:Enqueue_ptt" operation="Enqueue"
                inputVariable="InvokeRemEnqueueIn">
          <bpelx:annotation>
            <bpelx:documentation>Invokes the AQ adapter to enqueue the message</bpelx:documentation>
          </bpelx:annotation>
        </invoke>
        <reply name="ReplyClientRemote" partnerLink="client"
               portType="client:UpdateSuccessAckProcess" operation="process"
               variable="ReplyClientRemoteOut">
          <bpelx:annotation>
            <bpelx:documentation>Replying back the client</bpelx:documentation>
          </bpelx:annotation>
        </reply>
      </sequence>
    </catch>
    <catch faultName="bpelx:bindingFault" faultVariable="BindingFaultVar">
      <sequence name="SequenceBindingFault">
        <assign name="AssignBindEnqueueMsg">
          <bpelx:annotation>
            <bpelx:documentation>Assigns required exception variables to be
                                 logged into ErrorLogger</bpelx:documentation>
          </bpelx:annotation>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/client:UpdateSuccessAckProcessProcessRequest/client:input"/>
            <to part="UpdateSuccessAckProcessProcessRequest"
                query="/client:UpdateSuccessAckProcessProcessRequest/client:input"
                variable="InvokeBindEnqueueIn"/>
          </copy>
          <copy>
            <from expression="ora:getProcessId()"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessName"/>
          </copy>
          <copy>
            <from expression="ora:getDomainId()"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessDomain"/>
          </copy>
          <copy>
            <from variable="RemoteFaultVar" part="code"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorCode"/>
          </copy>
          <copy>
            <from variable="RemoteFaultVar" part="detail"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorDescription"/>
          </copy>
          <copy>
            <from variable="RemoteFaultVar" part="detail"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorText"/>
          </copy>
          <copy>
            <from expression="'Fatal'"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorSeverity"/>
          </copy>
          <copy>
            <from expression="ora:getCurrentDateTime()"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorDateTime"/>
          </copy>
          <copy>
            <from expression="ora:getCurrentDateTime()"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:MessageDetails/ns5:MessageDateTime"/>
          </copy>
          <copy>
            <from expression="ids:getDefaultRealmName()"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:SystemName"/>
          </copy>
          <copy>
            <from expression="ora:generateGUID()"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessId"/>
          </copy>
          <copy>
            <from variable="ActivityNameVar"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessStep"/>
          </copy>
          <copy>
            <from expression="ora:getContentAsString(bpws:getVariableData('inputVariable','payload','/client:UpdateSuccessAckProcessProcessRequest/client:input'))"/>
            <to variable="InvokeBindErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:MessageDetails/ns5:MessageData"/>
          </copy>
          <copy>
            <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/EnqueueDelay")'/>
            <to variable="EnqueueHeaderVar" part="Header"
                query="/ns3:Header/ns3:QueueHeader/ns7:Delay"/>
          </copy>
          <copy>
            <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/ReplyException")'/>
            <to variable="ReplyClientBindOut" part="payload"
                query="/client:UpdateSuccessAckProcessProcessResponse/client:result"/>
          </copy>
        </assign>
        <invoke name="InvokeBindErrorLogger" partnerLink="ODErrorLogger"
                portType="ns4:ODErrorLogger" operation="initiate"
                inputVariable="InvokeBindErrorLoggerIn">
          <bpelx:annotation>
            <bpelx:documentation>Invokes ODErrorLogger to log exceptions</bpelx:documentation>
          </bpelx:annotation>
        </invoke>
        <invoke name="InvokeBindEnqueue" partnerLink="EnqueueMessage"
                portType="ns3:Enqueue_ptt" operation="Enqueue"
                inputVariable="InvokeBindEnqueueIn">
          <bpelx:annotation>
            <bpelx:documentation>Invokes the AQ adapter to enqueue the message</bpelx:documentation>
          </bpelx:annotation>
        </invoke>
        <reply name="ReplyClientBind" partnerLink="client"
               portType="client:UpdateSuccessAckProcess" operation="process"
               variable="ReplyClientBindOut">
          <bpelx:annotation>
            <bpelx:documentation>Replying back the client</bpelx:documentation>
          </bpelx:annotation>
        </reply>
      </sequence>
    </catch>
    <catchAll>
      <sequence name="SequenceCatchAll">
        <assign name="AssignCatchAllEnqueueMsg">
          <bpelx:annotation>
            <bpelx:documentation>Assigns required exception variables to be
                                 logged into ErrorLogger</bpelx:documentation>
          </bpelx:annotation>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/client:UpdateSuccessAckProcessProcessRequest/client:input"/>
            <to part="UpdateSuccessAckProcessProcessRequest"
                query="/client:UpdateSuccessAckProcessProcessRequest/client:input"
                variable="InvokeCatchAllEnqueueIn"/>
          </copy>
          <copy>
            <from expression="ora:getProcessId()"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessName"/>
          </copy>
          <copy>
            <from expression="ora:getDomainId()"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessDomain"/>
          </copy>
          <copy>
            <from expression="'Fatal'"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorSeverity"/>
          </copy>
          <copy>
            <from expression="ora:getCurrentDateTime()"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorDateTime"/>
          </copy>
          <copy>
            <from expression="ora:getCurrentDateTime()"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:MessageDetails/ns5:MessageDateTime"/>
          </copy>
          <copy>
            <from expression="ids:getDefaultRealmName()"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:SystemName"/>
          </copy>
          <copy>
            <from expression="ora:generateGUID()"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessId"/>
          </copy>
          <copy>
            <from variable="ActivityNameVar"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ProcessInfo/ns5:BusinessProcessStep"/>
          </copy>
          <copy>
            <from expression="ora:getContentAsString(bpws:getVariableData('inputVariable','payload','/client:UpdateSuccessAckProcessProcessRequest/client:input'))"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:MessageDetails/ns5:MessageData"/>
          </copy>
          <copy>
            <from expression="concat('Error Occurred In This Step',ora:getContentAsString(bpws:getVariableData('ActivityNameVar')))"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorDescription"/>
          </copy>
          <copy>
            <from expression="concat('Error Occurred In This Step',ora:getContentAsString(bpws:getVariableData('ActivityNameVar')))"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorCode"/>
          </copy>
          <copy>
            <from expression="concat('Error Occurred In This Step',ora:getContentAsString(bpws:getVariableData('ActivityNameVar')))"/>
            <to variable="InvokeCatchAllErrorLoggerIn" part="payload"
                query="/ns5:ErrorData/ns5:ErrorDetails/ns5:ErrorText"/>
          </copy>
          <copy>
            <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/EnqueueDelay")'/>
            <to variable="EnqueueHeaderVar" part="Header"
                query="/ns3:Header/ns3:QueueHeader/ns7:Delay"/>
          </copy>
          <copy>
            <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/ReplyException")'/>
            <to variable="ReplyClientCatchAllOut" part="payload"
                query="/client:UpdateSuccessAckProcessProcessResponse/client:result"/>
          </copy>
        </assign>
        <invoke name="InvokeCatchAllErrorLogger" partnerLink="ODErrorLogger"
                portType="ns4:ODErrorLogger" operation="initiate"
                inputVariable="InvokeCatchAllErrorLoggerIn">
          <bpelx:annotation>
            <bpelx:documentation>Invokes ODErrorLogger to log exceptions</bpelx:documentation>
          </bpelx:annotation>
        </invoke>
        <invoke name="InvokeCatchAllEnqueue" partnerLink="EnqueueMessage"
                portType="ns3:Enqueue_ptt" operation="Enqueue"
                inputVariable="InvokeCatchAllEnqueueIn"
                bpelx:inputHeaderVariable="EnqueueHeaderVar">
          <bpelx:annotation>
            <bpelx:documentation>Invokes the AQ adapter to enqueue the message</bpelx:documentation>
          </bpelx:annotation>
        </invoke>
        <reply name="ReplyClientCatchAll" partnerLink="client"
               portType="client:UpdateSuccessAckProcess" operation="process"
               variable="ReplyClientCatchAllOut">
          <bpelx:annotation>
            <bpelx:documentation>Replying back the client</bpelx:documentation>
          </bpelx:annotation>
        </reply>
      </sequence>
    </catchAll>
  </faultHandlers>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">
    <!-- Receive input from requestor. (Note: This maps to operation defined in UpdateSuccessAckProcess.wsdl) -->
    <receive name="receiveInput" partnerLink="client"
             portType="client:UpdateSuccessAckProcess" operation="process"
             variable="inputVariable" createInstance="yes">
      <bpelx:annotation>
        <bpelx:documentation>Receives input to invoke the DB Adapter</bpelx:documentation>
      </bpelx:annotation>
    </receive>
    <!-- Generate reply to synchronous request -->
    <assign name="AssignSuccessAck">
      <bpelx:annotation>
        <bpelx:documentation>Assigns input variables to call procedure</bpelx:documentation>
      </bpelx:annotation>
      <copy>
        <from variable="inputVariable" part="payload"
              query="/client:UpdateSuccessAckProcessProcessRequest/client:input"/>
        <to variable="InvokeSuccessWriteIn" part="InputParameters"
            query="/ns2:InputParameters/P_PARENT_LINE_ID"/>
      </copy>
      <copy>
        <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/UserName")'/>
        <to variable="InvokeSuccessWriteIn" part="InputParameters"
            query="/ns2:InputParameters/P_USER_NAME"/>
      </copy>
      <copy>
        <from expression='ora:doc("${server_url}/xmllib/otc/GlobalParameters.xml","/GlobalParameters/OTC/DPS/RespName")'/>
        <to variable="InvokeSuccessWriteIn" part="InputParameters"
            query="/ns2:InputParameters/P_RESP_NAME"/>
      </copy>
      <copy>
        <from expression="'Invoking the Success Write'"/>
        <to variable="ActivityNameVar"/>
      </copy>
    </assign>
    <invoke name="InvokeSuccessWrite" partnerLink="DBSuccessAck"
            portType="ns1:DBSuccessAck_ptt" operation="DBSuccessAck"
            inputVariable="InvokeSuccessWriteIn"
            outputVariable="InvokeSuccessWriteOut">
      <bpelx:annotation>
        <bpelx:documentation>Invokes the DB Adapter which calls the procedure</bpelx:documentation>
      </bpelx:annotation>
    </invoke>
    <assign name="AssignActivityName">
      <copy>
        <from expression="'Reply Back'"/>
        <to variable="ActivityNameVar"/>
      </copy>
    </assign>
    <reply name="replyOutput" partnerLink="client"
           portType="client:UpdateSuccessAckProcess" operation="process"
           variable="outputVariable">
      <bpelx:annotation>
        <bpelx:documentation>Replying back the client</bpelx:documentation>
      </bpelx:annotation>
    </reply>
  </sequence>
</process>