<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Wed Oct 07 15:15:42 EDT 2009
  Author:  cecilia-macean
  Purpose: Asynchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="SynchCurrencyExchangeRate"
         targetNamespace="http://xmlns.oracle.com/SynchCurrencyExchangeRate"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ns4="http://xmlns.oracle.com/GetCurrencyExchangeRate"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:ns16="http://xmlns.oracle.com/GetFiscalPeriodRates"
         xmlns:ns5="http://xmlns.oracle.com/ODErrorLogger"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:ns9="http://xmlns.oracle.com/pcbpel/adapter/db/GetUserID"
         xmlns:ns17="http://xmlns.oracle.com/BPELInvokeESP"
         xmlns:ns1="http://xmlns.oracle.com/pcbpel/adapter/apps/GL_DAILY_RATES_INTERFACE/"
         xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/apps/GL_DAILY_RATES_IMPORT_CP/"
         xmlns:ns15="http://xmlns.oracle.com/ConcurrentProgramStatus"
         xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:ns10="http://schemas.oracle.com/service/bpel/common"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:ns13="http://xmlns.oracle.com/ODTransactionLogger"
         xmlns:ns7="http://xmlns.oracle.com/pcbpel/adapter/appscontext/"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns12="http://xmlns.oracle.com/pcbpel/adapter/db/APPS/XX_BPEL_INTEGRATION_PKG/SUBMIT_CONCURRENT_PROGRAM/"
         xmlns:client="http://xmlns.oracle.com/SynchCurrencyExchangeRate"
         xmlns:ns6="ODError"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ns11="http://xmlns.oracle.com/pcbpel/adapter/db/InvokeConcurrentProgram/"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ehdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions"
         xmlns:ns14="http://xmlns.oracle.com/TransactionData"
         xmlns:ns3="http://xmlns.oracle.com/pcbpel/adapter/db/top/GLDAILYRATESINTERFACE"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:ns8="http://xmlns.oracle.com/pcbpel/adapter/db/GetUserID/">
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink name="client"
                     partnerLinkType="client:SynchCurrencyExchangeRate"
                     myRole="SynchCurrencyExchangeRateProvider"
                     partnerRole="SynchCurrencyExchangeRateRequester"/>
        <partnerLink name="GL_DAILY_RATES_INTERFACE"
                     partnerRole="GL_DAILY_RATES_INTERFACE_role"
                     partnerLinkType="ns1:GL_DAILY_RATES_INTERFACE_plt"/>
        <partnerLink myRole="ODErrorLoggerRequester" name="ODErrorLogger"
                     partnerRole="ODErrorLoggerProvider"
                     partnerLinkType="ns5:ODErrorLogger"/>
        <partnerLink name="GetUserID" partnerRole="GetUserID_role"
                     partnerLinkType="ns8:GetUserID_plt"/>
        <partnerLink name="InvokeConcurrentProgram"
                     partnerRole="InvokeConcurrentProgram_role"
                     partnerLinkType="ns11:InvokeConcurrentProgram_plt"/>
        <partnerLink myRole="ODTransactionLoggerRequester"
                     name="ODTransactionLogger"
                     partnerRole="ODTransactionLoggerProvider"
                     partnerLinkType="ns13:ODTransactionLogger"/>
        <partnerLink myRole="ConcurrentProgramStatusRequester"
                     name="ConcurrentProgramStatus"
                     partnerRole="ConcurrentProgramStatusProvider"
                     partnerLinkType="ns15:ConcurrentProgramStatus"/>
        <partnerLink name="GetFiscalPeriodRates"
                     partnerRole="GetFiscalPeriodRatesProvider"
                     partnerLinkType="ns16:GetFiscalPeriodRates"
                     myRole="GetFiscalPeriodRatesRequester"/>
        <partnerLink myRole="BPELInvokeESPRequester" name="BPELInvokeESP"
                     partnerRole="BPELInvokeESPProvider"
                     partnerLinkType="ns17:BPELInvokeESP"/>
    </partnerLinks>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        VARIABLES                                                        
        List of messages and XML documents used within this BPEL process 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <!-- Reference to the message that will be sent back to the requester during callback -->
        <variable name="inputVariable"
                  messageType="client:SynchCurrencyExchangeRateRequestMessage"/>
        <variable name="outputVariable"
                  messageType="client:SynchCurrencyExchangeRateResponseMessage"/>
        <variable name="DailyRatesInterfaceTableInsert_insert_InputVariable"
                  messageType="ns1:GlDailyRatesInterfaceCollection_msg"/>
        <variable name="requestingSystem" type="xsd:string"/>
        <variable name="startDateTime" type="xsd:string"/>
        <variable name="endDateTime" type="xsd:string"/>
        <variable name="ProcessHeader" type="xsd:string"/>
        <variable name="ErrorMessageText" type="xsd:string"/>
        <variable name="invkCatchAll_initiate"
                  messageType="ns5:ODErrorLoggerRequestMessage"/>
        <variable name="error" type="xsd:string"/>
        <variable name="InvalidParamsFaultVar"
                  messageType="bpelx:RuntimeFaultMessage"/>
        <variable name="userID" type="xsd:string"/>
        <variable name="GetUserID_GetUserID_InputVariable"
                  messageType="ns8:GetUserIDInput_msg"/>
        <variable name="GetUserID_OutputVariable"
                  messageType="ns8:GetUserIDOutputCollection_msg"/>
        <variable name="XSLT_Param" element="ns10:parameters"/>
        <variable name="InvokeDailyRatesImportCP_InvokeConcurrentProgram_InputVariable"
                  messageType="ns11:args_in_msg"/>
        <variable name="InvokeDailyRatesImportCP_InvokeConcurrentProgram_OutputVariable"
                  messageType="ns11:args_out_msg"/>
        <variable name="logTransactionInput"
                  messageType="ns13:ODTransactionLoggerRequestMessage"/>
        <variable name="xmlFragment" type="xsd:string"/>
        <variable name="GetConcurrentProgStatus_initiate_InputVariable"
                  messageType="ns15:ConcurrentProgramStatusRequestMessage"/>
        <variable name="ReceiveConcurrentProgStatus_onResult_InputVariable"
                  messageType="ns15:ConcurrentProgramStatusResponseMessage"/>
        <variable name="Exception" messageType="bpelx:RuntimeFaultMessage"/>
        <variable name="EndRate_CurrencyRate_Insert"
                  messageType="ns1:GlDailyRatesInterfaceCollection_msg"/>
        <variable name="AverageRate_CurrencyRate_Insert"
                  messageType="ns1:GlDailyRatesInterfaceCollection_msg"/>
        <variable name="teradataDateFormat" type="xsd:string"/>
        <variable name="InvokeProcessESPIn"
                  messageType="ns17:BPELInvokeESPRequestMessage"/>
        <!-- Added for Defect 4981-->
        <variable name="Invoke_GetFiscalPeriodRates_initiate_InputVariable"
                  messageType="ns16:GetFiscalPeriodRatesRequestMessage"/>
        <variable name="receive_GetFiscalPeriodRates_onResult_InputVariable"
                  messageType="ns16:GetFiscalPeriodRatesResponseMessage"/>
    </variables>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       ORCHESTRATION LOGIC                                               
       Set of activities coordinating the flow of messages across the    
       services integrated within this business process                  
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <sequence name="main">
        <!-- Receive input from requestor. (Note: This maps to operation defined in SynchCurrencyExchangeRate.wsdl) -->
        <receive name="receiveInput" partnerLink="client"
                 portType="client:SynchCurrencyExchangeRate"
                 operation="initiate" variable="inputVariable"
                 createInstance="yes"/>
        <scope name="MainScope">
            <faultHandlers>
                <catchAll>
                    <sequence name="ErrorLogger">
                        <assign name="asnCatchAll">
                            <copy>
                                <from expression="concat('Error encountered while executing SynchCurrencyExchangeRate with parameters: Requesting System: ', bpws:getVariableData('requestingSystem'), ', Start Date Time: ', bpws:getVariableData('startDateTime'), ' and End Date Time: ', bpws:getVariableData('endDateTime'), '.' )"/>
                                <to variable="ErrorMessageText"/>
                            </copy>
                            <copy>
                                <from expression="ora:getProcessId()"/>
                                <to variable="invkCatchAll_initiate"
                                    part="payload"
                                    query="/ns6:ErrorData/ns6:ProcessInfo/ns6:BusinessProcessName"/>
                            </copy>
                            <copy>
                                <from expression="ora:getInstanceId()"/>
                                <to variable="invkCatchAll_initiate"
                                    part="payload"
                                    query="/ns6:ErrorData/ns6:ProcessInfo/ns6:BusinessProcessId"/>
                            </copy>
                            <copy>
                                <from expression="ora:getDomainId()"/>
                                <to variable="invkCatchAll_initiate"
                                    part="payload"
                                    query="/ns6:ErrorData/ns6:ProcessInfo/ns6:BusinessProcessDomain"/>
                            </copy>
                            <copy>
                                <from expression="ora:getProcessURL()"/>
                                <to variable="invkCatchAll_initiate"
                                    part="payload"
                                    query="/ns6:ErrorData/ns6:ProcessInfo/ns6:SystemName"/>
                            </copy>
                            <copy>
                                <from expression="xp20:current-dateTime()"/>
                                <to variable="invkCatchAll_initiate"
                                    part="payload"
                                    query="/ns6:ErrorData/ns6:ErrorDetails/ns6:ErrorDateTime"/>
                            </copy>
                            <copy>
                                <from expression="'Catch All on the Main Sequence'"/>
                                <to variable="invkCatchAll_initiate"
                                    part="payload"
                                    query="/ns6:ErrorData/ns6:ProcessInfo/ns6:BusinessProcessStep"/>
                            </copy>
                            <copy>
                                <from expression="ora:getFaultName()"/>
                                <to variable="invkCatchAll_initiate"
                                    part="payload"
                                    query="/ns6:ErrorData/ns6:ErrorDetails/ns6:ErrorCode"/>
                            </copy>
                            <copy>
                                <from variable="ErrorMessageText"/>
                                <to variable="invkCatchAll_initiate"
                                    part="payload"
                                    query="/ns6:ErrorData/ns6:ErrorDetails/ns6:ErrorDescription"/>
                            </copy>
                            <copy>
                                <from expression="ora:getFaultAsString()"/>
                                <to variable="invkCatchAll_initiate"
                                    part="payload"
                                    query="/ns6:ErrorData/ns6:ErrorDetails/ns6:ErrorText"/>
                            </copy>
                            <copy>
                                <from expression="'system'"/>
                                <to variable="invkCatchAll_initiate"
                                    part="payload"
                                    query="/ns6:ErrorData/ns6:ErrorDetails/ns6:ErrorType"/>
                            </copy>
                            <copy>
                                <from expression="'fatal'"/>
                                <to variable="invkCatchAll_initiate"
                                    part="payload"
                                    query="/ns6:ErrorData/ns6:ErrorDetails/ns6:ErrorSeverity"/>
                            </copy>
                            <copy>
                                <from expression="'Y'"/>
                                <to variable="invkCatchAll_initiate"
                                    part="payload"
                                    query="/ns6:ErrorData/ns6:Notification/ns6:sendNotification"/>
                            </copy>
                            <copy>
                                <from expression="concat('Error ', bpws:getVariableData('Exception','detail'))"/>
                                <to variable="outputVariable" part="payload"
                                    query="/client:SynchCurrencyExchangeRateProcessResponse/client:result"/>
                            </copy>
                        </assign>
                        <scope name="logTransactionErrorLogger">
                            <sequence name="Sequence_83">
                                <assign name="logTrnData">
                                    <copy>
                                        <from expression="'Error'"/>
                                        <to variable="logTransactionInput"
                                            part="payload"
                                            query="/ns14:TransactionData/ns14:ProcessInfo/ns14:ProcessStatus"/>
                                    </copy>
                                </assign>
                                <invoke name="InvokeTrnLogger"
                                        partnerLink="ODTransactionLogger"
                                        portType="ns13:ODTransactionLogger"
                                        operation="initiate"
                                        inputVariable="logTransactionInput"/>
                                <assign name="AssignReply">
                                    <copy>
                                        <from expression="'Error'"/>
                                        <to variable="outputVariable"
                                            part="payload"
                                            query="/client:SynchCurrencyExchangeRateProcessResponse/client:result"/>
                                    </copy>
                                </assign>
                            </sequence>
                        </scope>
                        <invoke name="invkCatchAll" partnerLink="ODErrorLogger"
                                portType="ns5:ODErrorLogger"
                                operation="initiate"
                                inputVariable="invkCatchAll_initiate"/>
                        <invoke name="callbackClient" partnerLink="client"
                                portType="client:SynchCurrencyExchangeRateCallback"
                                operation="onResult"
                                inputVariable="outputVariable"/>
                        <!-- <reply name="replyOutput" partnerLink="client"
                               portType="client:SynchCurrencyExchangeRate"
                               operation="process" variable="outputVariable"/>-->
                        <terminate name="TerminateExceptionCaught"/>
                    </sequence>
                </catchAll>
            </faultHandlers>
            <sequence name="Sequence_84">
                <scope name="logTransactionStart">
                    <sequence name="Sequence_80">
                        <assign name="copyTransactionData">
                            <copy>
                                <from expression="ora:getDomainId()"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:ProcessInfo/ns14:Domain"/>
                            </copy>
                            <copy>
                                <from expression="ora:getProcessId()"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:ProcessInfo/ns14:ProcessName"/>
                            </copy>
                            <copy>
                                <from expression="ora:getInstanceId()"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:ProcessInfo/ns14:InstanceId"/>
                            </copy>
                            <copy>
                                <from expression="'Start'"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:ProcessInfo/ns14:ProcessStatus"/>
                            </copy>
                            <copy>
                                <from expression="'SynchCurrencyExchangeRate'"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:MessageDetails/ns14:MessageOperation"/>
                            </copy>
                            <copy>
                                <from expression="'BPEL process was invoked asynch'"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:MessageDetails/ns14:MessageSourceSystem"/>
                            </copy>
                            <copy>
                                <from expression="'direct invocation'"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:MessageDetails/ns14:MessageType"/>
                            </copy>
                            <copy>
                                <from expression="ora:getCurrentDateTime()"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:MessageDetails/ns14:MessageDateTime"/>
                            </copy>
                            <copy>
                                <from expression="'I0105 (CR658) - GL:  Chg Currency Rates extract from Bloomberg to GDW with Precision of 8 (instead of 38).'"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:ProcessInfo/ns14:SystemName"/>
                            </copy>
                            <copy>
                                <from variable="inputVariable" part="payload"
                                      query="/client:SynchCurrencyExchangeRateProcessRequest/client:requestingSystem"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:MessageDetails/ns14:MessageSourceSystem"/>
                            </copy>
                            <copy>
                                <from expression="'Teradata'"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:ProcessInfo/ns14:TradingPartnerDetails/ns14:TPFrom"/>
                            </copy>
                            <copy>
                                <from expression="'EBS'"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:ProcessInfo/ns14:TradingPartnerDetails/ns14:TPTo"/>
                            </copy>
                        </assign>
                        <invoke name="logTransaction"
                                partnerLink="ODTransactionLogger"
                                portType="ns13:ODTransactionLogger"
                                operation="initiate"
                                inputVariable="logTransactionInput"/>
                    </sequence>
                </scope>
                <scope name="setProcessHeader">
                    <sequence name="Sequence_2">
                        <assign name="initializeInstanceTitle">
                            <copy>
                                <from expression="substring( concat( 'Params: ', bpws:getVariableData('inputVariable','payload','/client:SynchCurrencyExchangeRateProcessRequest/client:requestingSystem'), ', ', bpws:getVariableData('inputVariable','payload','/client:SynchCurrencyExchangeRateProcessRequest/client:StartDateTime'), ', ', bpws:getVariableData('inputVariable','payload','/client:SynchCurrencyExchangeRateProcessRequest/client:EndDateTime')),1,50)"/>
                                <to variable="ProcessHeader"/>
                            </copy>
                        </assign>
                        <bpelx:exec name="setTitle" language="java"
                                    version="1.5">
                            <![CDATA[try {             
  String title = (String)getVariableData("ProcessHeader");             
  setTitle(title);             
  addAuditTrailEntry(title) ;             
} catch (Exception ex) {             
  addAuditTrailEntry(ex.toString());             
  ex.printStackTrace();             
}]]>
                        </bpelx:exec>
                    </sequence>
                </scope>
                <assign name="GetInputParameters">
                    <copy>
                        <from variable="inputVariable" part="payload"
                              query="/client:SynchCurrencyExchangeRateProcessRequest/client:requestingSystem"/>
                        <to variable="requestingSystem"/>
                    </copy>
                    <copy>
                        <from variable="inputVariable" part="payload"
                              query="/client:SynchCurrencyExchangeRateProcessRequest/client:StartDateTime"/>
                        <to variable="startDateTime"/>
                    </copy>
                    <copy>
                        <from variable="inputVariable" part="payload"
                              query="/client:SynchCurrencyExchangeRateProcessRequest/client:EndDateTime"/>
                        <to variable="endDateTime"/>
                    </copy>
                    <copy>
                        <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/SynchCurrencyExchangeRate/TeradataDateFormat')"/>
                        <to variable="teradataDateFormat"/>
                    </copy>
                </assign>
                <bpelx:exec name="ValidateInput" language="java" version="1.5">
                    <![CDATA[/** Read BPEL variables*/                                 
    addAuditTrailEntry("Initializing Strings");                                    
    String requestingSystem = (String) getVariableData("requestingSystem");                                     
    String startDateTime = (String) getVariableData("startDateTime");                        
    String endDateTime = (String) getVariableData("endDateTime");          
    String teradataDateFormat = (String) getVariableData("teradataDateFormat");        
    boolean fail = false;              
                   
    addAuditTrailEntry("Input Parameters = RequestingSystem: " + requestingSystem + " , StartDate: " + startDateTime + " , EndDate: " + endDateTime);                                   
                       
    if ( requestingSystem.equals("") ){                  
        addAuditTrailEntry("Failure. Requesting System is empty ");                                  
        setVariableData("error", "Requesting system is required element");                              
        fail = true;              
    }   else {           
            
    addAuditTrailEntry("The Requesting system is not empty");        
    if ( !requestingSystem.equalsIgnoreCase("EBS") ){                  
        addAuditTrailEntry("Failure. Requesting System is empty ");                                  
        setVariableData("error", "The only supported system is EBS");                              
        fail = true;         
    }   else {                   
               
   addAuditTrailEntry("The requesting system is: " + requestingSystem);        
   /** this variable (teradata date format) is read from the globalParameters.xml "yyyy-MM-dd" */        
   String DATE_FORMAT_NOW = teradataDateFormat;           
   addAuditTrailEntry("The DATE_FORMAT_NOW is: " + DATE_FORMAT_NOW);        
   Calendar cal = Calendar.getInstance();               
   SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);               
                       
    if (startDateTime.equals("") && (endDateTime.equals(""))){                 
        String td = sdf.format(cal.getTime());                   
        addAuditTrailEntry("no dates provided. Initializing startDate and endDate with the sysdate: " + td);                  
        startDateTime = td;               
        endDateTime = td;               
   }                
                       
    /** Coomenting for defect 1458, only one date is specified
	if ( startDateTime.equals("") || ( endDateTime.equals(""))) {               
        addAuditTrailEntry("Both dates need to be entered ");                  
        setVariableData("error", "Both dates need to be entered");                 
        fail = true;              
    }  else {              
        addAuditTrailEntry("Both dates have been entered. ");        
        try {              
            Date st = sdf.parse (startDateTime);              
            Date ed = sdf.parse (endDateTime);      
            startDateTime = sdf.format(st);     
            endDateTime = sdf.format(ed);     
            addAuditTrailEntry("st date. " + st);        
            addAuditTrailEntry("ed date. " + ed);        
        } catch (ParseException e){              
            addAuditTrailEntry("Invalid date format ");                  
            setVariableData("error", "Invalid date format");                         
            fail = true;              
        }              
    } */
    if (!endDateTime.equals("")) {
       addAuditTrailEntry("End date has been entered. ");        
        try {              
            Date ed = sdf.parse (endDateTime);      
            endDateTime = sdf.format(ed);     
            addAuditTrailEntry("ed date. " + ed);        
        } catch (ParseException e){              
            addAuditTrailEntry("Invalid date format ");                  
            setVariableData("error", "Invalid date format");                         
            fail = true;              
        }
    }
    }        
              
    if (!fail) {              
        //setVariableData("startDateTime", startDateTime);              
        setVariableData("endDateTime", endDateTime);              
        setVariableData("error", "");                              
        }              
    }]]>
                </bpelx:exec>
                <switch name="ValidInput">
                    <case condition="bpws:getVariableData('error')  = ''">
                        <sequence name="Sequence_4">
                            <scope name="setProcessHeaderValidInput">
                                <sequence name="Sequence_2">
                                    <assign name="initializeInstanceTitle">
                                        <copy>
                                            <from expression="substring( concat( 'Params: ', bpws:getVariableData('inputVariable','payload','/client:SynchCurrencyExchangeRateProcessRequest/client:requestingSystem'), ', ', bpws:getVariableData('startDateTime'), ', ', bpws:getVariableData('endDateTime')),1,50)"/>
                                            <to variable="ProcessHeader"/>
                                        </copy>
                                    </assign>
                                    <bpelx:exec name="setTitle" language="java"
                                                version="1.5">
                                        <![CDATA[try {             
  String title = (String)getVariableData("ProcessHeader");             
  setTitle(title);             
  addAuditTrailEntry(title) ;             
} catch (Exception ex) {             
  addAuditTrailEntry(ex.toString());             
  ex.printStackTrace();             
}]]>
                                    </bpelx:exec>
                                </sequence>
                            </scope>
                            <assign name="InitializeTeradataRequest">
                                <copy>
                                    <from variable="endDateTime"/>
                                    <to variable="Invoke_GetFiscalPeriodRates_initiate_InputVariable"
                                        part="payload"
                                        query="/ns16:GetFiscalPeriodRatesProcessRequest/ns16:DateTime"/>
                                </copy>
                            </assign>
                            <invoke name="Invoke_GetFiscalPeriodRates"
                                    partnerLink="GetFiscalPeriodRates"
                                    portType="ns16:GetFiscalPeriodRates"
                                    operation="initiate"
                                    inputVariable="Invoke_GetFiscalPeriodRates_initiate_InputVariable"/>
                            <!-- Added for defect 4981 Start-->
                            <receive name="receive_GetFiscalPeriodRates"
                                     partnerLink="GetFiscalPeriodRates"
                                     portType="ns16:GetFiscalPeriodRatesCallback"
                                     operation="onResult"
                                     variable="receive_GetFiscalPeriodRates_onResult_InputVariable"
                                     createInstance="no"/>
                            <!-- End -->
                            <switch name="Zero_Entries">
                                <case condition="bpws:getVariableData('receive_GetFiscalPeriodRates_onResult_InputVariable','payload','/ns16:GetFiscalPeriodRatesProcessResponse') = ''">
                                    <sequence name="Sequence_85">
                                        <assign name="Initialize0EntriesError">
                                            <copy>
                                                <from expression="'0 entries'"/>
                                                <to variable="Exception"
                                                    part="code"/>
                                            </copy>
                                            <copy>
                                                <from expression="concat('There are 0 entries retrieved between the dates: ' , bpws:getVariableData('startDateTime'), ' and ', bpws:getVariableData('endDateTime'), ' for the system ', bpws:getVariableData('inputVariable','payload','/client:SynchCurrencyExchangeRateProcessRequest/client:requestingSystem'))"/>
                                                <to variable="Exception"
                                                    part="summary"/>
                                            </copy>
                                            <copy>
                                                <from expression="concat('There are 0 entries retrieved between the dates: ' , bpws:getVariableData('startDateTime'), ' and ', bpws:getVariableData('endDateTime'), ' for the system ', bpws:getVariableData('inputVariable','payload','/client:SynchCurrencyExchangeRateProcessRequest/client:requestingSystem'))"/>
                                                <to variable="Exception"
                                                    part="detail"/>
                                            </copy>
                                        </assign>
                                        <throw name="NoRatesFound"
                                               faultName="bpelx:remoteFault"
                                               faultVariable="Exception"/>
                                    </sequence>
                                </case>
                                <otherwise>
                                    <empty name="Empty"/>
                                </otherwise>
                            </switch>
                            <assign name="InitializeGetUserIDInputParameters">
                                <copy>
                                    <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/SynchCurrencyExchangeRate/UserName')"/>
                                    <to variable="GetUserID_GetUserID_InputVariable"
                                        part="GetUserIDInput_msg"
                                        query="/ns9:GetUserIDInput/ns9:p_User_name"/>
                                </copy>
                            </assign>
                            <invoke name="GetUserID" partnerLink="GetUserID"
                                    portType="ns8:GetUserID_ptt"
                                    operation="GetUserID"
                                    inputVariable="GetUserID_GetUserID_InputVariable"
                                    outputVariable="GetUserID_OutputVariable"/>
                            <assign name="AssignUserId">
                                <copy>
                                    <from part="GetUserIDOutputCollection"
                                          query="/ns9:GetUserIDOutputCollection/ns9:GetUserIDOutput/ns9:user_id"
                                          variable="GetUserID_OutputVariable"/>
                                    <to variable="userID"/>
                                </copy>
                                <copy>
                                    <from expression="'userID'"/>
                                    <to variable="XSLT_Param"
                                        query="/ns10:parameters/ns10:item/ns10:name"/>
                                </copy>
                                <copy>
                                    <from variable="userID"/>
                                    <to variable="XSLT_Param"
                                        query="/ns10:parameters/ns10:item/ns10:value"/>
                                </copy>
                            </assign>
                            <assign name="Avg_Rate_Teradata_to_GL_DAILY_RATES_INTERFACE_Table">
                                <bpelx:annotation>
                                    <bpelx:pattern>transformation</bpelx:pattern>
                                </bpelx:annotation>
                                <copy>
                                    <from expression="ora:processXSLT('Teradata_to_GL_DAILY_RATES_INTERFACE_Table.xsl',bpws:getVariableData('receive_GetFiscalPeriodRates_onResult_InputVariable','payload'))"/>
                                    <to variable="AverageRate_CurrencyRate_Insert"
                                        part="GlDailyRatesInterfaceCollection"/>
                                </copy>
                            </assign>
                            <assign name="End_Rate_Teradata_to_GL_DAILY_RATES_INTERFACE_Table">
                                <bpelx:annotation>
                                    <bpelx:pattern>transformation</bpelx:pattern>
                                </bpelx:annotation>
                                <copy>
                                    <from expression="ora:processXSLT('EndRate_Teradata_to_GL_DAILY_RATES_INTERFACE_Table.xsl',bpws:getVariableData('receive_GetFiscalPeriodRates_onResult_InputVariable','payload'))"/>
                                    <to variable="EndRate_CurrencyRate_Insert"
                                        part="GlDailyRatesInterfaceCollection"/>
                                </copy>
                            </assign>
                            <assign name="InitializeCurrencyRate_Insert">
                                <bpelx:append>
                                    <bpelx:from variable="AverageRate_CurrencyRate_Insert"
                                                part="GlDailyRatesInterfaceCollection"
                                                query="/ns3:GlDailyRatesInterfaceCollection/ns3:GlDailyRatesInterface"/>
                                    <bpelx:to variable="DailyRatesInterfaceTableInsert_insert_InputVariable"
                                              part="GlDailyRatesInterfaceCollection"
                                              query="/ns3:GlDailyRatesInterfaceCollection"/>
                                </bpelx:append>
                                <bpelx:append>
                                    <bpelx:from variable="EndRate_CurrencyRate_Insert"
                                                part="GlDailyRatesInterfaceCollection"
                                                query="/ns3:GlDailyRatesInterfaceCollection/ns3:GlDailyRatesInterface"/>
                                    <bpelx:to variable="DailyRatesInterfaceTableInsert_insert_InputVariable"
                                              part="GlDailyRatesInterfaceCollection"
                                              query="/ns3:GlDailyRatesInterfaceCollection"/>
                                </bpelx:append>
                            </assign>
                            <invoke name="DailyRatesInterfaceTableInsert"
                                    partnerLink="GL_DAILY_RATES_INTERFACE"
                                    portType="ns1:GL_DAILY_RATES_INTERFACE_ptt"
                                    operation="insert"
                                    inputVariable="DailyRatesInterfaceTableInsert_insert_InputVariable"/>
                            <assign name="InitializeDailyRatesImportandCalculation_CP">
                                <copy>
                                    <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/SynchCurrencyExchangeRate/UserName')"/>
                                    <to variable="InvokeDailyRatesImportCP_InvokeConcurrentProgram_InputVariable"
                                        part="InputParameters"
                                        query="/ns12:InputParameters/ns12:P_USER_NAME"/>
                                </copy>
                                <copy>
                                    <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/SynchCurrencyExchangeRate/ResponsibilityName')"/>
                                    <to variable="InvokeDailyRatesImportCP_InvokeConcurrentProgram_InputVariable"
                                        part="InputParameters"
                                        query="/ns12:InputParameters/ns12:P_RESP_NAME"/>
                                </copy>
                                <copy>
                                    <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/SynchCurrencyExchangeRate/ShortName')"/>
                                    <to variable="InvokeDailyRatesImportCP_InvokeConcurrentProgram_InputVariable"
                                        part="InputParameters"
                                        query="/ns12:InputParameters/ns12:P_CONC_SHORT_NAME"/>
                                </copy>
                                <copy>
                                    <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/SynchCurrencyExchangeRate/ApplicationShortName')"/>
                                    <to variable="InvokeDailyRatesImportCP_InvokeConcurrentProgram_InputVariable"
                                        part="InputParameters"
                                        query="/ns12:InputParameters/ns12:P_APPL_SHORT_NAME"/>
                                </copy>
                            </assign>
                            <invoke name="InvokeDailyRatesImportCP"
                                    portType="ns11:InvokeConcurrentProgram_ptt"
                                    inputVariable="InvokeDailyRatesImportCP_InvokeConcurrentProgram_InputVariable"
                                    outputVariable="InvokeDailyRatesImportCP_InvokeConcurrentProgram_OutputVariable"
                                    partnerLink="InvokeConcurrentProgram"
                                    operation="InvokeConcurrentProgram"/>
                            <assign name="InitializeConcurrentProgramStatusInput">
                                <copy>
                                    <from variable="InvokeDailyRatesImportCP_InvokeConcurrentProgram_OutputVariable"
                                          part="OutputParameters"
                                          query="/ns12:OutputParameters/ns12:X_REQUESTID"/>
                                    <to variable="GetConcurrentProgStatus_initiate_InputVariable"
                                        part="payload"
                                        query="/ns15:ConcurrentProgramStatusProcessRequest/ns15:Request_Id"/>
                                </copy>
                                <copy>
                                    <from expression="'F'"/>
                                    <to variable="GetConcurrentProgStatus_initiate_InputVariable"
                                        part="payload"
                                        query="/ns15:ConcurrentProgramStatusProcessRequest/ns15:Child_Request"/>
                                </copy>
                            </assign>
                            <invoke name="GetConcurrentProgramStatus"
                                    partnerLink="ConcurrentProgramStatus"
                                    portType="ns15:ConcurrentProgramStatus"
                                    operation="initiate"
                                    inputVariable="GetConcurrentProgStatus_initiate_InputVariable"/>
                            <receive name="ReceiveConcurrentProgStatus"
                                     partnerLink="ConcurrentProgramStatus"
                                     portType="ns15:ConcurrentProgramStatusCallback"
                                     operation="onResult"
                                     variable="ReceiveConcurrentProgStatus_onResult_InputVariable"
                                     createInstance="no"/>
                            <switch name="Switch_1">
                                <case condition="bpws:getVariableData('ReceiveConcurrentProgStatus_onResult_InputVariable','payload','/ns15:ConcurrentProgramStatusProcessResponse/ns15:result') = 'SUCCESS'">
                                    <assign name="AssignResponse">
                                        <copy>
                                            <from expression="'SUCCESS'"/>
                                            <to variable="outputVariable"
                                                part="payload"
                                                query="/client:SynchCurrencyExchangeRateProcessResponse/client:result"/>
                                        </copy>
                                    </assign>
                                </case>
                                <otherwise>
                                    <sequence name="Sequence_82">
                                        <assign name="AssignErrorMessage">
                                            <copy>
                                                <from expression="concat('The Concurrent Request ID ' , bpws:getVariableData('GetConcurrentProgStatus_initiate_InputVariable','payload','/ns15:ConcurrentProgramStatusProcessRequest/ns15:Request_Id'), ' has errored out' )"/>
                                                <to variable="Exception"
                                                    part="code"/>
                                            </copy>
                                            <copy>
                                                <from expression="concat('The Concurrent Request ID ' , bpws:getVariableData('GetConcurrentProgStatus_initiate_InputVariable','payload','/ns15:ConcurrentProgramStatusProcessRequest/ns15:Request_Id'), ' has errored out due to ', bpws:getVariableData('ReceiveConcurrentProgStatus_onResult_InputVariable','payload','/ns15:ConcurrentProgramStatusProcessResponse/ns15:Error_Desc') )"/>
                                                <to variable="Exception"
                                                    part="detail"/>
                                            </copy>
                                            <copy>
                                                <from expression="concat('The Concurrent Request ID ' , bpws:getVariableData('GetConcurrentProgStatus_initiate_InputVariable','payload','/ns15:ConcurrentProgramStatusProcessRequest/ns15:Request_Id'), ' has errored out due to ', bpws:getVariableData('ReceiveConcurrentProgStatus_onResult_InputVariable','payload','/ns15:ConcurrentProgramStatusProcessResponse/ns15:Error_Desc') )"/>
                                                <to variable="Exception"
                                                    part="summary"/>
                                            </copy>
                                        </assign>
                                        <throw name="ThrowConcurrentProgramFailure"
                                               faultName="bpelx:remoteFault"
                                               faultVariable="Exception"/>
                                    </sequence>
                                </otherwise>
                            </switch>
                        </sequence>
                    </case>
                    <otherwise>
                        <sequence name="Sequence_3">
                            <assign name="InvalidInputParamsException">
                                <copy>
                                    <from variable="error"/>
                                    <to variable="InvalidParamsFaultVar"
                                        part="summary"/>
                                </copy>
                                <copy>
                                    <from expression="'Invalid Input Parameters'"/>
                                    <to variable="InvalidParamsFaultVar"
                                        part="code"/>
                                </copy>
                                <copy>
                                    <from variable="error"/>
                                    <to variable="InvalidParamsFaultVar"
                                        part="detail"/>
                                </copy>
                            </assign>
                            <throw name="InvalidParameters"
                                   faultName="bpelx:bindingFault"
                                   faultVariable="InvalidParamsFaultVar"/>
                        </sequence>
                    </otherwise>
                </switch>
                <scope name="logTransactionEnd">
                    <sequence name="Sequence_81">
                        <assign name="logTransactionInput">
                            <copy>
                                <from expression="'Success'"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:ProcessInfo/ns14:ProcessStatus"/>
                            </copy>
                            <copy>
                                <from>
                                    <EntiltyList xmlns="http://xmlns.oracle.com/TransactionData">
                                        <EntityID EntityType="RequestingSystem"/>
                                        <EntityID EntityType="StartDateTime"/>
                                        <EntityID EntityType="EndDateTime"/>
                                    </EntiltyList>
                                </from>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:EntiltyList"/>
                            </copy>
                            <copy>
                                <from expression="concat('&lt;EntityID EntityType=&quot;RequestingSystem&quot;>', bpws:getVariableData('requestingSystem'), '&lt;/EntityID>')"/>
                                <to variable="xmlFragment"/>
                            </copy>
                            <copy>
                                <from expression="ora:parseEscapedXML(bpws:getVariableData('xmlFragment'))"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:EntiltyList/ns14:EntityID[1]"/>
                            </copy>
                            <copy>
                                <from expression="concat('&lt;EntityID EntityType=&quot;StartDateTime&quot;>', bpws:getVariableData('startDateTime'), '&lt;/EntityID>')"/>
                                <to variable="xmlFragment"/>
                            </copy>
                            <copy>
                                <from expression="ora:parseEscapedXML(bpws:getVariableData('xmlFragment'))"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:EntiltyList/ns14:EntityID[2]"/>
                            </copy>
                            <copy>
                                <from expression="concat('&lt;EntityID EntityType=&quot;EndDateTime&quot;>', bpws:getVariableData('endDateTime'), '&lt;/EntityID>')"/>
                                <to variable="xmlFragment"/>
                            </copy>
                            <copy>
                                <from expression="ora:parseEscapedXML(bpws:getVariableData('xmlFragment'))"/>
                                <to variable="logTransactionInput"
                                    part="payload"
                                    query="/ns14:TransactionData/ns14:EntiltyList/ns14:EntityID[3]"/>
                            </copy>
                        </assign>
                        <invoke name="logTransaction"
                                partnerLink="ODTransactionLogger"
                                portType="ns13:ODTransactionLogger"
                                operation="initiate"
                                inputVariable="logTransactionInput"/>
                    </sequence>
                </scope>
                <assign name="AssignReply">
                    <copy>
                        <from expression="'Success'"/>
                        <to variable="outputVariable" part="payload"
                            query="/client:SynchCurrencyExchangeRateProcessResponse/client:result"/>
                    </copy>
                </assign>
                <sequence name="SeqESPInvoke">
                    <assign name="AssignESPData">
                        <copy>
                            <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/SynchCurrencyExchangeRate/FilePattern')"/>
                            <to variable="InvokeProcessESPIn" part="payload"
                                query="/ns17:BPELInvokeESPProcessRequest/ns17:filePattern"/>
                        </copy>
                        <copy>
                            <from expression="ora:getDomainId()"/>
                            <to variable="InvokeProcessESPIn" part="payload"
                                query="/ns17:BPELInvokeESPProcessRequest/ns17:processDomain"/>
                        </copy>
                        <copy>
                            <from expression="ora:getProcessId()"/>
                            <to variable="InvokeProcessESPIn" part="payload"
                                query="/ns17:BPELInvokeESPProcessRequest/ns17:processName"/>
                        </copy>
                    </assign>
                    <invoke name="InvokeESPProcess" partnerLink="BPELInvokeESP"
                            portType="ns17:BPELInvokeESP" operation="initiate"
                            inputVariable="InvokeProcessESPIn"/>
                </sequence>
            </sequence>
        </scope>
        <!-- 
          Asynchronous callback to the requester. (Note: the callback location and correlation id is transparently handled using WS-addressing.)
        -->
        
        <!-- Added for defect 4981 Start-->

        <invoke name="callbackClient" partnerLink="client"
                portType="client:SynchCurrencyExchangeRateCallback"
                operation="onResult" inputVariable="outputVariable"/>
        <!-- End -->
        <!-- Commented for defect 4981-->
        <!-- <reply name="replyOutput" partnerLink="client"
               portType="client:SynchCurrencyExchangeRate" operation="process"
               variable="outputVariable"/> -->
        <bpelx:exec import="java.util.Calendar"/>
        <bpelx:exec import="java.text.SimpleDateFormat"/>
        <bpelx:exec import="java.text.ParseException"/>
        <bpelx:exec import="java.io.IOException"/>
        <bpelx:exec import="java.util.Date"/>
    </sequence>
</process>