# +===================================================================+
# |                  Office Depot - Project Simplify                  |
# |      			WIPRO 				      |
# +===================================================================+
# | Name  : 	   XXCOMFTP   	                                      |
# | Description:   This program does the following                    |
# |             1) FTP the file from $souce to $dest in the $server.Th|
# |                -e $server is connected to using $user and $passwor|
# |                -d. The filename is picked from $filename passed as|
# |                a parameter to the concurrent program.             |
# |                                                                   |
# |                All the other values are fetched from translation  |
# |                tables. The translation definition is OD_FTP_PROCE-|
# |                SSES.                                              |
# |                                                                   |
# |                                                                   |
# |                                                                   |
# |Change Record:                                                     |
# |===============                                                    |
# |Version   Date        Author           Remarks                     |
# |=======   ==========  =============    ============================|
# |DRAFT 1A 23-JAN-2008  Afan Sheriff     Initial draft version       |
# |      2  29-OCT-2008  Subbu Pillai     Defect 12210		      |
# |      3  09-FEB-2009  Subbu Pillai     Defect 12731                |
# |      4  04-JAN-2010  Joe Klein        Defect 9215 added error     |
# |                                       handling for remote dir     |
# |                                       550* Access is denied.      |
# |      5  01-JUN-2011  P.Sankaran       Modified shell script to    |
# |                                       accommodate SFTP or SCP     |
# |                                       transmissions with and w/o  |
# |                                       keys.                       |
# |      6  15-MAY-2014  Jay Gupta        Defect#29863 - Date format  |
# |                                       change while listing file   |
# |      7  07-OCT-2014  Avinash Baddam   Fix for Mainframe           |
# |                                       EBStoMVSData from SOA to FTP|
# |      8  25-AUG-2015  Ray Strauss      Added transmission mode     |
# |                                                                   |
# |      9  20-Jul-2018 Ramya Venkatesh   Defect#43812 -  EFGL1300    |
# |                                       failing for OD: Common Put  |
# |                                       Program                     |
# |      9  01-Aug-2019 Arun DSouza       Replaced ls command with    |
# |                                       echo cmd for performance    |
# +===================================================================+

# Displaying program arguments
   
EXECFILE=$XXFIN_DATA/COM_FTP.$$      #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$EXECFILE;chmod 777 $EXECFILE

TMPFILE=$XXFIN_DATA/COM_FTP_TMP.$$   #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$TMPFILE;chmod 777 $TMPFILE

ARCHFILE1=$XXFIN_DATA/ARCHFILE1.$$   #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$ARCHFILE1;chmod 600 $ARCHFILE1

ARCHFILE2=$XXFIN_DATA/ARCHFILE2.$$   #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$ARCHFILE2;chmod 600 $ARCHFILE2

ARCHEXEC=$XXFIN_DATA/ARCHEXEC.$$     #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$ARCHEXEC;chmod 600 $ARCHEXEC


rm tmpfile3
rm tmpfile4


tmpfile3=$XXFIN_DATA/tmpfile3.$$     #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$tmpfile3;chmod 600 $tmpfile3

tmpfile4=$XXFIN_DATA/tmpfile4.$$     #Changed $HOME to $XXFIN_DATA for the Defect 12210
>$tmpfile4;chmod 600 $tmpfile4


EXIT=0


 echo "1 st argument = username/password"
 echo "2 nd argument = $2"
 echo "3 rd argument = $3"
 echo "4 th argument = $4"
 echo "5 th argument = $5"
 echo "6 th argument = $6"
 echo "7 th argument = $7"
 echo "8 th argument = $8"
 echo "9 th argument = $9"
 
# Fetching Process Name and filename.
 translationsource=$5 
 filename=$6
 destfile=$7
 delete_src_file=$8
 rename_tgt_file=$9
  
 # Copying source file to destination. 
 # Optionally changing source string to destination string.
 
export SQLPATH=$APPL_TOP 
V_RESULT=`sqlplus -s /nolog <<EOF
set pagesize 0
set linesize 255
set sqlprompt " "
set serveroutput on 
set verify off
      select 
            xftv.Target_Value1 
            || '|' || xftv.Target_Value2
            || '|' || xftv.Target_Value3
            || '|' || xftv.Target_Value4
            || '|' || xftv.Target_Value5
            || '|' || xftv.Target_Value6
            || '|' || xftv.Target_Value7
            || '|' || nvl(xftv.Target_value8,'N')
            || '|' || nvl(xftv.Target_value9,'N')
            || '|' || nvl(xftv.Target_value10,'N')
            || '|' || nvl(xftv.Target_value11,'N')
            || '|' || xftv.Target_value12
            || '|' || xftv.target_value13
			|| '|' || xftv.target_value14
      from  
            xx_fin_translatedefinition xftd,
            xx_fin_translatevalues     xftv
      where 
            xftd.translation_name   ='OD_FTP_PROCESSES'
            and xftv.source_value1  ='$translationsource' 
            and xftd.translate_id   =xftv.translate_id;
exit
EOF`
server=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[1] }'`
user=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[2] }'`
passwd=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[3] }'`
source1=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[4] }'`
dest1=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[5] }'`
mframeflag=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[6] }'`
archive1=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[7] }'`
as400flag=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[8] }'`
sftpflag=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[9] }'`
scpflag=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[10] }'`
rsakeyflag=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[11] }'`
rsakeyfile=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[12] }'`
transmitmode=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[13] }'`
lftpflag=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[14] }'`

eval source=$source1
eval dest=$dest1
eval archive=$archive1

echo $archive >> tmpfile3
perl -pe 's/\//\\\//g' tmpfile3 >> tmpfile4
archive_internal=`cat tmpfile4`

 echo " "
 echo " "
 echo "Translationsource                      = $translationsource"
 echo "Server                                 = $server "
 echo "User name                              = $user"
 echo "Source Directory                       = $source"
 echo "Destination Directory                  = $dest"
 echo "source filename                        = $filename"
 echo "destination filename                   = $destfile"
 echo "SFTP flag                              = $sftpflag"
 echo "SCP flag                               = $scpflag" 
 echo "LFTP flag                              = $lftpflag" 
 echo "Transmission Mode                      = $transmitmode"

#echo "verbose" >> $EXECFILE
#echo "open $server" >> $EXECFILE
#echo "quote USER $user" >> $EXECFILE
#echo "quote PASS $passwd" >> $EXECFILE
#echo "lcd $source" >> $EXECFILE
#echo "cd $dest" >> $EXECFILE
#echo "prompt off" >> $EXECFILE

if [ "$sftpflag" = "Y" -o "$lftpflag" = "Y" ]
  then
   echo "lcd $source" >> $EXECFILE
   echo "progress" >> $EXECFILE
   if [ "$dest" != "" ]
      then
        echo "cd $dest" >> $EXECFILE
   fi
elif [ "$scpflag" = "Y" ]
  then
   echo " "
else
   echo "verbose" >> $EXECFILE
   echo "open $server" >> $EXECFILE
   echo "quote USER $user" >> $EXECFILE
   echo "quote PASS $passwd" >> $EXECFILE
   echo "epsv4" >> $EXECFILE
   echo "lcd $source" >> $EXECFILE
   echo "cd $dest" >> $EXECFILE
   echo "$transmitmode" >> $EXECFILE
   echo "prompt off" >> $EXECFILE
fi

if [ "$scpflag" = "" -o "$scpflag" = "N" ] 
then
   if [ "$as400flag" = "Y" ] # for AS/400
     then
       echo "put $filename $destfile" >> $EXECFILE 
   elif [ "$mframeflag" = "Y" ]               # For ftp to Mainframes
    then
        echo "put $filename $destfile" >> $EXECFILE # AB Removed quotes for destfile, fix for mainframe
   elif [ "$destfile" != "" ]               # For ftp with a different destination file name
    then
        echo "put  $filename $destfile" >> $EXECFILE
        if [ "$rename_tgt_file" != "" ] 
        then
           echo "rename $destfile $rename_tgt_file" >> $EXECFILE
        fi
   else                                     # For ftp with destination filename parameter blank, multiple files can be sent.
        echo "mput $filename" >> $EXECFILE
        if [ "$rename_tgt_file" != "" ] 
        then
           echo "rename $filename $rename_tgt_file" >> $EXECFILE
        fi
   fi
fi

echo "quit" >> $EXECFILE

echo "Ready for command execution"
 
if [ "$sftpflag" = "Y" ]
  then
     echo "Executing SFTP"
     SFTPSIGNON="$user@$server"
     echo $SFTPSIGNON
     sftp -b $EXECFILE $SFTPSIGNON > $TMPFILE
	 script -qc "sftp -b $EXECFILE $SFTPSIGNON" $TMPFILE
elif [ "$scpflag" = "Y" ]
  then
  	 echo "Executing SCP"
  	 SCPPARMS="$source/$filename $user@$server:$dest/$destfile"
     scp $SCPPARMS > $TMPFILE
elif [ "$lftpflag" = "Y" ]
  then
  	 echo "Executing LFTP"
 	 echo "user $user"
	 echo "server $server"
	 if [ "$destfile" != "" ]
	 then
	 mv $source$filename $source$destfile
#	 $XXFIN_TOP/bin/./XXPROCESSLFTP.sh $user $passwd $server $source $dest $destfile $TMPFILE
	 mv $source$destfile $source$filename
	 else
          echo "Null"
#         $XXFIN_TOP/bin/./XXPROCESSLFTP.sh $user $passwd $server $source $dest $filename $TMPFILE
	 fi
else
     echo "Executing FTP"
	 FTPPARMS="$server"
     echo "Execution string = $EXECFILE = $TMPFILE"
	 echo $FTPPARMS
     ftp -n $FTPPARMS > $TMPFILE
	 echo "Execution string for FTP = $TMPFILE"
fi

#to wait for the TEMPFILE to be populated with the result for the commands
#BIAS added this as part of OCI migration
#ftp -n < $EXECFILE > $TMPFILE
Server_check=`grep 'Not connected' $TMPFILE`
User_passwd=`grep 'Please login with USER and PASS'  $TMPFILE`
Local_directory_error=`grep '550 Failed to change directory' $TMPFILE`
Rem_dir_access_error=`grep '^550.*Access is denied' $TMPFILE`   # Added for defect 9215
Success=`grep 'File receive OK'  $TMPFILE`
Success1=`grep '226 '  $TMPFILE`
SFTPSuccess=`egrep -i '(Uploading)|(100%)' $TMPFILE`
SFTPCheck=`egrep -i '(Permission denied)|(Connection refused)|(host key verification failed)' $TMPFILE`
Mframesuccess=`grep 'Transfer completed successfully'  $TMPFILE`
AS400success=`grep 'transfer completed successfully'  $TMPFILE`
LFTPSuccess=`grep 'LFTP'  $TMPFILE`

if [ "$Server_check" != "" ]
then
    echo " "
    echo "ERROR: Please check the server. Server provided is $server."
    rm $TMPFILE
    rm $EXECFILE
    rm $ARCHFILE1
    rm $ARCHFILE2
    rm $ARCHEXEC
    rm $tmpfile3  # Added for Defect 12210
    rm $tmpfile4  # Added for Defect 12210
    exit 1

elif [ "$User_passwd" != "" ]
then
    echo " "
    echo "ERROR: Please provide appropriate username and password."
    rm $TMPFILE
    rm $EXECFILE
    rm $ARCHFILE1
    rm $ARCHFILE2
    rm $ARCHEXEC
    rm $tmpfile3  # Added for Defect 12210
    rm $tmpfile4  # Added for Defect 12210
    exit 1

elif [ "$Local_directory_error" != "" ]
then
    echo " "
    echo "ERROR: Cannot change to $dest"
    rm $TMPFILE
    rm $EXECFILE
    rm $ARCHFILE1
    rm $ARCHFILE2
    rm $ARCHEXEC
    rm $tmpfile3  # Added for Defect 12210
    rm $tmpfile4  # Added for Defect 12210 
    exit 1

elif [ "$Rem_dir_access_error" != "" ]  # This block added for defect 9215
then
    echo " "
    echo "ERROR: Access denied to remote directory: $dest"
    rm $TMPFILE
    rm $EXECFILE
    rm $ARCHFILE1
    rm $ARCHFILE2
    rm $ARCHEXEC
    rm $tmpfile3  # Added for Defect 12210
    rm $tmpfile4  # Added for Defect 12210 
    exit 1
    
elif [ "$SFTPCheck" != "" ]
then
    echo " "
    echo "ERROR: Please provide appropriate username and password."
    rm $TMPFILE
    rm $EXECFILE
    rm $ARCHFILE1
    rm $ARCHFILE2
    rm $ARCHEXEC
    rm $tmpfile3  # Added for Defect 12210
    rm $tmpfile4  # Added for Defect 12210
    exit 1    

elif [ "$Success" != "" -o  "$Success1" != "" -o "$SFTPSuccess" != "" -o "$LFTPSuccess" != "" ]
then 
    echo " "
    cat $TMPFILE
    echo "SUCCESS: Successful transmission"
    rm $TMPFILE
    rm $EXECFILE
    cd $source
    # Added time style to make the date format mon dd

exit 0;
