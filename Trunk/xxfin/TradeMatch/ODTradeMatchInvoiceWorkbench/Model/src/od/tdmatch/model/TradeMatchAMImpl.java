package od.tdmatch.model;

import java.io.Serializable;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import od.tdmatch.model.common.TradeMatchAM;
import od.tdmatch.model.lov.SupplierLOVImpl;
import od.tdmatch.model.lov.vendmootDship.SKUDLovVOImpl;
import od.tdmatch.model.reports.vo.ConsignmentRTVSearchVOImpl;
import od.tdmatch.model.reports.vo.ConsignmentRTVTotalVOImpl;
import od.tdmatch.model.reports.vo.ConsignmentRTVVOImpl;
import od.tdmatch.model.reports.vo.PoInquiryDetailsVOImpl;
import od.tdmatch.model.reports.vo.PoInquiryInvPopVOImpl;
import od.tdmatch.model.reports.vo.PoInquiryMainVOImpl;
import od.tdmatch.model.reports.vo.PoInquiryRecPopVOImpl;
import od.tdmatch.model.reports.vo.PoInquirySearchVOImpl;
import od.tdmatch.model.reports.vo.PoInquiryWrtoffPopVOImpl;
import od.tdmatch.model.reports.vo.XxApInvoicePaymentInquirySearchVOImpl;
import od.tdmatch.model.reports.vo.XxApRTVReconCAVOImpl;
import od.tdmatch.model.reports.vo.XxApRTVReconTotalVOImpl;
import od.tdmatch.model.reports.vo.XxApRTVReconUSVOImpl;
import od.tdmatch.model.reports.vo.XxApRTVReconciliationSearchVOImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailInquirySearchVOImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailSummVOImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailSummaryVOImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailTempTotalVOImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailTempVOImpl;
import od.tdmatch.model.reports.vo.XxApReceiptDetailTotalLOVImpl;
import od.tdmatch.model.reports.vo.XxApTradeMatchSearchVOImpl;
import od.tdmatch.model.reports.vo.XxApVendMatchAnaDummVOImpl;
import od.tdmatch.model.reports.vo.XxApVendorMatchAnaVendVOImpl;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.DBTransactionImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.ARRAY;
import oracle.sql.ArrayDescriptor;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon May 08 12:14:27 EDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TradeMatchAMImpl extends ApplicationModuleImpl implements TradeMatchAM, Serializable {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger _logger = ADFLogger.createADFLogger(TradeMatchAMImpl.class);

    public TradeMatchAMImpl() {
    }

    /**
     * Container's getter for VAInvoiceSummaryVO1.
     * @return VAInvoiceSummaryVO1
     */
    public VAInvoiceSummaryVOImpl getVAInvoiceSummaryVO1() {
        return (VAInvoiceSummaryVOImpl) findViewObject("VAInvoiceSummaryVO1");
    }


    /**
     * Container's getter for VAEmpVendorSummaryVO1.
     * @return VAEmpVendorSummaryVO1
     */
    public VAEmpVendorSummaryVOImpl getVAEmpVendorSummaryVO1() {
        return (VAEmpVendorSummaryVOImpl) findViewObject("VAEmpVendorSummaryVO1");
    }

    /**
     * Container's getter for VAInvoiceSummaryVO2.
     * @return VAInvoiceSummaryVO2
     */
    public VAInvoiceSummaryVOImpl getVAInvoiceSummaryVO2() {
        return (VAInvoiceSummaryVOImpl) findViewObject("VAInvoiceSummaryVO2");
    }


    /**
     * Container's getter for VAEmpVendorSummaryVO3.
     * @return VAEmpVendorSummaryVO3
     */
    public VAEmpVendorSummaryVOImpl getVAEmpVendorSummaryVO3() {
        return (VAEmpVendorSummaryVOImpl) findViewObject("VAEmpVendorSummaryVO3");
    }


    /**
     * Container's getter for OrgVO1.
     * @return OrgVO1
     */
    public OrgVOImpl getOrgVO1() {
        return (OrgVOImpl) findViewObject("OrgVO1");
    }

    /**
     * Container's getter for SupplierLOV1.
     * @return SupplierLOV1
     */
    public SupplierLOVImpl getSupplierLOV1() {
        return (SupplierLOVImpl) findViewObject("SupplierLOV1");
    }

    /**
     * Container's getter for GeneralInquiryVO1.
     * @return GeneralInquiryVO1
     */
    public GeneralInquiryVOImpl getGeneralInquiryVO1() {
        return (GeneralInquiryVOImpl) findViewObject("GeneralInquiryVO1");
    }

    public void updateVA() {

        GeneralInquiryQueryVOImpl vo = getGeneralInquiryQueryVO1();
        Row[] selectedRolesRows = vo.getFilteredRows("EmployeeSelect", true);

        TradeGeneralInquiryVOImpl tradevo = getTradeGeneralInquiryVO1();
        String supSiteNo;
        ViewCriteria criteria = tradevo.getViewCriteria("TradeGeneralInquiryVOCriteria");
        String newVendorAssistant;

        for (Row row : selectedRolesRows) {

            supSiteNo = (String) row.getAttribute("VendorSiteId").toString();
            newVendorAssistant = (String) row.getAttribute("EmployeeNumber");
            tradevo.applyViewCriteria(null);
            tradevo.setNamedWhereClauseParam("p_vend_site", supSiteNo);
            tradevo.applyViewCriteria(criteria);
            tradevo.executeQuery();
            tradevo.first().setAttribute("Attribute6", newVendorAssistant);

        }

        getDBTransaction().commit();
        generalInquirySearchValidate();
        GeneralInquiryTVORowImpl row = (GeneralInquiryTVORowImpl) getGeneralInquiryTVO1().getCurrentRow();
        row.setoperatingId(null);
        row.setsupName(null);
        row.setsupNo(null);
        row.setsupSiteCode(null);
        row.setvendorAssistant(null);
        getDBTransaction().commit();
        vo.executeEmptyRowSet();

    }

    public String updateSelectedVA() {

        GeneralInquiryQueryVOImpl vo = getGeneralInquiryQueryVO1();
        //   GeneralInquiryQueryVORowImpl row = (GeneralInquiryQueryVORowImpl) vo.first();
        // RowSetIterator rsIterator=vo.createRowSetIterator(null);
        Row[] selectedRolesRows = vo.getFilteredRows("EmployeeSelect", true);

        TradeGeneralInquiryVOImpl tradevo = getTradeGeneralInquiryVO1();
        String supSiteNo;
        ViewCriteria criteria = tradevo.getViewCriteria("TradeGeneralInquiryVOCriteria");
        String newVendorAssistant;
        if (selectedRolesRows.length == 0) {
            return "Please select at least one row.";
        }
        for (Row row : selectedRolesRows) {

            supSiteNo = (String) row.getAttribute("VendorSiteId").toString();
            newVendorAssistant = (String) row.getAttribute("EmployeeNumber");
            tradevo.applyViewCriteria(null);
            tradevo.setNamedWhereClauseParam("p_vend_site", supSiteNo);
            tradevo.applyViewCriteria(criteria);
            tradevo.executeQuery();
            tradevo.first().setAttribute("Attribute6", newVendorAssistant);

        }

        getDBTransaction().commit();
        generalInquirySearchValidate();
        GeneralInquiryTVORowImpl row = (GeneralInquiryTVORowImpl) getGeneralInquiryTVO1().getCurrentRow();
        row.setoperatingId(null);
        row.setsupName(null);
        row.setsupNo(null);
        row.setsupSiteCode(null);
        row.setvendorAssistant(null);
        getDBTransaction().commit();
        vo.executeEmptyRowSet();
        return "Success";
    }


    /**
     * Container's getter for TradeGeneralInquiryVO1.
     * @return TradeGeneralInquiryVO1
     */
    public TradeGeneralInquiryVOImpl getTradeGeneralInquiryVO1() {
        return (TradeGeneralInquiryVOImpl) findViewObject("TradeGeneralInquiryVO1");
    }

    /**
     * Container's getter for PerAllPeopleFVO1.
     * @return PerAllPeopleFVO1
     */
    public PerAllPeopleFVOImpl getPerAllPeopleFVO1() {
        return (PerAllPeopleFVOImpl) findViewObject("PerAllPeopleFVO1");
    }

    /**
     * Container's getter for GeneralInquiryQueryVO1.
     * @return GeneralInquiryQueryVO1
     */
    public GeneralInquiryQueryVOImpl getGeneralInquiryQueryVO1() {
        return (GeneralInquiryQueryVOImpl) findViewObject("GeneralInquiryQueryVO1");
    }

    /**
     * Container's getter for GeneralInQuirySKUVO1.
     * @return GeneralInQuirySKUVO1
     */
    public GeneralInQuirySKUVOImpl getGeneralInQuirySKUVO1() {
        return (GeneralInQuirySKUVOImpl) findViewObject("GeneralInQuirySKUVO1");
    }

    public void seachSKU(String sku) {
        getGeneralInQuirySKUVO1().setWhereClause(null);
        getGeneralInQuirySKUVO1().setNamedWhereClauseParam("b_sku_id", "195128");
        getGeneralInQuirySKUVO1().executeQuery();
    }

    public String seachWithSKU(String sku) {
        getGeneralInQuirySKUVO1().setWhereClause(null);
        getGeneralInQuirySKUVO1().setNamedWhereClauseParam("b_sku_id", sku);
        getGeneralInQuirySKUVO1().executeQuery();
        if (getGeneralInQuirySKUVO1().getEstimatedRowCount() > 0) {
            return "Y";
        } else
            return "N";
    }

    public void clearSKU(String sku) {
        getGeneralInQuirySKUVO1().setWhereClause(null);
        getGeneralInQuirySKUVO1().setNamedWhereClauseParam("b_sku_id", null);
        getGeneralInQuirySKUVO1().executeQuery();
    }


    /*This method is for settign the Default Org Id for VA Employee Summary Screen1*/
    public void setDefaultOrgId0() {
        Number var = new Number(404);

        Key keyVendorsearchid = new Key(new Object[] { 1 });
        VASummarySearchVORowImpl row = (VASummarySearchVORowImpl) getVASummarySearchVO1().getRow(keyVendorsearchid);

        row.setAttribute("OrgId", var); //setAttribute("OrgId").toString());
        /*Since this is called from the Drill down we will just use this method and the Employee Vendor SUmmary VO separate*/
        //        executeVAEmpVendorSummary(null);
    }

    /*This method is for settign the Default Org Id for VA Employee Summary Screen2*/
    public void setDefaultOrgId1() {
        Number var = new Number(404);

        Key keyVendorsearchid = new Key(new Object[] { 1 });
        VASummarySearchVORowImpl row = (VASummarySearchVORowImpl) getVASummarySearchVO1().getRow(keyVendorsearchid);

        row.setAttribute("OrgId", var); //setAttribute("OrgId").toString());

        executeVAEmpVendorSummary1(null);
    }

    public void executeVAEmpVendorSummaryDirect(String pEmployeeId) {
        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;


        statement = dbti.createCallableStatement(("BEGIN " + "XX_AP_UI_VIEW_PKG.xx_empvnd_set(?,?,?,?);" + "END;"), 0);

        try {
            if (statement != null) {
                statement.setString(1, null);
                statement.setString(2, null);
                statement.setString(3, null);
                statement.setString(4, null);
                statement.execute();
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }
    }

    public void executeVAEmpVendorSummary(String pEmployeeId) {
        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;

        getVAEmpVendorSummaryVO1().executeEmptyRowSet();
        statement = dbti.createCallableStatement(("BEGIN " + "XX_AP_UI_VIEW_PKG.xx_empvnd_set(?,?,?,?);" + "END;"), 0);

        try {
            if (statement != null) {
                statement.setString(1, null);
                statement.setString(2, null);
                statement.setString(3, null);
                statement.setString(4, null);
                statement.execute();
                statement.setString(1, null);
                statement.setString(2, null);
                statement.setString(3, null);
                statement.setString(4, pEmployeeId);
                statement.execute();
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }
        VAEmpVendorSummaryVOImpl tradevo = getVAEmpVendorSummaryVO1();
        getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_employee_id", pEmployeeId);
        getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_org_id", null);
        getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_supp_name", null);
        getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_supp_num", null);
        getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_vend_site_code", null);

        System.out.println("TEST G.S: " + tradevo.getQuery());
        tradevo.executeQuery();
    }

    public void executeVAEmpVendorSummary1(String pEmployeeId) {
        getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_org_id", 404);
        getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_employee_id", pEmployeeId);

        System.out.println("executing query: " + getVAEmpVendorSummaryVO3().getQuery());
        getVAEmpVendorSummaryVO3().executeQuery();

    }

    public void executeVendorMootDtVO(String pSupplierName, String pSupplierSite, String pMoot, String pNrf) {
        ViewObjectImpl vo = getSupplierSiteSearchVO1();
        vo.setNamedWhereClauseParam("p_vendor_name", pSupplierName);
        vo.setNamedWhereClauseParam("p_vendor_site_code", pSupplierSite);
        vo.executeQuery();
        Number vendor_id = new Number(0);
        Number vendor_site_id = new Number(0);
        if (vo.first() != null) {
            try {
                vendor_id = new Number(vo.first()
                                         .getAttribute("VendorId")
                                         .toString());

                vendor_site_id = new Number(vo.first()
                                              .getAttribute("VendorSiteId")
                                              .toString());
            } catch (Exception e) {

            }
        }
        getVendMootDtVO1().setNamedWhereClauseParam("p_org_id", 404);
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_name", vendor_id);
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_site", vendor_site_id);
        getVendMootDtVO1().setNamedWhereClauseParam("p_moot", pMoot);
        getVendMootDtVO1().setNamedWhereClauseParam("p_nrf", pNrf);


        System.out.println("executing query: " + getVendMootDtVO1().getQuery());
        getVendMootDtVO1().executeQuery();

        System.out.println("TEST G.S: " + getVendMootDtVO1().getRowCount());
    }

    public void executeVendorMootDtVODrill(String pSupplierName, String pSupplierSite, String pMoot, String pNrf,
                                           String pDisc) {
        ViewObjectImpl vo = getSupplierSiteSearchVO1();
        vo.setNamedWhereClauseParam("p_vendor_name", pSupplierName);
        vo.setNamedWhereClauseParam("p_vendor_site_code", pSupplierSite);
        vo.executeQuery();
        Number vendor_id = null;
        Number vendor_site_id = null;
        if (vo.first() != null) {
            try {
                vendor_id = new Number(vo.first()
                                         .getAttribute("VendorId")
                                         .toString());

                vendor_site_id = new Number(vo.first()
                                              .getAttribute("VendorSiteId")
                                              .toString());
            } catch (Exception e) {

            }
        }
        getVendMootDtVO1().setWhereClause(null);
        getVendMootDtVO1().setNamedWhereClauseParam("p_org_id", 404);
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_name", vendor_id);
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_no", vendor_id);
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_site", vendor_site_id);
        getVendMootDtVO1().setNamedWhereClauseParam("p_moot", pMoot);
        getVendMootDtVO1().setNamedWhereClauseParam("p_nrf", pNrf);
        getVendMootDtVO1().setNamedWhereClauseParam("p_disc", pDisc);
        getVendMootDtVO1().addWhereClause(" source <> 'US_OD_DROPSHIP'");

        System.out.println("executing query: " + getVendMootDtVO1().getQuery());
        getVendMootDtVO1().executeQuery();

        System.out.println("TEST G.S: " + getVendMootDtVO1().getRowCount());
    }


    /**
     * Container's getter for GeneralInquiryUpdateVO1.
     * @return GeneralInquiryUpdateVO1
     */
    public GeneralInquiryUpdateVOImpl getGeneralInquiryUpdateVO1() {
        return (GeneralInquiryUpdateVOImpl) findViewObject("GeneralInquiryUpdateVO1");
    }

    public void createVendorUpdate() {

    }

    public void submitMassUpdate(HashMap param) {
        GeneralInquiryQueryVOImpl tradevo = getGeneralInquiryQueryVO1();
        String fromsup = (String) param.get("fromva");
        String tosup = (String) param.get("tova");
        ViewCriteria criteria = tradevo.getViewCriteria("TradeGeneralInquiryVOCriteria");


        ViewObject vo = tradevo.getViewObject();
        int i = 0;
        Row row = null;
        vo.reset();
        ArrayList list = new ArrayList();
        list.add(fromsup);
        list.add(tosup);
        while (vo.hasNext()) {
            if (i == 0)
                row = vo.first();
            else
                row = vo.next();

            if ((Boolean) row.getAttribute("EmployeeSelect"))
                list.add((String) row.getAttribute("SupplierSiteNo"));
            i++;
        }
        if (vo.getEstimatedRowCount() == 1)
            list.add((String) vo.first().getAttribute("SupplierSiteNo"));

        for (i = 0; i < list.size(); i++)
            System.out.println(list.get(i));
        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;


        statement =
            dbti.createCallableStatement(("BEGIN " + "XX_AP_TRADE_MATCH_UTL_PKG.xx_upd_vendorassistant(?);" + "END;"),
                                         0);

        try {
            if (statement != null) {
                ArrayDescriptor empArray =
                    ArrayDescriptor.createDescriptor("XX_AP_TR_INV_ARRAY", statement.getConnection());
                ARRAY invoicearray = new ARRAY(empArray, statement.getConnection(), list.toArray());
                statement.setArray(1, invoicearray);
                statement.execute();
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }

        getDBTransaction().commit();

        tradevo.executeEmptyRowSet();
        getGeneralInquiryMassUpdateQueryVO1().first().setAttribute("fromVA", null);
        getGeneralInquiryMassUpdateQueryVO1().first().setAttribute("toVA", null);
    }

    public String massUpdateReason(String qtyReason, String priceReason, String releaseholdSelect,
                                   String chargebackSelect) {
        XXApInvoiceHoldsVOImpl tradevo = getXXApInvoiceHoldsVO1();
        ViewCriteria criteria = tradevo.getViewCriteria("XXApInvoiceHoldsVOCriteria1");
        tradevo.applyViewCriteria(null);
        tradevo.setWhereClause(null);
        tradevo.setNamedWhereClauseParam("pInvoiceId", getApInvoicesVO1().first().getAttribute("InvoiceId"));
        tradevo.addWhereClause(" hold_lookup_code in ('PRICE','OD Max Price')");
        tradevo.applyViewCriteria(criteria);
        tradevo.executeQuery();


        ViewObject vo = tradevo.getViewObject();
        int i = 0;
        Row row = null;
        vo.reset();
        while (vo.hasNext()) {
            if (i == 0)
                row = vo.first();
            else
                row = vo.next();
            if (releaseholdSelect.equals("true"))
                row.setAttribute("ReleaseHold", "Y");
            if (chargebackSelect.equals("true"))
                row.setAttribute("Chargeback", "Y");
            i++;
        }
        getDBTransaction().commit();
        return null;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement cst = null;
        try {
            //Creating sql statement
            cst = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            //Register dataType for return value
            cst.registerOutParameter(1, sqlReturnType);
            //Pass input parameters value
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    cst.setObject(z + 2, bindVars[z]);
                }
            }
            cst.executeUpdate();
            //Finally get returned value
            return cst.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (cst != null) {
                try {
                    cst.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Container's getter for GeneralInquiryMassUpdateVO1.
     * @return GeneralInquiryMassUpdateVO1
     */
    public GeneralInquiryMassUpdateVOImpl getGeneralInquiryMassUpdateVO1() {
        return (GeneralInquiryMassUpdateVOImpl) findViewObject("GeneralInquiryMassUpdateVO1");
    }

    /**
     * Container's getter for InvoicesNotValidatedVO1.
     * @return InvoicesNotValidatedVO1
     */
    public InvoicesNotValidatedVOImpl getInvoicesNotValidatedVO1() {
        return (InvoicesNotValidatedVOImpl) findViewObject("InvoicesNotValidatedVO1");
    }

    /**
     * Container's getter for ApInvoicesVO1.
     * @return ApInvoicesVO1
     */
    public ApInvoicesVOImpl getApInvoicesVO1() {
        return (ApInvoicesVOImpl) findViewObject("ApInvoicesVO1");
    }

    public void invoiceSearch() {

        ApInvoicesVORowImpl row = (ApInvoicesVORowImpl) getApInvoicesVO1().getCurrentRow();

        ViewCriteria criteria = getInvoicesNotValidatedVO1().getViewCriteria("InvoicesNotValidatedVOCriteria");

        getInvoicesNotValidatedVO1().applyViewCriteria(null);
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_invoice_no", row.getinvoiceNumber());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_po_no", row.getpoNumber());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_invoice_from", row.getinvoiceFrom());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_invoice_to", row.getinvoiceTo());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_due_from", row.getdueFrom());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_due_to", row.getdueTo());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_vend_no", row.getsupNo());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_ven_name", row.getsupName());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_site", row.getsupSiteCode());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_vendor_asst", row.getvendorAssistant());
        getInvoicesNotValidatedVO1().applyViewCriteria(criteria);
        getInvoicesNotValidatedVO1().executeQuery();


    }

    public String invoiceSearchValidate() {

        ApInvoicesVORowImpl row = (ApInvoicesVORowImpl) getApInvoicesVO1().getCurrentRow();

        if (row.getinvoiceTo() != null && row.getinvoiceFrom() != null &&
            row.getinvoiceTo().compareTo(row.getinvoiceFrom()) < 0) {
            return "Please enter From Invoice Date less than To Invoice Date.";
        }
        if (row.getdueTo() != null && row.getdueFrom() != null && row.getdueTo().compareTo(row.getdueFrom()) < 0) {
            return "Please enter From Due Date less than To Due Date.";
        }
        if (row.getsupNo() == null && row.getsupName() == null && row.getsupSiteCode() == null) {
            return "Please enter at least one of Supplier # or Supplier Name or Supplier Site.";
        }
        ViewCriteria criteria = getInvoicesNotValidatedVO1().getViewCriteria("InvoicesNotValidatedVOCriteria");

        getInvoicesNotValidatedVO1().applyViewCriteria(null);
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_invoice_no", row.getinvoiceNumber());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_po_no", row.getpoNumber());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_invoice_from", row.getinvoiceFrom());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_invoice_to", row.getinvoiceTo());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_due_from", row.getdueFrom());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_due_to", row.getdueTo());
        getInvoicesNotValidatedVO1().applyViewCriteria(criteria);
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("glDateFrom", row.getglDateFrom());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("glDateTo", row.getglDateTo());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_vendor_id", row.getvendId());
        // getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_ven_name", row.getsupName());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_vendor_site_id", row.getvendSiteId());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_emp_id", row.getempId());

        getInvoicesNotValidatedVO1().executeQuery();

        return null;
    }

    public String generalInquirySearchValidate() {
        GeneralInquiryTVORowImpl row = (GeneralInquiryTVORowImpl) getGeneralInquiryTVO1().getCurrentRow();

        getGeneralInquiryQueryVO1().setNamedWhereClauseParam("p_vendor_id", row.getvendId());
        getGeneralInquiryQueryVO1().setNamedWhereClauseParam("p_vendor_site_id", row.getvendSiteId());
        getGeneralInquiryQueryVO1().setNamedWhereClauseParam("p_site_category", row.getsiteCategory());
        getGeneralInquiryQueryVO1().setNamedWhereClauseParam("p_employee_id", row.getemployeeId());
        if (row.getoperatingId() != null) {
            getGeneralInquiryQueryVO1().setNamedWhereClauseParam("p_organization_id", row.getoperatingId().toString());
        }
        getGeneralInquiryQueryVO1().executeQuery();

        int i = 0;
        Row rowinquiry = null;

        return null;
    }

    public void clearGeneralInquiry() {
        GeneralInquiryTVORowImpl row = (GeneralInquiryTVORowImpl) getGeneralInquiryTVO1().getCurrentRow();
        if (row != null) {
            row.setsupNo(null);
            row.setsupName(null);
            row.setsupSiteCode(null);
            row.setsiteCategory(null);
            row.setvendorAssistant(null);
            row.setvendId(null);
            row.setvendSiteId(null);
            row.setemployeeId(null);
            row.setsiteCategory(null);
        }
    }

    public String paymentAttributeValidate() {

        ApInvoicesTermsVORowImpl row = (ApInvoicesTermsVORowImpl) getApInvoicesTermsVO1().getCurrentRow();

        if (row.getsupNo() == null && row.getsupName() == null && row.getsupSiteCode() == null) {
            return "Please enter at least one of Supplier#, Supplier Name, Supplier Site.";
        }
        if (row.getsupSiteCode() == null) {
            return "Please enter Supplier Site";
        }
        if (row.getinvoiceDateTo() != null && row.getinvoiceDate() != null &&
            row.getinvoiceDateTo().compareTo(row.getinvoiceDate()) < 0) {
            return "Please enter From Invoice Date less than To Invoice Date.";
        }
        if (row.getdueDateTo() != null && row.getdueDate() != null &&
            row.getdueDateTo().compareTo(row.getdueDate()) < 0) {
            return "Please enter From Due Date less than To Due Date.";
        }
        if (row.getpoDateRangeTo() != null && row.getpoDate() != null &&
            row.getpoDateRangeTo().compareTo(row.getpoDate()) < 0) {
            return "Please enter From PO Date less than To PO Date.";
        }
        if (row.getpoNum() == null && row.getinvoiceDate() == null && row.getinvoiceDateTo() == null &&
            row.getdueDate() == null && row.getdueDateTo() == null && row.getpoDate() == null &&
            row.getpoDateRangeTo() == null && row.getsupNo() == null && row.getsupName() == null &&
            row.getsupSiteCode() == null && row.gettermId() == null) {
            return "Please enter atlease one Search Criteria field.";
        }

        DateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");


        java.util.Date invoiceUtilDate = convertDomainDateToUtilDate(row.getinvoiceDate());
        String datetimeinvfrom = null;
        if (invoiceUtilDate != null)
            datetimeinvfrom = dateFormat.format(invoiceUtilDate);
        java.util.Date invoicetoUtilDate = convertDomainDateToUtilDate(row.getinvoiceDateTo());
        String datetimeinvto = null;
        if (invoicetoUtilDate != null)
            datetimeinvto = dateFormat.format(invoicetoUtilDate);

        java.util.Date pofromUtilDate = convertDomainDateToUtilDate(row.getpoDate());
        String datetimepofrom = null;
        if (pofromUtilDate != null)
            datetimepofrom = dateFormat.format(pofromUtilDate);
        java.util.Date potoUtilDate = convertDomainDateToUtilDate(row.getpoDateRangeTo());
        String datetimepoto = null;
        if (potoUtilDate != null)
            datetimepoto = dateFormat.format(potoUtilDate);
        java.util.Date duefromUtilDate = convertDomainDateToUtilDate(row.getdueDate());
        String datetimeduefrom = null;
        if (duefromUtilDate != null)
            datetimeduefrom = dateFormat.format(duefromUtilDate);
        java.util.Date duetoUtilDate = convertDomainDateToUtilDate(row.getdueDateTo());
        String datetimedueto = null;
        if (duetoUtilDate != null)
            datetimedueto = dateFormat.format(duetoUtilDate);
        getPaymentAttributeVO1().setWhereClause(null);
        getPaymentAttributeVO1().setNamedWhereClauseParam("p_invoice_date_from", datetimeinvfrom);
        getPaymentAttributeVO1().setNamedWhereClauseParam("p_invoice_date_to", datetimeinvto);
        getPaymentAttributeVO1().setNamedWhereClauseParam("p_vendor_site_id", row.getvendorSiteId());
        getPaymentAttributeVO1().setNamedWhereClauseParam("p_po_header_id", row.getpoHeaderId());
        getPaymentAttributeVO1().setNamedWhereClauseParam("p_po_date_from", datetimepofrom);
        getPaymentAttributeVO1().setNamedWhereClauseParam("p_po_date_to", datetimepoto);
        getPaymentAttributeVO1().setNamedWhereClauseParam("p_due_date_from", datetimeduefrom);
        getPaymentAttributeVO1().setNamedWhereClauseParam("p_due_date_to", datetimedueto);
        getPaymentAttributeVO1().setNamedWhereClauseParam("p_vendor_id", row.getvendorId());
        getPaymentAttributeVO1().setNamedWhereClauseParam("p_term_id", row.gettermId());
        getPaymentAttributeVO1().executeQuery();

        return null;
    }

    public static java.util.Date convertDomainDateToUtilDate(oracle.jbo.domain.Date domainDate) {
        java.util.Date date = null;
        if (domainDate != null) {
            java.sql.Date sqldate = domainDate.dateValue();
            date = new java.util.Date(sqldate.getTime());
        }
        return date;
    }

    public String massReleaseValidate() {
        MassReleaseVORowImpl row = (MassReleaseVORowImpl) getMassReleaseVO1().getCurrentRow();

        if (row.getinvoiceFrom() != null && row.getinvoiceTo() != null &&
            row.getinvoiceTo().compareTo(row.getinvoiceFrom()) < 0) {
            return "Please enter From Invoice Date less than To Invoice Date.";
        }
        if (row.getdueFrom() != null && row.getdueTo() != null && row.getdueTo().compareTo(row.getdueFrom()) < 0) {
            return "Please enter From Due Date less than To Due Date.";
        }
        if (row.getpoFrom() != null && row.getpoTo() != null && row.getpoTo().compareTo(row.getpoFrom()) < 0) {
            return "Please enter From PO Date less than To PO Date.";
        }
        if (row.getpoNum() == null && row.getinvoiceFrom() == null && row.getinvoiceTo() == null &&
            row.getdueFrom() == null && row.getdueTo() == null && row.getpoFrom() == null && row.getpoTo() == null &&
            row.getsupNo() == null && row.getsupName() == null && row.getsupSiteCode() == null &&
            row.getvendorAssistant() == null && row.getskuNo() == null && row.getdropShip() == null &&
            row.getnonCode() == null && row.getfrontDoor() == null && row.getfreightExcp() == null) {
        }
        if (row.getsupSiteCode() == null) {
            return "Please enter Supplier Site.";
        }
        ViewCriteria criteria = getMassReleaseHoldVO1().getViewCriteria("MassReleaseHoldVOCriteria");

        getMassReleaseHoldVO1().applyViewCriteria(null);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("poFrom", row.getpoFrom());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("poTo", row.getpoTo());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("invoiceFrom", row.getinvoiceFrom());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("invoiceTo", row.getinvoiceTo());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("dueFrom", row.getdueFrom());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("dueTo", row.getdueTo());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("p_fr_gldate", row.getglDateFrom());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("p_to_gldate", row.getglDateTo());
        String frontDoor = null;
        if (row.getfrontDoor() != null && row.getfrontDoor().equals("Y"))
            frontDoor = "Y";
        else
            frontDoor = null;
        String nonCode = null;
        if (row.getnonCode() != null && row.getnonCode().equals("Y"))
            nonCode = "Y";
        else
            nonCode = null;
        String dropShip = null;
        if (row.getdropShip() != null && row.getdropShip().equals("Y"))
            dropShip = "Y";
        else
            dropShip = null;
        String freightExcp = null;
        if (row.getfreightExcp() != null && row.getfreightExcp().equals("Y"))
            freightExcp = "Y";
        else
            freightExcp = null;
        String quantityExcp = null;
        if (row.getquantityExcp() != null && row.getquantityExcp().equals("Y"))
            quantityExcp = "Y";
        else
            quantityExcp = null;
        String pricingExcp = null;
        if (row.getpricingExcp() != null && row.getpricingExcp().equals("Y"))
            pricingExcp = "Y";
        else
            pricingExcp = null;

        getMassReleaseHoldVO1().setNamedWhereClauseParam("p_front_door", frontDoor);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("p_non_code", nonCode);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("p_drop_ship", dropShip);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("p_price_expt", pricingExcp);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("p_qty_expt", quantityExcp);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("p_frt_expt", freightExcp);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("operatingId", row.getoperatingId());
        getMassReleaseHoldVO1().applyViewCriteria(criteria);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("skunum", row.getitemId());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("p_vendor_site_id", row.getvendSiteId());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("p_vendor_id", row.getvendId());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("p_po_header_id", row.getpoHdrId());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("p_employee_id", row.getempId());
        getMassReleaseHoldVO1().executeQuery();
        try {
            oracle.jbo.domain.Number invoicesum = new oracle.jbo.domain.Number("0");
            oracle.jbo.domain.Number quantityholdsum = new oracle.jbo.domain.Number("0");
            oracle.jbo.domain.Number priceholdsum = new oracle.jbo.domain.Number("0");

            ViewObject vo = getMassReleaseHoldVO1().getViewObject();
            int i = 0;
            Row rowsum = null;
            vo.reset();

            while (vo.hasNext()) {
                if (i == 0)
                    rowsum = vo.first();
                else
                    rowsum = vo.next();

                invoicesum = invoicesum.add((oracle.jbo.domain.Number) rowsum.getAttribute("InvoiceAmount"));
                quantityholdsum = quantityholdsum.add((oracle.jbo.domain.Number) rowsum.getAttribute("QtyHoldAmt"));
                priceholdsum = priceholdsum.add((oracle.jbo.domain.Number) rowsum.getAttribute("PriceHoldAmt"));

                i++;
            }
            if (vo.getEstimatedRowCount() == 1) {
                invoicesum = (oracle.jbo.domain.Number) getMassReleaseHoldVO1().first().getAttribute("InvoiceAmount");
                quantityholdsum = (oracle.jbo.domain.Number) getMassReleaseHoldVO1().first().getAttribute("QtyHoldAmt");
                priceholdsum = (oracle.jbo.domain.Number) getMassReleaseHoldVO1().first().getAttribute("PriceHoldAmt");


            }
            if (invoicesum != null) {
                String sumtotal =
                    invoicesum.toString() + "," + quantityholdsum.toString() + "," + priceholdsum.toString();

                return sumtotal;
            }
        } catch (Exception e) {

        }

        return null;
    }

    public String costVarinceValidate() {
        CostVarianceTVORowImpl row = (CostVarianceTVORowImpl) getCostVarianceTVO1().getCurrentRow();

        if (row.getinvoiceFrom() != null && row.getinvoiceTo() != null &&
            row.getinvoiceTo().compareTo(row.getinvoiceFrom()) < 0) {
            return "Please enter From Invoice Date less than To Invoice Date.";
        }
        if (row.getpoDateFrom() != null && row.getpoDateTo() != null &&
            row.getpoDateTo().compareTo(row.getpoDateFrom()) < 0) {
            return "Please enter From PO Date less than To PO Date.";
        }
        if (row.getanswerDate() != null && row.getanswerDateTo() != null &&
            row.getanswerDateTo().compareTo(row.getanswerDate()) < 0) {
            return "Please enter From Answer Date less than To Answer Date.";
        }
        if (row.getskuNum() == null && row.getpoNum() == null && row.getinvoiceFrom() == null &&
            row.getinvoiceTo() == null && row.getpoDateFrom() == null && row.getpoDateTo() == null &&
            row.getdept() == null && row.getvpc() == null && row.getsupplierNo() == null &&
            row.getsupplierName() == null && row.getsupplierSiteCode() == null && row.getinvoiceNum() == null &&
            row.getanswer() == null && row.getanswerDate() == null && row.getdropShip() == null &&
            row.getfrontDoor() == null && row.getspecialOrder() == null && row.getvendorAsst() == null &&
            row.getmerchant() == null && row.getinvoiceStatus() == null)

        {
            return "Please enter atlease one Search Criteria field.";
        }
        ViewCriteria criteria = getCostVarianceVO1().getViewCriteria("CostVarianceVOCriteria");

        getCostVarianceVO1().applyViewCriteria(null);
        getCostVarianceVO1().setWhereClause(null);
        getCostVarianceVO1().setNamedWhereClauseParam("skuNum", row.getskuNum());
        getCostVarianceVO1().setNamedWhereClauseParam("poNo", row.getpoNum());
        getCostVarianceVO1().setNamedWhereClauseParam("poFrom", row.getpoDateFrom());
        getCostVarianceVO1().setNamedWhereClauseParam("poTo", row.getpoDateTo());
        getCostVarianceVO1().setNamedWhereClauseParam("invoiceFrom", row.getinvoiceFrom());

        getCostVarianceVO1().setNamedWhereClauseParam("invoiceTo", row.getinvoiceTo());
        getCostVarianceVO1().setNamedWhereClauseParam("deptNo", row.getdeptNo());
        getCostVarianceVO1().setNamedWhereClauseParam("vpcNo", row.getvpc());
        getCostVarianceVO1().setNamedWhereClauseParam("supNo", row.getsupplierNo());
        getCostVarianceVO1().setNamedWhereClauseParam("supName", row.getsupplierName());
        getCostVarianceVO1().setNamedWhereClauseParam("supSiteCode", row.getsupplierSiteCode());
        getCostVarianceVO1().addWhereClause(" invoice_num not like '%ODDBUIA%'");
        if (row.getvendorAsst() != null && !row.getvendorAsst().equals("Open")) {
            getCostVarianceVO1().setNamedWhereClauseParam("venAssistant", row.getvendorAsst());
        }
        if (row.getvendorAsst() != null && row.getvendorAsst().equals("Open")) {
            getCostVarianceVO1().addWhereClause(" and vendor_asst is null ");
        }
        if (row.getvendorAsst() == null) {
            getCostVarianceVO1().setNamedWhereClauseParam("venAssistant", row.getvendorAsst());
        }
        getCostVarianceVO1().setNamedWhereClauseParam("invoiceNo", row.getinvoiceNum());
        if (row.getanswer() != null && row.getanswer().equalsIgnoreCase("No Answer")) {
            getCostVarianceVO1().addWhereClause(" and answer_code is null");
            getCostVarianceVO1().setNamedWhereClauseParam("ansCode", null);
        } else
            getCostVarianceVO1().setNamedWhereClauseParam("ansCode", row.getanswer());
        getCostVarianceVO1().setNamedWhereClauseParam("ansDate", row.getanswerDate());
        getCostVarianceVO1().setNamedWhereClauseParam("ansDateTo", row.getanswerDateTo());

        getCostVarianceVO1().setNamedWhereClauseParam("merchant", row.getmerchant());
        getCostVarianceVO1().setNamedWhereClauseParam("invStatus", row.getinvoiceStatus());
        //  getMassReleaseHoldVO1().setNamedWhereClauseParam("skuNo", row.getskuNo());
        String frontDoor = null;
        if (row.getfrontDoor() != null && row.getfrontDoor().equals("Y"))
            frontDoor = "Y";
        else
            frontDoor = null;
        String specialOrder = null;
        if (row.getspecialOrder() != null && row.getspecialOrder().equals("Y"))
            specialOrder = "Y";
        else
            specialOrder = null;
        String dropShip = null;
        if (row.getdropShip() != null && row.getdropShip().equals("Y"))
            dropShip = "Y";
        else
            dropShip = null;
        if (frontDoor != null && frontDoor.equals("Y")) {
            getCostVarianceVO1().addWhereClause(" and po_type like 'Front%' ");
        }
        if (dropShip != null && dropShip.equals("Y")) {
            getCostVarianceVO1().addWhereClause(" and po_type like 'Drop%' ");
        }
        if (row.getoperatingUnit() != null)
            getCostVarianceVO1().setNamedWhereClauseParam("operatingId", row.getoperatingUnit().toString());
        getCostVarianceVO1().applyViewCriteria(criteria);
        getCostVarianceVO1().executeQuery();


        return null;
    }

    /**
     * Container's getter for ApInvoiceUpdateVO1.
     * @return ApInvoiceUpdateVO1
     */
    public ApInvoiceUpdateVOImpl getApInvoiceUpdateVO1() {
        return (ApInvoiceUpdateVOImpl) findViewObject("ApInvoiceUpdateVO1");
    }

    public void updateSelectedRows() {
        InvoicesNotValidatedVOImpl tradevo = getInvoicesNotValidatedVO1();


        Row[] rows = tradevo.getFilteredRows("EmployeeSelect", true);
        ArrayList list = new ArrayList();
        for (Row row : rows) {
            list.add((String) row.getAttribute("InvoiceNum"));
        }
        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;


        statement =
            dbti.createCallableStatement(("BEGIN " + "XX_AP_TRADE_MATCH_UTL_PKG.xx_upd_invoice_released(?);" + "END;"),
                                         0);

        try {
            if (statement != null) {
                ArrayDescriptor empArray =
                    ArrayDescriptor.createDescriptor("XX_AP_TR_INV_ARRAY", statement.getConnection());
                ARRAY invoicearray = new ARRAY(empArray, statement.getConnection(), list.toArray());
                statement.setArray(1, invoicearray);
                statement.execute();
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }

        getDBTransaction().commit();
        tradevo.executeEmptyRowSet();
        ApInvoicesVORowImpl row = (ApInvoicesVORowImpl) getApInvoicesVO1().getCurrentRow();
        row.setinvoiceNumber(null);
        row.setpoNumber(null);
        row.setinvoiceFrom(null);
        row.setinvoiceTo(null);
        row.setdueFrom(null);
        row.setdueTo(null);
        row.setsupNo(null);
        row.setsupName(null);
        row.setsupSiteCode(null);
        row.setvendorAssistant(null);

        getDBTransaction().commit();
    }

    public String updateInvoiceDetails() {
        ApInvoicesVOImpl tradevo = getApInvoicesVO1();

        getDBTransaction().commit();
        XXApHoldsVOImpl holdvo = getXXApHoldsVO2();
        getXXApHoldsVO2().setWhereClause(null);
        getXXApHoldsVO2().addWhereClause(" XXApInvoiceHoldsEO.Invoice_id=" + getApInvoicesVO1().getCurrentRow()
                                                                                               .getAttribute("InvoiceId")
                                                                                               .toString());
        getXXApHoldsVO2()
            .addWhereClause(" and XXApInvoiceHoldsEO.hold_lookup_code is not null and (XXApInvoiceHoldsEO.release_hold is null or XXApInvoiceHoldsEO.release_hold='N')");
        getXXApHoldsVO2().executeQuery();
        if (getXXApHoldsVO2().getEstimatedRowCount() > 0) {
        }
        getXXApHoldsVO2().setWhereClause(null);
        getXXApHoldsVO2().addWhereClause(" XXApInvoiceHoldsEO.Invoice_id=" + getApInvoicesVO1().getCurrentRow()
                                                                                               .getAttribute("InvoiceId")
                                                                                               .toString());
        getXXApHoldsVO2().addWhereClause(" and  (XXApInvoiceHoldsEO.reason_code is null )");
        getXXApHoldsVO2().executeQuery();
        if (getXXApHoldsVO2().getEstimatedRowCount() > 0) {
        }

        Number orgInvAmount = (Number) getApInvoicesVO1().first().getAttribute("InvoiceAmount");
        BigDecimal reasoncode = getInvoiceReasonTot();
        BigDecimal invtot = getInvoiceTot();
        BigDecimal totInvAmount = new BigDecimal(0);
        if (reasoncode != null && invtot != null) {
            totInvAmount = reasoncode.add(invtot);
        }
        if (!(totInvAmount.doubleValue() == orgInvAmount.doubleValue())) {
            //   return "Grand Total and Original Invoice Amount not equal.";
        }

        String userId = null;
        String userName = null;
        Integer respId = null;
        Integer respAppId = null;
        Map sessionScope = ADFContext.getCurrent().getSessionScope();

        if (sessionScope.get("userId") != null) {
            userId = sessionScope.get("userId").toString();
            userName = sessionScope.get("userName").toString();
            respId = Integer.parseInt(sessionScope.get("respId").toString());
            respAppId = Integer.parseInt(sessionScope.get("respAppId").toString());

        } else {
            return "Your Session is Inactive. Please close browser and login again.";
        }

        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;
        CallableStatement statementinitialize = null;

        statementinitialize =
            dbti.createCallableStatement(("BEGIN " + "XX_AP_TR_UI_ACTION_PKG.xx_apps_initialize(?,?,?);" + "END;"), 0);


        try {
            if (statementinitialize != null) {

                statementinitialize.setString(1, userId);
                statementinitialize.setInt(2, respId);
                statementinitialize.setInt(3, respAppId);


                statementinitialize.execute();

            }
        } catch (Exception e) {
            return e.toString();
        }
        statement =
            dbti.createCallableStatement(("BEGIN " + "XX_AP_TR_UI_ACTION_PKG.xx_upd_invoice_chargeback(?,?);" + "END;"),
                                         0);

        try {
            if (statement != null) {
                statement.setString(1, tradevo.first()
                                              .getAttribute("InvoiceId")
                                              .toString());
                statement.setString(2, "404");
                statement.execute();
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }

        getDBTransaction().commit();
        return null;
    }

    public void saveInvoice() {
        getDBTransaction().commit();
        ApInvoiceLineVOImpl vo = getApInvoiceLineVO1();
        vo.calculateTotalQuantity();
    }

    public String validateInvoice() {
        XXApHoldsVOImpl holdvo = getXXApHoldsVO2();

        getXXApHoldsVO2().setWhereClause(null);
        getXXApHoldsVO2().addWhereClause(" XXApInvoiceHoldsEO.Invoice_id=" + getApInvoicesVO1().getCurrentRow()
                                                                                               .getAttribute("InvoiceId")
                                                                                               .toString());
        getXXApHoldsVO2()
            .addWhereClause(" and  (XXApInvoiceHoldsEO.reason_code is null and XXApInvoiceHoldsEO.chargeback is null and XXApInvoiceHoldsEO.hold_lookup_code is null )");
        getXXApHoldsVO2().executeQuery();
        if (getXXApHoldsVO2().getEstimatedRowCount() > 0) {
            return "Please select Reason Code/Chargeback for Split Lines to proceed for Apply.";
        }

        getApInvoiceHoldsVO2().setWhereClause(null);
        getApInvoiceHoldsVO2().addWhereClause(" XXApInvoiceHoldsEO.hold_lookup_code='OD MISC HOLD'");
        getApInvoiceHoldsVO2().addWhereClause(" and XXApInvoiceHoldsEO.invoice_id=" + getApInvoicesVO1().getCurrentRow()
                                                                                                        .getAttribute("InvoiceId")
                                                                                                        .toString());
        getApInvoiceHoldsVO2().executeQuery();
        if (getApInvoiceHoldsVO2().getEstimatedRowCount() > 0) {
            return "Please delete Miscellaneous Line with Invalid SKU to proceed for Apply.";
        }

        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;

        BigDecimal lineTotal = new BigDecimal(0);
        BigDecimal reasoncodeTotal = new BigDecimal(0);
        statement =
            dbti.createCallableStatement(("BEGIN " + "XX_AP_TR_UI_ACTION_PKG.xx_get_total(?,?,?);" + "END;"), 0);

        try {
            if (statement != null) {
                statement.setString(1, getApInvoicesVO1().first()
                                                         .getAttribute("InvoiceId")
                                                         .toString());
                statement.registerOutParameter(2, Types.DOUBLE);
                statement.registerOutParameter(3, Types.DOUBLE);
                statement.execute();
                lineTotal = new BigDecimal(statement.getObject(2).toString());
                reasoncodeTotal = new BigDecimal(statement.getObject(3).toString());
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }

        Number orgInvAmount = (Number) getApInvoicesVO1().first().getAttribute("InvoiceAmount");
        BigDecimal totInvAmount = new BigDecimal(0);
        if (reasoncodeTotal != null) {
            totInvAmount = reasoncodeTotal.add(lineTotal);
        }
        if (totInvAmount != null) {
            if (!(totInvAmount.doubleValue() == orgInvAmount.doubleValue())) {
                return "Grand Total and Original Invoice Amount not equal.";
            }
        }
        Object obj = null;
        statement =
            dbti.createCallableStatement(("BEGIN ? :=" + "XX_AP_TR_UI_ACTION_PKG.xx_no_chbk_no_split(?);" + "END;"), 0);

        try {
            if (statement != null) {
                statement.registerOutParameter(1, Types.VARCHAR);
                statement.setObject(2, getApInvoicesVO1().first()
                                                         .getAttribute("InvoiceId")
                                                         .toString());


                statement.executeUpdate();
                obj = statement.getObject(1);
                if (obj != null && obj.equals("Y")) {
                    return "Please select Chargeback or Split Line to proceed for Apply.";
                }
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }
        ViewCriteria criteriaxxinvoicehdr = getXXApInvoiceHeaderVO1().getViewCriteria("XXApInvoiceHeaderVOCriteria");
        getXXApInvoiceHeaderVO1().applyViewCriteria(null);
        getXXApInvoiceHeaderVO1().setNamedWhereClauseParam("invId", getApInvoicesVO1().first()
                                                                                      .getAttribute("InvoiceId")
                                                                                      .toString());
        getXXApInvoiceHeaderVO1().applyViewCriteria(criteriaxxinvoicehdr);
        getXXApInvoiceHeaderVO1().executeQuery();
        Number requestId = null;
        if (getXXApInvoiceHeaderVO1().first() != null) {
            requestId = (Number) getXXApInvoiceHeaderVO1().first().getAttribute("RequestId");
            if (requestId != null && requestId.doubleValue() > 0) {
                return "Invoice is already under process. You can't apply again.";
            }
        }

        return null;
    }

    public BigDecimal saveInvoiceDetails() {
        getDBTransaction().commit();


        DBTransaction dbTransactionnewholds = getDBTransaction();
        DBTransactionImpl dbtinewholds = (DBTransactionImpl) dbTransactionnewholds;
        CallableStatement statementnewholds = null;
        Object objnewholds = null;


        statementnewholds =
            dbtinewholds.createCallableStatement(("BEGIN " + "XX_AP_TR_UI_ACTION_PKG.xx_upd_reason_code(?,?);" +
                                                  "END;"), 0);

        try {
            if (statementnewholds != null) {
                statementnewholds.setString(1, getApInvoicesVO1().first()
                                                                 .getAttribute("InvoiceId")
                                                                 .toString());
                statementnewholds.setDouble(2, new Double(getApInvoicesVO1().first()
                                                                            .getAttribute("InvoiceAmount")
                                                                            .toString()));


                statementnewholds.execute();
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }
        ViewCriteria criteriainvoicehold = getApInvoiceHoldsVO1().getViewCriteria("ApInvoiceHoldsVOCriteria");
        getApInvoiceHoldsVO1().applyViewCriteria(null);
        getApInvoiceHoldsVO1().setWhereClause(null);
        getApInvoiceHoldsVO1().addWhereClause(" XXApInvoiceHoldsEO.line_location_id is null");
        getApInvoiceHoldsVO1().setNamedWhereClauseParam("invId", getApInvoicesVO1().first()
                                                                                   .getAttribute("InvoiceId")
                                                                                   .toString());
        getApInvoiceHoldsVO1().applyViewCriteria(criteriainvoicehold);
        getApInvoiceHoldsVO1().executeQuery();
        return null;
    }

    public BigDecimal getInvoiceTot() {
        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;

        BigDecimal lineTotal = new BigDecimal(0);
        BigDecimal reasoncodeTotal = new BigDecimal(0);
        statement =
            dbti.createCallableStatement(("BEGIN " + "XX_AP_TR_UI_ACTION_PKG.xx_get_total(?,?,?);" + "END;"), 0);

        try {
            if (statement != null) {
                statement.setString(1, getApInvoicesVO1().first()
                                                         .getAttribute("InvoiceId")
                                                         .toString());
                statement.registerOutParameter(2, Types.DOUBLE);
                statement.registerOutParameter(3, Types.DOUBLE);
                statement.execute();
                lineTotal = new BigDecimal(statement.getObject(2).toString());
                reasoncodeTotal = new BigDecimal(statement.getObject(3).toString());
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }
        return lineTotal;
    }

    public BigDecimal getInvoiceReasonTot() {
        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;

        BigDecimal lineTotal = new BigDecimal(0);
        BigDecimal reasoncodeTotal = new BigDecimal(0);
        statement =
            dbti.createCallableStatement(("BEGIN " + "XX_AP_TR_UI_ACTION_PKG.xx_get_total(?,?,?);" + "END;"), 0);

        try {
            if (statement != null) {
                statement.setString(1, getApInvoicesVO1().first()
                                                         .getAttribute("InvoiceId")
                                                         .toString());
                statement.registerOutParameter(2, Types.DOUBLE);
                statement.registerOutParameter(3, Types.DOUBLE);
                statement.execute();
                lineTotal = new BigDecimal(statement.getObject(2).toString());
                reasoncodeTotal = new BigDecimal(statement.getObject(3).toString());
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }
        return reasoncodeTotal;
    }

    public BigDecimal getInvoiceAmount() {
        BigDecimal invoiceamount = new BigDecimal(0);
        invoiceamount = new BigDecimal(getApInvoicesVO1().first()
                                                         .getAttribute("InvoiceAmount")
                                                         .toString());
        return invoiceamount;
    }
    /**
     * Container's getter for VendorMOOTDetVO1.
     * @return VendorMOOTDetVO1
     */
    /* public VendorMOOTDetVOImpl getVendorMOOTDetVO1() {
        return (VendorMOOTDetVOImpl) findViewObject("VendorMOOTDetVO1");
    }*/

    /**
     * Container's getter for VendMootDtVO1.
     * @return VendMootDtVO1
     */
    public VendMootDtVOImpl getVendMootDtVO1() {
        return (VendMootDtVOImpl) findViewObject("VendMootDtVO1");
    }


    /**
         * Container's getter for VendorMOOTDetVO1.
         * @return VendorMOOTDetVO1
         */
    /* public VendorMOOTDetVOImpl getVendorMOOTDetVO1() {
            return (VendorMOOTDetVOImpl) findViewObject("VendorMOOTDetVO1");
        }*/

    /**
     * Container's getter for ApInvoicesTermsVO1.
     * @return ApInvoicesTermsVO1
     */
    public ApInvoicesTermsVOImpl getApInvoicesTermsVO1() {
        return (ApInvoicesTermsVOImpl) findViewObject("ApInvoicesTermsVO1");
    }

    /**
     * Container's getter for PaymentAttributeVO1.
     * @return PaymentAttributeVO1
     */
    public PaymentAttributeVOImpl getPaymentAttributeVO1() {
        return (PaymentAttributeVOImpl) findViewObject("PaymentAttributeVO1");
    }

    public void updatePaymentSelectedRows() {
        PaymentAttributeVOImpl tradevo = getPaymentAttributeVO1();

        ArrayList list = new ArrayList();
        ApInvoiceAttributesVOImpl paymentvo = getApInvoiceAttributesVO1();
        Row paymentrow = paymentvo.getCurrentRow();
        if (paymentrow != null) {
            if (paymentrow.getAttribute("paymentTerm") != null)
                list.add((String) paymentrow.getAttribute("paymentTerm"));
            else
                list.add("NA");
            if (paymentrow.getAttribute("dueDate") != null)
                list.add(paymentrow.getAttribute("dueDate"));
            else
                list.add("NA");
            if (paymentrow.getAttribute("payMethod") != null) {
                list.add(paymentrow.getAttribute("payMethod"));
            } else
                list.add("NA");
            if (paymentrow.getAttribute("payGroup") != null) {
                list.add(paymentrow.getAttribute("payGroup"));
            } else
                list.add("NA");

        }
        Row[] rows = tradevo.getFilteredRows("EmployeeSelect", true);

        for (Row row : rows) {
            list.add(row.getAttribute("InvoiceId").toString());
        }
        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;


        statement =
            dbti.createCallableStatement(("BEGIN " + "XX_AP_TRADE_MATCH_UTL_PKG.xx_upd_paymentterms(?);" + "END;"), 0);

        try {
            if (statement != null) {
                ArrayDescriptor empArray =
                    ArrayDescriptor.createDescriptor("XX_AP_TR_INV_ARRAY", statement.getConnection());
                ARRAY invoicearray = new ARRAY(empArray, statement.getConnection(), list.toArray());
                statement.setArray(1, invoicearray);
                statement.execute();
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }

        getDBTransaction().commit();

    }

    public String updatePaymentAttributes() {
        PaymentAttributeVOImpl tradevo = getPaymentAttributeVO1();
        ArrayList list = new ArrayList();
        ApInvoiceAttributesVOImpl paymentvo = getApInvoiceAttributesVO1();
        Row paymentrow = paymentvo.getCurrentRow();
        if (paymentrow != null) {
            if (paymentrow.getAttribute("paymentTerm") != null && paymentrow.getAttribute("dueDate") != null)
                return "Please enter either New Payment Terms or New Due Date.";
            if (paymentrow.getAttribute("paymentTerm") != null)
                list.add((String) paymentrow.getAttribute("paymentTerm"));
            else
                list.add("NA");
            if (paymentrow.getAttribute("dueDate") != null)
                list.add(paymentrow.getAttribute("dueDate"));
            else
                list.add("NA");
            if (paymentrow.getAttribute("payMethod") != null) {
                list.add(paymentrow.getAttribute("payMethod"));
            } else
                list.add("NA");
            if (paymentrow.getAttribute("payGroup") != null) {
                list.add(paymentrow.getAttribute("payGroup"));
            } else
                list.add("NA");

        }
        Row[] rows = tradevo.getFilteredRows("EmployeeSelect", true);
        if (rows.length == 0) {
            return "Please select atleast one row.";
        }
        for (Row row : rows) {
            list.add(row.getAttribute("InvoiceId").toString());
        }
        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;


        statement =
            dbti.createCallableStatement(("BEGIN " + "XX_AP_TRADE_MATCH_UTL_PKG.xx_upd_paymentterms(?);" + "END;"), 0);

        try {
            if (statement != null) {
                ArrayDescriptor empArray =
                    ArrayDescriptor.createDescriptor("XX_AP_TR_INV_ARRAY", statement.getConnection());
                ARRAY invoicearray = new ARRAY(empArray, statement.getConnection(), list.toArray());
                statement.setArray(1, invoicearray);
                statement.execute();
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }

        getDBTransaction().commit();
        tradevo.executeEmptyRowSet();

        paymentrow = paymentvo.getCurrentRow();
        paymentrow.setAttribute("paymentTerm", null);
        paymentrow.setAttribute("dueDate", null);
        paymentrow.setAttribute("payMethod", null);
        paymentrow.setAttribute("payGroup", null);

        ApInvoicesTermsVORowImpl row = (ApInvoicesTermsVORowImpl) getApInvoicesTermsVO1().getCurrentRow();
        row.setAttribute("supNo", null);
        row.setAttribute("supName", null);
        row.setAttribute("supSiteCode", null);
        row.setAttribute("poNum", null);
        row.setAttribute("poDate", null);
        row.setAttribute("poDateRangeTo", null);
        row.setAttribute("invoiceDate", null);
        row.setAttribute("invoiceDateTo", null);
        row.setAttribute("dueDate", null);
        row.setAttribute("dueDateTo", null);
        row.setAttribute("termName", null);
        getDBTransaction().commit();
        return null;


    }

    public void clearPayment() {
        ApInvoicesTermsVORowImpl row = (ApInvoicesTermsVORowImpl) getApInvoicesTermsVO1().getCurrentRow();
        row.setAttribute("supNo", null);
        row.setAttribute("supName", null);
        row.setAttribute("supSiteCode", null);
        row.setAttribute("poNum", null);
        row.setAttribute("poDate", null);
        row.setAttribute("poDateRangeTo", null);
        row.setAttribute("invoiceDate", null);
        row.setAttribute("invoiceDateTo", null);
        row.setAttribute("dueDate", null);
        row.setAttribute("dueDateTo", null);
        row.setAttribute("termName", null);
        getDBTransaction().commit();
    }

    /**
     * Container's getter for ApInvoiceAttributesVO1.
     * @return ApInvoiceAttributesVO1
     */
    public ApInvoiceAttributesVOImpl getApInvoiceAttributesVO1() {
        return (ApInvoiceAttributesVOImpl) findViewObject("ApInvoiceAttributesVO1");
    }

    public void initPaymentTerms() {
        getPaymentAttributeVO1().executeEmptyRowSet();
    }

    public void clearInvoiceValidate() {
        ApInvoicesVORowImpl invoicerow = (ApInvoicesVORowImpl) getApInvoicesVO1().getCurrentRow();
        invoicerow.setpoNumber(null);
        invoicerow.setinvoiceFrom(null);
        invoicerow.setinvoiceTo(null);
        invoicerow.setinvoiceTo(null);
        invoicerow.setdueFrom(null);
        invoicerow.setdueTo(null);
        invoicerow.setsupNo(null);
        invoicerow.setsupName(null);
        invoicerow.setsupSiteCode(null);
        invoicerow.setinvoiceNumber(null);
        invoicerow.setvendorAssistant(null);
        invoicerow.setglDateFrom(null);
        invoicerow.setglDateTo(null);

    }

    public void initInvoiceNotValidated() {
        getInvoicesNotValidatedVO1().executeEmptyRowSet();

    }

    /**
     * Container's getter for MassReleaseHoldVO1.
     * @return MassReleaseHoldVO1
     */
    public MassReleaseHoldVOImpl getMassReleaseHoldVO1() {
        return (MassReleaseHoldVOImpl) findViewObject("MassReleaseHoldVO1");
    }

    /**
     * Container's getter for MassReleaseVO1.
     * @return MassReleaseVO1
     */
    public MassReleaseVOImpl getMassReleaseVO1() {
        return (MassReleaseVOImpl) findViewObject("MassReleaseVO1");
    }

    /*G.S method Executed for VA Emp Invoice Search*/
    public String EmpVendSearchAction() {
        Key keyVendorsearchid = new Key(new Object[] { 1 });
        VASummarySearchVORowImpl row = (VASummarySearchVORowImpl) getVASummarySearchVO1().getRow(keyVendorsearchid);

        ViewCriteria criteria = getVAEmpVendorSummaryVO1().getViewCriteria("VAEmpVendorSummaryVOCriteria1");

        getVAEmpVendorSummaryVO1().setWhereClause(null);
        getVAEmpVendorSummaryVO1().executeEmptyRowSet();
        getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_employee_id", row.getVendorAssistant());
        getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_org_id", row.getOrgId());
        getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_supp_name", row.getSupplierName());
        getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_supp_num", row.getSupplierNo());
        getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_vend_site_code", row.getSupplierSite());

        System.out.println("executing query getVAEmpVendorSummaryVO1().getQuery() in EmpVendSearchAction: " +
                           getVAEmpVendorSummaryVO1().getQuery());
        getVAEmpVendorSummaryVO1().executeQuery();
        System.out.println("1Row Count: " + getVAEmpVendorSummaryVO1().getEstimatedRowCount());


        return null;
    }


    public String EmpVendSearchAction1() {
        Key keyVendorsearchid = new Key(new Object[] { 1 });
        VASummarySearchVORowImpl row = (VASummarySearchVORowImpl) getVASummarySearchVO1().getRow(keyVendorsearchid);

        ViewCriteria criteria = getVAEmpVendorSummaryVO3().getViewCriteria("VAEmpVendorSummaryVOCriteria1");


        getVAEmpVendorSummaryVO3().setWhereClause(null);
        getVAEmpVendorSummaryVO3().executeEmptyRowSet();
        getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_employee_id", row.getVendorAssistant());
        getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_org_id", row.getOrgId());
        getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_supp_name", row.getSupplierName());
        getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_supp_num", row.getSupplierNo());
        getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_vend_site_code", row.getSupplierSite());

        System.out.println("executing query getVAEmpVendorSummaryVO3().getQuery() in EmpVendSearchAction: " +
                           getVAEmpVendorSummaryVO3().getQuery());
        getVAEmpVendorSummaryVO3().executeQuery();
        System.out.println("2Row Count: " + getVAEmpVendorSummaryVO3().getEstimatedRowCount());

        return null;
    }

    public String initMassRelease() {
        getMassReleaseHoldVO1().executeEmptyRowSet();

        return null;

    }

    public String updateMassReleaseSelectRow() {
        MassReleaseHoldVOImpl tradevo = getMassReleaseHoldVO1();


        Row[] rows = tradevo.getFilteredRows("EmployeeSelect", true);
        ArrayList list = new ArrayList();
        String reasonCode = null;
        if (rows.length == 0)
            return "Please select at least one row.";
        for (Row row : rows) {
            //  reasonCode=row.getAttribute("InvoiceId").toString();
            list.add(row.getAttribute("InvoiceId"));
            if (row.getAttribute("QtyHoldReason") == null && row.getAttribute("PriceHoldReason") == null)
                return "Please enter either Qty Hold Reason Code or Price Hold Reason Code for selected row.";
            if (row.getAttribute("QtyHoldReason") != null) {
                list.add(row.getAttribute("QtyHoldReason"));
            } else
                list.add("NA");
            if (row.getAttribute("PriceHoldReason") != null) {
                list.add(row.getAttribute("PriceHoldReason"));
            } else
                list.add("NA");
        }
        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;


        statement =
            dbti.createCallableStatement(("BEGIN " + "XX_AP_TRADE_MATCH_UTL_PKG.xx_upd_mass_releasehold(?);" + "END;"),
                                         0);

        try {
            if (statement != null) {
                ArrayDescriptor empArray =
                    ArrayDescriptor.createDescriptor("XX_AP_TR_INV_ARRAY", statement.getConnection());
                ARRAY invoicearray = new ARRAY(empArray, statement.getConnection(), list.toArray());
                statement.setArray(1, invoicearray);
                statement.execute();
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }

        getDBTransaction().commit();
        tradevo.executeEmptyRowSet();
        return null;
    }

    public String updateCostVariance() {
        CostVarianceVOImpl tradevo = getCostVarianceVO1();

        while (getCostVarianceVO1().hasNext()) {
            CostVarianceVORowImpl row = (CostVarianceVORowImpl) getCostVarianceVO1().next();
        }
        getDBTransaction().commit();
        tradevo.executeEmptyRowSet();
        return null;
    }

    /*G.S method Executed for Vendor Moot Details*/
    public String vendMootSearchAction() {

        VendorMootQueryPanelVORowImpl row =
            (VendorMootQueryPanelVORowImpl) getVendorMootQueryPanelVO1().getCurrentRow();
        String pageError = "no";
        String errorMessage = "";
        if (row.getInvoiceTo() != null && row.getInvoiceFrom() != null &&
            row.getInvoiceTo().compareTo(row.getInvoiceFrom()) < 0) {
            //            return "Please enter Invoice To less than Invoice From.";
            pageError = "yes";
            errorMessage = "Please enter Invoice From less than Invoice To.";
        }
        if (row.getDueTo() != null && row.getDueFrom() != null && row.getDueTo().compareTo(row.getDueFrom()) < 0) {
            pageError = "yes";
            errorMessage = errorMessage + "Please enter Due Date From less than Due Date To.";
        }

        if (pageError.equals("yes")) {
            return errorMessage;
        }
        System.out.println("Printing parameters: " + row.getOrgId());
        System.out.println("Printing AllExcepts: " + row.getAllExcepts());
        System.out.println("Printing DropShip: " + row.getDropShip());


        ViewCriteria criteria = getVendMootDtVO1().getViewCriteria("VendMootDtVOCriteria");

        getVendMootDtVO1().setWhereClause(null);
        getVendMootDtVO1().setNamedWhereClauseParam("p_all_excpt", row.getAllExcepts());
        getVendMootDtVO1().setNamedWhereClauseParam("p_drop_ship", row.getDropShip());
        getVendMootDtVO1().setNamedWhereClauseParam("p_front_door", row.getFrontDoor());
        getVendMootDtVO1().setNamedWhereClauseParam("p_frt_expt", row.getFrtExcepts());
        getVendMootDtVO1().setNamedWhereClauseParam("p_item", row.getitemId());
        getVendMootDtVO1().setNamedWhereClauseParam("p_non_code", row.getNonCode());
        getVendMootDtVO1().setNamedWhereClauseParam("p_org_id", row.getOrgId());
        getVendMootDtVO1().setNamedWhereClauseParam("p_invoice_num", row.getInvoiceNumber());
        getVendMootDtVO1().setNamedWhereClauseParam("p_ponum", row.getPONumber());
        getVendMootDtVO1().setNamedWhereClauseParam("p_fr_invdate", row.getInvoiceFrom());
        getVendMootDtVO1().setNamedWhereClauseParam("p_to_invdate", row.getInvoiceTo());
        getVendMootDtVO1().setNamedWhereClauseParam("p_due_fdate", row.getDueFrom());
        getVendMootDtVO1().setNamedWhereClauseParam("p_due_tdate", row.getDueTo());
        getVendMootDtVO1().setNamedWhereClauseParam("p_fr_gldate", row.getglDateFrom());
        getVendMootDtVO1().setNamedWhereClauseParam("p_to_gldate", row.getglDateTo());

        getVendMootDtVO1().setNamedWhereClauseParam("p_source", row.getInvoiceSource());
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_name", row.getvendorId());
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_no", row.getvendorId());
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_site", row.getvendorSiteId());
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_ast", row.getemployeeId());
        getVendMootDtVO1().setNamedWhereClauseParam("p_qty_expt", row.getQtyExcepts());
        getVendMootDtVO1().setNamedWhereClauseParam("p_price_expt", row.getPricingExcepts());
        getVendMootDtVO1().addWhereClause(" source<>'US_OD_DROPSHIP'");
        System.out.println("executing query: " + getVendMootDtVO1().getQuery());
        getVendMootDtVO1().executeQuery();
        // System.out.println("Row Count: "+getVendMootDtVO1().getEstimatedRowCount());

        return null;
    }


    public String vendMootDshipSearchAction() {

        VendorMootDShipQPanelVORowImpl row =
            (VendorMootDShipQPanelVORowImpl) getVendorMootDShipQPanelVO1().getCurrentRow();
        String pageError = "no";
        String errorMessage = "";
        if (row.getInvoiceTo() != null && row.getInvoiceFrom() != null &&
            row.getInvoiceTo().compareTo(row.getInvoiceFrom()) < 0) {

            pageError = "yes";
            errorMessage = "Please enter Invoice From less than Invoice To.";
        }
        if (row.getDueTo() != null && row.getDueFrom() != null && row.getDueTo().compareTo(row.getDueFrom()) < 0) {
            pageError = "yes";
            errorMessage = errorMessage + "Please enter Due Date From less than Due Date To.";
        }

        if (pageError.equals("yes")) {
            return errorMessage;
        }


        getVendMootDtVO2().setWhereClause(null);
        getVendMootDtVO2().addWhereClause("  attribute5 like 'DropShip%' ");
        getVendMootDtVO2().setNamedWhereClauseParam("p_all_excpt", row.getAllExcepts());
        getVendMootDtVO2().setNamedWhereClauseParam("p_front_door", row.getFrontDoor());
        getVendMootDtVO2().setNamedWhereClauseParam("p_frt_expt", row.getFrtExcepts());
        getVendMootDtVO2().setNamedWhereClauseParam("p_item", row.getitemId());
        getVendMootDtVO2().setNamedWhereClauseParam("p_org_id", row.getOrgId());
        getVendMootDtVO2().setNamedWhereClauseParam("p_invoice_num", row.getInvoiceNumber());
        getVendMootDtVO2().setNamedWhereClauseParam("p_ponum", row.getPONumber());
        getVendMootDtVO2().setNamedWhereClauseParam("p_fr_invdate", row.getInvoiceFrom());
        getVendMootDtVO2().setNamedWhereClauseParam("p_to_invdate", row.getInvoiceTo());
        getVendMootDtVO2().setNamedWhereClauseParam("p_due_fdate", row.getDueFrom());
        getVendMootDtVO2().setNamedWhereClauseParam("p_due_tdate", row.getDueTo());
        getVendMootDtVO2().setNamedWhereClauseParam("p_fr_gldate", row.getglDateFrom());
        getVendMootDtVO2().setNamedWhereClauseParam("p_to_gldate", row.getglDateTo());

        getVendMootDtVO2().setNamedWhereClauseParam("p_vend_name", row.getvendorId());
        getVendMootDtVO2().setNamedWhereClauseParam("p_vend_no", row.getvendorId());
        getVendMootDtVO2().setNamedWhereClauseParam("p_vend_site", row.getvendorSiteId());
        getVendMootDtVO2().setNamedWhereClauseParam("p_vend_ast", row.getemployeeId());
        getVendMootDtVO2().setNamedWhereClauseParam("p_qty_expt", row.getQtyExcepts());
        getVendMootDtVO2().setNamedWhereClauseParam("p_price_expt", row.getPricingExcepts());

        System.out.println("executing query: " + getVendMootDropshipDtVO2().getQuery());
        getVendMootDtVO2().executeQuery();
        //  System.out.println("Row Count: "+getVendMootDropshipDtVO2().getEstimatedRowCount());

        return null;
    }

    /**
     * Container's getter for VendorMootQueryPanelVO1.
     * @return VendorMootQueryPanelVO1
     */
    public VendorMootQueryPanelVOImpl getVendorMootQueryPanelVO1() {
        return (VendorMootQueryPanelVOImpl) findViewObject("VendorMootQueryPanelVO1");
    }
    /*This method is for settign the Default Org Id for VendorMootDetail Screen*/
    public void setDefaultOrgId() {
        Number var = new Number(404);
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        try {
            if (sessionScope.get("orgid") != null) {
                var = new Number(sessionScope.get("orgid").toString());
            }
        } catch (Exception e) {

        }
        VendorMootQueryPanelVOImpl vo = getVendorMootQueryPanelVO1();
        Row[] rows = vo.getFilteredRows("InvoiceNum", "2034697_TAX1");


        for (Row row : rows) {
            row.setAttribute("OrgId", var); //setAttribute("OrgId").toString());
        }
        getVendMootDtVO1().executeEmptyRowSet();
        // executeVendorMootDtVO(null,null,null,null);
    }

    public void setDefaultParamsDShip() {
        Number var = new Number(404);
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        try {
            if (sessionScope.get("orgid") != null)
                var = new Number(sessionScope.get("orgid").toString());
        } catch (Exception e) {

        }
        VendorMootDShipQPanelVOImpl vo = getVendorMootDShipQPanelVO1();
        Row row = vo.first();
        //  for (Row row : rows){
        row.setAttribute("OrgId", var); //setAttribute("OrgId").toString());
        row.setAttribute("InvoiceSource", "US_OD_DROPSHIP");
        System.out.println("Rows are set to default values");
        //  }
    }

    public void executeVOForDropship() {
        //        getVendMootDtVO2().setNamedWhereClauseParam("p_org_id", 404);
        //        getVendMootDtVO2().setNamedWhereClauseParam("p_source", "US_OD_DROPSHIP");
        //        getVendMootDtVO2().executeQuery();
        getVendMootDtVO2().executeEmptyRowSet();
    }

    public void clearEmpVendSearch() {
        Key keyVendorsearchid = new Key(new Object[] { 1 });
        // VASummarySearchVORowImpl voRow=(VASummarySearchVORowImpl)getVASummarySearchVO1().getRow(keyVendorsearchid);
        VASummarySearchVORowImpl voRow = (VASummarySearchVORowImpl) getVASummarySearchVO1().getCurrentRow();

        voRow.setVendorAssistant(null);
        voRow.setSupplierName(null);
        voRow.setSupplierNo(null);
        voRow.setSupplierSite(null);

        System.out.println("Method called from clearEmpVendSearch");
    }

    public void clearVendMootSearch() {
        VendorMootQueryPanelVORowImpl voRow =
            (VendorMootQueryPanelVORowImpl) getVendorMootQueryPanelVO1().getCurrentRow();
        System.out.println("Method called from clearVendMootSearch");
        voRow.setAllExcepts(null);
        voRow.setDropShip(null);
        voRow.setFrontDoor(null);
        voRow.setFrtExcepts(null);
        voRow.setSKUNumber(null);
        voRow.setNonCode(null);
        voRow.setQtyExcepts(null);
        voRow.setPricingExcepts(null);
        //        voRow.setOrgId(null);
        voRow.setInvoiceNumber(null);
        voRow.setPONumber(null);
        voRow.setInvoiceFrom(null);
        voRow.setInvoiceTo(null);
        voRow.setDueFrom(null);
        voRow.setDueTo(null);
        voRow.setInvoiceSource(null);
        voRow.setSupplierName(null);
        voRow.setSupplierNumber(null);
        voRow.setSupplierSite(null);
        voRow.setVendorAssistant(null);
        voRow.setglDateFrom(null);
        voRow.setglDateTo(null);

    }

    public void clearVendMootDShipSearch() {
        VendorMootDShipQPanelVORowImpl voRow =
            (VendorMootDShipQPanelVORowImpl) getVendorMootDShipQPanelVO1().getCurrentRow();
        System.out.println("Method called from clearVendMootSearch");
        voRow.setAllExcepts(null);
        //        voRow.setDropShip(null);
        //        voRow.setFrontDoor(null);
        voRow.setFrtExcepts(null);
        voRow.setQtyExcepts(null);
        voRow.setPricingExcepts(null);
        voRow.setSKUNumber(null);
        //        voRow.setNonCode(null);
        //        voRow.setOrgId(null);
        voRow.setInvoiceNumber(null);
        voRow.setPONumber(null);
        voRow.setInvoiceFrom(null);
        voRow.setInvoiceTo(null);
        voRow.setDueFrom(null);
        voRow.setDueTo(null);
        //        voRow.setInvoiceSource(null);
        voRow.setSupplierName(null);
        voRow.setSupplierNumber(null);
        voRow.setSupplierSite(null);
        voRow.setVendorAssistant(null);
        voRow.setglDateFrom(null);
        voRow.setglDateTo(null);

    }

    /**
     * Container's getter for VendorMootDShipQPanelVO1.
     * @return VendorMootDShipQPanelVO1
     */
    public VendorMootDShipQPanelVOImpl getVendorMootDShipQPanelVO1() {
        return (VendorMootDShipQPanelVOImpl) findViewObject("VendorMootDShipQPanelVO1");
    }


    public void clearMassReleaseHold() {
        MassReleaseVORowImpl row = (MassReleaseVORowImpl) getMassReleaseVO1().getCurrentRow();
        row.setpoNum(null);
        row.setpoFrom(null);
        row.setpoTo(null);
        row.setinvoiceFrom(null);
        row.setinvoiceTo(null);
        row.setsupNo(null);
        row.setsupName(null);
        row.setsupSiteCode(null);
        row.setvendorAssistant(null);
        row.setfrontDoor(null);
        row.setnonCode(null);
        row.setdropShip(null);
        row.setfreightExcp(null);
        row.setoperatingId(null);
        row.setquantityExcp(null);
        row.setpricingExcp(null);
        row.setdueFrom(null);
        row.setdueTo(null);
        row.setskuNo(null);
    }

    /**
     * Container's getter for CostVarianceVO1.
     * @return CostVarianceVO1
     */
    public CostVarianceVOImpl getCostVarianceVO1() {
        return (CostVarianceVOImpl) findViewObject("CostVarianceVO1");
    }

    /**
     * Container's getter for CostVarianceTVO1.
     * @return CostVarianceTVO1
     */
    public CostVarianceTVOImpl getCostVarianceTVO1() {
        return (CostVarianceTVOImpl) findViewObject("CostVarianceTVO1");
    }

    public String updateAnswer() {

        return null;
    }


    /**
     * Container's getter for MerchContactsSearchVO1.
     * @return MerchContactsSearchVO1
     */
    public MerchContactsSearchVOImpl getMerchContactsSearchVO1() {
        return (MerchContactsSearchVOImpl) findViewObject("MerchContactsSearchVO1");
    }

    /**
     * Container's getter for MerchDeptContVO1.
     * @return MerchDeptContVO1
     */
    public MerchDeptContVOImpl getMerchDeptContVO1() {
        return (MerchDeptContVOImpl) findViewObject("MerchDeptContVO1");
    }


    public String DeptContactSearchAction() {

        MerchContactsSearchVORowImpl row = (MerchContactsSearchVORowImpl) getMerchContactsSearchVO1().getCurrentRow();

        getMerchDeptContVO1().setWhereClause(null);
        getMerchDeptContVO1().executeEmptyRowSet();
        getMerchDeptContVO1().setNamedWhereClauseParam("p_dept", row.getDeptNo());
        getMerchDeptContVO1().setNamedWhereClauseParam("p_dmm", row.getMerchMgr());
        getMerchDeptContVO1().setNamedWhereClauseParam("p_scm", row.getMerch());
        getMerchDeptContVO1().setNamedWhereClauseParam("p_vp", row.getVp());

        getMerchDeptContVO1().executeQuery();
        System.out.println("Row Count: " + getMerchDeptContVO1().getEstimatedRowCount());

        return null;
    }

    public void clearDeptContactSearch() {

        /*         VendorMootQueryPanelVOImpl vo = getVendorMootQueryPanelVO1();
        Row[] rows= vo.getFilteredRows("InvoiceNum", "2034697_TAX1");

        for (Row row : rows){
            row.setAttribute("OrgId", var);//setAttribute("OrgId").toString());
            row.setAttribute("InvoiceSource", "US_OD_DROPSHIP");
            System.out.println("Rows are set to default values");
        }
         * */
        MerchContactsSearchVOImpl vo = getMerchContactsSearchVO1();
        Row[] rows = vo.getFilteredRows("Merchid", 1); // getCurrentRow();
        for (Row row : rows) {
            row.setAttribute("DeptNo", null); //setDeptNo(null);
            row.setAttribute("Merch", null); //setMerch(null);
            row.setAttribute("MerchMgr", null); //setMerchMgr(null);
            row.setAttribute("Vp", null); //setVp(null);
        }
    }

    /**
     * Container's getter for GeneralInquiryTVO2.
     * @return GeneralInquiryTVO2
     */
    public GeneralInquiryTVOImpl getGeneralInquiryTVO1() {
        return (GeneralInquiryTVOImpl) findViewObject("GeneralInquiryTVO1");
    }

    public void initGeneralInquiry() {
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        if (sessionScope.get("orgid") != null) {
            //           getGeneralInquiryTVO1().setWhereClause(null);
            //           getGeneralInquiryTVO1().addWhereClause(" rownum<2");
            getGeneralInquiryTVO1().executeQuery();
            GeneralInquiryTVORowImpl row = (GeneralInquiryTVORowImpl) getGeneralInquiryTVO1().first();
            row.setoperatingId(sessionScope.get("orgid").toString());
        }
        getGeneralInquiryQueryVO1().executeEmptyRowSet();
    }

    /**
     * Container's getter for VASummarySearchVO1.
     * @return VASummarySearchVO1
     */
    public VASummarySearchVOImpl getVASummarySearchVO1() {
        return (VASummarySearchVOImpl) findViewObject("VASummarySearchVO1");
    }

    public void initCostVariance() {
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        if (sessionScope.get("orgid") != null) {
            getCostVarianceTVO1().executeQuery();
            CostVarianceTVORowImpl row = (CostVarianceTVORowImpl) getCostVarianceTVO1().first();
            try {
                row.setoperatingUnit(new Number(sessionScope.get("orgid").toString()));
            } catch (Exception e) {

            }
        }
        getCostVarianceVO1().executeEmptyRowSet();
    }

    /**
     * Container's getter for ApInvoiceLineVO1.
     * @return ApInvoiceLineVO1
     */
    public ApInvoiceLineVOImpl getApInvoiceLineVO1() {
        return (ApInvoiceLineVOImpl) findViewObject("ApInvoiceLineVO1");
    }


    public String initInvoiceDetails(String invoiceNum) {
        System.out.println("G.S invoiceNum in AM: " + invoiceNum);
        _logger.info("G.S invoiceNum in AM: " + invoiceNum);
        ViewCriteria criteriainvoice = getApInvoicesVO1().getViewCriteria("ApInvoicesVOCriteria");
        String userId = null;
        String userName = null;
        Integer respId = null;
        Integer respAppId = null;
      
        
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
         _logger.info("sessionScope.get(\"userId\")"+sessionScope.get("userId"));
         _logger.info("sessionScope.get(\"userName\")"+sessionScope.get("userName"));
        if (sessionScope.get("userId") != null) {
             _logger.info(" inside if sessionScope.get(\"userName\")"+sessionScope.get("userName"));
            userId = sessionScope.get("userId").toString();
            userName = sessionScope.get("userName").toString();
            
           
            respId = Integer.parseInt(sessionScope.get("respId").toString());
            respAppId = Integer.parseInt(sessionScope.get("respAppId").toString());
        } else {
            return "Your Session is Inactive. Please close browser and Login again.";
        }
        try {
            getFndUserNameVO1().setWhereClause(null);
            getFndUserNameVO1().setNamedWhereClauseParam("userId", new Number(userId));
            getFndUserNameVO1().executeQuery();
             _logger.info("getEstimatedRowCount>>>>>>"+getFndUserNameVO1().getEstimatedRowCount());
        } catch (Exception e) {
            
             _logger.info("getFndUserNameVO1 E"+e);

        }
        if (getFndUserNameVO1().first() != null) {
            userName = (String) getFndUserNameVO1().first().getAttribute("FullName");
             _logger.info("userName>>>getFndUserNameVO1()>>>"+userName);
        }
        ViewCriteria criteriaxxinvoicehdr = getXXApInvoiceHeaderVO1().getViewCriteria("XXApInvoiceHeaderVOCriteria");
        getXXApInvoiceHeaderVO1().applyViewCriteria(null);
        getXXApInvoiceHeaderVO1().setNamedWhereClauseParam("invId", invoiceNum);
        getXXApInvoiceHeaderVO1().applyViewCriteria(criteriaxxinvoicehdr);
        getXXApInvoiceHeaderVO1().executeQuery();
        Number requestId = null;
        if (getXXApInvoiceHeaderVO1().first() != null) {
             _logger.info("inside if getXXApInvoiceHeaderVO1"+getXXApInvoiceHeaderVO1().first().getAttribute("RequestId"));
            requestId = (Number) getXXApInvoiceHeaderVO1().first().getAttribute("RequestId");
            if (requestId != null && requestId.doubleValue() > 0) {
                return "Invoice already under process. You can't work again.";
            }
        }
        String newInv = null;
        String exiInv = "N";
        String otherUserInv = null;
        String otheruser = null;
        String invNum = null;
        DBTransaction dbTransactionnewholds = getDBTransaction();
        DBTransactionImpl dbtinewholds = (DBTransactionImpl) dbTransactionnewholds;
        CallableStatement statementnewholds = null;
        Object objnewholds = null;


        if (invoiceNum == null)
            invoiceNum = "155629609";
        getApInvoicesVO1().applyViewCriteria(null);
        getApInvoicesVO1().setNamedWhereClauseParam("invoiceNo", invoiceNum);
        getApInvoicesVO1().applyViewCriteria(criteriainvoice);
        getApInvoicesVO1().executeQuery();

        if (getXXApInvoiceHeaderVO1().first() != null) {
            if (getXXApInvoiceHeaderVO1().first()
                                         .getAttribute("ProcessFlag")
                                         .equals("N") || getXXApInvoiceHeaderVO1().first()
                                                                                  .getAttribute("ProcessFlag")
                                                                                  .equals("E")) {


                statementnewholds =
                    dbtinewholds.createCallableStatement(("BEGIN ? :=" +
                                                          "XX_AP_TR_UI_ACTION_PKG.xx_insert_new_holds(?);" + "END;"),
                                                         0);

                try {
                    if (statementnewholds != null) {
                        statementnewholds.registerOutParameter(1, Types.VARCHAR);
                        statementnewholds.setString(2, getApInvoicesVO1().first()
                                                                         .getAttribute("InvoiceId")
                                                                         .toString());


                        statementnewholds.executeUpdate();
                        objnewholds = statementnewholds.getObject(1);
                    }
                } catch (Exception e) {
                    System.out.println("Exception");
                }
                otheruser = (String) getXXApInvoiceHeaderVO1().first().getAttribute("CreatedByName");
                if (otheruser == null || userName.equals(otheruser) ) {
                    exiInv = "Y";
                      getXXApInvoiceHeaderVO1().first().setAttribute("CreatedByName", userName);
                    getDBTransaction().commit();
                } else {
                    exiInv = "Y";
                    getDBTransaction().commit();
                  return "Invoice#"+getXXApInvoiceHeaderVO1().first().getAttribute("InvoiceNum")+" is currently being worked by "+otheruser;
                }
            }


        } else {

        }

        String freightTolerance = null;
        if (getApInvoicesVO1().first().getAttribute("freightTolerance") != null && getApInvoicesVO1().first()
                                                                                                     .getAttribute("freightTolerance")
                                                                                                     .equals("0")) {
            freightTolerance = "0";
        }
        
     
        oracle.jbo.domain.Number poHdrId = null;
        poHdrId = (Number) getApInvoicesVO1().first().getAttribute("PoHeaderId");
        if (poHdrId == null)
            poHdrId = (Number) getApInvoicesVO1().first().getAttribute("QuickPoHeaderId");
        
        
        _logger.info("poHdrId E"+poHdrId);
        getApInvoiceLinePOVO1().setWhereClause(null);
        getApInvoiceLinePOVO1().setNamedWhereClauseParam("poHdrId", poHdrId);
        getApInvoiceLinePOVO1().setNamedWhereClauseParam("invId", invoiceNum);
        getApInvoiceLinePOVO1().executeQuery();
        getApInvoiceLinesPOLinesVO1().setWhereClause(null);
        getApInvoiceLinesPOLinesVO1().setNamedWhereClauseParam("poHdrId", poHdrId);
        getApInvoiceLinesPOLinesVO1().setNamedWhereClauseParam("invId", invoiceNum);
        getApInvoiceLinesPOLinesVO1().executeQuery();
        Number invId = (Number) getApInvoicesVO1().first().getAttribute("InvoiceId");


        ViewCriteria criteria = getApInvoiceLineVO1().getViewCriteria("ApInvoiceLineVOCriteria1");
        if (invId.isNull())
            invId = new Number(152553535);
        Number polineid = new Number(0);
        ViewCriteria criteriaxxinvoice = getXXApInvoiceDetailsVO1().getViewCriteria("XXApInvoiceDetailsVOCriteria");
        if (invoiceNum == null)
            invoiceNum = "155549448";
        getXXApInvoiceDetailsVO1().applyViewCriteria(null);
        getXXApInvoiceDetailsVO1().setNamedWhereClauseParam("p_inv_id", invoiceNum);
        getXXApInvoiceDetailsVO1().setNamedWhereClauseParam("p_created_by", userId);
        getXXApInvoiceDetailsVO1().applyViewCriteria(criteriaxxinvoice);
        getXXApInvoiceDetailsVO1().executeQuery();
        if (exiInv.equals("Y")) {

        } else {

            DBTransaction dbTransaction = getDBTransaction();
            DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
            CallableStatement statement = null;
            CallableStatement statementinitialize = null;
            Object obj = null;


            statement =
                dbti.createCallableStatement(("BEGIN ? :=" +
                                              "XX_AP_TR_UI_ACTION_PKG.xx_insert_custom_invoice_table(?,?,?);" + "END;"),
                                             0);
            statementinitialize =
                dbti.createCallableStatement(("BEGIN " + "XX_AP_TR_UI_ACTION_PKG.xx_apps_initialize(?,?,?);" + "END;"),
                                             0);


            try {
                if (statementinitialize != null) {

                    statementinitialize.setString(1, userId);
                    statementinitialize.setInt(2, respId);
                    statementinitialize.setInt(3, respAppId);


                    statementinitialize.execute();

                }
            } catch (Exception e) {
                System.out.println("Exception");
            }


            try {
                if (statement != null) {
                    statement.registerOutParameter(1, Types.VARCHAR);
                    statement.setString(2, getApInvoicesVO1().first()
                                                             .getAttribute("InvoiceId")
                                                             .toString());
                    statement.setString(3, userId);
                    statement.setString(4, userName);


                    statement.executeUpdate();
                    obj = statement.getObject(1);
                }
            } catch (Exception e) {
                System.out.println("Exception");
            }

            getDBTransaction().commit();
        }
        getApInvoiceLineVO1().applyViewCriteria(null);
        getApInvoiceLineVO1().setWhereClause(null);
        getApInvoiceLineVO1()
            .addWhereClause(" XXApInvoiceDetailsEO.hold_exists_flag='Y' AND XXApInvoiceDetailsEO.unmatch_po_flag='N'");
        getApInvoiceLineVO1().setNamedWhereClauseParam("invId", invId);
        getApInvoiceLineVO1().applyViewCriteria(criteria);
        getApInvoiceLineVO1().executeQuery();
        ViewCriteria criteriainvoicehold = getApInvoiceHoldsVO1().getViewCriteria("ApInvoiceHoldsVOCriteria");
        getApInvoiceHoldsVO1().applyViewCriteria(null);
        getApInvoiceHoldsVO1().setWhereClause(null);
        getApInvoiceHoldsVO1().addWhereClause(" XXApInvoiceHoldsEO.line_location_id is null");
        getApInvoiceHoldsVO1().setNamedWhereClauseParam("invId", invId);
        getApInvoiceHoldsVO1().applyViewCriteria(criteriainvoicehold);
        getApInvoiceHoldsVO1().executeQuery();
        ViewCriteria criteriainvoicecode = getInvoiceReasonCodeVO1().getViewCriteria("InvoiceReasonCodeVOCriteria");
        getInvoiceReasonCodeVO1().applyViewCriteria(null);
        getInvoiceReasonCodeVO1().setNamedWhereClauseParam("pInvoiceId", invoiceNum);
        getInvoiceReasonCodeVO1().applyViewCriteria(criteriainvoicecode);
        getInvoiceReasonCodeVO1().executeQuery();
        return invoiceNum;
    }

    public void queryAllInvoice(String queryAllInvoice, String queryAllPO) {
        if (queryAllInvoice != null && queryAllInvoice.equals("true")) {
            Number invId = (Number) getApInvoicesVO1().first().getAttribute("InvoiceId");
            ViewCriteria criteria = getApInvoiceLineVO1().getViewCriteria("ApInvoiceLineVOCriteria1");
            if (invId.isNull())
                invId = new Number(152553535);
            getApInvoiceLineVO1().applyViewCriteria(null);
            getApInvoiceLineVO1().setWhereClause(null);
            if (queryAllPO != null && queryAllPO.equals("true")) {
                getApInvoiceLineVO1().addWhereClause(" (XXApInvoiceDetailsEO.unmatch_po_flag in ('Y','N'))");
            } else {
                getApInvoiceLineVO1().addWhereClause(" (XXApInvoiceDetailsEO.unmatch_po_flag='N')");
            }
            getApInvoiceLineVO1().setNamedWhereClauseParam("invId", invId);
            getApInvoiceLineVO1().applyViewCriteria(criteria);
            getApInvoiceLineVO1().executeQuery();

        } else {

            Number invId = (Number) getApInvoicesVO1().first().getAttribute("InvoiceId");
            ViewCriteria criteria = getApInvoiceLineVO1().getViewCriteria("ApInvoiceLineVOCriteria1");
            if (invId.isNull())
                invId = new Number(152553535);
            getApInvoiceLineVO1().applyViewCriteria(null);
            getApInvoiceLineVO1().setWhereClause(null);
            if (queryAllPO != null && queryAllPO.equals("true")) {
                getApInvoiceLineVO1()
                    .addWhereClause(" XXApInvoiceDetailsEO.hold_exists_flag='Y' and XXApInvoiceDetailsEO.unmatch_po_flag in ('Y','N')");
            } else {
                getApInvoiceLineVO1()
                    .addWhereClause(" XXApInvoiceDetailsEO.hold_exists_flag='Y' AND XXApInvoiceDetailsEO.unmatch_po_flag='N'");
            }
            getApInvoiceLineVO1().setNamedWhereClauseParam("invId", invId);
            getApInvoiceLineVO1().applyViewCriteria(criteria);
            getApInvoiceLineVO1().executeQuery();

        }
    }


    /**
     * Container's getter for ApInvoiceHoldsVO1.
     * @return ApInvoiceHoldsVO1
     */
    public ViewObjectImpl getApInvoiceHoldsVO1() {
        return (ViewObjectImpl) findViewObject("ApInvoiceHoldsVO1");
    }

    /**
     * Container's getter for ApHoldsVO2.
     * @return ApHoldsVO2
     */
    public ApHoldsVOImpl getApHoldsVO2() {
        return (ApHoldsVOImpl) findViewObject("ApHoldsVO2");
    }

    /**
     * Container's getter for SupplierSitePOCVO1.
     * @return SupplierSitePOCVO1
     */
    //    public SupplierSitePOCVOImpl getSupplierSitePOCVO1() {
    //        return (SupplierSitePOCVOImpl) findViewObject("SupplierSitePOCVO1");
    //    }

    public void invLineSelection(String poLineId) {
        Number invId = (Number) getApInvoicesVO1().first().getAttribute("InvoiceId");
        ViewCriteria criteria = getApHoldsVO2().getViewCriteria("ApHoldsVOCriteria");
        if (invId.isNull())
            invId = new Number(152553535);

        getApHoldsVO2().applyViewCriteria(null);
        getApHoldsVO2().setNamedWhereClauseParam("p_inv_id", invId);
        getApHoldsVO2()
            .setNamedWhereClauseParam("poline_id", getApInvoiceLineVO1().getCurrentRow().getAttribute("PoLineId"));
        getApHoldsVO2().applyViewCriteria(criteria);
        getApHoldsVO2().executeQuery();
    }


    /**
     * Container's getter for XXApInvoiceDetailsVO1.
     * @return XXApInvoiceDetailsVO1
     */
    public XXApInvoiceDetailsVOImpl getXXApInvoiceDetailsVO1() {
        return (XXApInvoiceDetailsVOImpl) findViewObject("XXApInvoiceDetailsVO1");
    }

    /**
     * Container's getter for XXApInvoiceHoldsVO1.
     * @return XXApInvoiceHoldsVO1
     */
    public XXApInvoiceHoldsVOImpl getXXApInvoiceHoldsVO1() {
        return (XXApInvoiceHoldsVOImpl) findViewObject("XXApInvoiceHoldsVO1");
    }

    /**
     * Container's getter for XXApInvoiceHeaderVO2.
     * @return XXApInvoiceHeaderVO2
     */
    public XXApInvoiceHeaderVOImpl getXXApInvoiceHeaderVO1() {
        return (XXApInvoiceHeaderVOImpl) findViewObject("XXApInvoiceHeaderVO1");
    }

    /**
     * Container's getter for ApInvoiceLinePOVO1.
     * @return ApInvoiceLinePOVO1
     */
    public ApInvoiceLinePOVOImpl getApInvoiceLinePOVO1() {
        return (ApInvoiceLinePOVOImpl) findViewObject("ApInvoiceLinePOVO1");
    }

    /**
     * Container's getter for ApInvoiceLinesPOLinesVO2.
     * @return ApInvoiceLinesPOLinesVO2
     */
    public ApInvoiceLinesPOLinesVOImpl getApInvoiceLinesPOLinesVO1() {
        return (ApInvoiceLinesPOLinesVOImpl) findViewObject("ApInvoiceLinesPOLinesVO1");
    }

    /**
     * Container's getter for FndUserNameVO1.
     * @return FndUserNameVO1
     */
    public FndUserNameVOImpl getFndUserNameVO1() {
        return (FndUserNameVOImpl) findViewObject("FndUserNameVO1");
    }

    public void unassignUser(String pInvoiceId) {
        ViewCriteria criteriaxxinvoiceid = getXXApInvoiceHeaderVO1().getViewCriteria("XXApInvoiceHeaderVOCriteria");
        // if(invoiceNum==null)
        //    invoiceNum="155549448";
        getXXApInvoiceHeaderVO1().applyViewCriteria(null);
        // getApInvoicesVO1().setWhereClause(null);
        getXXApInvoiceHeaderVO1().setNamedWhereClauseParam("invId", pInvoiceId);
        // getXXApInvoiceDetailsVO1().setNamedWhereClauseParam("p_created_by", "874709");
        getXXApInvoiceHeaderVO1().applyViewCriteria(criteriaxxinvoiceid);
        //   getCostVarianceVO1().setNamedWhereClauseParam("skunum", row.getskuNo());
        getXXApInvoiceHeaderVO1().executeQuery();
        getXXApInvoiceHeaderVO1().first().setAttribute("CreatedByName", null);
        getDBTransaction().commit();
    }

    public BigDecimal init() {
        Number invId = (Number) getApInvoicesVO1().first().getAttribute("InvoiceId");
        ViewCriteria criteria = getApInvoiceLineVO1().getViewCriteria("ApInvoiceLineVOCriteria1");

        getApInvoiceLineVO1().applyViewCriteria(null);
        getApInvoiceLineVO1().setWhereClause(null);
        getApInvoiceLineVO1().setNamedWhereClauseParam("invId", invId);
        getApInvoiceLineVO1().applyViewCriteria(criteria);
        getApInvoiceLineVO1().executeQuery();
        BigDecimal totInvA = new BigDecimal(0);
        BigDecimal totAmount = new BigDecimal(0);
        RowSetIterator rsIter = getApInvoiceLineVO1().createRowSetIterator(null);
        while (rsIter.hasNext()) {
            ApInvoiceLineVORowImpl row = (ApInvoiceLineVORowImpl) rsIter.next();
            if (row.getAmount() != null) {
                BigDecimal totInvQuantity = new BigDecimal(row.getAmount().toString());
                totAmount = totAmount.add(totInvQuantity);
            }
        }
        rsIter.reset();
        rsIter.closeRowSetIterator();
        if (getInvoiceReasonCodeVO1().first() != null) {
            getInvoiceReasonCodeVO1().first().setAttribute("qtyReason", null);
            getInvoiceReasonCodeVO1().first().setAttribute("priceReason", null);
            getInvoiceReasonCodeVO1().first().setAttribute("releaseholdSelect", null);
            getInvoiceReasonCodeVO1().first().setAttribute("chargebackSelect", null);
        }
        return totAmount;
    }

    public String addInvoiceLineHold(String lineLocationId, String invoiceId, String lineNo) {
        ApInvoiceLineVORowImpl invoiceholdrow = (ApInvoiceLineVORowImpl) getApInvoiceLineVO1().getCurrentRow();
        XXApHoldsVORowImpl xxinvoiceholdrow = (XXApHoldsVORowImpl) getXXApHoldsVO1().createRow();
        int qtysum = 0;
        double pricesum = 0.0;
        Row row = null;
        int i = 0;
        int negqty = 0;
        try {
            while (getXXApHoldsVO1().hasNext()) {
                if (i == 0)
                    row = getXXApHoldsVO1().first();
                else
                    row = getXXApHoldsVO1().next();
                if (row.getAttribute("HoldLookupCode1") != null) {
                    row.setAttribute("ReleaseHold1", "Y");
                    row.setAttribute("Chargeback1", "N");
                    row.setAttribute("MiscLineFlag", "Y");
                }
                if (row.getAttribute("UnmatchedQty") != null) {
                    qtysum = qtysum + (Integer.parseInt(row.getAttribute("UnmatchedQty").toString()));


                }
                if (row.getAttribute("UnitPrice") != null) {
                    pricesum = pricesum + (Double.parseDouble(row.getAttribute("UnitPrice").toString()));
                }
                i++;

            }
            if (getXXApHoldsVO1().getEstimatedRowCount() == 1) {
                row = getXXApHoldsVO1().first();
                qtysum = 0;
                if (row.getAttribute("HoldLookupCode1") != null) {
                    row.setAttribute("ReleaseHold1", "Y");
                    row.setAttribute("Chargeback1", "N");
                    row.setAttribute("MiscLineFlag", "Y");
                }
                if (row.getAttribute("UnmatchedQty") != null) {
                    qtysum = qtysum + (Integer.parseInt(row.getAttribute("UnmatchedQty").toString()));


                }
                if (row.getAttribute("UnitPrice") != null) {
                    pricesum = pricesum + (Double.parseDouble(row.getAttribute("UnitPrice").toString()));
                }
            }
        } catch (Exception e) {

        }
        int remainingQty = 0;
        int orgquantity = Integer.parseInt(invoiceholdrow.getQuantityInvoiced1().toString());
        remainingQty = orgquantity - (qtysum);
        double remainingprice = 0.0;
        double orgprice = Double.parseDouble(invoiceholdrow.getOrgInvoicePrice().toString());
        remainingprice = orgprice - pricesum;
        try {
            xxinvoiceholdrow.setInvoiceId(new Number(invoiceholdrow.getInvoiceId1().toString()));
            xxinvoiceholdrow.setHoldId(null);
            xxinvoiceholdrow.setLineNumber(invoiceholdrow.getLineNumber());
            xxinvoiceholdrow.setPoLineId(invoiceholdrow.getPoLineId());
            xxinvoiceholdrow.setHoldLookupCode1(null);
            xxinvoiceholdrow.setProcessedFlag("N");
            xxinvoiceholdrow.setCreatedBy(invoiceholdrow.getCreatedBy1());
            xxinvoiceholdrow.setCreatedDate(invoiceholdrow.getCreationDate());
            xxinvoiceholdrow.setLastUpdatedBy(invoiceholdrow.getCreatedBy1());
            xxinvoiceholdrow.setLastUpdatedDate(invoiceholdrow.getCreationDate());
            xxinvoiceholdrow.setLineLocationId(invoiceholdrow.getPoLineLocationId());
            xxinvoiceholdrow.setHoldDate(invoiceholdrow.getCreationDate());
            xxinvoiceholdrow.setHeldBy(null);
            xxinvoiceholdrow.setOrgInvoiceQty(invoiceholdrow.getQuantityInvoiced());
            xxinvoiceholdrow.setOrgInvoicePrice(invoiceholdrow.getOrgInvoicePrice());
            xxinvoiceholdrow.setPoQty(invoiceholdrow.getPoQty());
            xxinvoiceholdrow.setRcvQty(invoiceholdrow.getRcvQty());
            Number poprice = new Number(invoiceholdrow.getpoPrice());
            xxinvoiceholdrow.setPoPrice(poprice);
            DBSequence sequence =
                new DBSequence(new SequenceImpl("XX_AP_CHBK_ACTION_HOLDS_SEQ", getDBTransaction()).getSequenceNumber());

            if (invoiceholdrow.getholdName().contains("QTY") && invoiceholdrow.getholdName().contains("PRICE")) {

            } else {
                if (remainingQty > 0 && invoiceholdrow.getholdName().contains("QTY"))
                    xxinvoiceholdrow.setUnmatchedQty(new Number(remainingQty));
                if (remainingprice > 0 && invoiceholdrow.getholdName().contains("PRICE"))
                    xxinvoiceholdrow.setUnitPrice(new Number(remainingprice));
            }
            xxinvoiceholdrow.setHoldLineId(sequence.getSequenceNumber());

            xxinvoiceholdrow.setUom(invoiceholdrow.getUom1());
            xxinvoiceholdrow.setOrgUom(invoiceholdrow.getOrgUom());
            getXXApHoldsVO1().insertRow(xxinvoiceholdrow);
            getDBTransaction().commit();
        } catch (Exception e) {

        }
        return null;
    }

    public String deleteInvoiceHold(String invoiceId, String lineLocationId, String lineNo) {
        ApInvoiceLineVORowImpl invoiceholdrow = (ApInvoiceLineVORowImpl) getApInvoiceLineVO1().getCurrentRow();
        ViewCriteria criteriahold = getXXApHoldsVO2().getViewCriteria("XXApHoldsVOCriteria");
        String holdLineId = null;
        getXXApHoldsVO2().applyViewCriteria(null);
        getXXApHoldsVO2().setNamedWhereClauseParam("invId", invoiceholdrow.getInvoiceId());
        getXXApHoldsVO2().setNamedWhereClauseParam("lineNo", invoiceholdrow.getPoLineLocationId());
        getXXApHoldsVO2().setNamedWhereClauseParam("holdLineNo", holdLineId);
        getXXApHoldsVO2().applyViewCriteria(criteriahold);
        getXXApHoldsVO2().executeQuery();
        getXXApHoldsVO2().first().remove();
        return null;
    }

    public String deleteInvoiceLineHold(String invoiceId, String lineLocationId, String lineNo, String holdLineId) {
        ApInvoiceLineVORowImpl invoiceholdrow = (ApInvoiceLineVORowImpl) getApInvoiceLineVO1().getCurrentRow();


        ViewCriteria criteriahold = getXXApHoldsVO2().getViewCriteria("XXApHoldsVOCriteria");
        getXXApHoldsVO2().setWhereClause(null);
        getXXApHoldsVO2().applyViewCriteria(null);
        getXXApHoldsVO2().setNamedWhereClauseParam("invId", invoiceholdrow.getInvoiceId());
        getXXApHoldsVO2().setNamedWhereClauseParam("lineNo", invoiceholdrow.getLineNumber1());
        getXXApHoldsVO2().setNamedWhereClauseParam("holdLineNo", holdLineId);
        getXXApHoldsVO2().applyViewCriteria(criteriahold);
        getXXApHoldsVO2().executeQuery();
        getXXApHoldsVO2().first().remove();

        getDBTransaction().commit();
        ViewCriteria criteria = getXXApHoldsVO2().getViewCriteria("XXApHoldsVOCriteria1");
        if (getXXApHoldsVO2().getCurrentRow() != null)
            holdLineId = getXXApHoldsVO2().getCurrentRow()
                                          .getAttribute("HoldLineId")
                                          .toString();
        getXXApHoldsVO2().setWhereClause(null);
        getXXApHoldsVO2().applyViewCriteria(null);
        getXXApHoldsVO2().setNamedWhereClauseParam("invId", invoiceholdrow.getInvoiceId());
        getXXApHoldsVO2().setNamedWhereClauseParam("lineNo", invoiceholdrow.getLineNumber1());
        getXXApHoldsVO2().addWhereClause(" hold_lookup_code is null ");
        getXXApHoldsVO2().applyViewCriteria(criteria);
        getXXApHoldsVO2().executeQuery();
        if (getXXApHoldsVO2().getEstimatedRowCount() == 0) {
            getXXApHoldsVO2().setWhereClause(null);
            getXXApHoldsVO2().applyViewCriteria(null);
            getXXApHoldsVO2().setNamedWhereClauseParam("invId", invoiceholdrow.getInvoiceId());
            getXXApHoldsVO2().setNamedWhereClauseParam("lineNo", invoiceholdrow.getLineNumber1());
            getXXApHoldsVO2().applyViewCriteria(criteria);
            getXXApHoldsVO2().executeQuery();
            ViewObject vo = getXXApHoldsVO2().getViewObject();
            int i = 0;
            Row row = null;
            while (vo.hasNext()) {
                if (i == 0)
                    row = vo.first();
                else
                    row = vo.next();
                i++;
                row.setAttribute("MiscLineFlag", "N");
                row.setAttribute("ReleaseHold1", "N");
            }
            if (vo.getEstimatedRowCount() == 1) {

                vo.first().setAttribute("MiscLineFlag", "N");
                vo.first().setAttribute("ReleaseHold1", "N");
            }
            getDBTransaction().commit();
        }
        return null;
    }

    /**
     * Container's getter for InvoiceReasonCodeVO1.
     * @return InvoiceReasonCodeVO1
     */
    public ViewObjectImpl getInvoiceReasonCodeVO1() {
        return (ViewObjectImpl) findViewObject("InvoiceReasonCodeVO1");
    }

    /**
     * Container's getter for XXInvoiceTotVO1.
     * @return XXInvoiceTotVO1
     */
    public XXInvoiceTotVOImpl getXXInvoiceTotVO1() {
        return (XXInvoiceTotVOImpl) findViewObject("XXInvoiceTotVO1");
    }

    /**
     * Container's getter for XXInvoiceReasonVO1.
     * @return XXInvoiceReasonVO1
     */
    public XXInvoiceReasonVOImpl getXXInvoiceReasonVO1() {
        return (XXInvoiceReasonVOImpl) findViewObject("XXInvoiceReasonVO1");
    }


    /**
     * Container's getter for XXApHoldsVO2.
     * @return XXApHoldsVO2
     */
    public XXApHoldsVOImpl getXXApHoldsVO2() {
        return (XXApHoldsVOImpl) findViewObject("XXApHoldsVO2");
    }

    /**
     * Container's getter for XXApHoldsVO3.
     * @return XXApHoldsVO3
     */
    public XXApHoldsVOImpl getXXApHoldsVO3() {
        return (XXApHoldsVOImpl) findViewObject("XXApHoldsVO3");
    }

    /**
     * Container's getter for XXApInvoiceDetailXXApHoldsVL1.
     * @return XXApInvoiceDetailXXApHoldsVL1
     */
    public ViewLinkImpl getXXApInvoiceDetailXXApHoldsVL1() {
        return (ViewLinkImpl) findViewLink("XXApInvoiceDetailXXApHoldsVL1");
    }


    /**
     * Container's getter for XXApHoldsVO1.
     * @return XXApHoldsVO1
     */
    public XXApHoldsVOImpl getXXApHoldsVO1() {
        return (XXApHoldsVOImpl) findViewObject("XXApHoldsVO1");
    }

    /**
     * Container's getter for ApInvoiceLineXXApHoldsVL1.
     * @return ApInvoiceLineXXApHoldsVL1
     */
    public ViewLinkImpl getApInvoiceLineXXApHoldsVL1() {
        return (ViewLinkImpl) findViewLink("ApInvoiceLineXXApHoldsVL1");
    }

    /**
     * Container's getter for GeneralInquiryMassUpdateQueryVO1.
     * @return GeneralInquiryMassUpdateQueryVO1
     */
    public GeneralInquiryMassUpdateQueryVOImpl getGeneralInquiryMassUpdateQueryVO1() {
        return (GeneralInquiryMassUpdateQueryVOImpl) findViewObject("GeneralInquiryMassUpdateQueryVO1");
    }

    public String cancelInvoice(String invoiceId) {

        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;
        Object obj = null;


        statement =
            dbti.createCallableStatement(("BEGIN ? :=" + "XX_AP_TR_UI_ACTION_PKG.xx_cancel_invoice(?);" + "END;"), 0);

        try {
            if (statement != null) {
                statement.registerOutParameter(1, Types.VARCHAR);
                statement.setObject(2, getApInvoicesVO1().first()
                                                         .getAttribute("InvoiceId")
                                                         .toString());

                statement.executeUpdate();
                obj = statement.getObject(1);
                getDBTransaction().commit();
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }
        if (obj != null)
            return obj.toString();
        else
            return "Error";
    }


    /**
     * Container's getter for VendMootDropshipDtVO1.
     * @return VendMootDropshipDtVO1
     */
    public VendMootDropshipDtVOImpl getVendMootDropshipDtVO2() {
        return (VendMootDropshipDtVOImpl) findViewObject("VendMootDropshipDtVO2");
    }

    /**
     * Container's getter for SupplierLOV2.
     * @return SupplierLOV2
     */
    public SupplierLOVImpl getSupplierLOV2() {
        return (SupplierLOVImpl) findViewObject("SupplierLOV2");
    }

    /**
     * Container's getter for VendMootDtVO2.
     * @return VendMootDtVO2
     */
    public VendMootDtVOImpl getVendMootDtVO2() {
        return (VendMootDtVOImpl) findViewObject("VendMootDtVO2");
    }


    /**
     * Container's getter for XxApRTVReconciliationSearchVO1.
     * @return XxApRTVReconciliationSearchVO1
     */
    public XxApRTVReconciliationSearchVOImpl getXxApRTVReconciliationSearchVO() {
        return (XxApRTVReconciliationSearchVOImpl) findViewObject("XxApRTVReconciliationSearchVO");
    }


    /**
     * Container's getter for ConsignmentRTVVO1.
     * @return ConsignmentRTVVO1
     */
    public ConsignmentRTVVOImpl getConsignmentRTVVO1() {
        return (ConsignmentRTVVOImpl) findViewObject("ConsignmentRTVVO1");
    }

    /**
     * Container's getter for XxApRTVReconUSVO1.
     * @return XxApRTVReconUSVO1
     */
    public XxApRTVReconUSVOImpl getXxApRTVReconUSVO() {
        return (XxApRTVReconUSVOImpl) findViewObject("XxApRTVReconUSVO");
    }

    /**
     * Container's getter for XxApRTVReconCAVO1.
     * @return XxApRTVReconCAVO1
     */
    public XxApRTVReconCAVOImpl getXxApRTVReconCAVO() {
        return (XxApRTVReconCAVOImpl) findViewObject("XxApRTVReconCAVO");
    }

    /**
     * Container's getter for XxApRTVReconTotalVO1.
     * @return XxApRTVReconTotalVO1
     */
    public XxApRTVReconTotalVOImpl getXxApRTVReconTotalVO() {
        return (XxApRTVReconTotalVOImpl) findViewObject("XxApRTVReconTotalVO");
    }


    /**
     * Container's getter for ConsignmentRTVTotalVO1.
     * @return ConsignmentRTVTotalVO1
     */
    public ConsignmentRTVTotalVOImpl getConsignmentRTVTotalVO1() {
        return (ConsignmentRTVTotalVOImpl) findViewObject("ConsignmentRTVTotalVO1");
    }

    /**
     * Container's getter for ConsignmentRTVSearchVO1.
     * @return ConsignmentRTVSearchVO1
     */
    public ConsignmentRTVSearchVOImpl getConsignmentRTVSearchVO1() {
        return (ConsignmentRTVSearchVOImpl) findViewObject("ConsignmentRTVSearchVO1");
    }

    /**
     * Container's getter for SupplierSiteSearchVO1.
     * @return SupplierSiteSearchVO1
     */
    public SupplierSiteSearchVOImpl getSupplierSiteSearchVO1() {
        return (SupplierSiteSearchVOImpl) findViewObject("SupplierSiteSearchVO1");
    }

    /**
     * Container's getter for DeptContactVO1.
     * @return DeptContactVO1
     */
    public DeptContactVOImpl getDeptContactVO1() {
        return (DeptContactVOImpl) findViewObject("DeptContactVO1");
    }

    public void autoSave() {
        getDBTransaction().commit();
    }

    /**
     * Container's getter for XxApInvoicePaymentInquirySearchVO1.
     * @return XxApInvoicePaymentInquirySearchVO1
     */
    public XxApInvoicePaymentInquirySearchVOImpl getXxApInvoicePaymentInquirySearchVO() {
        return (XxApInvoicePaymentInquirySearchVOImpl) findViewObject("XxApInvoicePaymentInquirySearchVO");
    }

    /**
     * Container's getter for SKUDLovVO1.
     * @return SKUDLovVO1
     */
    public SKUDLovVOImpl getSKUDLovVO() {
        return (SKUDLovVOImpl) findViewObject("SKUDLovVO");
    }

    /**
     * Container's getter for XxApTradeMatchSearchVO.
     * @return XxApTradeMatchSearchVO
     */
    public XxApTradeMatchSearchVOImpl getXxApTradeMatchSearchVO() {
        return (XxApTradeMatchSearchVOImpl) findViewObject("XxApTradeMatchSearchVO");
    }


    /**
     * Container's getter for XxApVendorMatchAnaVendVO1.
     * @return XxApVendorMatchAnaVendVO1
     */
    public XxApVendorMatchAnaVendVOImpl getXxApVendorMatchAnaVendVO1() {
        return (XxApVendorMatchAnaVendVOImpl) findViewObject("XxApVendorMatchAnaVendVO1");
    }

    /**
     * Container's getter for XxApVendMatchAnaDummVO1.
     * @return XxApVendMatchAnaDummVO1
     */
    public XxApVendMatchAnaDummVOImpl getXxApVendMatchAnaDummVO1() {
        return (XxApVendMatchAnaDummVOImpl) findViewObject("XxApVendMatchAnaDummVO1");
    }


    //    private  oracle.jbo.domain.Date dateFormater(String dateValue){
    //
    //            DateFormat originalFormat = new SimpleDateFormat("yyyy-dd-mm");
    //            DateFormat targetFormat = new SimpleDateFormat("dd-MMM-yyyy");
    //            oracle.jbo.domain.Date date = originalFormat.parse(dateValue);
    //            String formattedDate = targetFormat.format(date);
    //
    //        }

    /**
     * Container's getter for PoInquiryDetailsVO1.
     * @return PoInquiryDetailsVO1
     */
    public PoInquiryDetailsVOImpl getPoInquiryDetailsVO1() {
        return (PoInquiryDetailsVOImpl) findViewObject("PoInquiryDetailsVO1");
    }

    /**
     * Container's getter for PoInquiryInvPopVO1.
     * @return PoInquiryInvPopVO1
     */
    public PoInquiryInvPopVOImpl getPoInquiryInvPopVO1() {
        return (PoInquiryInvPopVOImpl) findViewObject("PoInquiryInvPopVO1");
    }

    /**
     * Container's getter for PoInquiryMainVO1.
     * @return PoInquiryMainVO1
     */
    public PoInquiryMainVOImpl getPoInquiryMainVO1() {
        return (PoInquiryMainVOImpl) findViewObject("PoInquiryMainVO1");
    }

    /**
     * Container's getter for PoInquiryRecPopVO1.
     * @return PoInquiryRecPopVO1
     */
    public PoInquiryRecPopVOImpl getPoInquiryRecPopVO1() {
        return (PoInquiryRecPopVOImpl) findViewObject("PoInquiryRecPopVO1");
    }

    /**
     * Container's getter for PoInquirySearchVO1.
     * @return PoInquirySearchVO1
     */
    public PoInquirySearchVOImpl getPoInquirySearchVO1() {
        return (PoInquirySearchVOImpl) findViewObject("PoInquirySearchVO1");
    }

    /**
     * Container's getter for PoInquiryWrtoffPopVO1.
     * @return PoInquiryWrtoffPopVO1
     */
    public PoInquiryWrtoffPopVOImpl getPoInquiryWrtoffPopVO1() {
        return (PoInquiryWrtoffPopVOImpl) findViewObject("PoInquiryWrtoffPopVO1");
    }


    public void addInvoiceLine(String invId, String userId, String userName) {
        XXApInvoiceDtlVORowImpl invoicelinerow = null;
        Number existLineNum = new Number(0);
        ViewCriteria criteria = getXXApInvoiceDetailsVO1().getViewCriteria("XXApInvoiceDetailsVOCriteria1");
        ViewCriteria criteriaxxinvoicehdr = getXXApInvoiceHeaderVO1().getViewCriteria("XXApInvoiceHeaderVOCriteria");
        getXXApInvoiceHeaderVO1().applyViewCriteria(null);
        getXXApInvoiceHeaderVO1().setNamedWhereClauseParam("invId", invId);
        getXXApInvoiceHeaderVO1().applyViewCriteria(criteriaxxinvoicehdr);
        getXXApInvoiceHeaderVO1().executeQuery();
        XXApInvoiceHeaderVORowImpl invoicerow = (XXApInvoiceHeaderVORowImpl) getXXApInvoiceHeaderVO1().first();
        Number usrId = new Number(0);
        String usrName = null;
        DBSequence sequence =
            new DBSequence(new SequenceImpl("XX_AP_CHBK_LINE_SEQ", getDBTransaction()).getSequenceNumber());

        String invNum = null;
        if (invoicerow != null) {
            usrId = invoicerow.getCreatedBy();
            usrName = invoicerow.getCreatedByName();
            invNum = invoicerow.getInvoiceNum();
        }

        getXXApInvoiceDetailsMaxLineNumVO1().setWhereClause(null);
        getXXApInvoiceDetailsMaxLineNumVO1().setNamedWhereClauseParam("p_invoice_id", invId);
        getXXApInvoiceDetailsMaxLineNumVO1().executeQuery();
        if(getXXApInvoiceDetailsMaxLineNumVO1().first().getAttribute("Maxlinenumber")!=null)
        existLineNum = (Number) getXXApInvoiceDetailsMaxLineNumVO1().first().getAttribute("Maxlinenumber");
        else 
            existLineNum=new Number(0); 
        invoicelinerow = (XXApInvoiceDtlVORowImpl) getXXApInvoiceDtlVO1().createRow();
        Calendar todaysDate = Calendar.getInstance();
        java.util.Date utilDate = new java.util.Date();
        todaysDate.setTime(utilDate);
        java.sql.Date sqlDate =
            new java.sql.Date(todaysDate.get(Calendar.YEAR) - 1900, (todaysDate.get(Calendar.MONTH)),
                              todaysDate.get(Calendar.DAY_OF_MONTH));

        oracle.jbo.domain.Date jboDate = new oracle.jbo.domain.Date(sqlDate);


        try {
            invoicelinerow.setInvoiceId(new Number(invId));
            invoicelinerow.setInvoiceNum(invNum);
            invoicelinerow.setLineNumber(new Number(existLineNum.add(1)));
            invoicelinerow.setCreatedBy(new Number(usrId));
            invoicelinerow.setCreationDate(jboDate);
            invoicelinerow.setProcessFlag("N");
            invoicelinerow.setUnmatchPoFlag("N");
            invoicelinerow.setHoldExistsFlag("N");
            invoicelinerow.setLastUpdatedBy(new Number(usrId));
            invoicelinerow.setLastUpdateDate(jboDate);
            invoicelinerow.setLineSeqId(sequence.getSequenceNumber());
            invoicelinerow.setNewLineFlag("Y");

        } catch (Exception e) {

        }
        getXXApInvoiceDtlVO1().insertRow(invoicelinerow);
        getDBTransaction().commit();
    }

    /**
     * Container's getter for XXApInvoiceDetailsMaxLineNumVO1.
     * @return XXApInvoiceDetailsMaxLineNumVO1
     */
    public XXApInvoiceDetailsMaxLineNumVOImpl getXXApInvoiceDetailsMaxLineNumVO1() {
        return (XXApInvoiceDetailsMaxLineNumVOImpl) findViewObject("XXApInvoiceDetailsMaxLineNumVO1");
    }

    /**
     * Container's getter for XXApInvoiceDtlVO1.
     * @return XXApInvoiceDtlVO1
     */
    public XXApInvoiceDtlVOImpl getXXApInvoiceDtlVO1() {
        return (XXApInvoiceDtlVOImpl) findViewObject("XXApInvoiceDtlVO1");
    }

    public void deleteInvoiceLine(String invId, String lineNum, String dtlLineId) {


        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;
        Object obj = null;


        statement = dbti.createCallableStatement(("BEGIN " + "XX_AP_TR_UI_ACTION_PKG.xx_del_line(?,?);" + "END;"), 0);

        try {
            if (statement != null) {
                statement.setString(1, invId);
                statement.setString(2, dtlLineId);


                statement.execute();
            }
            getDBTransaction().commit();
        } catch (Exception e) {
            System.out.println("Exception");
        }
        ViewCriteria criteriainvoicehold = getApInvoiceHoldsVO1().getViewCriteria("ApInvoiceHoldsVOCriteria");
        getApInvoiceHoldsVO1().applyViewCriteria(null);
        getApInvoiceHoldsVO1().setWhereClause(null);
        getApInvoiceHoldsVO1().addWhereClause(" XXApInvoiceHoldsEO.line_location_id is null");
        getApInvoiceHoldsVO1().setNamedWhereClauseParam("invId", invId);
        getApInvoiceHoldsVO1().applyViewCriteria(criteriainvoicehold);
        getApInvoiceHoldsVO1().executeQuery();

        ViewCriteria criteriainvoiceline = getXXApInvoiceDtlVO1().getViewCriteria("XXApInvoiceDtlVOCriteria");
        getXXApInvoiceDtlVO1().applyViewCriteria(null);
        getXXApInvoiceDtlVO1().setNamedWhereClauseParam("p_dtl_line_id", dtlLineId);
        getXXApInvoiceDtlVO1().setNamedWhereClauseParam("p_inv_id", invId);
        getXXApInvoiceDtlVO1().applyViewCriteria(criteriainvoiceline);
        getXXApInvoiceDtlVO1().executeQuery();
        if (getXXApInvoiceDtlVO1().first() != null) {
            getXXApInvoiceDtlVO1().first().remove();
        }
        ViewCriteria criteria = getXXApInvoiceDetailsVO1().getViewCriteria("XXApInvoiceDetailsVOCriteria1");
        getXXApInvoiceDetailsVO1().applyViewCriteria(null);
        getXXApInvoiceDetailsVO1().setNamedWhereClauseParam("p_inv_id", invId);
        getXXApInvoiceDetailsVO1().applyViewCriteria(criteria);
        getXXApInvoiceDetailsVO1().executeQuery();
        ViewCriteria criteriainvoice = getXXApInvoiceDtlVO1().getViewCriteria("XXApInvoiceDtlVOCriteria1");
        getXXApInvoiceDtlVO1().applyViewCriteria(null);
        getXXApInvoiceDtlVO1().setNamedWhereClauseParam("p_inv_id", invId);
        getXXApInvoiceDtlVO1().applyViewCriteria(criteriainvoice);
        getXXApInvoiceDtlVO1().executeQuery();
        getDBTransaction().commit();
    }

    public String reasonCodeChange(String holdLineId) {
        ApInvoiceLineVORowImpl invoiceholdrow = (ApInvoiceLineVORowImpl) getApInvoiceLineVO1().getCurrentRow();

        ViewCriteria criteriahold = getXXApHoldsVO2().getViewCriteria("XXApHoldsVOCriteria");
        getXXApHoldsVO2().setWhereClause(null);
        getXXApHoldsVO2().applyViewCriteria(null);
        getXXApHoldsVO2().setNamedWhereClauseParam("invId", invoiceholdrow.getInvoiceId());
        getXXApHoldsVO2().setNamedWhereClauseParam("lineNo", invoiceholdrow.getLineNumber1());
        getXXApHoldsVO2().setNamedWhereClauseParam("holdLineNo", holdLineId);
        getXXApHoldsVO2().applyViewCriteria(criteriahold);
        getXXApHoldsVO2().executeQuery();
        if (getXXApHoldsVO2().first() != null) {
            if (getXXApHoldsVO2().first().getAttribute("ReasonCode1") != null)
                getXXApHoldsVO2().first().setAttribute("ReleaseHold1", "Y");
            else
                getXXApHoldsVO2().first().setAttribute("ReleaseHold1", "N");
        }
        return null;
    }


    /**
     * Container's getter for XxApReceiptDetailInquirySearchVO1.
     * @return XxApReceiptDetailInquirySearchVO1
     */
    public XxApReceiptDetailInquirySearchVOImpl getXxApReceiptDetailInquirySearchVO1() {
        return (XxApReceiptDetailInquirySearchVOImpl) findViewObject("XxApReceiptDetailInquirySearchVO1");
    }

    /**
     * Container's getter for XxApReceiptDetailSummVO1.
     * @return XxApReceiptDetailSummVO1
     */
    public XxApReceiptDetailSummVOImpl getXxApReceiptDetailSummVO1() {
        return (XxApReceiptDetailSummVOImpl) findViewObject("XxApReceiptDetailSummVO1");
    }

    /**
     * Container's getter for XxApReceiptDetailTempVO1.
     * @return XxApReceiptDetailTempVO1
     */
    public XxApReceiptDetailTempVOImpl getXxApReceiptDetailTempVO1() {
        return (XxApReceiptDetailTempVOImpl) findViewObject("XxApReceiptDetailTempVO1");
    }

    /**
     * Container's getter for XxApReceiptDetailTempTotalVO1.
     * @return XxApReceiptDetailTempTotalVO1
     */
    public XxApReceiptDetailTempTotalVOImpl getXxApReceiptDetailTempTotalVO1() {
        return (XxApReceiptDetailTempTotalVOImpl) findViewObject("XxApReceiptDetailTempTotalVO1");
    }

    /**
     * Container's getter for XxApReceiptDetailSummaryVO1.
     * @return XxApReceiptDetailSummaryVO1
     */
    public XxApReceiptDetailSummaryVOImpl getXxApReceiptDetailSummaryVO3() {
        return (XxApReceiptDetailSummaryVOImpl) findViewObject("XxApReceiptDetailSummaryVO3");
    }

    /**
     * Container's getter for XxApReceiptDetailTotalLOV1.
     * @return XxApReceiptDetailTotalLOV1
     */
    public XxApReceiptDetailTotalLOVImpl getXxApReceiptDetailTotalLOV2() {
        return (XxApReceiptDetailTotalLOVImpl) findViewObject("XxApReceiptDetailTotalLOV2");
    }


    

    public String searchInvoiceNum(HashMap invNumMap) {

        String outString = "UNSUCCESSFULL";


        System.err.println("searchTraMatChargebk called.");


        ViewObjectImpl xxApReceiptTemp = this.getXxApReceiptDetailTempVO1();


        xxApReceiptTemp.setWhereClause(null);
        xxApReceiptTemp.clearViewCriterias();
        ViewObjectImpl xxApReceiptTempTotal = this.getXxApReceiptDetailTempTotalVO1();


        xxApReceiptTempTotal.setWhereClause(null);
        xxApReceiptTempTotal.clearViewCriterias();

        xxApReceiptTemp.setNamedWhereClauseParam("P_Review_Num", invNumMap.get("ReceiptNum"));
        xxApReceiptTempTotal.setNamedWhereClauseParam("P_Receipt_Num", invNumMap.get("ReceiptNum"));
        System.out.println("invNumMap.get(\"ReceiptNum\") : : " + invNumMap.get("ReceiptNum"));

        System.out.println("Query value ::::" + xxApReceiptTemp.getQuery());
        xxApReceiptTemp.executeQuery();
        xxApReceiptTempTotal.executeQuery();

        System.out.println("Count ?????" + xxApReceiptTemp.getEstimatedRowCount());
        if (xxApReceiptTemp.hasNext())
            outString = "SUCCESS";

        return outString;
    }


    public String updateChargeback(String holdLookupCode) {

        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;

        BigDecimal lineTotal = new BigDecimal(0);
        BigDecimal reasoncodeTotal = new BigDecimal(0);
        statement = dbti.createCallableStatement(("BEGIN " + "XX_AP_TR_UI_ACTION_PKG.xx_nrc_rc_upd(?);" + "END;"), 0);
        Row row = null;
        String odNoRcpt = "N";
        String odMaxFrt = "N";
        int i = 0;
        getApInvoiceHoldsVO1().reset();
        while (getApInvoiceHoldsVO1().hasNext()) {
            if (i == 0) {
                row = getApInvoiceHoldsVO1().first();
            } else
                row = getApInvoiceHoldsVO1().next();

            if (row != null) {
                if (row.getAttribute("HoldLookupCode1") != null &&
                    row.getAttribute("HoldLookupCode1").equals("OD NO Receipt") &&
                    row.getAttribute("Chargeback2") != null && row.getAttribute("Chargeback2").equals("Y"))
                    odNoRcpt = "Y";
                if (row.getAttribute("HoldLookupCode1") != null &&
                    row.getAttribute("HoldLookupCode1").equals("OD Max Freight") &&
                    row.getAttribute("Chargeback2") != null && row.getAttribute("Chargeback2").equals("Y"))
                    odMaxFrt = "Y";
            }
            i++;
        }
        if (getApInvoiceHoldsVO1().getEstimatedRowCount() == 1) {
            row = getApInvoiceHoldsVO1().first();
            if (row != null) {
                if (row.getAttribute("HoldLookupCode1") != null &&
                    row.getAttribute("HoldLookupCode1").equals("OD NO Receipt") &&
                    row.getAttribute("Chargeback2") != null && row.getAttribute("Chargeback2").equals("Y"))
                    odNoRcpt = "Y";
                if (row.getAttribute("HoldLookupCode1") != null &&
                    row.getAttribute("HoldLookupCode1").equals("OD Max Freight") &&
                    row.getAttribute("Chargeback2") != null && row.getAttribute("Chargeback2").equals("Y"))
                    odMaxFrt = "Y";
            }
        }


        if (odNoRcpt.equals("Y")) {
            try {
                if (statement != null) {
                    statement.setDouble(1, new Double(getApInvoicesVO1().first()
                                                                        .getAttribute("InvoiceId")
                                                                        .toString()));
                    statement.execute();
                }
            } catch (Exception e) {
                System.out.println("Exception");
            }

        }
        if (odMaxFrt.equals("Y")) {
            statement =
                dbti.createCallableStatement(("BEGIN " + "XX_AP_TR_UI_ACTION_PKG.xx_freight_upd(?);" + "END;"), 0);

            try {
                if (statement != null) {
                    statement.setDouble(1, new Double(getApInvoicesVO1().first()
                                                                        .getAttribute("InvoiceId")
                                                                        .toString()));
                    statement.execute();
                }
            } catch (Exception e) {
                System.out.println("Exception");
            }
        }

        getDBTransaction().commit();
        return null;
    }

    public String getFreightChargeback() {
        DBTransaction dbTransaction = getDBTransaction();
        DBTransactionImpl dbti = (DBTransactionImpl) dbTransaction;
        CallableStatement statement = null;
        Object obj = null;
        String chargebackFlag = "N";


        statement =
            dbti.createCallableStatement(("BEGIN ? :=" + "XX_AP_TR_UI_ACTION_PKG.get_freight_chargeback(?,?);" +
                                          "END;"), 0);

        try {
            if (statement != null) {
                statement.registerOutParameter(1, Types.VARCHAR);
                statement.setDouble(2, new Double(getApInvoicesVO1().first()
                                                                    .getAttribute("VendorSiteId")
                                                                    .toString()));
                statement.setDouble(3, new Double(getApInvoicesVO1().first()
                                                                    .getAttribute("OrgId")
                                                                    .toString()));


                statement.executeUpdate();
                obj = statement.getObject(1);
                chargebackFlag = obj.toString();

                if (chargebackFlag != null && chargebackFlag.equals("Y")) {
                    if (getApInvoiceLineVO1().getCurrentRow() != null && getApInvoiceLineVO1().getCurrentRow()
                                                                                              .getAttribute("LineTypeLookupCode1")
                                                                                              .equals("FREIGHT"))
                        getApInvoiceLineVO1().getCurrentRow().setAttribute("Chargeback", "Y");
                    getDBTransaction().commit();
                }
            }
        } catch (Exception e) {
            System.out.println("Exception");
        }
        return chargebackFlag;
    }

    /**
     * Container's getter for ApInvoiceHoldsVO2.
     * @return ApInvoiceHoldsVO2
     */
    public ViewObjectImpl getApInvoiceHoldsVO2() {
        return (ViewObjectImpl) findViewObject("ApInvoiceHoldsVO2");
    }
}

