package od.tdmatch.model;

import od.tdmatch.model.lov.SupplierLOVImpl;


import java.io.Serializable;

import java.math.BigDecimal;

import java.sql.CallableStatement;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;

import od.tdmatch.model.common.TradeMatchAM;

import oracle.adf.model.binding.DCBindingContainer;
import oracle.adf.model.binding.DCIteratorBinding;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.DBTransactionImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;

import oracle.sql.ARRAY;
import oracle.sql.ArrayDescriptor;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon May 08 12:14:27 EDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TradeMatchAMImpl extends ApplicationModuleImpl implements TradeMatchAM,Serializable {
    /**
     * This is the default constructor (do not remove).
     */
    public TradeMatchAMImpl() {
    }

    /**
     * Container's getter for VAInvoiceSummaryVO1.
     * @return VAInvoiceSummaryVO1
     */
    public VAInvoiceSummaryVOImpl getVAInvoiceSummaryVO1() {
        return (VAInvoiceSummaryVOImpl) findViewObject("VAInvoiceSummaryVO1");
    }


    /**
     * Container's getter for VAEmpVendorSummaryVO1.
     * @return VAEmpVendorSummaryVO1
     */
    public VAEmpVendorSummaryVOImpl getVAEmpVendorSummaryVO1() {
        return (VAEmpVendorSummaryVOImpl) findViewObject("VAEmpVendorSummaryVO1");
    }

    /**
     * Container's getter for VAInvoiceSummaryVO2.
     * @return VAInvoiceSummaryVO2
     */
    public VAInvoiceSummaryVOImpl getVAInvoiceSummaryVO2() {
        return (VAInvoiceSummaryVOImpl) findViewObject("VAInvoiceSummaryVO2");
    }


    /**
     * Container's getter for VAEmpVendorSummaryVO3.
     * @return VAEmpVendorSummaryVO3
     */
    public VAEmpVendorSummaryVOImpl getVAEmpVendorSummaryVO3() {
        return (VAEmpVendorSummaryVOImpl) findViewObject("VAEmpVendorSummaryVO3");
    }


    /**
     * Container's getter for OrgVO1.
     * @return OrgVO1
     */
    public OrgVOImpl getOrgVO1() {
        return (OrgVOImpl) findViewObject("OrgVO1");
    }

    /**
     * Container's getter for SupplierLOV1.
     * @return SupplierLOV1
     */
    public SupplierLOVImpl getSupplierLOV1() {
        return (SupplierLOVImpl) findViewObject("SupplierLOV1");
    }

    /**
     * Container's getter for GeneralInquiryVO1.
     * @return GeneralInquiryVO1
     */
    public GeneralInquiryVOImpl getGeneralInquiryVO1() {
        return (GeneralInquiryVOImpl) findViewObject("GeneralInquiryVO1");
    }
    
    public void updateVA(){

        GeneralInquiryQueryVOImpl vo = getGeneralInquiryQueryVO1();
     //   GeneralInquiryQueryVORowImpl row = (GeneralInquiryQueryVORowImpl) vo.first();
    // RowSetIterator rsIterator=vo.createRowSetIterator(null);  
      Row[] selectedRolesRows = vo.getFilteredRows("EmployeeSelect", true);
        
        TradeGeneralInquiryVOImpl tradevo=getTradeGeneralInquiryVO1(); 
         String supSiteNo;
         ViewCriteria criteria=tradevo.getViewCriteria("TradeGeneralInquiryVOCriteria");
         String newVendorAssistant;
         
         for (Row row : selectedRolesRows){
             
                 supSiteNo=(String)row.getAttribute("SupplierSiteNo");
                 newVendorAssistant=(String)row.getAttribute("EmployeeName");
                 tradevo.applyViewCriteria(null);
                 tradevo.setNamedWhereClauseParam("p_vend_site", supSiteNo);
                 tradevo.applyViewCriteria(criteria);
                 tradevo.executeQuery();
                 tradevo.first().setAttribute("Attribute6", newVendorAssistant);
            
         }

        getDBTransaction().commit();
        generalInquirySearchValidate();
        vo.executeEmptyRowSet();
        
    }

    

    /**
     * Container's getter for TradeGeneralInquiryVO1.
     * @return TradeGeneralInquiryVO1
     */
    public TradeGeneralInquiryVOImpl getTradeGeneralInquiryVO1() {
        return (TradeGeneralInquiryVOImpl) findViewObject("TradeGeneralInquiryVO1");
    }

    /**
     * Container's getter for PerAllPeopleFVO1.
     * @return PerAllPeopleFVO1
     */
    public PerAllPeopleFVOImpl getPerAllPeopleFVO1() {
        return (PerAllPeopleFVOImpl) findViewObject("PerAllPeopleFVO1");
    }

    /**
     * Container's getter for GeneralInquiryQueryVO1.
     * @return GeneralInquiryQueryVO1
     */
    public GeneralInquiryQueryVOImpl getGeneralInquiryQueryVO1() {
        return (GeneralInquiryQueryVOImpl) findViewObject("GeneralInquiryQueryVO1");
    }

    /**
     * Container's getter for GeneralInQuirySKUVO1.
     * @return GeneralInQuirySKUVO1
     */
    public GeneralInQuirySKUVOImpl getGeneralInQuirySKUVO1() {
        return (GeneralInQuirySKUVOImpl) findViewObject("GeneralInQuirySKUVO1");
    }
    
    public void seachSKU(String sku){
        getGeneralInQuirySKUVO1().setWhereClause(null);
        getGeneralInQuirySKUVO1().setNamedWhereClauseParam("b_sku_id", "195128");
        getGeneralInQuirySKUVO1().executeQuery();
    }
 
    public String seachWithSKU(String sku){
        getGeneralInQuirySKUVO1().setWhereClause(null);
        getGeneralInQuirySKUVO1().setNamedWhereClauseParam("b_sku_id", sku);
        getGeneralInQuirySKUVO1().executeQuery();
        if(getGeneralInQuirySKUVO1().getEstimatedRowCount()>0){
            return "Y";
        }
                else return "N";
    }
   
    public void clearSKU(String sku){
        getGeneralInQuirySKUVO1().setWhereClause(null);
        getGeneralInQuirySKUVO1().setNamedWhereClauseParam("b_sku_id", null);
        getGeneralInQuirySKUVO1().executeQuery();
    }
    
    
    /*This method is for settign the Default Org Id for VA Employee Summary Screen1*/
    public void setDefaultOrgId0(){
        Number var = new Number(404);
              
        Key keyVendorsearchid = new Key(new Object[] {1});
        VASummarySearchVORowImpl row=(VASummarySearchVORowImpl)getVASummarySearchVO1().getRow(keyVendorsearchid);
        
        row.setAttribute("OrgId", var);//setAttribute("OrgId").toString());
          /*Since this is called from the Drill down we will just use this method and the Employee Vendor SUmmary VO separate*/        
//        executeVAEmpVendorSummary(null);
    }
    
    /*This method is for settign the Default Org Id for VA Employee Summary Screen2*/
    public void setDefaultOrgId1(){
        Number var = new Number(404);
              
        Key keyVendorsearchid = new Key(new Object[] {1});
        VASummarySearchVORowImpl row=(VASummarySearchVORowImpl)getVASummarySearchVO1().getRow(keyVendorsearchid);
        
        row.setAttribute("OrgId", var);//setAttribute("OrgId").toString());
        
        executeVAEmpVendorSummary1(null);
    }
    
    public void executeVAEmpVendorSummary(String pEmployeeId){
        VAEmpVendorSummaryVOImpl tradevo = getVAEmpVendorSummaryVO1();
        ViewCriteria criteria=tradevo.getViewCriteria("VAEmpVendorSummaryVOCriteria1");
        
        tradevo.applyViewCriteria(null);
        tradevo.setNamedWhereClauseParam("p_employee_id", pEmployeeId);
        tradevo.applyViewCriteria(criteria);
        System.out.println("TEST G.S: "+tradevo.getQuery());
        tradevo.executeQuery();
    }
    
    public void executeVAEmpVendorSummary1(String pEmployeeId){
        getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_org_id", 404);
        getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_employee_id", pEmployeeId);       
        
        System.out.println("executing query: " + getVAEmpVendorSummaryVO3().getQuery());
        getVAEmpVendorSummaryVO3().executeQuery();
        
    }
    
    public void executeVendorMootDtVO(String pSupplierName, String pSupplierSite, String pMoot, String pNrf){

        getVendMootDtVO1().setNamedWhereClauseParam("p_org_id", 404);
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_name", pSupplierName);
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_site", pSupplierSite);
        getVendMootDtVO1().setNamedWhereClauseParam("p_moot", pMoot);
        getVendMootDtVO1().setNamedWhereClauseParam("p_nrf", pNrf);
        
        
        System.out.println("executing query: " + getVendMootDtVO1().getQuery());
        getVendMootDtVO1().executeQuery();
        System.out.println("TEST G.S: "+getVendMootDtVO1().getRowCount());
    }

   

    /**
     * Container's getter for GeneralInquiryUpdateVO1.
     * @return GeneralInquiryUpdateVO1
     */
    public GeneralInquiryUpdateVOImpl getGeneralInquiryUpdateVO1() {
        return (GeneralInquiryUpdateVOImpl) findViewObject("GeneralInquiryUpdateVO1");
    }
    
    public void createVendorUpdate(){
 
    }
    public void submitMassUpdate(HashMap param){
        GeneralInquiryQueryVOImpl tradevo=getGeneralInquiryQueryVO1(); 
         String fromsup=(String)param.get("fromva");
         String tosup=(String)param.get("tova");
      //  fromsup=(String)getGeneralInquiryMassUpdateQueryVO1().first().getAttribute("fromVA");
      //  tosup=(String)getGeneralInquiryMassUpdateQueryVO1().first().getAttribute("toVA");
         ViewCriteria criteria=tradevo.getViewCriteria("TradeGeneralInquiryVOCriteria");
//        tradevo.applyViewCriteria(null);
//        tradevo.setNamedWhereClauseParam("p_vend_site", fromsup);
//        tradevo.applyViewCriteria(criteria);
//        tradevo.executeQuery();
//        // String newVendorAssistant;
//        while (tradevo.hasNext()) {
//            
//            
//            tradevo.first().setAttribute("Attribute6", tosup);
//            tradevo.next();
//        }
                
         //       Row[] rows=tradevo.getFilteredRows("EmployeeSelect", true);
               
               
        ViewObject vo = tradevo.getViewObject();
        int i = 0;
        Row row = null;
        vo.reset();
        ArrayList list=new ArrayList();
        list.add(fromsup);
        list.add(tosup);
        while (vo.hasNext()) {
        if (i == 0)
        row = vo.first();
        else
        row = vo.next();
        //            System.out.println("Changing row 1: " +
        //              row.getAttribute("Name"));
     //   System.out.println("xdebug c2: Changing row 2: " +
     //   row.getAttribute("EmployeeSelect"));
            
        if((Boolean)row.getAttribute("EmployeeSelect"))
            list.add((String)row.getAttribute("SupplierSiteNo"));
        i++;
        }
        if(vo.getEstimatedRowCount()==1)
            list.add((String)vo.first().getAttribute("SupplierSiteNo"));
                
//        for (Row row : rows){
//            list.add((String)row.getAttribute("SupplierSiteNo"));
//        }
        for (i=0;i<list.size();i++)
        System.out.println(list.get(i));
        DBTransaction dbTransaction=getDBTransaction();
                DBTransactionImpl dbti = (DBTransactionImpl)dbTransaction;
                        CallableStatement statement = null;
//                ResultSet rs=null;
//                        String lodgeFeeTbl = "INVOICE_ARRAY";
                        
                       
                statement =
                                    dbti.createCallableStatement(("BEGIN " + "XX_AP_TRADE_MATCH_UTL_PKG.xx_upd_vendorassistant(?);" +
                                                                  "END;"), 0);
                 
                try {
                            if(statement!=null){
                                ArrayDescriptor empArray = 
                                        ArrayDescriptor.createDescriptor("XX_AP_TR_INV_ARRAY", 
                                                                         statement.getConnection()); 
                                      ARRAY invoicearray = 
                                        new ARRAY(empArray, statement.getConnection(), list.toArray());
                               // ARRAY invoicearray=statement.getConnection().createArrayOf(String, list); 
                      //      statement.setArray(1,  lodgeFeeTbl);
                      statement.setArray(1, invoicearray);
                            statement.execute();
                            }
                }catch(Exception e){
                    System.out.println("Exception");
                }
                            
     //   Object supplerUpdate = callStoredFunction(Types.VARCHAR, "xx_upd_vendor_assistant(?,?)", new Object[] { invoicearray });
               // if (supplerUpdate != null && supplerUpdate.equals("Y")) {
                    getDBTransaction().commit();
               // } 
         
//        Object supplerUpdate = callStoredFunction(Types.VARCHAR, "xx_upd_vendor_assistant(?,?)", new Object[] { fromsup,tosup });
//                if (supplerUpdate != null && supplerUpdate.equals("Y")) {
//                    getDBTransaction().commit();
//                }
                    tradevo.executeEmptyRowSet();
                    getGeneralInquiryMassUpdateQueryVO1().first().setAttribute("fromVA", null);
                    getGeneralInquiryMassUpdateQueryVO1().first().setAttribute("toVA", null);
    }
    public String massUpdateReason(String qtyReason,String priceReason,String releaseholdSelect,String chargebackSelect){
        XXApInvoiceHoldsVOImpl tradevo=getXXApInvoiceHoldsVO1(); 
//          qtyReason="SH";
//          priceReason="PD";
//          releaseholdSelect="Y";
//          chargebackSelect="Y";
     //   qtyreason=(String)getInvoiceReasonCodeVO1().first().getAttribute("qtyReason");
     //   pricereason=(String)getInvoiceReasonCodeVO1().first().getAttribute("priceReason");
         ViewCriteria criteria=tradevo.getViewCriteria("XXApInvoiceHoldsVOCriteria1");
                tradevo.applyViewCriteria(null);
                tradevo.setNamedWhereClauseParam("pInvoiceId", getApInvoicesVO1().first().getAttribute("InvoiceId"));
                tradevo.applyViewCriteria(criteria);
                tradevo.executeQuery();
        //        // String newVendorAssistant;
        //        while (tradevo.hasNext()) {
        //
        //
        //            tradevo.first().setAttribute("Attribute6", tosup);
        //            tradevo.next();
        //        }
                
         //       Row[] rows=tradevo.getFilteredRows("EmployeeSelect", true);
               
               
        ViewObject vo = tradevo.getViewObject();
        int i = 0;
        Row row = null;
        vo.reset();
//        ArrayList list=new ArrayList();
//        list.add(fromsup);
//        list.add(tosup);
        while (vo.hasNext()) {
        if (i == 0)
        row = vo.first();
        else
        row = vo.next();
            if(row.getAttribute("HoldLookupCode")!=null && row.getAttribute("HoldLookupCode").toString().contains("QTY")){
                row.setAttribute("ReasonCode", qtyReason);
            }
            if(row.getAttribute("HoldLookupCode")!=null && row.getAttribute("HoldLookupCode").toString().contains("PRICE")){
                row.setAttribute("ReasonCode", priceReason);
            }
            if(releaseholdSelect.equals("true"))
                row.setAttribute("ReleaseHold", "Y");
            if(chargebackSelect.equals("true"))
                row.setAttribute("Chargeback", "Y");
            i++;
        }
        getDBTransaction().commit();
        return null;
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement cst = null;
            try {
                //Creating sql statement
                cst = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                //Register dataType for return value
                cst.registerOutParameter(1, sqlReturnType);
                //Pass input parameters value
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        cst.setObject(z + 2, bindVars[z]);
                    }
                }
                cst.executeUpdate();
                //Finally get returned value
                return cst.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e.getMessage());
            } finally {
                if (cst != null) {
                    try {
                        cst.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    /**
     * Container's getter for GeneralInquiryMassUpdateVO1.
     * @return GeneralInquiryMassUpdateVO1
     */
    public GeneralInquiryMassUpdateVOImpl getGeneralInquiryMassUpdateVO1() {
        return (GeneralInquiryMassUpdateVOImpl) findViewObject("GeneralInquiryMassUpdateVO1");
    }

    /**
     * Container's getter for InvoicesNotValidatedVO1.
     * @return InvoicesNotValidatedVO1
     */
    public InvoicesNotValidatedVOImpl getInvoicesNotValidatedVO1() {
        return (InvoicesNotValidatedVOImpl) findViewObject("InvoicesNotValidatedVO1");
    }

    /**
     * Container's getter for ApInvoicesVO1.
     * @return ApInvoicesVO1
     */
    public ApInvoicesVOImpl getApInvoicesVO1() {
        return (ApInvoicesVOImpl) findViewObject("ApInvoicesVO1");
    }
    
    public void invoiceSearch(){
        
        ApInvoicesVORowImpl row=(ApInvoicesVORowImpl)getApInvoicesVO1().getCurrentRow();
        
        ViewCriteria criteria=getInvoicesNotValidatedVO1().getViewCriteria("InvoicesNotValidatedVOCriteria");
        
        getInvoicesNotValidatedVO1().applyViewCriteria(null);
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_invoice_no", row.getinvoiceNumber());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_po_no", row.getpoNumber());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_invoice_from", row.getinvoiceFrom());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_invoice_to", row.getinvoiceTo());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_due_from", row.getdueFrom());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_due_to", row.getdueTo());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_vend_no", row.getsupNo());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_ven_name", row.getsupName());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_site", row.getsupSiteCode());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_vendor_asst", row.getvendorAssistant());
        getInvoicesNotValidatedVO1().applyViewCriteria(criteria);
        getInvoicesNotValidatedVO1().executeQuery();
        
        
    }
    
    public String invoiceSearchValidate(){
        
        ApInvoicesVORowImpl row=(ApInvoicesVORowImpl)getApInvoicesVO1().getCurrentRow();
        
        if(row.getinvoiceTo()!=null && row.getinvoiceFrom() !=null && row.getinvoiceTo().compareTo(row.getinvoiceFrom())<0){
            return "Please enter From Invoice Date less than To Invoice Date.";
        }
        if(row.getdueTo()!=null && row.getdueFrom()!=null && row.getdueTo().compareTo(row.getdueFrom())<0){
            return "Please enter From Due Date less than To Due Date.";
        }
        ViewCriteria criteria=getInvoicesNotValidatedVO1().getViewCriteria("InvoicesNotValidatedVOCriteria");
        
        getInvoicesNotValidatedVO1().applyViewCriteria(null);
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_invoice_no", row.getinvoiceNumber());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_po_no", row.getpoNumber());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_invoice_from", row.getinvoiceFrom());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_invoice_to", row.getinvoiceTo());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_due_from", row.getdueFrom());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_due_to", row.getdueTo());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_vend_no", row.getsupNo());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_ven_name", row.getsupName());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_site", row.getsupSiteCode());
        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_vendor_asst", row.getvendorAssistant());
        getInvoicesNotValidatedVO1().applyViewCriteria(criteria);
        getInvoicesNotValidatedVO1().executeQuery();
        
        return null;
    }
    
    public String generalInquirySearchValidate(){
        ViewCriteria criteria=getGeneralInquiryQueryVO1().getViewCriteria("GeneralInquiryQueryVOCriteria");
        GeneralInquiryTVORowImpl row=(GeneralInquiryTVORowImpl)getGeneralInquiryTVO1().getCurrentRow();
        
        getGeneralInquiryQueryVO1().applyViewCriteria(null);
        getGeneralInquiryQueryVO1().setNamedWhereClauseParam("p_sup_no", row.getsupNo());
        getGeneralInquiryQueryVO1().setNamedWhereClauseParam("p_sup_name", row.getsupName());
        getGeneralInquiryQueryVO1().setNamedWhereClauseParam("p_sup_site_no", row.getsupSiteCode());
        getGeneralInquiryQueryVO1().setNamedWhereClauseParam("p_employee_no", row.getvendorAssistant());
        getGeneralInquiryQueryVO1().setNamedWhereClauseParam("p_organization_id", row.getoperatingId());
  //      getGeneralInquiryQueryVO1().setNamedWhereClauseParam("p_due_to", row.getdueTo());
//        getGeneralInquiryQueryVO1().setNamedWhereClauseParam("p_vend_no", row.getsupNo());
//        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_ven_name", row.getsupName());
//        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_site", row.getsupSiteCode());
//        getInvoicesNotValidatedVO1().setNamedWhereClauseParam("p_vendor_asst", row.getvendorAssistant());
        getGeneralInquiryQueryVO1().applyViewCriteria(criteria);
        getGeneralInquiryQueryVO1().executeQuery();
        
        int i = 0;
        Row rowinquiry = null;
      //  getGeneralInquiryQueryVO1().reset();
        while (getGeneralInquiryQueryVO1().hasNext()) {
        if (i == 0)
        rowinquiry = getGeneralInquiryQueryVO1().first();
        else
        rowinquiry = getGeneralInquiryQueryVO1().next();
          rowinquiry.setAttribute("EmployeeName", rowinquiry.getAttribute("EmployeeNumber"));
          i++;  
        }
        if(getGeneralInquiryQueryVO1().getEstimatedRowCount()==1){
            rowinquiry = getGeneralInquiryQueryVO1().first();
            rowinquiry.setAttribute("EmployeeName", rowinquiry.getAttribute("EmployeeNumber"));
        }
        return null;
    }
    public String paymentAttributeValidate(){
        
        ApInvoicesTermsVORowImpl row=(ApInvoicesTermsVORowImpl)getApInvoicesTermsVO1().getCurrentRow();
        
        if(row.getinvoiceDateTo()!=null && row.getinvoiceDate() !=null && row.getinvoiceDateTo().compareTo(row.getinvoiceDate())<0){
            return "Please enter From Invoice Date less than To Invoice Date.";
        }
        if(row.getdueDateTo()!=null && row.getdueDate()!=null && row.getdueDateTo().compareTo(row.getdueDate())<0){
            return "Please enter From Due Date less than To Due Date.";
        }
        if(row.getpoDateRangeTo()!=null && row.getpoDate()!=null && row.getpoDateRangeTo().compareTo(row.getpoDate())<0){
            return "Please enter From PO Date less than To PO Date.";
        }
        if(row.getpoNum()==null && row.getinvoiceDate()==null && row.getinvoiceDateTo()==null && row.getdueDate()==null && row.getdueDateTo()==null && row.getpoDate()==null && row.getpoDateRangeTo()==null && row.getsupNo()==null && row.getsupName()==null && row.getsupSiteCode()==null && row.gettermId()==null){
            return "Please enter atlease one Search Criteria field.";
        }
        ViewCriteria criteria=getPaymentAttributeVO1().getViewCriteria("PaymentAttributeVOCriteria");
        
        getPaymentAttributeVO1().applyViewCriteria(null);
        getPaymentAttributeVO1().setNamedWhereClauseParam("poNum", row.getpoNum());
        getPaymentAttributeVO1().setNamedWhereClauseParam("poFrom", row.getpoDate());
        getPaymentAttributeVO1().setNamedWhereClauseParam("poTo", row.getpoDateRangeTo());
        getPaymentAttributeVO1().setNamedWhereClauseParam("invoiceFrom", row.getinvoiceDate());
        getPaymentAttributeVO1().setNamedWhereClauseParam("invoiceTo", row.getinvoiceDateTo());
        getPaymentAttributeVO1().setNamedWhereClauseParam("dueFrom", row.getdueDate());
        getPaymentAttributeVO1().setNamedWhereClauseParam("dueTo", row.getdueDateTo());
        getPaymentAttributeVO1().setNamedWhereClauseParam("supNo", row.getsupNo());
        getPaymentAttributeVO1().setNamedWhereClauseParam("supName", row.getsupName());
        getPaymentAttributeVO1().setNamedWhereClauseParam("supSiteNo", row.getsupSiteCode());
        getPaymentAttributeVO1().applyViewCriteria(criteria);
        getPaymentAttributeVO1().executeQuery();
        try{
        oracle.jbo.domain.Number invoicesum=new oracle.jbo.domain.Number("0");
        ViewObject vo = getPaymentAttributeVO1().getViewObject();
        int i = 0;
        Row rowsum = null;
        vo.reset();
        
        while (vo.hasNext()) {
        if (i == 0)
        rowsum = vo.first();
        else
        rowsum = vo.next();
        //            System.out.println("Changing row 1: " +
        //              row.getAttribute("Name"));
        //   System.out.println("xdebug c2: Changing row 2: " +
        //   row.getAttribute("EmployeeSelect"));
            
        invoicesum=invoicesum.add((oracle.jbo.domain.Number)rowsum.getAttribute("InvoiceAmount"));
        i++;
        }
            if(vo.getEstimatedRowCount()==1)
                invoicesum=(oracle.jbo.domain.Number)getPaymentAttributeVO1().first().getAttribute("InvoiceAmount");
          //  getPaymentAttributeVO1().first().setAttribute("invoicesum", invoicesum);
            if(invoicesum!=null)
            return invoicesum.toString();
        }catch(Exception e){
            
        }
        
        return null;
    }
    
    public String massReleaseValidate(){
        MassReleaseVORowImpl row=(MassReleaseVORowImpl)getMassReleaseVO1().getCurrentRow();
        
        if(row.getinvoiceFrom()!=null && row.getinvoiceTo() !=null && row.getinvoiceTo().compareTo(row.getinvoiceFrom())<0){
            return "Please enter From Invoice Date less than To Invoice Date.";
        }
        if(row.getdueFrom()!=null && row.getdueTo()!=null && row.getdueTo().compareTo(row.getdueFrom())<0){
            return "Please enter From Due Date less than To Due Date.";
        }
        if(row.getpoFrom()!=null && row.getpoTo()!=null && row.getpoTo().compareTo(row.getpoFrom())<0){
            return "Please enter From PO Date less than To PO Date.";
        }
        if(row.getpoNum()==null && row.getinvoiceFrom()==null && row.getinvoiceTo()==null && row.getdueFrom()==null && row.getdueTo()==null && row.getpoFrom()==null && row.getpoTo()==null && row.getsupNo()==null && row.getsupName()==null && row.getsupSiteCode()==null && row.getvendorAssistant()==null && row.getskuNo()==null && 
           row.getdropShip() ==null &&
        row.getnonCode()==null && row.getfrontDoor()==null && row.getfreightExcp()==null
        ){
        //    return "Please enter atlease one Search Criteria field.";
        }
        ViewCriteria criteria=getMassReleaseHoldVO1().getViewCriteria("MassReleaseHoldVOCriteria");
        
        getMassReleaseHoldVO1().applyViewCriteria(null);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("poNum", row.getpoNum());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("poFrom", row.getpoFrom());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("poTo", row.getpoTo());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("invoiceFrom", row.getinvoiceFrom());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("invoiceTo", row.getinvoiceTo());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("dueFrom", row.getdueFrom());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("dueTo", row.getdueTo());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("supNo", row.getsupNo());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("supName", row.getsupName());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("supSiteCode", row.getsupSiteCode());
        getMassReleaseHoldVO1().setNamedWhereClauseParam("venAssistant", row.getvendorAssistant());
      //  getMassReleaseHoldVO1().setNamedWhereClauseParam("skuNo", row.getskuNo());
        String frontDoor=null;
        if(row.getfrontDoor() !=null && row.getfrontDoor().equals("Y"))
            frontDoor="Y";
        else
            frontDoor=null;
        String nonCode=null;
        if(row.getnonCode()!=null && row.getnonCode().equals("Y"))
            nonCode="Y";
        else
            nonCode=null;
        String dropShip=null;
        if(row.getdropShip()!=null && row.getdropShip().equals("Y"))
            dropShip="Y";
        else
            dropShip=null;
        String freightExcp=null;
        if(row.getfreightExcp()!=null && row.getfreightExcp().equals("Y"))
            freightExcp="Y";
        else
            freightExcp=null;
        String quantityExcp=null;
        if(row.getquantityExcp()!=null && row.getquantityExcp().equals("Y"))
            quantityExcp="Y";
        else
            quantityExcp=null;
        String pricingExcp=null;
        if(row.getpricingExcp()!=null && row.getpricingExcp().equals("Y"))
            pricingExcp="Y";
        else
            pricingExcp=null;
        getMassReleaseHoldVO1().setNamedWhereClauseParam("frontDoorFlag", frontDoor);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("nonCodeFlag", nonCode);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("dropShipFlag", dropShip);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("pricingExcpFlag", pricingExcp);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("quantityExcpFlag", quantityExcp);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("freightExcpFlag", freightExcp);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("operatingId", row.getoperatingId());
        getMassReleaseHoldVO1().applyViewCriteria(criteria);
        getMassReleaseHoldVO1().setNamedWhereClauseParam("skunum", row.getskuNo());
        getMassReleaseHoldVO1().executeQuery();
        try{
        oracle.jbo.domain.Number invoicesum=new oracle.jbo.domain.Number("0");
            oracle.jbo.domain.Number quantityholdsum=new oracle.jbo.domain.Number("0");
            oracle.jbo.domain.Number priceholdsum=new oracle.jbo.domain.Number("0");

        ViewObject vo = getMassReleaseHoldVO1().getViewObject();
        int i = 0;
        Row rowsum = null;
        vo.reset();
        
        while (vo.hasNext()) {
        if (i == 0)
        rowsum = vo.first();
        else
        rowsum = vo.next();
        //            System.out.println("Changing row 1: " +
        //              row.getAttribute("Name"));
        //   System.out.println("xdebug c2: Changing row 2: " +
        //   row.getAttribute("EmployeeSelect"));
            
        invoicesum=invoicesum.add((oracle.jbo.domain.Number)rowsum.getAttribute("InvoiceAmount"));
            quantityholdsum=quantityholdsum.add((oracle.jbo.domain.Number)rowsum.getAttribute("QtyHoldAmt"));
            priceholdsum=priceholdsum.add((oracle.jbo.domain.Number)rowsum.getAttribute("PriceHoldAmt"));

        i++;
        }
            if(vo.getEstimatedRowCount()==1){
                invoicesum=(oracle.jbo.domain.Number)getMassReleaseHoldVO1().first().getAttribute("InvoiceAmount");
                quantityholdsum=(oracle.jbo.domain.Number)getMassReleaseHoldVO1().first().getAttribute("QtyHoldAmt");
                priceholdsum=(oracle.jbo.domain.Number)getMassReleaseHoldVO1().first().getAttribute("PriceHoldAmt");

         
          //  getPaymentAttributeVO1().first().setAttribute("invoicesum", invoicesum);
            }
            if(invoicesum!=null){
              String  sumtotal=invoicesum.toString()+","+quantityholdsum.toString()+","+priceholdsum.toString();
                
            return sumtotal;
            }
        }catch(Exception e){
            
        }
        
        return null;
    }
    
    public String costVarinceValidate(){
        CostVarianceTVORowImpl row=(CostVarianceTVORowImpl)getCostVarianceTVO1().getCurrentRow();
        
        if(row.getinvoiceFrom()!=null && row.getinvoiceTo() !=null && row.getinvoiceTo().compareTo(row.getinvoiceFrom())<0){
            return "Please enter From Invoice Date less than To Invoice Date.";
        }
      /*  if(row.getdueFrom()!=null && row.getdueTo()!=null && row.getdueTo().compareTo(row.getdueFrom())<0){
            return "Please enter From Due Date less than To Due Date.";
        }*/
        if(row.getpoDateFrom()!=null && row.getpoDateTo()!=null && row.getpoDateTo().compareTo(row.getpoDateFrom())<0){
            return "Please enter From PO Date less than To PO Date.";
        }
        if(row.getskuNum()==null && row.getpoNum()==null && row.getinvoiceFrom()==null && row.getinvoiceTo()==null &&  row.getpoDateFrom()==null && row.getpoDateTo()==null && row.getdept()==null && row.getvpc()==null && row.getsupplierNo()==null && row.getsupplierName()==null && row.getsupplierSiteCode()==null && row.getinvoiceNum()==null && row.getanswer()==null && row.getanswerDate()==null && row.getdropShip()==null && row.getfrontDoor()==null && row.getspecialOrder()==null &&  row.getvendorAsst()==null && row.getmerchant()==null && 
           row.getinvoiceStatus()==null 
        
        ){
            return "Please enter atlease one Search Criteria field.";
        }
        ViewCriteria criteria=getCostVarianceVO1().getViewCriteria("CostVarianceVOCriteria");
        
        getCostVarianceVO1().applyViewCriteria(null);
        getCostVarianceVO1().setWhereClause(null);
        getCostVarianceVO1().setNamedWhereClauseParam("skuNum", row.getskuNum());
        getCostVarianceVO1().setNamedWhereClauseParam("poNo", row.getpoNum());
        getCostVarianceVO1().setNamedWhereClauseParam("poFrom", row.getpoDateFrom());
        getCostVarianceVO1().setNamedWhereClauseParam("poTo", row.getpoDateTo());
        getCostVarianceVO1().setNamedWhereClauseParam("invoiceFrom", row.getinvoiceFrom());
        
        getCostVarianceVO1().setNamedWhereClauseParam("invoiceTo", row.getinvoiceTo());
        getCostVarianceVO1().setNamedWhereClauseParam("deptNo", row.getdept());
        getCostVarianceVO1().setNamedWhereClauseParam("vpcNo", row.getvpc());
        getCostVarianceVO1().setNamedWhereClauseParam("supNo", row.getsupplierNo());
        getCostVarianceVO1().setNamedWhereClauseParam("supName", row.getsupplierName());
        getCostVarianceVO1().setNamedWhereClauseParam("supSiteCode", row.getsupplierSiteCode());
        getCostVarianceVO1().setNamedWhereClauseParam("venAssistant", row.getvendorAsst());
       
        getCostVarianceVO1().setNamedWhereClauseParam("invoiceNo", row.getinvoiceNum());
        if(row.getanswer()!=null && row.getanswer().equalsIgnoreCase("No Answer")){
            getCostVarianceVO1().addWhereClause(" answer_code is null");
        getCostVarianceVO1().setNamedWhereClauseParam("ansCode", null);
        }
        else
        getCostVarianceVO1().setNamedWhereClauseParam("ansCode", row.getanswer());
        getCostVarianceVO1().setNamedWhereClauseParam("ansDate", row.getanswerDate());
        getCostVarianceVO1().setNamedWhereClauseParam("merchant", row.getmerchant());
        getCostVarianceVO1().setNamedWhereClauseParam("invStatus", row.getinvoiceStatus());
        //  getMassReleaseHoldVO1().setNamedWhereClauseParam("skuNo", row.getskuNo());
        String frontDoor=null;
        if(row.getfrontDoor() !=null && row.getfrontDoor().equals("Y"))
            frontDoor="Y";
        else
            frontDoor=null;
        String specialOrder=null;
        if(row.getspecialOrder()!=null && row.getspecialOrder().equals("Y"))
            specialOrder="Y";
        else
            specialOrder=null;
        String dropShip=null;
        if(row.getdropShip()!=null && row.getdropShip().equals("Y"))
            dropShip="Y";
        else
            dropShip=null;
//        String freightExcp=null;
//        if(row.getfreightExcp()!=null && row.getfreightExcp().equals("Y"))
//            freightExcp="Y";
//        else
//            freightExcp=null;
//        String quantityExcp=null;
//        if(row.getquantityExcp()!=null && row.getquantityExcp().equals("Y"))
//            quantityExcp="Y";
//        else
//            quantityExcp=null;
//        String pricingExcp=null;
//        if(row.getpricingExcp()!=null && row.getpricingExcp().equals("Y"))
//            pricingExcp="Y";
//        else
//            pricingExcp=null;
        getCostVarianceVO1().setNamedWhereClauseParam("poTypeCode", frontDoor);
     //   getCostVarianceVO1().setNamedWhereClauseParam("nonCodeFlag", nonCode);
        getCostVarianceVO1().setNamedWhereClauseParam("poTypeCode", dropShip);
        getCostVarianceVO1().setNamedWhereClauseParam("poTypeCode", specialOrder);
     //   getCostVarianceVO1().setNamedWhereClauseParam("pricingExcpFlag", pricingExcp);
     //   getCostVarianceVO1().setNamedWhereClauseParam("quantityExcpFlag", quantityExcp);
     //   getCostVarianceVO1().setNamedWhereClauseParam("freightExcpFlag", freightExcp);
        if(row.getoperatingUnit()!=null)
        getCostVarianceVO1().setNamedWhereClauseParam("operatingId", row.getoperatingUnit().toString());
        getCostVarianceVO1().applyViewCriteria(criteria);
     //   getCostVarianceVO1().setNamedWhereClauseParam("skunum", row.getskuNo());
        getCostVarianceVO1().executeQuery();
//        try{
//        oracle.jbo.domain.Number invoicesum=new oracle.jbo.domain.Number("0");
//            oracle.jbo.domain.Number quantityholdsum=new oracle.jbo.domain.Number("0");
//            oracle.jbo.domain.Number priceholdsum=new oracle.jbo.domain.Number("0");
//
//        ViewObject vo = getMassReleaseHoldVO1().getViewObject();
//        int i = 0;
//        Row rowsum = null;
//        vo.reset();
//        
//        while (vo.hasNext()) {
//        if (i == 0)
//        rowsum = vo.first();
//        else
//        rowsum = vo.next();
//        //            System.out.println("Changing row 1: " +
//        //              row.getAttribute("Name"));
//        //   System.out.println("xdebug c2: Changing row 2: " +
//        //   row.getAttribute("EmployeeSelect"));
//            
//        invoicesum=invoicesum.add((oracle.jbo.domain.Number)rowsum.getAttribute("InvoiceAmount"));
//            quantityholdsum=quantityholdsum.add((oracle.jbo.domain.Number)rowsum.getAttribute("QtyHoldAmt"));
//            priceholdsum=priceholdsum.add((oracle.jbo.domain.Number)rowsum.getAttribute("PriceHoldAmt"));
//
//        i++;
//        }
//            if(vo.getEstimatedRowCount()==1){
//                invoicesum=(oracle.jbo.domain.Number)getMassReleaseHoldVO1().first().getAttribute("InvoiceAmount");
//                quantityholdsum=(oracle.jbo.domain.Number)getMassReleaseHoldVO1().first().getAttribute("QtyHoldAmt");
//                priceholdsum=(oracle.jbo.domain.Number)getMassReleaseHoldVO1().first().getAttribute("PriceHoldAmt");
//
//         
//          //  getPaymentAttributeVO1().first().setAttribute("invoicesum", invoicesum);
//            }
//            if(invoicesum!=null){
//              String  sumtotal=invoicesum.toString()+","+quantityholdsum.toString()+","+priceholdsum.toString();
//                
//            return sumtotal;
//            }
//        }catch(Exception e){
//            
//        }
        
        return null;
    }

    /**
     * Container's getter for ApInvoiceUpdateVO1.
     * @return ApInvoiceUpdateVO1
     */
    public ApInvoiceUpdateVOImpl getApInvoiceUpdateVO1() {
        return (ApInvoiceUpdateVOImpl) findViewObject("ApInvoiceUpdateVO1");
    }
    
    public void updateSelectedRows(){
        InvoicesNotValidatedVOImpl tradevo=getInvoicesNotValidatedVO1(); 
//         String fromsup=null;
//         String tosup=null;
//        fromsup=(String)getGeneralInquiryMassUpdateVO1().first().getAttribute("fromVA");
//        tosup=(String)getGeneralInquiryMassUpdateVO1().first().getAttribute("toVA");
//         ViewCriteria criteria=tradevo.getViewCriteria("TradeGeneralInquiryVOCriteria");
        //        tradevo.applyViewCriteria(null);
        //        tradevo.setNamedWhereClauseParam("p_vend_site", fromsup);
        //        tradevo.applyViewCriteria(criteria);
        //        tradevo.executeQuery();
        //        // String newVendorAssistant;
        //        while (tradevo.hasNext()) {
        //
        //
        //            tradevo.first().setAttribute("Attribute6", tosup);
        //            tradevo.next();
        //        }
         
        Row[] rows= tradevo.getFilteredRows("EmployeeSelect", true);
        ArrayList list=new ArrayList();
        for (Row row : rows){
            list.add((String)row.getAttribute("InvoiceNum"));
        }
        DBTransaction dbTransaction=getDBTransaction();
                DBTransactionImpl dbti = (DBTransactionImpl)dbTransaction;
                        CallableStatement statement = null;
//                ResultSet rs=null;
//                        String lodgeFeeTbl = "INVOICE_ARRAY";
                        
                       
                statement =
                                    dbti.createCallableStatement(("BEGIN " + "XX_AP_TRADE_MATCH_UTL_PKG.xx_upd_invoice_released(?);" +
                                                                  "END;"), 0);
                 
                try {
                            if(statement!=null){
                                ArrayDescriptor empArray = 
                                        ArrayDescriptor.createDescriptor("XX_AP_TR_INV_ARRAY", 
                                                                         statement.getConnection()); 
                                      ARRAY invoicearray = 
                                        new ARRAY(empArray, statement.getConnection(), list.toArray());
                               // ARRAY invoicearray=statement.getConnection().createArrayOf(String, list); 
                      //      statement.setArray(1,  lodgeFeeTbl);
                      statement.setArray(1, invoicearray);
                            statement.execute();
                            }
                }catch(Exception e){
                    System.out.println("Exception");
                }
                            
     //   Object supplerUpdate = callStoredFunction(Types.VARCHAR, "xx_upd_vendor_assistant(?,?)", new Object[] { invoicearray });
               // if (supplerUpdate != null && supplerUpdate.equals("Y")) {
                    getDBTransaction().commit();
               // }
                    tradevo.executeEmptyRowSet();
    }
    
    public String updateInvoiceDetails(){
        ApInvoiceLineVOImpl tradevo=getApInvoiceLineVO1(); 
        //         String fromsup=null;
        //         String tosup=null;
        //        fromsup=(String)getGeneralInquiryMassUpdateVO1().first().getAttribute("fromVA");
        //        tosup=(String)getGeneralInquiryMassUpdateVO1().first().getAttribute("toVA");
        //         ViewCriteria criteria=tradevo.getViewCriteria("TradeGeneralInquiryVOCriteria");
        //        tradevo.applyViewCriteria(null);
        //        tradevo.setNamedWhereClauseParam("p_vend_site", fromsup);
        //        tradevo.applyViewCriteria(criteria);
        //        tradevo.executeQuery();
        //        // String newVendorAssistant;
        //        while (tradevo.hasNext()) {
        //
        //
        //            tradevo.first().setAttribute("Attribute6", tosup);
        //            tradevo.next();
        //        }
//        ViewObject deptVo = this.getApInvoiceLineVO1();
//                //Create iterator to iterate over master viewObject
//                RowSetIterator rsi = deptVo.createRowSetIterator(null);
//       
//        ArrayList releaseholdlist=new ArrayList();
//        ArrayList chargebacklist=new ArrayList();
//        releaseholdlist.add(getApInvoicesVO1().first().getAttribute("InvoiceId"));
//        releaseholdlist.add(getApInvoicesVO1().first().getAttribute("InvoiceNum"));
//        chargebacklist.add(getApInvoicesVO1().first().getAttribute("InvoiceId"));
//        chargebacklist.add(getApInvoicesVO1().first().getAttribute("InvoiceNum"));
//                while (rsi.hasNext()) {
//                    //Get Master ViewObject Row
//                    Row invlinerow = rsi.next();
//                  //  System.out.println("Department Name :" + departmentsRow.getAttribute("DepartmentName"));
//                    //Get Corresponding child viewobject accessor
//                    RowSet rs = (RowSet) invlinerow.getAttribute("ApHoldsVO1");
//
//                    //Iterate over child viewObject rows for corresponding master record
//                    while (rs.hasNext()) {
//                        Row r = rs.next();
//                 //       System.out.println("      Employee : " + r.getAttribute("FirstName") + " " +
//                   //                        r.getAttribute("LastName"));
//                        if(r.getAttribute("releaseHold")!=null && r.getAttribute("releaseHold").toString().equals("Y")){ 
//                   releaseholdlist.add((String)invlinerow.getAttribute("LineNumber"));
//                        releaseholdlist.add((String)invlinerow.getAttribute("newQuantity"));
//                        releaseholdlist.add((String)invlinerow.getAttribute("newAmount"));
//                        releaseholdlist.add((String)r.getAttribute("reasonCode"));
//                    }
//                        if(r.getAttribute("chargeBack")!=null && r.getAttribute("chargeBack").toString().equals("Y")){
//                            chargebacklist.add((String)invlinerow.getAttribute("LineNumber"));
//                            chargebacklist.add((String)invlinerow.getAttribute("newQuantity"));
//                            chargebacklist.add((String)invlinerow.getAttribute("newAmount"));
//                        }
//                    
//                }
//                }
//                //Close Master viewObject iterator
//                rsi.closeRowSetIterator(); 
////        Row[] rows= tradevo.getFilteredRows("EmployeeSelect", true);
////      //  ArrayList list=new ArrayList();
////        for (Row row : rows){
////            list.add((String)row.getAttribute("InvoiceNum"));
////        }
        getDBTransaction().commit();
        XXApHoldsVOImpl holdvo=getXXApHoldsVO2();
        getXXApHoldsVO2().setWhereClause(null);
        getXXApHoldsVO2().addWhereClause(" XXApInvoiceHoldsEO.Invoice_id="+getApInvoicesVO1().getCurrentRow().getAttribute("InvoiceId").toString());
        getXXApHoldsVO2().addWhereClause(" and (XXApInvoiceHoldsEO.release_hold is null or XXApInvoiceHoldsEO.release_hold='N')");
        getXXApHoldsVO2().executeQuery();
        if(getXXApHoldsVO2().getEstimatedRowCount()>0){
            return "Please select all Release Hold checkboxes to proceed for Apply.";
        }
//        Row[] rows=getApHoldsVO1().getFilteredRows("ReleaseHold1",false);
//        getApHoldsVO1().getEstimatedRowCount()
//        if(rows.length>0){
//            return "Please select Release Hold for Invoice Lines for proceeding to Apply.";
//        }
        
        DBTransaction dbTransaction=getDBTransaction();
                DBTransactionImpl dbti = (DBTransactionImpl)dbTransaction;
                        CallableStatement statement = null;
        //                ResultSet rs=null;
        //                        String lodgeFeeTbl = "INVOICE_ARRAY";
                        
                       
                statement =
                                    dbti.createCallableStatement(("BEGIN " + "XX_AP_TR_UI_ACTION_PKG.xx_upd_invoice_chargeback(?,?);" +
                                                                  "END;"), 0);
                 
                try {
                            if(statement!=null){
//                                ArrayDescriptor empArray = 
//                                        ArrayDescriptor.createDescriptor("INVOICE_ARRAY", 
//                                                                         statement.getConnection()); 
//                                      ARRAY invoicearray = 
//                                        new ARRAY(empArray, statement.getConnection(), releaseholdlist.toArray());
                               // ARRAY invoicearray=statement.getConnection().createArrayOf(String, list); 
                      //      statement.setArray(1,  lodgeFeeTbl);
                     // statement.setArray(1, invoicearray);
                                statement.setString(1, tradevo.first().getAttribute("InvoiceId").toString());
                            statement.setString(2, "404");
                            statement.execute();
                            }
                }catch(Exception e){
                    System.out.println("Exception");
                }
                            
        //   Object supplerUpdate = callStoredFunction(Types.VARCHAR, "xx_upd_vendor_assistant(?,?)", new Object[] { invoicearray });
               // if (supplerUpdate != null && supplerUpdate.equals("Y")) {
                    getDBTransaction().commit();
               // }
                 //   tradevo.executeEmptyRowSet();
                    return null;
    }
    
    public void saveInvoice(){
        getDBTransaction().commit();
        ApInvoiceLineVOImpl vo=getApInvoiceLineVO1();
        vo.calculateTotalQuantity();
        ViewCriteria critera=getXXApInvoiceDetailsVO1().getViewCriteria("XXApInvoiceDetailsVOCriteria1");
        getXXApInvoiceDetailsVO1().applyViewCriteria(null);
        getXXApInvoiceDetailsVO1().setNamedWhereClauseParam("invId", getApInvoicesVO1().first().getAttribute("InvoiceId"));
        getXXApInvoiceDetailsVO1().applyViewCriteria(critera);
        getXXApInvoiceDetailsVO1().executeQuery();
    }
    public BigDecimal saveInvoiceDetails(){
        getDBTransaction().commit();
        ApInvoiceLineVOImpl vo=getApInvoiceLineVO1();
        vo.calculateTotalQuantity();
        ViewCriteria critera=getXXApInvoiceDetailsVO1().getViewCriteria("XXApInvoiceDetailsVOCriteria1");
        getXXApInvoiceDetailsVO1().applyViewCriteria(null);
        getXXApInvoiceDetailsVO1().setNamedWhereClauseParam("p_inv_id", getApInvoicesVO1().first().getAttribute("InvoiceId"));
        getXXApInvoiceDetailsVO1().applyViewCriteria(critera);
        getXXApInvoiceDetailsVO1().executeQuery();
        BigDecimal totInvA= new BigDecimal(0);
        BigDecimal totAmount=new BigDecimal(0);
        RowSetIterator rsIter=getXXApInvoiceDetailsVO1().createRowSetIterator(null);
        while(rsIter.hasNext()){
          XXApInvoiceDetailsVORowImpl row=(XXApInvoiceDetailsVORowImpl)rsIter.next();
          if(row.getAmount()!=null && row.getQuantityInvoiced()!=null){
          BigDecimal totInvQuantity=new BigDecimal(row.getAmount().toString());
              BigDecimal totInv=new BigDecimal(row.getQuantityInvoiced().toString());
              BigDecimal inv=totInvQuantity.multiply(totInv);
          totAmount=totAmount.add(inv);
//          BigDecimal totInvAmount=new BigDecimal(row.getinvAmt().toString());
//          totInvAmount=totInvAmount.add(totInvAmount);
//              BigDecimal totInv=new BigDecimal(row.getinvAmt().toString());
//              totInvA=totInvA.add(totInv);
          }
        }
        rsIter.reset();
        rsIter.closeRowSetIterator();
        return totAmount;
    }
    
    public BigDecimal getInvoiceTot(){
        BigDecimal invoiceTot=new BigDecimal(0);
        getXXInvoiceTotVO1().setWhereClause(null);
        getXXInvoiceTotVO1().setNamedWhereClauseParam("p_inv_id", getApInvoicesVO1().first().getAttribute("InvoiceId"));
        getXXInvoiceTotVO1().executeQuery();
        if(getXXInvoiceTotVO1().first().getAttribute("Amount")!=null)
        invoiceTot=new BigDecimal(getXXInvoiceTotVO1().first().getAttribute("Amount").toString());
        return invoiceTot;
    }

    public BigDecimal getInvoiceReasonTot(){
        BigDecimal invoiceReasonTot=new BigDecimal(0);
        getXXInvoiceReasonVO1().setWhereClause(null);
        getXXInvoiceReasonVO1().setNamedWhereClauseParam("p_inv_id", getApInvoicesVO1().first().getAttribute("InvoiceId"));
        getXXInvoiceReasonVO1().executeQuery();
        invoiceReasonTot=new BigDecimal(getXXInvoiceReasonVO1().first().getAttribute("Amount").toString());
        return invoiceReasonTot;
    }
    /**
     * Container's getter for VendorMOOTDetVO1.
     * @return VendorMOOTDetVO1
     */
    /* public VendorMOOTDetVOImpl getVendorMOOTDetVO1() {
        return (VendorMOOTDetVOImpl) findViewObject("VendorMOOTDetVO1");
    }*/

    /**
     * Container's getter for VendMootDtVO1.
     * @return VendMootDtVO1
     */
    public VendMootDtVOImpl getVendMootDtVO1() {
        return (VendMootDtVOImpl) findViewObject("VendMootDtVO1");
    }


    /**
         * Container's getter for VendorMOOTDetVO1.
         * @return VendorMOOTDetVO1
         */
       /* public VendorMOOTDetVOImpl getVendorMOOTDetVO1() {
            return (VendorMOOTDetVOImpl) findViewObject("VendorMOOTDetVO1");
        }*/

    /**
     * Container's getter for ApInvoicesTermsVO1.
     * @return ApInvoicesTermsVO1
     */
    public ApInvoicesTermsVOImpl getApInvoicesTermsVO1() {
        return (ApInvoicesTermsVOImpl) findViewObject("ApInvoicesTermsVO1");
    }

    /**
     * Container's getter for PaymentAttributeVO1.
     * @return PaymentAttributeVO1
     */
    public PaymentAttributeVOImpl getPaymentAttributeVO1() {
        return (PaymentAttributeVOImpl) findViewObject("PaymentAttributeVO1");
    }
    public void updatePaymentSelectedRows(){
        PaymentAttributeVOImpl tradevo=getPaymentAttributeVO1(); 
    //         String fromsup=null;
    //         String tosup=null;
    //        fromsup=(String)getGeneralInquiryMassUpdateVO1().first().getAttribute("fromVA");
    //        tosup=(String)getGeneralInquiryMassUpdateVO1().first().getAttribute("toVA");
    //         ViewCriteria criteria=tradevo.getViewCriteria("TradeGeneralInquiryVOCriteria");
        //        tradevo.applyViewCriteria(null);
        //        tradevo.setNamedWhereClauseParam("p_vend_site", fromsup);
        //        tradevo.applyViewCriteria(criteria);
        //        tradevo.executeQuery();
        //        // String newVendorAssistant;
        //        while (tradevo.hasNext()) {
        //
        //
        //            tradevo.first().setAttribute("Attribute6", tosup);
        //            tradevo.next();
        //        }
        ArrayList list=new ArrayList();
        ApInvoiceAttributesVOImpl paymentvo=getApInvoiceAttributesVO1();
        Row paymentrow=paymentvo.getCurrentRow();
        if(paymentrow!=null){
            if(paymentrow.getAttribute("paymentTerm")!=null)
            list.add((String)paymentrow.getAttribute("paymentTerm"));
            else
                list.add("NA");
            if(paymentrow.getAttribute("dueDate")!=null)
            list.add(paymentrow.getAttribute("dueDate"));
            else
                list.add("NA");
            if(paymentrow.getAttribute("payMethod")!=null){
                list.add(paymentrow.getAttribute("payMethod"));
            }
            else
            list.add("NA");
            if(paymentrow.getAttribute("payGroup")!=null){
                list.add(paymentrow.getAttribute("payGroup"));
            }
            else
            list.add("NA");
            
        }
        Row[] rows= tradevo.getFilteredRows("EmployeeSelect", true);
        
        for (Row row : rows){
            list.add(row.getAttribute("InvoiceId").toString());
        }
        DBTransaction dbTransaction=getDBTransaction();
                DBTransactionImpl dbti = (DBTransactionImpl)dbTransaction;
                        CallableStatement statement = null;
    //                ResultSet rs=null;
    //                        String lodgeFeeTbl = "INVOICE_ARRAY";
                        
                       
                statement =
                                    dbti.createCallableStatement(("BEGIN " + "XX_AP_TRADE_MATCH_UTL_PKG.xx_upd_paymentterms(?);" +
                                                                  "END;"), 0);
                 
                try {
                            if(statement!=null){
                                ArrayDescriptor empArray = 
                                        ArrayDescriptor.createDescriptor("XX_AP_TR_INV_ARRAY", 
                                                                         statement.getConnection()); 
                                      ARRAY invoicearray = 
                                        new ARRAY(empArray, statement.getConnection(), list.toArray());
                               // ARRAY invoicearray=statement.getConnection().createArrayOf(String, list); 
                      //      statement.setArray(1,  lodgeFeeTbl);
                      statement.setArray(1, invoicearray);
                            statement.execute();
                            }
                }catch(Exception e){
                    System.out.println("Exception");
                }
                            
     //   Object supplerUpdate = callStoredFunction(Types.VARCHAR, "xx_upd_vendor_assistant(?,?)", new Object[] { invoicearray });
               // if (supplerUpdate != null && supplerUpdate.equals("Y")) {
                    getDBTransaction().commit();
               // }
    }
    public String updatePaymentAttributes(){
        PaymentAttributeVOImpl tradevo=getPaymentAttributeVO1(); 
    //         String fromsup=null;
    //         String tosup=null;
    //        fromsup=(String)getGeneralInquiryMassUpdateVO1().first().getAttribute("fromVA");
    //        tosup=(String)getGeneralInquiryMassUpdateVO1().first().getAttribute("toVA");
    //         ViewCriteria criteria=tradevo.getViewCriteria("TradeGeneralInquiryVOCriteria");
        //        tradevo.applyViewCriteria(null);
        //        tradevo.setNamedWhereClauseParam("p_vend_site", fromsup);
        //        tradevo.applyViewCriteria(criteria);
        //        tradevo.executeQuery();
        //        // String newVendorAssistant;
        //        while (tradevo.hasNext()) {
        //
        //
        //            tradevo.first().setAttribute("Attribute6", tosup);
        //            tradevo.next();
        //        }
        ArrayList list=new ArrayList();
        ApInvoiceAttributesVOImpl paymentvo=getApInvoiceAttributesVO1();
        Row paymentrow=paymentvo.getCurrentRow();
        if(paymentrow!=null){
            if(paymentrow.getAttribute("paymentTerm")!=null && paymentrow.getAttribute("dueDate")!=null)
                return "Please enter either New Payment Terms or New Due Date.";
            if(paymentrow.getAttribute("paymentTerm")!=null)
            list.add((String)paymentrow.getAttribute("paymentTerm"));
            else
                list.add("NA");
            if(paymentrow.getAttribute("dueDate")!=null)
            list.add(paymentrow.getAttribute("dueDate"));
            else
                list.add("NA");
            if(paymentrow.getAttribute("payMethod")!=null){
                list.add(paymentrow.getAttribute("payMethod"));
            }
            else
            list.add("NA");
            if(paymentrow.getAttribute("payGroup")!=null){
                list.add(paymentrow.getAttribute("payGroup"));
            }
            else
            list.add("NA");
            
        }
        Row[] rows= tradevo.getFilteredRows("EmployeeSelect", true);
        
        for (Row row : rows){
            list.add(row.getAttribute("InvoiceId").toString());
        }
        DBTransaction dbTransaction=getDBTransaction();
                DBTransactionImpl dbti = (DBTransactionImpl)dbTransaction;
                        CallableStatement statement = null;
    //                ResultSet rs=null;
    //                        String lodgeFeeTbl = "INVOICE_ARRAY";
                        
                       
                statement =
                                    dbti.createCallableStatement(("BEGIN " + "XX_AP_TRADE_MATCH_UTL_PKG.xx_upd_paymentterms(?);" +
                                                                  "END;"), 0);
                 
                try {
                            if(statement!=null){
                                ArrayDescriptor empArray = 
                                        ArrayDescriptor.createDescriptor("XX_AP_TR_INV_ARRAY", 
                                                                         statement.getConnection()); 
                                      ARRAY invoicearray = 
                                        new ARRAY(empArray, statement.getConnection(), list.toArray());
                               // ARRAY invoicearray=statement.getConnection().createArrayOf(String, list); 
                      //      statement.setArray(1,  lodgeFeeTbl);
                      statement.setArray(1, invoicearray);
                            statement.execute();
                            }
                }catch(Exception e){
                    System.out.println("Exception");
                }
                            
     //   Object supplerUpdate = callStoredFunction(Types.VARCHAR, "xx_upd_vendor_assistant(?,?)", new Object[] { invoicearray });
               // if (supplerUpdate != null && supplerUpdate.equals("Y")) {
                    getDBTransaction().commit();
                    tradevo.executeEmptyRowSet();
                    
                    paymentrow=paymentvo.getCurrentRow();
                    paymentrow.setAttribute("paymentTerm", null);
                    paymentrow.setAttribute("dueDate", null);
                    paymentrow.setAttribute("payMethod", null);
                    paymentrow.setAttribute("payGroup", null);
                    return null;
               // }
                    
    }


    /**
     * Container's getter for ApInvoiceAttributesVO1.
     * @return ApInvoiceAttributesVO1
     */
    public ApInvoiceAttributesVOImpl getApInvoiceAttributesVO1() {
        return (ApInvoiceAttributesVOImpl) findViewObject("ApInvoiceAttributesVO1");
    }
    
    public void initPaymentTerms(){
        getPaymentAttributeVO1().executeEmptyRowSet();
    }
    
    public void clearInvoiceValidate(){
        ApInvoicesVORowImpl invoicerow=(ApInvoicesVORowImpl)getApInvoicesVO1().getCurrentRow();
        invoicerow.setpoNumber(null);
        invoicerow.setinvoiceFrom(null);
        invoicerow.setinvoiceTo(null);
        invoicerow.setinvoiceTo(null);
        invoicerow.setdueFrom(null);
        invoicerow.setdueTo(null);
        invoicerow.setsupNo(null);
        invoicerow.setsupName(null);
        invoicerow.setsupSiteCode(null);
        invoicerow.setinvoiceNumber(null);
        invoicerow.setvendorAssistant(null);
        
    }
    
    public void initInvoiceNotValidated(){
        getInvoicesNotValidatedVO1().executeEmptyRowSet();
    }

    /**
     * Container's getter for MassReleaseHoldVO1.
     * @return MassReleaseHoldVO1
     */
    public MassReleaseHoldVOImpl getMassReleaseHoldVO1() {
        return (MassReleaseHoldVOImpl) findViewObject("MassReleaseHoldVO1");
    }

    /**
     * Container's getter for MassReleaseVO1.
     * @return MassReleaseVO1
     */
    public MassReleaseVOImpl getMassReleaseVO1() {
        return (MassReleaseVOImpl) findViewObject("MassReleaseVO1");
    }
    
    /*G.S method Executed for VA Emp Invoice Search*/
    public String EmpVendSearchAction(){
            Key keyVendorsearchid = new Key(new Object[] {1});
            VASummarySearchVORowImpl row=(VASummarySearchVORowImpl)getVASummarySearchVO1().getRow(keyVendorsearchid);
       
            ViewCriteria criteria=getVAEmpVendorSummaryVO1().getViewCriteria("VAEmpVendorSummaryVOCriteria1");
       
            getVAEmpVendorSummaryVO1().setWhereClause(null);
            getVAEmpVendorSummaryVO1().executeEmptyRowSet();
            getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_employee_id", row.getVendorAssistant());
            getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_org_id", row.getOrgId());
            getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_supp_name", row.getSupplierName());
            getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_supp_num", row.getSupplierNo());
            getVAEmpVendorSummaryVO1().setNamedWhereClauseParam("p_vend_site_code", row.getSupplierSite());
            
            System.out.println("executing query getVAEmpVendorSummaryVO1().getQuery() in EmpVendSearchAction: "+getVAEmpVendorSummaryVO1().getQuery());
            getVAEmpVendorSummaryVO1().executeQuery();
            System.out.println("1Row Count: "+getVAEmpVendorSummaryVO1().getEstimatedRowCount());
            
            
            
            return null;
        }
    
    
    public String EmpVendSearchAction1(){
            Key keyVendorsearchid = new Key(new Object[] {1});
            VASummarySearchVORowImpl row=(VASummarySearchVORowImpl)getVASummarySearchVO1().getRow(keyVendorsearchid);
       
            ViewCriteria criteria=getVAEmpVendorSummaryVO3().getViewCriteria("VAEmpVendorSummaryVOCriteria1");       
           
            
            getVAEmpVendorSummaryVO3().setWhereClause(null);
            getVAEmpVendorSummaryVO3().executeEmptyRowSet();
            getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_employee_id", row.getVendorAssistant());
            getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_org_id", row.getOrgId());
            getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_supp_name", row.getSupplierName());
            getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_supp_num", row.getSupplierNo());
            getVAEmpVendorSummaryVO3().setNamedWhereClauseParam("p_vend_site_code", row.getSupplierSite());
            
            System.out.println("executing query getVAEmpVendorSummaryVO3().getQuery() in EmpVendSearchAction: "+getVAEmpVendorSummaryVO3().getQuery());
            getVAEmpVendorSummaryVO3().executeQuery();
            System.out.println("2Row Count: "+getVAEmpVendorSummaryVO3().getEstimatedRowCount());
            
            return null;
        }
    
    public String initMassRelease(){
     //   getMassReleaseVO1().executeEmptyRowSet();
        MassReleaseVORowImpl row=(MassReleaseVORowImpl)getMassReleaseVO1().getCurrentRow();
      //  row.setInvoiceNum("MassRelease");
      //  getMassReleaseVO1().insertRow(row);
        getMassReleaseVO1().setCurrentRow(row);
        
        try{
        oracle.jbo.domain.Number invoicesum=new oracle.jbo.domain.Number("0");
            oracle.jbo.domain.Number quantityholdsum=new oracle.jbo.domain.Number("0");
            oracle.jbo.domain.Number priceholdsum=new oracle.jbo.domain.Number("0");

        ViewObject vo = getMassReleaseHoldVO1().getViewObject();
        int i = 0;
        Row rowsum = null;
        vo.reset();
        
        while (vo.hasNext()) {
        if (i == 0)
        rowsum = vo.first();
        else
        rowsum = vo.next();
        //            System.out.println("Changing row 1: " +
        //              row.getAttribute("Name"));
        //   System.out.println("xdebug c2: Changing row 2: " +
        //   row.getAttribute("EmployeeSelect"));
            
        invoicesum=invoicesum.add((oracle.jbo.domain.Number)rowsum.getAttribute("InvoiceAmount"));
            quantityholdsum=quantityholdsum.add((oracle.jbo.domain.Number)rowsum.getAttribute("QtyHoldAmt"));
            priceholdsum=priceholdsum.add((oracle.jbo.domain.Number)rowsum.getAttribute("PriceHoldAmt"));

        i++;
        }
            if(vo.getEstimatedRowCount()==1){
                invoicesum=(oracle.jbo.domain.Number)getMassReleaseHoldVO1().first().getAttribute("InvoiceAmount");
                quantityholdsum=(oracle.jbo.domain.Number)getMassReleaseHoldVO1().first().getAttribute("QtyHoldAmt");
                priceholdsum=(oracle.jbo.domain.Number)getMassReleaseHoldVO1().first().getAttribute("PriceHoldAmt");

         
          //  getPaymentAttributeVO1().first().setAttribute("invoicesum", invoicesum);
            }
            if(invoicesum!=null){
              String  sumtotal=invoicesum.toString()+","+quantityholdsum.toString()+","+priceholdsum.toString();
                
            return sumtotal;
            }
            
        }catch(Exception e){
            
        }
        return null;
         
    }
    
    public String updateMassReleaseSelectRow(){
        MassReleaseHoldVOImpl tradevo=getMassReleaseHoldVO1(); 
        //         String fromsup=null;
        //         String tosup=null;
        //        fromsup=(String)getGeneralInquiryMassUpdateVO1().first().getAttribute("fromVA");
        //        tosup=(String)getGeneralInquiryMassUpdateVO1().first().getAttribute("toVA");
        //         ViewCriteria criteria=tradevo.getViewCriteria("TradeGeneralInquiryVOCriteria");
        //        tradevo.applyViewCriteria(null);
        //        tradevo.setNamedWhereClauseParam("p_vend_site", fromsup);
        //        tradevo.applyViewCriteria(criteria);
        //        tradevo.executeQuery();
        //        // String newVendorAssistant;
        //        while (tradevo.hasNext()) {
        //
        //
        //            tradevo.first().setAttribute("Attribute6", tosup);
        //            tradevo.next();
        //        }
         
        Row[] rows= tradevo.getFilteredRows("EmployeeSelect", true);
        ArrayList list=new ArrayList();
        String reasonCode=null;
        if(rows.length==0)
            return "Please select atleast one row.";
        for (Row row : rows){
          //  reasonCode=row.getAttribute("InvoiceId").toString();
            list.add(row.getAttribute("InvoiceId"));
            if(row.getAttribute("QtyHoldReason")==null && row.getAttribute("PriceHoldReason")==null)
                return "Please enter either Qty Hold Reason Code or Price Hold Reason Code for selected row.";
            if(row.getAttribute("QtyHoldReason")!=null){
             //   reasonCode=reasonCode+","+row.getAttribute("QtyHoldReason");
            list.add(row.getAttribute("QtyHoldReason"));
            }
            else
              //  reasonCode=reasonCode+","+"NA";
            list.add("NA");
            if(row.getAttribute("PriceHoldReason")!=null){
             //   reasonCode=reasonCode+","+row.getAttribute("PriceHoldReason");
                list.add(row.getAttribute("PriceHoldReason"));
            }
            else
             //   reasonCode=reasonCode+","+"NA";
            list.add("NA");
          //  list.add(reasonCode);
        }
        DBTransaction dbTransaction=getDBTransaction();
                DBTransactionImpl dbti = (DBTransactionImpl)dbTransaction;
                        CallableStatement statement = null;
        //                ResultSet rs=null;
        //                        String lodgeFeeTbl = "INVOICE_ARRAY";
                        
                       
                statement =
                                    dbti.createCallableStatement(("BEGIN " + "XX_AP_TRADE_MATCH_UTL_PKG.xx_upd_mass_releasehold(?);" +
                                                                  "END;"), 0);
                 
                try {
                            if(statement!=null){
                                ArrayDescriptor empArray = 
                                        ArrayDescriptor.createDescriptor("XX_AP_TR_INV_ARRAY", 
                                                                         statement.getConnection()); 
                                      ARRAY invoicearray = 
                                        new ARRAY(empArray, statement.getConnection(), list.toArray());
                               // ARRAY invoicearray=statement.getConnection().createArrayOf(String, list); 
                      //      statement.setArray(1,  lodgeFeeTbl);
                      statement.setArray(1, invoicearray);
                            statement.execute();
                            }
                }catch(Exception e){
                    System.out.println("Exception");
                }
                            
        //   Object supplerUpdate = callStoredFunction(Types.VARCHAR, "xx_upd_vendor_assistant(?,?)", new Object[] { invoicearray });
               // if (supplerUpdate != null && supplerUpdate.equals("Y")) {
                    getDBTransaction().commit();
               // }
                    tradevo.executeEmptyRowSet();
       return null;
    }
    
    public String updateCostVariance(){
        CostVarianceVOImpl tradevo=getCostVarianceVO1(); 
        //         String fromsup=null;
        //         String tosup=null;
        //        fromsup=(String)getGeneralInquiryMassUpdateVO1().first().getAttribute("fromVA");
        //        tosup=(String)getGeneralInquiryMassUpdateVO1().first().getAttribute("toVA");
        //         ViewCriteria criteria=tradevo.getViewCriteria("TradeGeneralInquiryVOCriteria");
        //        tradevo.applyViewCriteria(null);
        //        tradevo.setNamedWhereClauseParam("p_vend_site", fromsup);
        //        tradevo.applyViewCriteria(criteria);
        //        tradevo.executeQuery();
        //        // String newVendorAssistant;
        //        while (tradevo.hasNext()) {
        //
        //
        //            tradevo.first().setAttribute("Attribute6", tosup);
        //            tradevo.next();
        //        }
         
//        Row[] rows= tradevo.getFilteredRows("EmployeeSelect", true);
//        ArrayList list=new ArrayList();
//        String reasonCode=null;
//        if(rows.length==0)
//            return "Please select atleast one row.";
//        for (Row row : rows){
//          //  reasonCode=row.getAttribute("InvoiceId").toString();
//            list.add(row.getAttribute("InvoiceId"));
//            if(row.getAttribute("QtyHoldReason")==null && row.getAttribute("PriceHoldReason")==null)
//                return "Please enter either Qty Hold Reason Code or Price Hold Reason Code for selected row.";
//            if(row.getAttribute("QtyHoldReason")!=null){
//             //   reasonCode=reasonCode+","+row.getAttribute("QtyHoldReason");
//            list.add(row.getAttribute("QtyHoldReason"));
//            }
//            else
//              //  reasonCode=reasonCode+","+"NA";
//            list.add("NA");
//            if(row.getAttribute("PriceHoldReason")!=null){
//             //   reasonCode=reasonCode+","+row.getAttribute("PriceHoldReason");
//                list.add(row.getAttribute("PriceHoldReason"));
//            }
//            else
//             //   reasonCode=reasonCode+","+"NA";
//            list.add("NA");
//          //  list.add(reasonCode);
//        }
        while(getCostVarianceVO1().hasNext()){
            CostVarianceVORowImpl row=(CostVarianceVORowImpl)getCostVarianceVO1().next();
        }
//        DBTransaction dbTransaction=getDBTransaction();
//                DBTransactionImpl dbti = (DBTransactionImpl)dbTransaction;
//                        CallableStatement statement = null;
//        //                ResultSet rs=null;
//        //                        String lodgeFeeTbl = "INVOICE_ARRAY";
//                        
//                       
//                statement =
//                                    dbti.createCallableStatement(("BEGIN " + "XX_AP_TRADE_MATCH_UTL_PKG.xx_upd_mass_releasehold(?);" +
//                                                                  "END;"), 0);
//                 
//                try {
//                            if(statement!=null){
//                                ArrayDescriptor empArray = 
//                                        ArrayDescriptor.createDescriptor("INVOICE_ARRAY", 
//                                                                         statement.getConnection()); 
//                                      ARRAY invoicearray = 
//                                        new ARRAY(empArray, statement.getConnection(), list.toArray());
//                               // ARRAY invoicearray=statement.getConnection().createArrayOf(String, list); 
//                      //      statement.setArray(1,  lodgeFeeTbl);
//                      statement.setArray(1, invoicearray);
//                            statement.execute();
//                            }
//                }catch(Exception e){
//                    System.out.println("Exception");
//                }
                            
        //   Object supplerUpdate = callStoredFunction(Types.VARCHAR, "xx_upd_vendor_assistant(?,?)", new Object[] { invoicearray });
               // if (supplerUpdate != null && supplerUpdate.equals("Y")) {
                    getDBTransaction().commit();
               // }
                    tradevo.executeEmptyRowSet();
        return null;
    }
    
    /*G.S method Executed for Vendor Moot Details*/
    public String vendMootSearchAction(){
        
        VendorMootQueryPanelVORowImpl row=(VendorMootQueryPanelVORowImpl)getVendorMootQueryPanelVO1().getCurrentRow();
        String pageError = "no";
        String errorMessage = "";
        if(row.getInvoiceTo()!=null && row.getInvoiceFrom() !=null && row.getInvoiceTo().compareTo(row.getInvoiceFrom())<0){
//            return "Please enter Invoice To less than Invoice From.";            
            pageError = "yes";
            errorMessage = "Please enter Invoice From less than Invoice To.";        
        }
        if(row.getDueTo()!=null && row.getDueFrom()!=null && row.getDueTo().compareTo(row.getDueFrom())<0){
//            return "Please enter Due Date To less than Due Date From.";
            pageError = "yes";
            errorMessage = errorMessage+ "Please enter Due Date From less than Due Date To.";
        }
        
        if (pageError.equals("yes")){
            return errorMessage;
        }
        System.out.println("Printing parameters: "+row.getOrgId());
        System.out.println("Printing AllExcepts: "+row.getAllExcepts());
        System.out.println("Printing DropShip: "+row.getDropShip());
        
        
        ViewCriteria criteria=getVendMootDtVO1().getViewCriteria("VendMootDtVOCriteria");
                
//        getVendMootDtVO1().applyViewCriteria(null);
//                getVendMootDtVO1().applyViewCriteria(criteria);
        getVendMootDtVO1().setWhereClause(null);
        getVendMootDtVO1().executeEmptyRowSet();
        getVendMootDtVO1().setNamedWhereClauseParam("p_all_excpt", row.getAllExcepts());
        getVendMootDtVO1().setNamedWhereClauseParam("p_drop_ship", row.getDropShip());
        getVendMootDtVO1().setNamedWhereClauseParam("p_front_door", row.getFrontDoor());
        getVendMootDtVO1().setNamedWhereClauseParam("p_frt_expt", row.getFrtExcepts());
        getVendMootDtVO1().setNamedWhereClauseParam("p_item", row.getSKUNumber());
        getVendMootDtVO1().setNamedWhereClauseParam("p_non_code", row.getNonCode());        
        getVendMootDtVO1().setNamedWhereClauseParam("p_org_id", row.getOrgId());
        getVendMootDtVO1().setNamedWhereClauseParam("p_invoice_num", row.getInvoiceNumber());
        getVendMootDtVO1().setNamedWhereClauseParam("p_ponum", row.getPONumber());
        getVendMootDtVO1().setNamedWhereClauseParam("p_fr_invdate", row.getInvoiceFrom());
        getVendMootDtVO1().setNamedWhereClauseParam("p_to_invdate", row.getInvoiceTo());
        getVendMootDtVO1().setNamedWhereClauseParam("p_due_fdate", row.getDueFrom());
        getVendMootDtVO1().setNamedWhereClauseParam("p_due_tdate", row.getDueTo());
        getVendMootDtVO1().setNamedWhereClauseParam("p_source", row.getInvoiceSource());
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_name", row.getSupplierName());
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_no", row.getSupplierNumber());
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_site", row.getSupplierSite());
        getVendMootDtVO1().setNamedWhereClauseParam("p_vend_ast", row.getVendorAssistant());
        getVendMootDtVO1().setNamedWhereClauseParam("p_qty_expt", row.getQtyExcepts());
        getVendMootDtVO1().setNamedWhereClauseParam("p_price_expt", row.getPricingExcepts());
        
        System.out.println("executing query: "+getVendMootDtVO1().getQuery());
        getVendMootDtVO1().executeQuery();
        System.out.println("Row Count: "+getVendMootDtVO1().getEstimatedRowCount());
        
        return null;
    }
    
    
    public String vendMootDshipSearchAction(){
        
        VendorMootDShipQPanelVORowImpl row=(VendorMootDShipQPanelVORowImpl)getVendorMootDShipQPanelVO1().getCurrentRow();
        String pageError = "no";
        String errorMessage = "";
        if(row.getInvoiceTo()!=null && row.getInvoiceFrom() !=null && row.getInvoiceTo().compareTo(row.getInvoiceFrom())<0){
    
            pageError = "yes";
            errorMessage = "Please enter Invoice From less than Invoice To.";        
        }
        if(row.getDueTo()!=null && row.getDueFrom()!=null && row.getDueTo().compareTo(row.getDueFrom())<0){
                pageError = "yes";
            errorMessage = errorMessage+ "Please enter Due Date From less than Due Date To.";
        }
        
        if (pageError.equals("yes")){
            return errorMessage;
        }
        
        ViewCriteria criteria=getVendMootDtVO1().getViewCriteria("VendMootDtVOCriteria");
        
        getVendMootDtVO2().setWhereClause(null);
        getVendMootDtVO2().executeEmptyRowSet();
        getVendMootDtVO2().setNamedWhereClauseParam("p_all_excpt", row.getAllExcepts());
        getVendMootDtVO2().setNamedWhereClauseParam("p_drop_ship", row.getDropShip());
        getVendMootDtVO2().setNamedWhereClauseParam("p_front_door", row.getFrontDoor());
        getVendMootDtVO2().setNamedWhereClauseParam("p_frt_expt", row.getFrtExcepts());
        getVendMootDtVO2().setNamedWhereClauseParam("p_item", row.getSKUNumber());
        //getVendMootDtVO2().setNamedWhereClauseParam("p_non_code", row.getNonCode());
        getVendMootDtVO2().setNamedWhereClauseParam("p_org_id", row.getOrgId());
        getVendMootDtVO2().setNamedWhereClauseParam("p_invoice_num", row.getInvoiceNumber());
        getVendMootDtVO2().setNamedWhereClauseParam("p_ponum", row.getPONumber());
        getVendMootDtVO2().setNamedWhereClauseParam("p_fr_invdate", row.getInvoiceFrom());
        getVendMootDtVO2().setNamedWhereClauseParam("p_to_invdate", row.getInvoiceTo());
        getVendMootDtVO2().setNamedWhereClauseParam("p_due_fdate", row.getDueFrom());
        getVendMootDtVO2().setNamedWhereClauseParam("p_due_tdate", row.getDueTo());
        getVendMootDtVO2().setNamedWhereClauseParam("p_source", row.getInvoiceSource());
        getVendMootDtVO2().setNamedWhereClauseParam("p_vend_name", row.getSupplierName());
        getVendMootDtVO2().setNamedWhereClauseParam("p_vend_no", row.getSupplierNumber());
        getVendMootDtVO2().setNamedWhereClauseParam("p_vend_site", row.getSupplierSite());
        getVendMootDtVO2().setNamedWhereClauseParam("p_vend_ast", row.getVendorAssistant());
        getVendMootDtVO2().setNamedWhereClauseParam("p_qty_expt", row.getQtyExcepts());
        getVendMootDtVO2().setNamedWhereClauseParam("p_price_expt", row.getPricingExcepts());
        
        System.out.println("executing query: "+getVendMootDtVO2().getQuery());
        getVendMootDtVO2().executeQuery();
        System.out.println("Row Count: "+getVendMootDtVO2().getEstimatedRowCount());
        
        return null;
    }

    /**
     * Container's getter for VendorMootQueryPanelVO1.
     * @return VendorMootQueryPanelVO1
     */
    public VendorMootQueryPanelVOImpl getVendorMootQueryPanelVO1() {
        return (VendorMootQueryPanelVOImpl) findViewObject("VendorMootQueryPanelVO1");
    }
    /*This method is for settign the Default Org Id for VendorMootDetail Screen*/
    public void setDefaultOrgId(){
        Number var = new Number(404);
        VendorMootQueryPanelVOImpl vo = getVendorMootQueryPanelVO1();
        Row[] rows= vo.getFilteredRows("InvoiceNum", "2034697_TAX1");
        
        
        for (Row row : rows){
            row.setAttribute("OrgId", var);//setAttribute("OrgId").toString());
        }
        executeVendorMootDtVO(null,null,null,null);
    }
    
    public void setDefaultParamsDShip(){
        Number var = new Number(404);
        VendorMootDShipQPanelVOImpl vo = getVendorMootDShipQPanelVO1();
        Row[] rows= vo.getFilteredRows("InvoiceNum", "2034697_TAX1");
        
        for (Row row : rows){
            row.setAttribute("OrgId", var);//setAttribute("OrgId").toString());
            row.setAttribute("InvoiceSource", "US_OD_DROPSHIP");
            System.out.println("Rows are set to default values");
        }
    }
    
    public void executeVOForDropship(){
        getVendMootDtVO2().setNamedWhereClauseParam("p_org_id", 404);
        getVendMootDtVO2().setNamedWhereClauseParam("p_source", "US_OD_DROPSHIP");
        getVendMootDtVO2().executeQuery();
    }
    
    public void clearEmpVendSearch(){
        Key keyVendorsearchid = new Key(new Object[] {1});
        VASummarySearchVORowImpl voRow=(VASummarySearchVORowImpl)getVASummarySearchVO1().getRow(keyVendorsearchid);
        
        voRow.setVendorAssistant(null);
        voRow.setSupplierName(null); 
        voRow.setSupplierNo(null); 
        voRow.setSupplierSite(null); 
        
        System.out.println("Method called from clearEmpVendSearch");
    }
    
    public void clearVendMootSearch(){
        VendorMootQueryPanelVORowImpl voRow=(VendorMootQueryPanelVORowImpl)getVendorMootQueryPanelVO1().getCurrentRow();
             System.out.println("Method called from clearVendMootSearch");   
        voRow.setAllExcepts(null);
        voRow.setDropShip(null);
        voRow.setFrontDoor(null);
        voRow.setFrtExcepts(null);
        voRow.setSKUNumber(null);
        voRow.setNonCode(null);
        voRow.setQtyExcepts(null);
        voRow.setPricingExcepts(null);
//        voRow.setOrgId(null);
        voRow.setInvoiceNumber(null);
        voRow.setPONumber(null);
        voRow.setInvoiceFrom(null);
        voRow.setInvoiceTo(null);
        voRow.setDueFrom(null);
        voRow.setDueTo(null);
        voRow.setInvoiceSource(null);
        voRow.setSupplierName(null);
        voRow.setSupplierNumber(null);
        voRow.setSupplierSite(null);
        voRow.setVendorAssistant(null);
        
    }
    
    public void clearVendMootDShipSearch(){
        VendorMootDShipQPanelVORowImpl voRow=(VendorMootDShipQPanelVORowImpl)getVendorMootDShipQPanelVO1().getCurrentRow();
             System.out.println("Method called from clearVendMootSearch");   
        voRow.setAllExcepts(null);
//        voRow.setDropShip(null);
//        voRow.setFrontDoor(null);
        voRow.setFrtExcepts(null);
        voRow.setQtyExcepts(null);
        voRow.setPricingExcepts(null);
        voRow.setSKUNumber(null);
//        voRow.setNonCode(null);
    //        voRow.setOrgId(null);
        voRow.setInvoiceNumber(null);
        voRow.setPONumber(null);
        voRow.setInvoiceFrom(null);
        voRow.setInvoiceTo(null);
        voRow.setDueFrom(null);
        voRow.setDueTo(null);
//        voRow.setInvoiceSource(null);
        voRow.setSupplierName(null);
        voRow.setSupplierNumber(null);
        voRow.setSupplierSite(null);
        voRow.setVendorAssistant(null);
        
    }

    /**
     * Container's getter for VendorMootDShipQPanelVO1.
     * @return VendorMootDShipQPanelVO1
     */
    public VendorMootDShipQPanelVOImpl getVendorMootDShipQPanelVO1() {
        return (VendorMootDShipQPanelVOImpl) findViewObject("VendorMootDShipQPanelVO1");
    }

    /**
     * Container's getter for VendMootDtVO2.
     * @return VendMootDtVO2
     */
    public VendMootDtVOImpl getVendMootDtVO2() {
        return (VendMootDtVOImpl) findViewObject("VendMootDtVO2");
    }
    
    public void clearMassReleaseHold(){
        MassReleaseVORowImpl row=(MassReleaseVORowImpl)getMassReleaseVO1().getCurrentRow();
        row.setpoNum(null);
        row.setpoFrom(null);
        row.setpoTo(null);
        row.setinvoiceFrom(null);
        row.setinvoiceTo(null);
        row.setsupNo(null);
        row.setsupName(null);
        row.setsupSiteCode(null);
        row.setvendorAssistant(null);
        row.setfrontDoor(null);
        row.setnonCode(null);
        row.setdropShip(null);
        row.setfreightExcp(null);
        row.setoperatingId(null);
        row.setquantityExcp(null);
        row.setpricingExcp(null);
        row.setdueFrom(null);
        row.setdueTo(null);
        row.setskuNo(null);
    }

    /**
     * Container's getter for CostVarianceVO1.
     * @return CostVarianceVO1
     */
    public CostVarianceVOImpl getCostVarianceVO1() {
        return (CostVarianceVOImpl) findViewObject("CostVarianceVO1");
    }

    /**
     * Container's getter for CostVarianceTVO1.
     * @return CostVarianceTVO1
     */
    public CostVarianceTVOImpl getCostVarianceTVO1() {
        return (CostVarianceTVOImpl) findViewObject("CostVarianceTVO1");
    }
    
    public String updateAnswer(){
        
        return null;
    }
    

    /**
     * Container's getter for MerchContactsSearchVO1.
     * @return MerchContactsSearchVO1
     */
    public MerchContactsSearchVOImpl getMerchContactsSearchVO1() {
        return (MerchContactsSearchVOImpl) findViewObject("MerchContactsSearchVO1");
    }

    /**
     * Container's getter for MerchDeptContVO1.
     * @return MerchDeptContVO1
     */
    public MerchDeptContVOImpl getMerchDeptContVO1() {
        return (MerchDeptContVOImpl) findViewObject("MerchDeptContVO1");
    }
    
    
    public String DeptContactSearchAction(){
        
        MerchContactsSearchVORowImpl row=(MerchContactsSearchVORowImpl)getMerchContactsSearchVO1().getCurrentRow();
        
        getMerchDeptContVO1().setWhereClause(null);
        getMerchDeptContVO1().executeEmptyRowSet();
        getMerchDeptContVO1().setNamedWhereClauseParam("p_dept", row.getDeptNo());
        getMerchDeptContVO1().setNamedWhereClauseParam("p_dmm", row.getMerchMgr());
        getMerchDeptContVO1().setNamedWhereClauseParam("p_scm", row.getMerch() );
        getMerchDeptContVO1().setNamedWhereClauseParam("p_vp", row.getVp() );
        
        getMerchDeptContVO1().executeQuery();
        System.out.println("Row Count: "+getMerchDeptContVO1().getEstimatedRowCount());
        
        return null;
    } 
    
    public void clearDeptContactSearch(){
        
        /*         VendorMootQueryPanelVOImpl vo = getVendorMootQueryPanelVO1();
        Row[] rows= vo.getFilteredRows("InvoiceNum", "2034697_TAX1");
        
        for (Row row : rows){
            row.setAttribute("OrgId", var);//setAttribute("OrgId").toString());
            row.setAttribute("InvoiceSource", "US_OD_DROPSHIP");
            System.out.println("Rows are set to default values");
        }
         * */
        MerchContactsSearchVOImpl vo=getMerchContactsSearchVO1();
        Row[] rows= vo.getFilteredRows("Merchid", 1);// getCurrentRow();
        for (Row row : rows){
        row.setAttribute("DeptNo",null);//setDeptNo(null); 
        row.setAttribute("Merch",null);//setMerch(null); 
        row.setAttribute("MerchMgr",null);//setMerchMgr(null);
        row.setAttribute("Vp",null);//setVp(null);     
        }    
    }      

    /**
     * Container's getter for GeneralInquiryTVO2.
     * @return GeneralInquiryTVO2
     */
    public GeneralInquiryTVOImpl getGeneralInquiryTVO1() {
        return (GeneralInquiryTVOImpl) findViewObject("GeneralInquiryTVO1");
    }
    
    public void initGeneralInquiry(){
        getGeneralInquiryQueryVO1().executeEmptyRowSet();
//        getGeneralInquiryMassUpdateVO1().setWhereClause(null);
//        getGeneralInquiryMassUpdateVO1().addWhereClause(" rownum<2");
//        getGeneralInquiryMassUpdateVO1().executeQuery();
        
//    getGeneralInquiryMassUpdateVO1().getEstimatedRowCount();
//        getGeneralInquiryMassUpdateVO1().setCurrentRow(getGeneralInquiryMassUpdateVO1().first());
//    Row row=getGeneralInquiryMassUpdateQueryVO1().createRow();
//    row.setAttribute("VendorSiteCode", "99999");
//    getGeneralInquiryMassUpdateQueryVO1().insertRow(row);
//        Row row=getGeneralInquiryMassUpdateTVO1().createRow();
//        getGeneralInquiryMassUpdateTVO1().insertRow(row);
    }

    /**
     * Container's getter for VASummarySearchVO1.
     * @return VASummarySearchVO1
     */
    public VASummarySearchVOImpl getVASummarySearchVO1() {
        return (VASummarySearchVOImpl) findViewObject("VASummarySearchVO1");
    }
    
    public void initCostVariance(){
        getCostVarianceVO1().executeEmptyRowSet();
    }

    /**
     * Container's getter for ApInvoiceLineVO1.
     * @return ApInvoiceLineVO1
     */
    public ApInvoiceLineVOImpl getApInvoiceLineVO1() {
        return (ApInvoiceLineVOImpl) findViewObject("ApInvoiceLineVO1");
    }


    public String initInvoiceDetails(String invoiceNum){
        System.out.println("G.S invoiceNum in AM: "+invoiceNum);
        ViewCriteria criteriainvoice=getApInvoicesVO1().getViewCriteria("ApInvoicesVOCriteria");
        String userId="3509811";
        String userName="Bolli, Madhu";
        try{
        getFndUserNameVO1().setWhereClause(null);
        getFndUserNameVO1().setNamedWhereClauseParam("userId", new Number(userId));
        getFndUserNameVO1().executeQuery();
        }catch(Exception e){
            
        }
        if(getFndUserNameVO1().first()!=null){
            userName=(String)getFndUserNameVO1().first().getAttribute("FullName");
        }
        ViewCriteria criteriaxxinvoicehdr=getXXApInvoiceHeaderVO1().getViewCriteria("XXApInvoiceHeaderVOCriteria");
        getXXApInvoiceHeaderVO1().applyViewCriteria(null);
        // getApInvoicesVO1().setWhereClause(null);
        getXXApInvoiceHeaderVO1().setNamedWhereClauseParam("invId", invoiceNum);
      //  getXXApInvoiceHeaderVO1().setNamedWhereClauseParam("p_created_by", "874709");
        getXXApInvoiceHeaderVO1().applyViewCriteria(criteriaxxinvoicehdr);
        //   getCostVarianceVO1().setNamedWhereClauseParam("skunum", row.getskuNo());
        getXXApInvoiceHeaderVO1().executeQuery();
        String newInv=null;
        String exiInv="N";
        String otherUserInv=null;
        String  otheruser=null;
        String invNum=null;
        if(getXXApInvoiceHeaderVO1().first()!=null){
            if(getXXApInvoiceHeaderVO1().first().getAttribute("ProcessFlag").equals("N")){
                otheruser=(String)getXXApInvoiceHeaderVO1().first().getAttribute("CreatedByName");
                if(otheruser==null) {
                    exiInv="Y";
                    getXXApInvoiceHeaderVO1().first().setAttribute("CreatedByName", userName);
                getDBTransaction().commit();
                }
                else {
                    return "Invoice#"+getXXApInvoiceHeaderVO1().first().getAttribute("InvoiceNum")+" is currently being worked by "+otheruser;
                }
            }
            
            
        }
        else{
            
        }
        if(invoiceNum==null)
            invoiceNum="155629609";
        getApInvoicesVO1().applyViewCriteria(null);
       // getApInvoicesVO1().setWhereClause(null);
        getApInvoicesVO1().setNamedWhereClauseParam("invoiceNo", invoiceNum);
        getApInvoicesVO1().applyViewCriteria(criteriainvoice);
        //   getCostVarianceVO1().setNamedWhereClauseParam("skunum", row.getskuNo());
        getApInvoicesVO1().executeQuery();
//        if(getApInvoicesVO1().first().getAttribute("poMultiInvoice")!=null && getApInvoicesVO1().first().getAttribute("poMultiInvoice").equals("Y") ){
//            return "The selected Invoice corresponding PO# having multiple Invoices. This UI is not allowed for this Invoice#.";
//        }
        String freightTolerance=null;
        if(getApInvoicesVO1().first().getAttribute("freightTolerance")!=null && getApInvoicesVO1().first().getAttribute("freightTolerance").equals("0")){
            freightTolerance="0";
        }
        oracle.jbo.domain.Number poHdrId=null;
        poHdrId=(Number)getApInvoicesVO1().first().getAttribute("PoHeaderId");
        if(poHdrId==null)
            poHdrId=(Number)getApInvoicesVO1().first().getAttribute("QuickPoHeaderId");
        getApInvoiceLinePOVO1().setWhereClause(null);
        getApInvoiceLinePOVO1().setNamedWhereClauseParam("poHdrId",poHdrId );
        getApInvoiceLinePOVO1().setNamedWhereClauseParam("invId", invoiceNum);
        getApInvoiceLinePOVO1().executeQuery();
        getApInvoiceLinesPOLinesVO1().setWhereClause(null);
        getApInvoiceLinesPOLinesVO1().setNamedWhereClauseParam("poHdrId",poHdrId );
        getApInvoiceLinesPOLinesVO1().setNamedWhereClauseParam("invId", invoiceNum);
        getApInvoiceLinesPOLinesVO1().executeQuery();
        Number invId=(Number)getApInvoicesVO1().first().getAttribute("InvoiceId");
       // invId=new Number(152553535);
        
        
        ViewCriteria criteria=getApInvoiceLineVO1().getViewCriteria("ApInvoiceLineVOCriteria1");
        if(invId.isNull())
            invId=new Number(152553535);
//        getApInvoiceLineVO1().applyViewCriteria(null);
//        getApInvoiceLineVO1().setWhereClause(null);
//       // getApInvoiceLineVO1().addWhereClause("  ApInvoiceLinesEO.invoice_id in (select invoice_id from ap_holds_all a where a.invoice_id=ApInvoiceLinesEO.invoice_id)");
//       // getApInvoiceLineVO1().addWhereClause(" and (ApInvoiceLinesEO.po_header_id is not null or ApInvoiceLinesEO.Line_Type_Lookup_Code='FREIGHT')");
//        getApInvoiceLineVO1().addWhereClause(" ApInvoiceLinesEO.Line_Type_Lookup_Code in ('ITEM','FREIGHT') or XXApInvoiceDetailsEO.Line_Type_Lookup_Code is null ");
//        getApInvoiceLineVO1().setNamedWhereClauseParam("invId", invId);
//        getApInvoiceLineVO1().applyViewCriteria(criteria);
//        //   getCostVarianceVO1().setNamedWhereClauseParam("skunum", row.getskuNo());
//        getApInvoiceLineVO1().executeQuery();
        Number polineid=new Number(0);
//        if(getApInvoiceLineVO1().first()!=null)
  //       polineid=(oracle.jbo.domain.Number)getApInvoiceLineVO1().first().getAttribute("PoLineId");
        ViewCriteria criteriaxxinvoice=getXXApInvoiceDetailsVO1().getViewCriteria("XXApInvoiceDetailsVOCriteria");
        if(invoiceNum==null)
            invoiceNum="155549448";
        getXXApInvoiceDetailsVO1().applyViewCriteria(null);
        // getApInvoicesVO1().setWhereClause(null);
        getXXApInvoiceDetailsVO1().setNamedWhereClauseParam("p_inv_id", invoiceNum);
        getXXApInvoiceDetailsVO1().setNamedWhereClauseParam("p_created_by", userId);
        getXXApInvoiceDetailsVO1().applyViewCriteria(criteriaxxinvoice);
        //   getCostVarianceVO1().setNamedWhereClauseParam("skunum", row.getskuNo());
        getXXApInvoiceDetailsVO1().executeQuery();
        if(exiInv.equals("Y")){
            
        }
        else{
//            ViewCriteria criteriaxxinvoiceid=getXXApInvoiceDetailsVO1().getViewCriteria("XXApInvoiceDetailsVOCriteria1");
//            if(invoiceNum==null)
//                invoiceNum="155549448";
//            getXXApInvoiceDetailsVO1().applyViewCriteria(null);
//            // getApInvoicesVO1().setWhereClause(null);
//            getXXApInvoiceDetailsVO1().setNamedWhereClauseParam("p_inv_id", invoiceNum);
//           // getXXApInvoiceDetailsVO1().setNamedWhereClauseParam("p_created_by", "874709");
//            getXXApInvoiceDetailsVO1().applyViewCriteria(criteriaxxinvoiceid);
//            //   getCostVarianceVO1().setNamedWhereClauseParam("skunum", row.getskuNo());
//            getXXApInvoiceDetailsVO1().executeQuery();
////            if(getXXApInvoiceDetailsVO1().getEstimatedRowCount()>0){
////                return "The selected Invoice Num already in process by Other User.";
////            }
//        try{
//        oracle.jbo.domain.Number quantity=new oracle.jbo.domain.Number("0");
//            oracle.jbo.domain.Number amount=new oracle.jbo.domain.Number("0");
//        //    oracle.jbo.domain.Number priceholdsum=new oracle.jbo.domain.Number("0");
//
//      //  ApInvoiceLineVOImpl vo = (ApInvoiceLineVOImpl)getApInvoiceLineVO1();
//        ApInvoiceLinesPOLinesVOImpl vo=(ApInvoiceLinesPOLinesVOImpl)getApInvoiceLinesPOLinesVO1();
//        int i = 0;
//        ApInvoiceLinesPOLinesVORowImpl rowsum = null;
//        vo.reset();
//            XXApInvoiceDetailsVORowImpl xxinvoicerow=null;
//            ApHoldsVORowImpl invoiceholdrow=null;
//            XXApInvoiceHoldsVORowImpl xxinvoiceholdrow=null;
//            XXApInvoiceHeaderVORowImpl xxheaderrow=null;
//            Calendar todaysDate = Calendar.getInstance();
//                    java.util.Date utilDate = new java.util.Date();
//                    todaysDate.setTime(utilDate);
//                    java.sql.Date sqlDate =
//                        new java.sql.Date(todaysDate.get(Calendar.YEAR) - 1900,
//                                          (todaysDate.get(Calendar.MONTH)),
//                                          todaysDate.get(Calendar.DAY_OF_MONTH));
//
//                    oracle.jbo.domain.Date jboDate =
//                        new oracle.jbo.domain.Date(sqlDate);
//            xxheaderrow=(XXApInvoiceHeaderVORowImpl)getXXApInvoiceHeaderVO1().createRow();
//            ApInvoicesVORowImpl invoicerow=(ApInvoicesVORowImpl)getApInvoicesVO1().first();
//            xxheaderrow.setInvoiceId(invoicerow.getInvoiceId());
//            xxheaderrow.setInvoiceNum(invoicerow.getInvoiceNum());
//            xxheaderrow.setCreatedBy(new Number(userId));
//            xxheaderrow.setCreationDate(jboDate);
//            xxheaderrow.setProcessFlag("N");
//            xxheaderrow.setLastUpdatedBy(new Number(userId));
//            xxheaderrow.setLastUpdatedDate(jboDate);
//            xxheaderrow.setCreatedByName(userName);
//            xxheaderrow.setOrgId(invoicerow.getOrgId());
//            getXXApInvoiceHeaderVO1().insertRow(xxheaderrow);
//            
//        while (vo.hasNext()) {
//        if (i == 0)
//        rowsum = (ApInvoiceLinesPOLinesVORowImpl)vo.first();
//        else
//        rowsum = (ApInvoiceLinesPOLinesVORowImpl)vo.next();
//        //            System.out.println("Changing row 1: " +
//        //              row.getAttribute("Name"));
//        //   System.out.println("xdebug c2: Changing row 2: " +
//        //   row.getAttribute("EmployeeSelect"));
//            
////        rowsum.setAttribute("newQuantity", rowsum.getAttribute("QuantityInvoiced"));
////            rowsum.setAttribute("newAmount", rowsum.getAttribute("Amount"));
//            if(rowsum.getLineTypeLookupCode()==null || rowsum.getLineTypeLookupCode().equals("ITEM") || rowsum.getLineTypeLookupCode().equals("FREIGHT")){
//         xxinvoicerow=(XXApInvoiceDetailsVORowImpl)getXXApInvoiceDetailsVO1().createRow();
//            xxinvoicerow.setInvoiceId(new Number(invoiceNum));
//         //   xxinvoicerow.setInvoiceNum(rowsum.getInvoiceNum());
//            xxinvoicerow.setLineNumber(rowsum.getLineNumber());
//            
//            xxinvoicerow.setCreatedBy(new Number(userId));
//            xxinvoicerow.setQuantityInvoiced(rowsum.getQuantityInvoiced());
//            xxinvoicerow.setAmount(rowsum.getUnitPrice());
//            
//            xxinvoicerow.setCreatedDate((oracle.jbo.domain.Date)jboDate);
//            xxinvoicerow.setLastUpdatedBy(new Number(userId));
//            xxinvoicerow.setLastUpdateDate(jboDate);
//            xxinvoicerow.setProcessedFlag("N");
//                xxinvoicerow.setPoNum(rowsum.getPoNum());
//                xxinvoicerow.setLocation(rowsum.getLocation());
//                xxinvoicerow.setShipmentNum(rowsum.getShipmentNum());
//                xxinvoicerow.setPoLineNum(rowsum.getPoLineNum());
//                xxinvoicerow.setPoLineId(rowsum.getPoLineId());
//                xxinvoicerow.setSku(rowsum.getSku());
//                xxinvoicerow.setSkuDesc(rowsum.getSkuDesc());
//                xxinvoicerow.setPoQty(rowsum.getPoQty());
//                xxinvoicerow.setPoPrice(rowsum.getPoPrice());
//                xxinvoicerow.setChargeAccount(rowsum.getChargeAccount());
//                xxinvoicerow.setUnmatchPoFlag(rowsum.getUnmatchPoFlag());
//                xxinvoicerow.setHoldExistsFlag(rowsum.getHoldExistsFlag());
//                xxinvoicerow.setPoHeaderId(poHdrId);
//                xxinvoicerow.setInventoryItemId(rowsum.getInventoryItemId());
//            if(rowsum.getLineTypeLookupCode()!=null && rowsum.getLineTypeLookupCode().equals("ITEM"))
//            xxinvoicerow.setLineTypeLookupCode("ITEM");
//            if (rowsum.getLineTypeLookupCode().equals("FREIGHT")){
//                xxinvoicerow.setLineTypeLookupCode("FREIGHT");
//                if(freightTolerance.equals("0"))
//                xxinvoicerow.setChargeback("Y");
//            }
//            
//            getXXApInvoiceDetailsVO1().insertRow(xxinvoicerow);
//            
//            
//        i++;
//            }
//            ViewCriteria criteriahold=getApHoldsVO2().getViewCriteria("ApHoldsVOCriteria");
//            if(invId.isNull())
//                invId=new Number(152553535);
//            if(rowsum.getPoLineLocationId()!=null){
//            getApHoldsVO2().applyViewCriteria(null);
//            //  getApHoldsVO2().setWhereClause(null);
//            //  getApHoldsVO2().addWhereClause("  ApInvoiceLinesEO.invoice_id in (select invoice_id from ap_holds_all a where a.invoice_id = ApInvoiceLinesEO.invoice_id)");
//            getApHoldsVO2().setNamedWhereClauseParam("p_inv_id", invId);
//            getApHoldsVO2().setNamedWhereClauseParam("poline_id", rowsum.getAttribute("PoLineLocationId"));
//            getApHoldsVO2().applyViewCriteria(criteriahold);
//            getApHoldsVO2().executeQuery();
//            getApHoldsVO2().reset();
//            
//            int j=0;
//            while(getApHoldsVO2().hasNext()){
//                if(j==0)
//                invoiceholdrow=(ApHoldsVORowImpl)getApHoldsVO2().first();
//                else
//                invoiceholdrow=(ApHoldsVORowImpl)getApHoldsVO2().next();
//                
//                xxinvoiceholdrow=(XXApInvoiceHoldsVORowImpl)getXXApInvoiceHoldsVO1().createRow();
//                xxinvoiceholdrow.setInvoiceId(new Number(invoiceNum));
//                xxinvoiceholdrow.setHoldId(invoiceholdrow.getHoldId());
//                xxinvoiceholdrow.setLineNumber(rowsum.getLineNumber());
//                xxinvoiceholdrow.setPoLineId(invoiceholdrow.getPoLineId());
//                xxinvoiceholdrow.setHoldLookupCode(invoiceholdrow.getHoldLookupCode());
//                xxinvoiceholdrow.setProcessedFlag("N");
//                xxinvoiceholdrow.setCreatedBy(new Number(userId));
//                xxinvoiceholdrow.setCreatedDate(jboDate);
//                xxinvoiceholdrow.setLastUpdatedBy(new Number(userId));
//                xxinvoiceholdrow.setLastUpdatedDate(jboDate);
//                xxinvoiceholdrow.setLineLocationId(invoiceholdrow.getLineLocationId());
//                xxinvoiceholdrow.setHoldDate(invoiceholdrow.getHoldDate());
//                xxinvoiceholdrow.setHeldBy(invoiceholdrow.getHeldBy());
//                getXXApInvoiceHoldsVO1().insertRow(xxinvoiceholdrow);
//            j++;
//            }
//            }
//            
////            if(getApHoldsVO2().getEstimatedRowCount()==1){
////                invoiceholdrow=(ApHoldsVORowImpl)getApHoldsVO2().first();
////                xxinvoiceholdrow=(XXApInvoiceHoldsVORowImpl)getXXApInvoiceHoldsVO1().createRow();
////                xxinvoiceholdrow.setInvoiceId(rowsum.getInvoiceId());
////                xxinvoiceholdrow.setHoldId(invoiceholdrow.getHoldId());
////                xxinvoiceholdrow.setLineNumber(invoiceholdrow.getLineNumber());
////                getXXApInvoiceHoldsVO1().insertRow(xxinvoiceholdrow);
////            }
//        }
////            int k=0;
////            ApInvoiceLinePOVORowImpl rowpo=null;
////            getApInvoiceLinePOVO1().reset();
////            i=i+1;
////            try{
////            while(getApInvoiceLinePOVO1().hasNext()){
////                if (k == 0)
////                rowpo = (ApInvoiceLinePOVORowImpl)getApInvoiceLinePOVO1().first();
////                else
////                rowpo = (ApInvoiceLinePOVORowImpl)getApInvoiceLinePOVO1().next();
////                xxinvoicerow=(XXApInvoiceDetailsVORowImpl)getXXApInvoiceDetailsVO1().createRow();
////                   xxinvoicerow.setInvoiceId(new oracle.jbo.domain.Number(invoiceNum));
////                  // xxinvoicerow.setInvoiceNum(rowpo.getInvoiceNum());
////                   xxinvoicerow.setLineNumber(new Number(i));
////                   
////                   xxinvoicerow.setCreatedBy(new Number("874709"));
////                   xxinvoicerow.setQuantityInvoiced(null);
////                   xxinvoicerow.setAmount(null);
////                   
////                   xxinvoicerow.setCreatedDate((oracle.jbo.domain.Date)jboDate);
////                   xxinvoicerow.setLastUpdatedBy(new Number("874709"));
////                   xxinvoicerow.setLastUpdateDate(jboDate);
////                   xxinvoicerow.setProcessedFlag("N");
////                getXXApInvoiceDetailsVO1().insertRow(xxinvoicerow);
////                getApInvoiceLinePOVO1().next();
////                k++;
////                i++;
////            }
////            }
////            catch(Exception e){
////                
////            }
////            if(getApInvoiceLinePOVO1().getEstimatedRowCount()==1){
////                rowpo = (ApInvoiceLinePOVORowImpl)getApInvoiceLinePOVO1().first();
////                xxinvoicerow=(XXApInvoiceDetailsVORowImpl)getXXApInvoiceDetailsVO1().createRow();
////                   xxinvoicerow.setInvoiceId(new oracle.jbo.domain.Number(invoiceNum));
////                  // xxinvoicerow.setInvoiceNum(rowpo.getInvoiceNum());
////                   xxinvoicerow.setLineNumber(new Number(i));
////                   
////                   xxinvoicerow.setCreatedBy(new Number("874709"));
////                   xxinvoicerow.setQuantityInvoiced(null);
////                   xxinvoicerow.setAmount(null);
////                   
////                   xxinvoicerow.setCreatedDate((oracle.jbo.domain.Date)jboDate);
////                   xxinvoicerow.setLastUpdatedBy(new Number("874709"));
////                   xxinvoicerow.setLastUpdateDate(jboDate);
////                   xxinvoicerow.setProcessedFlag("N");
////                getXXApInvoiceDetailsVO1().insertRow(xxinvoicerow);
////                
////            }
//            if(vo.getEstimatedRowCount()==1){
//          //      rowsum.setAttribute("newQuantity", getApInvoiceLineVO1().first().getAttribute("QuantityInvoiced"));
//            //    rowsum.setAttribute("newAmount", getApInvoiceLineVO1().first().getAttribute("Amount"));
//                
//                xxinvoicerow=(XXApInvoiceDetailsVORowImpl)getXXApInvoiceDetailsVO1().createRow();
//                xxinvoicerow.setInvoiceId(new Number(invoiceNum));
//                xxinvoicerow.setLineNumber(rowsum.getLineNumber());
//                xxinvoicerow.setCreatedBy(new Number(userId));
//                xxinvoicerow.setQuantityInvoiced(rowsum.getQuantityInvoiced());
//                xxinvoicerow.setAmount(rowsum.getUnitPrice());
//                
//                xxinvoicerow.setCreatedDate((oracle.jbo.domain.Date)jboDate);
//                xxinvoicerow.setLastUpdatedBy(new Number(userId));
//                xxinvoicerow.setLastUpdateDate(jboDate);
//                xxinvoicerow.setProcessedFlag("N");
//                    xxinvoicerow.setPoNum(rowsum.getPoNum());
//                    xxinvoicerow.setLocation(rowsum.getLocation());
//                    xxinvoicerow.setShipmentNum(rowsum.getShipmentNum());
//                    xxinvoicerow.setPoLineNum(rowsum.getPoLineNum());
//                    xxinvoicerow.setPoLineId(rowsum.getPoLineId());
//                    xxinvoicerow.setSku(rowsum.getSku());
//                    xxinvoicerow.setSkuDesc(rowsum.getSkuDesc());
//                    xxinvoicerow.setPoQty(rowsum.getPoQty());
//                    xxinvoicerow.setPoPrice(rowsum.getPoPrice());
//                    xxinvoicerow.setChargeAccount(rowsum.getChargeAccount());
//                    xxinvoicerow.setUnmatchPoFlag(rowsum.getUnmatchPoFlag());
//                    xxinvoicerow.setHoldExistsFlag(rowsum.getHoldExistsFlag());
//                xxinvoicerow.setPoHeaderId(poHdrId);
//                xxinvoicerow.setInventoryItemId(rowsum.getInventoryItemId());
//                getXXApInvoiceDetailsVO1().insertRow(xxinvoicerow);
//          //  getPaymentAttributeVO1().first().setAttribute("invoicesum", invoicesum);
//            }
//        }catch(Exception e){
//            
//        }
//            getDBTransaction().commit();
                   DBTransaction dbTransaction=getDBTransaction();
                DBTransactionImpl dbti = (DBTransactionImpl)dbTransaction;
                        CallableStatement statement = null;
            Object obj = null;
        //                ResultSet rs=null;
        //                        String lodgeFeeTbl = "INVOICE_ARRAY";
                        
                       
                statement =
                                    dbti.createCallableStatement(("BEGIN ? :=" + "XX_AP_TR_UI_ACTION_PKG.xx_insert_custom_invoice_table(?,?,?);" +
                                                                  "END;"), 0);
                 
                try {
                            if(statement!=null){
//                                ArrayDescriptor empArray = 
//                                        ArrayDescriptor.createDescriptor("INVOICE_ARRAY", 
//                                                                         statement.getConnection()); 
//                                      ARRAY invoicearray = 
//                                        new ARRAY(empArray, statement.getConnection(), releaseholdlist.toArray());
                               // ARRAY invoicearray=statement.getConnection().createArrayOf(String, list); 
                      //      statement.setArray(1,  lodgeFeeTbl);
                     // statement.setArray(1, invoicearray);
                     statement.registerOutParameter(1, Types.VARCHAR);
                                statement.setString(2, getApInvoicesVO1().first().getAttribute("InvoiceId").toString());
                                statement.setString(3, userId);
                                statement.setString(4, userName);
                                
                            
                            statement.executeUpdate();
                                obj = statement.getObject(1);
                            }
                }catch(Exception e){
                    System.out.println("Exception");
                }
                            
        //   Object supplerUpdate = callStoredFunction(Types.VARCHAR, "xx_upd_vendor_assistant(?,?)", new Object[] { invoicearray });
               // if (supplerUpdate != null && supplerUpdate.equals("Y")) {
                    getDBTransaction().commit(); 
        }
        getApInvoiceLineVO1().applyViewCriteria(null);
        getApInvoiceLineVO1().setWhereClause(null);
      //  getApInvoiceLineVO1().addWhereClause("  ApInvoiceLinesEO.invoice_id in (select invoice_id from ap_holds_all a where a.invoice_id=ApInvoiceLinesEO.invoice_id and a.status_flag='S' and ApInvoiceLinesEO.po_line_location_id=a.line_location_id)");
       // getApInvoiceLineVO1().addWhereClause(" and (ApInvoiceLinesEO.line_type_lookup_code in ('ITEM','FREIGHT')) ");
       getApInvoiceLineVO1().addWhereClause(" XXApInvoiceDetailsEO.hold_exists_flag='Y' AND XXApInvoiceDetailsEO.unmatch_po_flag='N'");
        getApInvoiceLineVO1().setNamedWhereClauseParam("invId", invId);
        getApInvoiceLineVO1().applyViewCriteria(criteria);
        getApInvoiceLineVO1().executeQuery();
        ViewCriteria criteriainvoicehold=getApInvoiceHoldsVO1().getViewCriteria("ApInvoiceHoldsVOCriteria");
        getApInvoiceHoldsVO1().applyViewCriteria(null);
        getApInvoiceHoldsVO1().setWhereClause(null);
        getApInvoiceHoldsVO1().addWhereClause(" ApHoldsEO.line_location_id is null");
        getApInvoiceHoldsVO1().setNamedWhereClauseParam("invId", invId);
        getApInvoiceHoldsVO1().applyViewCriteria(criteriainvoicehold);
        getApInvoiceHoldsVO1().executeQuery();
      //  Number invId=(Number)getApInvoicesVO1().first().getAttribute("InvoiceId");
        
       // getApHoldsVO2().executeEmptyRowSet();
         ViewCriteria criteriainvoicecode=getInvoiceReasonCodeVO1().getViewCriteria("InvoiceReasonCodeVOCriteria");
         getInvoiceReasonCodeVO1().applyViewCriteria(null);
         getInvoiceReasonCodeVO1().setNamedWhereClauseParam("pInvoiceId", invoiceNum);
         getInvoiceReasonCodeVO1().applyViewCriteria(criteriainvoicecode);
         getInvoiceReasonCodeVO1().executeQuery();
        return invoiceNum;
    }
    
    public void queryAllInvoice(String queryAllInvoice,String queryAllPO){
        if(queryAllInvoice!=null && queryAllInvoice.equals("true")){
            Number invId=(Number)getApInvoicesVO1().first().getAttribute("InvoiceId");
            ViewCriteria criteria=getApInvoiceLineVO1().getViewCriteria("ApInvoiceLineVOCriteria1");
            if(invId.isNull())
                invId=new Number(152553535);
            getApInvoiceLineVO1().applyViewCriteria(null);
            getApInvoiceLineVO1().setWhereClause(null);
            if(queryAllPO!=null && queryAllPO.equals("true")){
                getApInvoiceLineVO1().addWhereClause(" (XXApInvoiceDetailsEO.unmatch_po_flag in ('Y','N'))");
            }else{
                getApInvoiceLineVO1().addWhereClause(" (XXApInvoiceDetailsEO.unmatch_po_flag='N')");
            }
            getApInvoiceLineVO1().setNamedWhereClauseParam("invId", invId);
            getApInvoiceLineVO1().applyViewCriteria(criteria);
            //   getCostVarianceVO1().setNamedWhereClauseParam("skunum", row.getskuNo());
            getApInvoiceLineVO1().executeQuery();
 
        }
        else{
            
            Number invId=(Number)getApInvoicesVO1().first().getAttribute("InvoiceId");
            ViewCriteria criteria=getApInvoiceLineVO1().getViewCriteria("ApInvoiceLineVOCriteria1");
            if(invId.isNull())
                invId=new Number(152553535);
            getApInvoiceLineVO1().applyViewCriteria(null);
            getApInvoiceLineVO1().setWhereClause(null);
          //  getApInvoiceLineVO1().addWhereClause("  ApInvoiceLinesEO.invoice_id in (select invoice_id from ap_holds_all a where a.invoice_id = ApInvoiceLinesEO.invoice_id and ApInvoiceLinesEO.po_line_location_id=a.line_location_id)");
            if(queryAllPO!=null && queryAllPO.equals("true")){
                getApInvoiceLineVO1().addWhereClause(" XXApInvoiceDetailsEO.hold_exists_flag='Y' and XXApInvoiceDetailsEO.unmatch_po_flag in ('Y','N')");
            }
            else{
                getApInvoiceLineVO1().addWhereClause(" XXApInvoiceDetailsEO.hold_exists_flag='Y' AND XXApInvoiceDetailsEO.unmatch_po_flag='N'");
            }
            getApInvoiceLineVO1().setNamedWhereClauseParam("invId", invId);
            getApInvoiceLineVO1().applyViewCriteria(criteria);
            //   getCostVarianceVO1().setNamedWhereClauseParam("skunum", row.getskuNo());
            getApInvoiceLineVO1().executeQuery();

        }
    }
    
    

    /**
     * Container's getter for ApInvoiceHoldsVO1.
     * @return ApInvoiceHoldsVO1
     */
    public ViewObjectImpl getApInvoiceHoldsVO1() {
        return (ViewObjectImpl) findViewObject("ApInvoiceHoldsVO1");
    }

    /**
     * Container's getter for ApHoldsVO2.
     * @return ApHoldsVO2
     */
    public ApHoldsVOImpl getApHoldsVO2() {
        return (ApHoldsVOImpl) findViewObject("ApHoldsVO2");
    }

    /**
     * Container's getter for SupplierSitePOCVO1.
     * @return SupplierSitePOCVO1
     */
//    public SupplierSitePOCVOImpl getSupplierSitePOCVO1() {
//        return (SupplierSitePOCVOImpl) findViewObject("SupplierSitePOCVO1");
//    }
    
    public void invLineSelection(String poLineId){
        Number invId=(Number)getApInvoicesVO1().first().getAttribute("InvoiceId");
        ViewCriteria criteria=getApHoldsVO2().getViewCriteria("ApHoldsVOCriteria");
        if(invId.isNull())
            invId=new Number(152553535);
        
        getApHoldsVO2().applyViewCriteria(null);
      //  getApHoldsVO2().setWhereClause(null);
      //  getApHoldsVO2().addWhereClause("  ApInvoiceLinesEO.invoice_id in (select invoice_id from ap_holds_all a where a.invoice_id = ApInvoiceLinesEO.invoice_id)");
        getApHoldsVO2().setNamedWhereClauseParam("p_inv_id", invId);
        getApHoldsVO2().setNamedWhereClauseParam("poline_id", getApInvoiceLineVO1().getCurrentRow().getAttribute("PoLineId"));
        getApHoldsVO2().applyViewCriteria(criteria);
        getApHoldsVO2().executeQuery();
    }


    /**
     * Container's getter for XXApInvoiceDetailsVO1.
     * @return XXApInvoiceDetailsVO1
     */
    public XXApInvoiceDetailsVOImpl getXXApInvoiceDetailsVO1() {
        return (XXApInvoiceDetailsVOImpl) findViewObject("XXApInvoiceDetailsVO1");
    }

    /**
     * Container's getter for XXApInvoiceHoldsVO1.
     * @return XXApInvoiceHoldsVO1
     */
    public XXApInvoiceHoldsVOImpl getXXApInvoiceHoldsVO1() {
        return (XXApInvoiceHoldsVOImpl) findViewObject("XXApInvoiceHoldsVO1");
    }

    /**
     * Container's getter for XXApInvoiceHeaderVO2.
     * @return XXApInvoiceHeaderVO2
     */
    public XXApInvoiceHeaderVOImpl getXXApInvoiceHeaderVO1() {
        return (XXApInvoiceHeaderVOImpl) findViewObject("XXApInvoiceHeaderVO1");
    }

    /**
     * Container's getter for ApInvoiceLinePOVO1.
     * @return ApInvoiceLinePOVO1
     */
    public ApInvoiceLinePOVOImpl getApInvoiceLinePOVO1() {
        return (ApInvoiceLinePOVOImpl) findViewObject("ApInvoiceLinePOVO1");
    }

    /**
     * Container's getter for ApInvoiceLinesPOLinesVO2.
     * @return ApInvoiceLinesPOLinesVO2
     */
    public ApInvoiceLinesPOLinesVOImpl getApInvoiceLinesPOLinesVO1() {
        return (ApInvoiceLinesPOLinesVOImpl) findViewObject("ApInvoiceLinesPOLinesVO1");
    }

    /**
     * Container's getter for FndUserNameVO1.
     * @return FndUserNameVO1
     */
    public FndUserNameVOImpl getFndUserNameVO1() {
        return (FndUserNameVOImpl) findViewObject("FndUserNameVO1");
    }
    public void unassignUser(String pInvoiceId){
        ViewCriteria criteriaxxinvoiceid=getXXApInvoiceHeaderVO1().getViewCriteria("XXApInvoiceHeaderVOCriteria");
       // if(invoiceNum==null)
        //    invoiceNum="155549448";
        getXXApInvoiceHeaderVO1().applyViewCriteria(null);
        // getApInvoicesVO1().setWhereClause(null);
        getXXApInvoiceHeaderVO1().setNamedWhereClauseParam("invId", pInvoiceId);
        // getXXApInvoiceDetailsVO1().setNamedWhereClauseParam("p_created_by", "874709");
        getXXApInvoiceHeaderVO1().applyViewCriteria(criteriaxxinvoiceid);
        //   getCostVarianceVO1().setNamedWhereClauseParam("skunum", row.getskuNo());
        getXXApInvoiceHeaderVO1().executeQuery();
        getXXApInvoiceHeaderVO1().first().setAttribute("CreatedByName", null);
        getDBTransaction().commit();
    }
    public BigDecimal init(){
//        ViewCriteria critera=getXXApInvoiceDetailsVO1().getViewCriteria("XXApInvoiceDetailsVOCriteria1");
//        getXXApInvoiceDetailsVO1().applyViewCriteria(null);
//        getXXApInvoiceDetailsVO1().setNamedWhereClauseParam("p_inv_id", getApInvoicesVO1().first().getAttribute("InvoiceId"));
//        getXXApInvoiceDetailsVO1().applyViewCriteria(critera);
//        getXXApInvoiceDetailsVO1().executeQuery();
            Number invId=(Number)getApInvoicesVO1().first().getAttribute("InvoiceId");
            ViewCriteria criteria=getApInvoiceLineVO1().getViewCriteria("ApInvoiceLineVOCriteria1");
        
        getApInvoiceLineVO1().applyViewCriteria(null);
        getApInvoiceLineVO1().setWhereClause(null);
      //  getApInvoiceLineVO1().addWhereClause("  ApInvoiceLinesEO.invoice_id in (select invoice_id from ap_holds_all a where a.invoice_id=ApInvoiceLinesEO.invoice_id and a.status_flag='S' and ApInvoiceLinesEO.po_line_location_id=a.line_location_id)");
       // getApInvoiceLineVO1().addWhereClause(" and (ApInvoiceLinesEO.line_type_lookup_code in ('ITEM','FREIGHT')) ");
      // getApInvoiceLineVO1().addWhereClause(" XXApInvoiceDetailsEO.hold_exists_flag='Y' AND XXApInvoiceDetailsEO.unmatch_po_flag='N'");
        getApInvoiceLineVO1().setNamedWhereClauseParam("invId", invId);
        getApInvoiceLineVO1().applyViewCriteria(criteria);
        getApInvoiceLineVO1().executeQuery();
        BigDecimal totInvA= new BigDecimal(0);
        BigDecimal totAmount=new BigDecimal(0);
        RowSetIterator rsIter=getApInvoiceLineVO1().createRowSetIterator(null);
        while(rsIter.hasNext()){
          ApInvoiceLineVORowImpl row=(ApInvoiceLineVORowImpl)rsIter.next();
          if(row.getAmount()!=null){
          BigDecimal totInvQuantity=new BigDecimal(row.getAmount().toString());
          totAmount=totAmount.add(totInvQuantity);
//          BigDecimal totInvAmount=new BigDecimal(row.getinvAmt().toString());
//          totInvAmount=totInvAmount.add(totInvAmount);
//              BigDecimal totInv=new BigDecimal(row.getinvAmt().toString());
//              totInvA=totInvA.add(totInv);
          }
        }
        rsIter.reset();
        rsIter.closeRowSetIterator();
        return totAmount;
    }
    public String addInvoiceLineHold(String lineLocationId,String invoiceId,String lineNo){
      //  invoiceholdrow=(ApHoldsVORowImpl)getApHoldsVO2().next();
                        ApInvoiceLineVORowImpl invoiceholdrow=(ApInvoiceLineVORowImpl)getApInvoiceLineVO1().getCurrentRow();
                      XXApHoldsVORowImpl  xxinvoiceholdrow=(XXApHoldsVORowImpl)getXXApHoldsVO1().createRow();
                      try{
                        xxinvoiceholdrow.setInvoiceId(new Number(invoiceholdrow.getInvoiceId1().toString()));
                        xxinvoiceholdrow.setHoldId(null);
                        xxinvoiceholdrow.setLineNumber(invoiceholdrow.getLineNumber());
                        xxinvoiceholdrow.setPoLineId(invoiceholdrow.getPoLineId());
                        xxinvoiceholdrow.setHoldLookupCode1(null);
                        xxinvoiceholdrow.setProcessedFlag("N");
                        xxinvoiceholdrow.setCreatedBy(invoiceholdrow.getCreatedBy1());
                        xxinvoiceholdrow.setCreatedDate(invoiceholdrow.getCreationDate());
                        xxinvoiceholdrow.setLastUpdatedBy(invoiceholdrow.getCreatedBy1());
                        xxinvoiceholdrow.setLastUpdatedDate(invoiceholdrow.getCreationDate());
                        xxinvoiceholdrow.setLineLocationId(invoiceholdrow.getPoLineLocationId());
                        xxinvoiceholdrow.setHoldDate(invoiceholdrow.getCreationDate());
                        xxinvoiceholdrow.setHeldBy(null);
                          xxinvoiceholdrow.setOrgInvoiceQty(invoiceholdrow.getQuantityInvoiced());
                          xxinvoiceholdrow.setUnitPrice(invoiceholdrow.getUnitPrice());
                          Number poprice=new Number(invoiceholdrow.getpoPrice());
                          xxinvoiceholdrow.setPoPrice(poprice);
//                          Number orgQty=invoiceholdrow.getQuantityInvoiced();
//                          Number recvdQty=new Number(invoiceholdrow.getUnmatchedRecdQty());
//                          Number negRecvdQty=new Number(recvdQty.negate());
//                          Number unmatchQty=orgQty.add(negRecvdQty);
                         xxinvoiceholdrow.setUnmatchedQty(null);
                        getXXApHoldsVO1().insertRow(xxinvoiceholdrow);
                         // getDBTransaction().commit();
                      }catch(Exception e){
                          
                      }
                      return null;
    }
    public String deleteInvoiceHold(String invoiceId,String lineLocationId,String lineNo){
        ApInvoiceLineVORowImpl invoiceholdrow=(ApInvoiceLineVORowImpl)getApInvoiceLineVO1().getCurrentRow();
        ViewCriteria criteriahold=getXXApInvoiceHoldsVO1().getViewCriteria("XXApInvoiceHoldsVOCriteria");
        getXXApInvoiceHoldsVO1().applyViewCriteria(null);
        getXXApInvoiceHoldsVO1().setNamedWhereClauseParam("pInvoiceId", invoiceholdrow.getInvoiceId());
        getXXApInvoiceHoldsVO1().setNamedWhereClauseParam("pLineLocationId", invoiceholdrow.getPoLineLocationId());
        getXXApInvoiceHoldsVO1().addWhereClause(" hold_id is null ");
        getXXApInvoiceHoldsVO1().applyViewCriteria(criteriahold);
        getXXApInvoiceHoldsVO1().executeQuery();
        getXXApInvoiceHoldsVO1().first().remove();
        getDBTransaction().commit();
        return null;
    }

    /**
     * Container's getter for InvoiceReasonCodeVO1.
     * @return InvoiceReasonCodeVO1
     */
    public ViewObjectImpl getInvoiceReasonCodeVO1() {
        return (ViewObjectImpl) findViewObject("InvoiceReasonCodeVO1");
    }

    /**
     * Container's getter for XXInvoiceTotVO1.
     * @return XXInvoiceTotVO1
     */
    public XXInvoiceTotVOImpl getXXInvoiceTotVO1() {
        return (XXInvoiceTotVOImpl) findViewObject("XXInvoiceTotVO1");
    }

    /**
     * Container's getter for XXInvoiceReasonVO1.
     * @return XXInvoiceReasonVO1
     */
    public XXInvoiceReasonVOImpl getXXInvoiceReasonVO1() {
        return (XXInvoiceReasonVOImpl) findViewObject("XXInvoiceReasonVO1");
    }


    /**
     * Container's getter for XXApHoldsVO2.
     * @return XXApHoldsVO2
     */
    public XXApHoldsVOImpl getXXApHoldsVO2() {
        return (XXApHoldsVOImpl) findViewObject("XXApHoldsVO2");
    }

    /**
     * Container's getter for XXApHoldsVO3.
     * @return XXApHoldsVO3
     */
    public XXApHoldsVOImpl getXXApHoldsVO3() {
        return (XXApHoldsVOImpl) findViewObject("XXApHoldsVO3");
    }

    /**
     * Container's getter for XXApInvoiceDetailXXApHoldsVL1.
     * @return XXApInvoiceDetailXXApHoldsVL1
     */
    public ViewLinkImpl getXXApInvoiceDetailXXApHoldsVL1() {
        return (ViewLinkImpl) findViewLink("XXApInvoiceDetailXXApHoldsVL1");
    }
    
    
    /**
     * Container's getter for XXApHoldsVO1.
     * @return XXApHoldsVO1
     */
    public XXApHoldsVOImpl getXXApHoldsVO1() {
        return (XXApHoldsVOImpl) findViewObject("XXApHoldsVO1");
    }

    /**
     * Container's getter for ApInvoiceLineXXApHoldsVL1.
     * @return ApInvoiceLineXXApHoldsVL1
     */
    public ViewLinkImpl getApInvoiceLineXXApHoldsVL1() {
        return (ViewLinkImpl) findViewLink("ApInvoiceLineXXApHoldsVL1");
    }

    /**
     * Container's getter for GeneralInquiryMassUpdateQueryVO1.
     * @return GeneralInquiryMassUpdateQueryVO1
     */
    public GeneralInquiryMassUpdateQueryVOImpl getGeneralInquiryMassUpdateQueryVO1() {
        return (GeneralInquiryMassUpdateQueryVOImpl) findViewObject("GeneralInquiryMassUpdateQueryVO1");
    }

}

