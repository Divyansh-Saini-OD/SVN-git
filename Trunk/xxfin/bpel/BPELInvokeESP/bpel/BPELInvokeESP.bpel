<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Sun Jun 01 07:34:01 EDT 2008
  Author:  cecilia-macean
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="BPELInvokeESP"
         targetNamespace="http://xmlns.oracle.com/BPELInvokeESP"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ns4="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ns7="http://xmlns.oracle.com/pcbpel/adapter/db/GET_ESP_JOB_INFO/"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:ns5="http://xmlns.oracle.com/ODErrorLogger"
         xmlns:client="http://xmlns.oracle.com/BPELInvokeESP"
         xmlns:ns6="ODError"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:ns1="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ns3="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions"
         xmlns:ns2="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:ns10="http://xmlns.oracle.com/TransactionData"
         xmlns:ns8="http://xmlns.oracle.com/pcbpel/adapter/db/BPELEH/XX_BPEL_INVOKE_ESP_PKG/GET_ESP_JOB_INFO/">
  <bpelx:exec import="org.w3c.dom.Element"/>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="client" partnerLinkType="client:BPELInvokeESP"
                 myRole="BPELInvokeESPProvider"
                 partnerRole="BPELInvokeESPRequester"/>
    <partnerLink myRole="ODErrorLoggerRequester" name="ODErrorLogger"
                 partnerRole="ODErrorLoggerProvider"
                 partnerLinkType="ns5:ODErrorLogger"/>
    <partnerLink name="GET_ESP_JOB_INFO" partnerRole="GET_ESP_JOB_INFO_role"
                 partnerLinkType="ns7:GET_ESP_JOB_INFO_plt"/>
  </partnerLinks>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable"
              messageType="client:BPELInvokeESPRequestMessage"/>
    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable"
              messageType="client:BPELInvokeESPResponseMessage"/>
    <variable name="commandOutputExternal" type="xsd:string"/>
    <variable name="error" type="xsd:string"/>
    <variable name="invkCatchAll_initiate"
              messageType="ns5:ODErrorLoggerRequestMessage"/>
    <variable name="ErrorMessageText" type="xsd:string"/>
    <variable name="Exception" messageType="bpelx:RuntimeFaultMessage"/>
    <variable name="ProcessHeader" type="xsd:string"/>
  </variables>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">
    <!-- Receive input from requestor. (Note: This maps to operation defined in BPELInvokeESP.wsdl) -->
    <!-- Generate reply to synchronous request -->
    <scope name="Scope_1">
      <variables>
        <variable name="qualifiedJobName" type="xsd:string"/>
        <variable name="applicationName" type="xsd:string"/>
        <variable name="verb" type="xsd:string"/>
        <variable name="espScriptDirectory" type="xsd:string"/>
        <variable name="espScriptName" type="xsd:string"/>
        <variable name="espScriptFullPath" type="xsd:string"/>
        <variable name="processDomain" type="xsd:string"/>
        <variable name="processName" type="xsd:string"/>
        <variable name="filePattern" type="xsd:string"/>
        <variable name="GET_ESP_JOB_INFO_InputVariable"
                  messageType="ns7:args_in_msg"/>
        <variable name="GET_ESP_JOB_INFO_OutputVariable"
                  messageType="ns7:args_out_msg"/>
      </variables>
      <faultHandlers>
        <catchAll>
          <sequence name="ErrorLogger">
            <assign name="asnCatchAll">
              <copy>
                <from expression="concat('Error encountered while executing BPELInvokeESP with parameters: Process Domain: ', bpws:getVariableData('processDomain'), ', Process Name: ', bpws:getVariableData('processName'), ' and File Pattern: ', bpws:getVariableData('filePattern'), '. ESP Script used is: ' , bpws:getVariableData('espScriptFullPath'), '. It is invoked with Qualified Job Name: ', bpws:getVariableData('qualifiedJobName'), ', Application Name: ', bpws:getVariableData('applicationName'), ' and Verb: ', bpws:getVariableData('verb'))"/>
                <to variable="ErrorMessageText"/>
              </copy>
              <copy>
                <from expression="ora:getProcessId()"/>
                <to variable="invkCatchAll_initiate" part="payload"
                    query="/ns6:ErrorData/ns6:ProcessInfo/ns6:BusinessProcessName"/>
              </copy>
              <copy>
                <from expression="ora:getInstanceId()"/>
                <to variable="invkCatchAll_initiate" part="payload"
                    query="/ns6:ErrorData/ns6:ProcessInfo/ns6:BusinessProcessId"/>
              </copy>
              <copy>
                <from expression="ora:getDomainId()"/>
                <to variable="invkCatchAll_initiate" part="payload"
                    query="/ns6:ErrorData/ns6:ProcessInfo/ns6:BusinessProcessDomain"/>
              </copy>
              <copy>
                <from expression="ora:getProcessURL()"/>
                <to variable="invkCatchAll_initiate" part="payload"
                    query="/ns6:ErrorData/ns6:ProcessInfo/ns6:SystemName"/>
              </copy>
              <copy>
                <from expression="xp20:current-dateTime()"/>
                <to variable="invkCatchAll_initiate" part="payload"
                    query="/ns6:ErrorData/ns6:ErrorDetails/ns6:ErrorDateTime"/>
              </copy>
              <copy>
                <from expression="'Catch All on the Main Sequence'"/>
                <to variable="invkCatchAll_initiate" part="payload"
                    query="/ns6:ErrorData/ns6:ProcessInfo/ns6:BusinessProcessStep"/>
              </copy>
              <copy>
                <from expression="ora:getFaultName()"/>
                <to variable="invkCatchAll_initiate" part="payload"
                    query="/ns6:ErrorData/ns6:ErrorDetails/ns6:ErrorCode"/>
              </copy>
              <copy>
                <from variable="ErrorMessageText"/>
                <to variable="invkCatchAll_initiate" part="payload"
                    query="/ns6:ErrorData/ns6:ErrorDetails/ns6:ErrorDescription"/>
              </copy>
              <copy>
                <from expression="ora:getFaultAsString()"/>
                <to variable="invkCatchAll_initiate" part="payload"
                    query="/ns6:ErrorData/ns6:ErrorDetails/ns6:ErrorText"/>
              </copy>
              <copy>
                <from expression="'system'"/>
                <to variable="invkCatchAll_initiate" part="payload"
                    query="/ns6:ErrorData/ns6:ErrorDetails/ns6:ErrorType"/>
              </copy>
              <copy>
                <from expression="'fatal'"/>
                <to variable="invkCatchAll_initiate" part="payload"
                    query="/ns6:ErrorData/ns6:ErrorDetails/ns6:ErrorSeverity"/>
              </copy>
              <copy>
                <from expression="'Y'"/>
                <to variable="invkCatchAll_initiate" part="payload"
                    query="/ns6:ErrorData/ns6:Notification/ns6:sendNotification"/>
              </copy>
            </assign>
            <invoke name="invkCatchAll" partnerLink="ODErrorLogger"
                    portType="ns5:ODErrorLogger" operation="initiate"
                    inputVariable="invkCatchAll_initiate"/>
            <terminate name="TerminateExceptionCaught"/>
          </sequence>
        </catchAll>
      </faultHandlers>
      <sequence name="Process">
        <receive name="receiveInput" partnerLink="client"
                 portType="client:BPELInvokeESP" operation="initiate"
                 variable="inputVariable" createInstance="yes"/>
        <scope name="setProcessHeader">
          <sequence name="Sequence_2">
            <assign name="initializeInstanceTitle">
              <copy>
                <from expression="substring( concat( 'Variables: ', bpws:getVariableData('inputVariable','payload','/client:BPELInvokeESPProcessRequest/client:filePattern'),', ', bpws:getVariableData('inputVariable','payload','/client:BPELInvokeESPProcessRequest/client:processName'), ',', bpws:getVariableData('inputVariable','payload','/client:BPELInvokeESPProcessRequest/client:processDomain') ),1,50)"/>
                <to variable="ProcessHeader"/>
              </copy>
            </assign>
            <bpelx:exec name="setTitle" language="java" version="1.5">
              <![CDATA[try {             
  String title = (String)getVariableData("ProcessHeader");             
  setTitle(title);             
  addAuditTrailEntry(title) ;             
} catch (Exception ex) {             
  addAuditTrailEntry(ex.toString());             
  ex.printStackTrace();             
}]]>
            </bpelx:exec>
          </sequence>
        </scope>
        <assign name="InitializeScriptParameters">
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/client:BPELInvokeESPProcessRequest/client:qualifiedJobName"/>
            <to variable="qualifiedJobName"/>
          </copy>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/client:BPELInvokeESPProcessRequest/client:applicationName"/>
            <to variable="applicationName"/>
          </copy>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/client:BPELInvokeESPProcessRequest/client:verb"/>
            <to variable="verb"/>
          </copy>
          <copy>
            <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/BPELInvokeESP/ESP/ScriptDirectory')"/>
            <to variable="espScriptDirectory"/>
          </copy>
          <copy>
            <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/BPELInvokeESP/ESP/ScriptName')"/>
            <to variable="espScriptName"/>
          </copy>
          <copy>
            <from expression="concat(bpws:getVariableData('espScriptDirectory'), bpws:getVariableData('espScriptName'))"/>
            <to variable="espScriptFullPath"/>
          </copy>
          <copy>
            <from expression="'Initialize'"/>
            <to variable="commandOutputExternal"/>
          </copy>
          <copy>
            <from expression="''"/>
            <to variable="error"/>
          </copy>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/client:BPELInvokeESPProcessRequest/client:processDomain"/>
            <to variable="processDomain"/>
          </copy>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/client:BPELInvokeESPProcessRequest/client:processName"/>
            <to variable="processName"/>
          </copy>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/client:BPELInvokeESPProcessRequest/client:filePattern"/>
            <to variable="filePattern"/>
          </copy>
        </assign>
        <switch name="Switch_1">
          <case condition="(bpws:getVariableData('qualifiedJobName') != string('')) and (bpws:getVariableData('applicationName') != string(''))">
            <bpelx:annotation>
              <bpelx:pattern>JobInfoPassed</bpelx:pattern>
            </bpelx:annotation>
            <assign name="JobInfo">
              <copy>
                <from expression="'Job Info Passed'"/>
                <to variable="commandOutputExternal"/>
              </copy>
            </assign>
          </case>
          <otherwise>
            <sequence name="Sequence_2">
              <assign name="InitializeGETESPJOBINFORequest">
                <copy>
                  <from variable="inputVariable" part="payload"
                        query="/client:BPELInvokeESPProcessRequest/client:processDomain"/>
                  <to variable="GET_ESP_JOB_INFO_InputVariable"
                      part="InputParameters"
                      query="/ns8:InputParameters/ns8:P_PROCESS_DOMAIN"/>
                </copy>
                <copy>
                  <from variable="inputVariable" part="payload"
                        query="/client:BPELInvokeESPProcessRequest/client:processName"/>
                  <to variable="GET_ESP_JOB_INFO_InputVariable"
                      part="InputParameters"
                      query="/ns8:InputParameters/ns8:P_PROCESS_NAME"/>
                </copy>
                <copy>
                  <from variable="inputVariable" part="payload"
                        query="/client:BPELInvokeESPProcessRequest/client:filePattern"/>
                  <to variable="GET_ESP_JOB_INFO_InputVariable"
                      part="InputParameters"
                      query="/ns8:InputParameters/ns8:P_FILE_PATTERN"/>
                </copy>
              </assign>
              <invoke name="Invoke_GETESPJOBINFO" partnerLink="GET_ESP_JOB_INFO"
                      portType="ns7:GET_ESP_JOB_INFO_ptt"
                      operation="GET_ESP_JOB_INFO"
                      inputVariable="GET_ESP_JOB_INFO_InputVariable"
                      outputVariable="GET_ESP_JOB_INFO_OutputVariable"/>
              <assign name="GetESPJobInfoResult">
                <copy>
                  <from variable="GET_ESP_JOB_INFO_OutputVariable"
                        part="OutputParameters"
                        query="/ns8:OutputParameters/ns8:X_JOB_NAME"/>
                  <to variable="qualifiedJobName"/>
                </copy>
                <copy>
                  <from variable="GET_ESP_JOB_INFO_OutputVariable"
                        part="OutputParameters"
                        query="/ns8:OutputParameters/ns8:X_ESP_APPLICATION"/>
                  <to variable="applicationName"/>
                </copy>
                <copy>
                  <from variable="GET_ESP_JOB_INFO_OutputVariable"
                        part="OutputParameters"
                        query="/ns8:OutputParameters/ns8:X_ESP_VERB"/>
                  <to variable="verb"/>
                </copy>
              </assign>
            </sequence>
          </otherwise>
        </switch>
        <switch name="Switch_2">
          <case condition="bpws:getVariableData('qualifiedJobName') != ''  and  bpws:getVariableData('applicationName') != '' and bpws:getVariableData('verb') != ''">
            <bpelx:annotation>
              <bpelx:pattern>ESP Params found</bpelx:pattern>
            </bpelx:annotation>
            <sequence name="Sequence_3">
              <bpelx:exec name="InvokeESPScript" language="java" version="1.5">
                <![CDATA[/**              
    This java code invokes a script that launches the ESP application with a qualifiedJobName,              
    applicationName and a verb to specify the action to be executed              
    */              
              
    /** Read BPEL variables*/              
    addAuditTrailEntry("Initializing Strings");                 
    String espScriptFullPath = (String) getVariableData("espScriptFullPath");                  
    String qualifiedJobName = (String) getVariableData("qualifiedJobName");     
    String applicationName = (String) getVariableData("applicationName");                
    String verb = (String)getVariableData("verb");                
              
    /** Initialize the command line we need to invoke*/              
    String[] commandLine = { espScriptFullPath, qualifiedJobName, applicationName, verb };                
    addAuditTrailEntry("Command Line = " + commandLine[0] + " " + commandLine[1] + " " + commandLine[2] + " " + commandLine[3]);                
              
    /** Initialize the return code*/              
    int returnCode = 1;                
    String commandOutput = null;                
              
    /** Invokes the Java Runtime class in order to interface with the environment in which               
    BPEL application is running. The current runtime is obtained from the getRuntime method. */              
    try {                
        Process proc = Runtime.getRuntime().exec(commandLine);                
        /**It gets the input stream of the subprocess*/              
        BufferedReader outputStream = new BufferedReader(new InputStreamReader(proc.getInputStream()));                
                  
        String line = "";                
        StringBuffer commandOutputBuffer = new StringBuffer();                   
        try {                
            while ((line = outputStream.readLine()) != null)               
                commandOutputBuffer.append(line).append("\n");                
            commandOutput = commandOutputBuffer.toString();                
            addAuditTrailEntry("After execution the command output is: " + commandOutput);                
        } catch (IOException e) {                
            addAuditTrailEntry("Errors encountered with string buffer: " + e);           
            setVariableData("error", e.getMessage());        
        }                
                      
        /** It causes the current thread to wait, if necessary, until the process represented               
        by this Process object has terminated.*/              
        if ( proc.waitFor() !=  0){
            returnCode = proc.exitValue();
            setVariableData("error", returnCode+"");
            addAuditTrailEntry("Process exit value is: " + returnCode);     
            }
        outputStream.close();                
    } catch (IOException e) {            
        e.printStackTrace();          
        addAuditTrailEntry("Errors encountered with running the command: " + e);           
        setVariableData("error", e.getMessage());        
    } catch (InterruptedException e) {         
        addAuditTrailEntry("InterruptedException caught " + e);                
        setVariableData("error", e.getMessage());        
    } catch (Exception e) {         
        addAuditTrailEntry("Exception caught " + e);         
        setVariableData("error", e.getMessage());        
        }             

    commandOutput = "ESPMgr response is: " + commandOutput;                 
    setVariableData("commandOutputExternal",commandOutput);]]>
              </bpelx:exec>
              <switch name="ESPExceptionSwitch">
                <case condition="string(bpws:getVariableData('error')) != ''">
                  <bpelx:annotation>
                    <bpelx:pattern>ESPInvocationException</bpelx:pattern>
                  </bpelx:annotation>
                  <sequence name="Sequence_1">
                    <assign name="InitializeException">
                      <copy>
                        <from expression="string('Exception caught while invoking ESPMgr')"/>
                        <to variable="Exception" part="summary"/>
                      </copy>
                      <copy>
                        <from variable="commandOutputExternal"/>
                        <to variable="Exception" part="detail"/>
                      </copy>
                      <copy>
                        <from variable="error"/>
                        <to variable="Exception" part="code"/>
                      </copy>
                    </assign>
                    <throw name="ThrowESPInvocationException"
                           faultName="bpelx:remoteFault"
                           faultVariable="Exception"/>
                  </sequence>
                </case>
                <otherwise>
                  <assign name="InitializeOutput">
                    <copy>
                      <from variable="commandOutputExternal"/>
                      <to variable="outputVariable" part="payload"
                          query="/client:BPELInvokeESPProcessResponse/client:result"/>
                    </copy>
                  </assign>
                </otherwise>
              </switch>
            </sequence>
          </case>
          <otherwise>
            <sequence name="Sequence_4">
              <assign name="NoDataFound">
                <copy>
                  <from expression="concat('No data found in the table for Process Name: ', bpws:getVariableData('processName'), ', Process Domain: ', bpws:getVariableData('processDomain'), ' and File Pattern: ', bpws:getVariableData('filePattern'), '.')"/>
                  <to variable="Exception" part="detail"/>
                </copy>
                <copy>
                  <from expression="'NO DATA FOUND'"/>
                  <to variable="Exception" part="summary"/>
                </copy>
              </assign>
              <throw name="NoDataFound" faultName="bpelx:remoteFault"
                     faultVariable="Exception"/>
            </sequence>
          </otherwise>
        </switch>
      </sequence>
    </scope>
    <bpelx:exec import="java.io.InputStreamReader"/>
    <bpelx:exec import="java.io.BufferedReader"/>
    <bpelx:exec import="java.io.IOException"/>
    <bpelx:exec import="java.io.FileInputStream"/>
  </sequence>
</process>