<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Sat May 16 06:21:43 EDT 2009
  Author:  Cecilia-Macean
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="GetFileInfo"
         targetNamespace="http://xmlns.oracle.com/GetFileInfo"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ns4="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ns1="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:ns3="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions"
         xmlns:ns2="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:client="http://xmlns.oracle.com/GetFileInfo"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc">
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="client" partnerLinkType="client:GetFileInfo"
                 myRole="GetFileInfoProvider"/>
  </partnerLinks>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable"
              messageType="client:GetFileInfoRequestMessage"/>
    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable"
              messageType="client:GetFileInfoResponseMessage"/>
    <variable name="ProcessHeader" type="xsd:string"/>
    <variable name="scriptName" type="xsd:string"/>
    <variable name="scriptNameFullPath" type="xsd:string"/>
    <variable name="fileName" type="xsd:string"/>
    <variable name="error" type="xsd:string"/>
    <variable name="Exception" messageType="bpelx:RuntimeFaultMessage"/>
    <variable name="commandOutputExternal" type="xsd:string"/>
    <variable name="fileNameRead" type="xsd:string"/>
    <variable name="lastModifiedDateTime" type="xsd:string"/>
    <variable name="fileSize" type="xsd:string"/>
    <variable name="numberOfLines" type="xsd:string"/>
    <variable name="lineLength" type="xsd:string"/>
  </variables>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">
    <!-- Receive input from requestor. (Note: This maps to operation defined in GetFileInfo.wsdl) -->
    <receive name="receiveInput" partnerLink="client"
             portType="client:GetFileInfo" operation="process"
             variable="inputVariable" createInstance="yes"/>
    <scope name="setProcessHeader">
      <sequence name="Sequence_1">
        <assign name="initializeInstanceTitle">
          <copy>
            <from expression="substring( concat( 'File: ', bpws:getVariableData('inputVariable','payload','/client:GetFileInfoProcessRequest/client:fileName')),1,50)"/>
            <to variable="ProcessHeader"/>
          </copy>
        </assign>
        <bpelx:exec name="setTitle" language="java" version="1.5">
          <![CDATA[try {              
  String title = (String)getVariableData("ProcessHeader");              
  setTitle(title);              
  addAuditTrailEntry(title) ;              
} catch (Exception ex) {              
  addAuditTrailEntry(ex.toString());              
  ex.printStackTrace();              
}]]>
        </bpelx:exec>
      </sequence>
    </scope>
    <assign name="InitializeScriptParameters">
      <copy>
        <from expression="'getfilename'"/>
        <to variable="scriptName"/>
      </copy>
      <copy>
        <from variable="inputVariable" part="payload"
              query="/client:GetFileInfoProcessRequest/client:fileName"/>
        <to variable="fileName"/>
      </copy>
      <copy>
        <from expression="'Initialize'"/>
        <to variable="commandOutputExternal"/>
      </copy>
      <copy>
        <from expression="''"/>
        <to variable="error"/>
      </copy>
    </assign>
    <switch name="ValidScriptSwitch">
      <case condition="bpws:getVariableData('fileName') != ''  ">
        <bpelx:annotation>
          <bpelx:pattern>Valid script name</bpelx:pattern>
        </bpelx:annotation>
        <sequence name="Sequence_2">
          <assign name="getScriptFullPath">
            <copy>
              <from expression="ora:doc('${server_url}/xmllib/fin/GlobalParameters.xml','/GlobalParameters/GetFileName/ScriptFullName')"/>
              <to variable="scriptNameFullPath"/>
            </copy>
          </assign>
          <bpelx:exec name="InvokeScript" language="java" version="1.5">
            <![CDATA[/**                 
    This java code invokes a bash script with parameters  
    */                 
                 
    /** Read BPEL variables*/                 
    addAuditTrailEntry("Initializing Strings");                    
    String scriptFullPath = (String) getVariableData("scriptNameFullPath");                     
    String fileName = (String) getVariableData("fileName");        
                 
    /** Initialize the command line we need to invoke*/                 
    String[] commandLine = { scriptFullPath, fileName };                   
    addAuditTrailEntry("Command Line = " + commandLine[0] + " " + commandLine[1]);                   
                 
    /** Initialize the return code*/                 
    int returnCode = 1;                   
    String commandOutput = null;                   
                 
    /** Invokes the Java Runtime class in order to interface with the environment in which                  
    BPEL application is running. The current runtime is obtained from the getRuntime method. */                 
    try {                   
        Process proc = Runtime.getRuntime().exec(commandLine);                   
        /**It gets the input stream of the subprocess*/                 
        BufferedReader outputStream = new BufferedReader(new InputStreamReader(proc.getInputStream()));                   
                     
        String line = "";                   
        StringBuffer commandOutputBuffer = new StringBuffer();                      
        try {                   
            while ((line = outputStream.readLine()) != null)                  
                commandOutputBuffer.append(line).append("\n");                   
            commandOutput = commandOutputBuffer.toString();                   
            addAuditTrailEntry("After execution the command output is: " + commandOutput);                   
        } catch (IOException e) {                   
            addAuditTrailEntry("Errors encountered with string buffer: " + e);              
            setVariableData("error", e.getMessage());           
        }                   
                         
        /** It causes the current thread to wait, if necessary, until the process represented                  
        by this Process object has terminated.*/                 
        if ( proc.waitFor() !=  0){   
            returnCode = proc.exitValue();   
            setVariableData("error", returnCode+"");   
            addAuditTrailEntry("Process exit value is: " + returnCode);        
            }   
        outputStream.close();                   
    } catch (IOException e) {               
        e.printStackTrace();             
        addAuditTrailEntry("Errors encountered with running the command: " + e);              
        setVariableData("error", e.getMessage());           
    } catch (InterruptedException e) {            
        addAuditTrailEntry("InterruptedException caught " + e);                   
        setVariableData("error", e.getMessage());           
    } catch (Exception e) {            
        addAuditTrailEntry("Exception caught " + e);            
        setVariableData("error", e.getMessage());           
        }                
   
    setVariableData("commandOutputExternal",commandOutput);]]>
          </bpelx:exec>
          <switch name="ExceptionSwitch">
            <case condition="string(bpws:getVariableData('error')) != ''">
              <bpelx:annotation>
                <bpelx:pattern>ScriptInvocationException</bpelx:pattern>
              </bpelx:annotation>
              <sequence name="Sequence_3">
                <assign name="InitializeException">
                  <copy>
                    <from expression="string('Exception caught while invoking the script')"/>
                    <to variable="Exception" part="summary"/>
                  </copy>
                  <copy>
                    <from variable="commandOutputExternal"/>
                    <to variable="Exception" part="detail"/>
                  </copy>
                  <copy>
                    <from variable="error"/>
                    <to variable="Exception" part="code"/>
                  </copy>
                </assign>
                <throw name="ThrowScriptInvocationException"
                       faultName="bpelx:remoteFault" faultVariable="Exception"/>
              </sequence>
            </case>
            <otherwise>
              <sequence name="Sequence_5">
                <bpelx:exec name="ParseResponse" language="java" version="1.5">
                  <![CDATA[/**                               
    This java code parses the bash shell response               
    */                               
                               
    /** Read BPEL variables*/                               
    addAuditTrailEntry("reading variables");                                  
    String response = (String) getVariableData("commandOutputExternal");                                   
    addAuditTrailEntry("Response = " + response);                                 
             
  /* delimeter */                
  String delimeter = "\n";                
  /* given string will be splitted by the argument delimeter provided. */                
  String[] temp = response.split(delimeter);           
  String[] temp1;         
  String size="";       
  String lastModifiedDate="";       
  String lastModifiedTime="";       
  String fileName="";       
  String numberOfLines="";       
  String longestLineLength="";           
         
  /* print splitted substrings */                
  for(int i =0; i < temp.length ; i++) {                 
        addAuditTrailEntry("Line: " + i + ": " + temp[i]);         
        delimeter = " ";         
        temp1 = temp[i].split(delimeter);         
        for(int j =0; j < temp1.length ; j++) {          
            addAuditTrailEntry("Word: " + j + ": " + temp1[j]);         
            if (i == 0 && j == 4) size = temp1[j] ;      
            if (i == 0 && j == 5) lastModifiedDate = temp1[j] ;      
            if (i == 0 && j == 6) lastModifiedTime = temp1[j] ;      
            if (i == 0 && j == 7) fileName = temp1[j] ;      
            if (i == 1 && j == 0) numberOfLines = temp1[j] ;      
            if (i == 1 && j == 2) longestLineLength = temp1[j] ;      
        }         
   }       
   addAuditTrailEntry("==============================================");      
   addAuditTrailEntry("fileName: " + fileName);      
   addAuditTrailEntry("lastModified: " + lastModifiedDate + "/"+ lastModifiedTime);        
   addAuditTrailEntry("file size: " + size);      
   addAuditTrailEntry("numberOfLines: " + numberOfLines);    
   addAuditTrailEntry("longest line length: " + longestLineLength);   
   addAuditTrailEntry("==============================================");  
   
   setVariableData("fileNameRead", fileName);     
   setVariableData("lastModifiedDateTime", lastModifiedDate + "/"+ lastModifiedTime);     
   setVariableData("fileSize", size);       
   setVariableData("numberOfLines", numberOfLines);     
   setVariableData("lineLength", longestLineLength);]]>
                </bpelx:exec>
                <assign name="InitializeOutput">
                  <copy>
                    <from variable="commandOutputExternal"/>
                    <to variable="outputVariable" part="payload"
                        query="/client:GetFileInfoProcessResponse/client:result"/>
                  </copy>
                  <copy>
                    <from variable="fileNameRead"/>
                    <to variable="outputVariable" part="payload"
                        query="/client:GetFileInfoProcessResponse/client:fileName"/>
                  </copy>
                  <copy>
                    <from variable="lastModifiedDateTime"/>
                    <to variable="outputVariable" part="payload"
                        query="/client:GetFileInfoProcessResponse/client:lastModified"/>
                  </copy>
                  <copy>
                    <from variable="fileSize"/>
                    <to variable="outputVariable" part="payload"
                        query="/client:GetFileInfoProcessResponse/client:fileSize"/>
                  </copy>
                  <copy>
                    <from variable="numberOfLines"/>
                    <to variable="outputVariable" part="payload"
                        query="/client:GetFileInfoProcessResponse/client:numberOfLines"/>
                  </copy>
                  <copy>
                    <from variable="lineLength"/>
                    <to variable="outputVariable" part="payload"
                        query="/client:GetFileInfoProcessResponse/client:longestLineLength"/>
                  </copy>
                </assign>
              </sequence>
            </otherwise>
          </switch>
        </sequence>
      </case>
      <otherwise>
        <sequence name="Sequence_4">
          <assign name="NoDataFound">
            <copy>
              <from expression="concat('No file name provided')"/>
              <to variable="Exception" part="detail"/>
            </copy>
            <copy>
              <from expression="'NO FILE NAME'"/>
              <to variable="Exception" part="summary"/>
            </copy>
          </assign>
          <throw name="NoFileName" faultName="bpelx:remoteFault"
                 faultVariable="Exception"/>
        </sequence>
      </otherwise>
    </switch>
    <!-- Generate reply to synchronous request -->
    <reply name="replyOutput" partnerLink="client" portType="client:GetFileInfo"
           operation="process" variable="outputVariable"/>
    <bpelx:exec import="java.io.InputStreamReader"/>
    <bpelx:exec import="java.io.BufferedReader"/>
    <bpelx:exec import="java.io.IOException"/>
    <bpelx:exec import="java.io.FileInputStream"/>
  </sequence>
</process>