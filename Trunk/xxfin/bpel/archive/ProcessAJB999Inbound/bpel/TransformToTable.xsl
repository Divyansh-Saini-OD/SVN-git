<?xml version="1.0" encoding="UTF-8" ?>
<?oracle-xsl-mapper
  <!-- SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY. -->
  <mapSources>
    <source type="XSD">
      <schema location="../../../../Office%20Depot/BPEL_Projects/ProcessAJB999Inbound/bpel/AJB999_2.xsd"/>
      <rootElement name="Root-Element" namespace="http://TargetNamespace.com/InboundService"/>
    </source>
  </mapSources>
  <mapTargets>
    <target type="XSD">
      <schema location="../../../../Office%20Depot/BPEL_Projects/ProcessAJB999Inbound/bpel/ServiceTableInsert_table.xsd"/>
      <rootElement name="XxCeAjb999Collection" namespace="http://xmlns.oracle.com/pcbpel/adapter/db/top/ServiceTableInsert"/>
    </target>
  </mapTargets>
  <!-- GENERATED BY ORACLE XSL MAPPER 10.1.3.3.0(build 070615.0525) AT [WED DEC 12 14:41:20 EST 2007]. -->
?>
<xsl:stylesheet version="1.0"
                xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
                xmlns:ehdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
                xmlns:nxsd="http://xmlns.oracle.com/pcbpel/nxsd"
                xmlns:ns0="http://xmlns.oracle.com/pcbpel/adapter/db/top/ServiceTableInsert"
                xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
                xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:ora="http://schemas.oracle.com/xpath/extension"
                xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
                xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
                xmlns:tns="http://TargetNamespace.com/InboundService"
                exclude-result-prefixes="xsl xsd nxsd tns ns0 bpws ehdr hwf xp20 xref ora ids orcl">
  <xsl:template match="/">
    <ns0:XxCeAjb999Collection>
      <xsl:for-each select="/tns:Root-Element/tns:AJB999">
        <ns0:XxCeAjb999>
          <ns0:recordType>
            <xsl:value-of select="tns:FIPayReconRecord"/>
          </ns0:recordType>
          <ns0:storeNum>
            <xsl:value-of select="tns:StoreNumber"/>
          </ns0:storeNum>
          <ns0:providerType>
            <xsl:value-of select="tns:TenderType"/>
          </ns0:providerType>
          <ns0:submissionDate>
            <xsl:value-of select="tns:SubmissionDate"/>
          </ns0:submissionDate>
          <ns0:countryCode>
            <xsl:value-of select="tns:CountryCode"/>
          </ns0:countryCode>
          <ns0:currencyCode>
            <xsl:value-of select="tns:CurrencyCode"/>
          </ns0:currencyCode>
          <ns0:processorId>
            <xsl:value-of select="tns:ProcessorID"/>
          </ns0:processorId>
          <ns0:bankRecId>
            <xsl:value-of select="tns:BankRecId"/>
          </ns0:bankRecId>
          <ns0:cardtype>
            <xsl:value-of select="tns:CardType"/>
          </ns0:cardtype>
          <xsl:if test="string-length(tns:NetSalesAmount) != 0.0">
            <ns0:netSales>
              <xsl:value-of select="tns:NetSalesAmount div 100.0"/>
            </ns0:netSales>
          </xsl:if>
          <xsl:if test="string-length(tns:NetRejectAmount) != 0.0">
            <ns0:netRejectAmt>
              <xsl:value-of select="tns:NetRejectAmount div 100.0"/>
            </ns0:netRejectAmt>
          </xsl:if>
          <xsl:if test="string-length(tns:ChargeBackAdjustmentAmount) != 0.0">
            <ns0:chargebackAmt>
              <xsl:value-of select="tns:ChargeBackAdjustmentAmount div 100.0"/>
              <!--    <xsl:value-of select="concat(substring(tns:ChargeBackAdjustmentAmount,string-length(tns:ChargeBackAdjustmentAmount),1.0),substring(tns:ChargeBackAdjustmentAmount,1.0,(string-length(tns:ChargeBackAdjustmentAmount) - 1.0)))"/> -->
            </ns0:chargebackAmt>
          </xsl:if>
          <xsl:if test="string-length(tns:DiscountAmount) != 0.0">
            <ns0:discountAmt>
              <xsl:value-of select="tns:DiscountAmount div 100.0"/>
            </ns0:discountAmt>
          </xsl:if>
          <xsl:if test="string-length(tns:NetDepositAmount) != 0.0">
            <ns0:netDepositAmt>
              <xsl:value-of select="tns:NetDepositAmount div 100.0"/>
            </ns0:netDepositAmt>
          </xsl:if>
          <ns0:creationDate>
            <xsl:value-of select="xp20:current-dateTime()"/>
          </ns0:creationDate>
          <ns0:createdBy>
            <xsl:text disable-output-escaping="no">3</xsl:text>
          </ns0:createdBy>
          <ns0:lastUpdateDate>
            <xsl:value-of select="xp20:current-dateTime()"/>
          </ns0:lastUpdateDate>
          <ns0:lastUpdatedBy>
            <xsl:text disable-output-escaping="no">3</xsl:text>
          </ns0:lastUpdatedBy>
          <xsl:if test="string-length(tns:MONTHLY_DISCOUNT_AMT) != 0.0">
            <ns0:monthlyDiscountAmt>
              <xsl:value-of select="tns:MONTHLY_DISCOUNT_AMT div 100.0"/>
            </ns0:monthlyDiscountAmt>
          </xsl:if>
          <xsl:if test="string-length(tns:MONTHLY_ASSESSMENT_FEE) != 0.0">
            <ns0:monthlyAssessmentFee>
              <xsl:value-of select="tns:MONTHLY_ASSESSMENT_FEE div 100.0"/>
            </ns0:monthlyAssessmentFee>
          </xsl:if>
          <xsl:if test="string-length(tns:DEPOSIT_HOLD_AMT) != 0.0">
            <ns0:depositHoldAmt>
              <xsl:value-of select="tns:DEPOSIT_HOLD_AMT div 100.0"/>
            </ns0:depositHoldAmt>
          </xsl:if>
          <xsl:if test="string-length(tns:DEPOSIT_RELEASE_AMT) != 0.0">
            <ns0:depositReleaseAmt>
              <xsl:value-of select="tns:DEPOSIT_RELEASE_AMT div 100.0"/>
            </ns0:depositReleaseAmt>
          </xsl:if>
          <xsl:if test="string-length(tns:SERVICE_FEE) != 0.0">
            <ns0:serviceFee>
              <xsl:value-of select="tns:SERVICE_FEE div 100.0"/>
            </ns0:serviceFee>
          </xsl:if>
          <xsl:if test="string-length(tns:ADJ_FEE) != 0.0">
            <ns0:adjFee>
              <xsl:value-of select="tns:ADJ_FEE div 100.0"/>
            </ns0:adjFee>
          </xsl:if>
          <xsl:if test="string-length(tns:COST_FUNDS_AMT) != 0.0">
            <ns0:costFundsAmt>
              <xsl:value-of select="tns:COST_FUNDS_AMT div 100.0"/>
            </ns0:costFundsAmt>
          </xsl:if>
          <ns0:costFundsAlphaCode>
            <xsl:value-of select="tns:COST_FUNDS_ALPHA_CODE"/>
          </ns0:costFundsAlphaCode>
          <ns0:costFundsNumCode>
            <xsl:value-of select="tns:COST_FUNDS_NUM_CODE"/>
          </ns0:costFundsNumCode>
          
          <xsl:if test="string-length(tns:RESERVED_AMT) != 0.0">
            <ns0:reservedAmt>
              <xsl:value-of select="tns:RESERVED_AMT div 100.0"/>
            </ns0:reservedAmt>
          </xsl:if>
          
          <ns0:reservedAmtAlphaCode>
            <xsl:value-of select="tns:RESERVED_AMT_ALPHA_CODE"/>
          </ns0:reservedAmtAlphaCode>
          <ns0:reservedAmtNumCode>
            <xsl:value-of select="tns:RESERVED_AMT_NUM_CODE"/>
          </ns0:reservedAmtNumCode>
          <ns0:sequenceId999>
            <xsl:value-of select='orcl:sequence-next-val("XXFIN.xx_ce_ajb999_s","jdbc/bpel_ebs_apps_ds")'/>
          </ns0:sequenceId999>
        </ns0:XxCeAjb999>
      </xsl:for-each>
    </ns0:XxCeAjb999Collection>
  </xsl:template>
</xsl:stylesheet>
