// !DO NOT EDIT THIS FILE!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.3.0, build 070610.1800.23513)

package servicestatusclient.proxy.runtime;

import oracle.j2ee.ws.client.BasicService;
import oracle.j2ee.ws.common.encoding.*;
import oracle.j2ee.ws.common.encoding.simpletype.*;
import oracle.j2ee.ws.common.encoding.soap.*;
import oracle.j2ee.ws.common.encoding.literal.*;
import oracle.j2ee.ws.common.soap.SOAPVersion;
import oracle.j2ee.ws.common.soap.SOAPEncodingConstants;
import oracle.j2ee.ws.common.wsdl.document.schema.SchemaConstants;
import javax.xml.rpc.*;
import javax.xml.rpc.encoding.*;
import javax.xml.namespace.QName;

public class ServiceOrderStatusInquiryService_SerializerRegistry extends SerializerRegistryBase implements SerializerConstants {
    public ServiceOrderStatusInquiryService_SerializerRegistry() {
    }
    
    public TypeMappingRegistry getRegistry() {
        TypeMappingRegistry registry = BasicService.createStandardTypeMappingRegistry();
        TypeMapping mapping11 = registry.getTypeMapping(SOAPEncodingConstants.getSOAPEncodingConstants(SOAPVersion.SOAP_11).getURIEncoding());
        TypeMapping mapping = registry.getTypeMapping("");
        {
            QName type = new QName("http://gsidev01/ServiceStatusInquiryWS.wsdl/types/", "XxGlbSitekeyRecTypeBase");
            CombinedSerializer serializer = new servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.runtime.XxGlbSitekeyRecTypeBase_InterfaceSOAPSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.XxGlbSitekeyRecTypeBase.class, type, serializer);
        }
        {
            QName type = new QName("http://gsidev01/ServiceStatusInquiryWS.wsdl/types/", "XxCsSrRecTypeUser");
            CombinedSerializer serializer = new servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.runtime.XxCsSrRecTypeUser_LiteralSerializer(type, ENCODE_TYPE);
            registerSerializer(mapping,servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.XxCsSrRecTypeUser.class, type, serializer);
        }
        {
            QName type = new QName("http://gsidev01/ServiceStatusInquiryWS.wsdl/types/", "XxCsSrRecTypeBase");
            CombinedSerializer serializer = new servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.runtime.XxCsSrRecTypeBase_InterfaceSOAPSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.XxCsSrRecTypeBase.class, type, serializer);
        }
        {
            QName type = new QName("http://gsidev01/ServiceStatusInquiryWS.wsdl/types/", "XxCsSrOrderRecTypeBase");
            CombinedSerializer serializer = new servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.runtime.XxCsSrOrderRecTypeBase_InterfaceSOAPSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.XxCsSrOrderRecTypeBase.class, type, serializer);
        }
        {
            QName type = new QName("http://gsidev01/ServiceStatusInquiryWS.wsdl/types/", "searchServicerequestElement");
            CombinedSerializer serializer = new servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.runtime.SearchServicerequestElement_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.SearchServicerequestElement.class, type, serializer);
        }
        {
            QName type = new QName("http://gsidev01/ServiceStatusInquiryWS.wsdl/types/", "XxGlbSitekeyRecTypeUser");
            CombinedSerializer serializer = new servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.runtime.XxGlbSitekeyRecTypeUser_LiteralSerializer(type, ENCODE_TYPE);
            registerSerializer(mapping,servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.XxGlbSitekeyRecTypeUser.class, type, serializer);
        }
        {
            QName type = new QName("http://gsidev01/ServiceStatusInquiryWS.wsdl/types/", "XxCsSrOrderRecTypeUser");
            CombinedSerializer serializer = new servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.runtime.XxCsSrOrderRecTypeUser_LiteralSerializer(type, ENCODE_TYPE);
            registerSerializer(mapping,servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.XxCsSrOrderRecTypeUser.class, type, serializer);
        }
        {
            QName type = new QName("http://gsidev01/ServiceStatusInquiryWS.wsdl/types/", "ServiceStatusInquiryWSUser_searchServicerequest_Out");
            CombinedSerializer serializer = new servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.runtime.ServiceStatusInquiryWSUser_searchServicerequest_Out_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,servicestatusclient.proxy.types.gsidev01.servicestatusinquiryws_wsdl.types.ServiceStatusInquiryWSUser_searchServicerequest_Out.class, type, serializer);
        }
        servicestatusclient.proxy.runtime.ServiceOrderStatusInquiryService_SerializerRegistry12 internal12Registry = new servicestatusclient.proxy.runtime.ServiceOrderStatusInquiryService_SerializerRegistry12();
        return internal12Registry.getRegistry(registry);
    }
    
    private static void registerSerializer(TypeMapping mapping, Class javaType, QName xmlType,
        Serializer ser) {
        mapping.register(javaType, xmlType, new SingletonSerializerFactory(ser),
            new SingletonDeserializerFactory((Deserializer)ser));
    }
    
}
