package od.oracle.apps.xxmer.holdbackqty.server;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
// new imports
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.common.MessageToken;
//import oracle.apps.fnd.framework.webui.OAPageContext;
// new imports - add apply logic
import oracle.apps.fnd.framework.OAViewObject;
import oracle.jbo.Row;
import oracle.jbo.Transaction;
// newer imports - added delete button functionality
import oracle.jbo.domain.Number;   // added to support ss upload functionality
import oracle.jbo.RowSetIterator;

import oracle.apps.fnd.framework.OAAttrValException;
//import java.io.Serializable;
import java.io.IOException;
import java.io.BufferedReader;
import oracle.jbo.domain.BlobDomain;
import java.util.StringTokenizer;
import java.io.Serializable;
import java.lang.String;
// import java.util.Date;
import oracle.jbo.domain.Date;   // added to support date class (ss upload functionality)
//import oracle.apps.fnd.framework.OANLSServices;
//import oracle.apps.fnd.framework.server.OADBTransaction;
//import java.sql.SQLException;



//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class HoldBackQtyAMImpl extends OAApplicationModuleImpl 
{
  // new method
  public void initHoldBackQtyList()
  {
    System.out.println("HoldBackQtyAMImpl: initHoldBackQtyList called");   

    HoldBackQtyListVOImpl vo = getHoldBackQtyListVO1();
    if(vo==null)
    {
      MessageToken[] errTokens =
      {new MessageToken("OBJECT_NAME","HoldBackQtyListVO1")};
      throw new
        OAException("XXMER","XXMER_VC_OBJECT_NOT_FOUND",errTokens);
    }
    vo.initQuery();
    System.out.println("HoldBackQtyAMImpl: initHoldBackQtyList exited");   
    
  }


  /**
   * 
   * This is the default constructor (do not remove)
   */
  public HoldBackQtyAMImpl()
  {
  }

  /**
   * 
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxmer.holdbackqty.server", "HoldBackQtyAMLocal");
  }

  /**
   * 
   * Container's getter for HoldBackQtyListVO1
   */
  public HoldBackQtyListVOImpl getHoldBackQtyListVO1()
  {
    return (HoldBackQtyListVOImpl)findViewObject("HoldBackQtyListVO1");
  }

  /**
   * 
   * Container's getter for HoldBackQtyVO1
   */
  public HoldBackQtyVOImpl getHoldBackQtyVO1()
  {
    return (HoldBackQtyVOImpl)findViewObject("HoldBackQtyVO1");
  }

// 
public void createHoldBackQty()
  {

   System.out.println("HoldBackQtyAMImpl: createHoldBackQty called");
   // OAViewObject vo = (OAViewObject)getHoldBackQtyListVO1();
   OAViewObject vo = (OAViewObject)getHoldBackQtyVO1();
   
   if(vo.getFetchedRowCount()==0){
      System.out.println("executeQuery called");   
      vo.executeQuery();
     }

    Row row = vo.createRow();
    vo.insertRow(row);

    // Required per OA Framework Model Coding Standard M69
    row.setNewRowState(Row.STATUS_INITIALIZED);

    //vo.execQuery();
   
    System.out.println("HoldBackQtyAMImpl: createHoldBackQty exited");


  } // end createHoldBackQty()

// add apply logic
public void editHoldBackQty ()
  {

   System.out.println("HoldBackQtyAMImpl: editHoldBackQty called");
   // OAViewObject vo = (OAViewObject)getHoldBackQtyListVO1();
   //OAViewObject vo = (OAViewObject)getHoldBackQtyListVO1();


         //String Item = pageContext.getParameter("Item");
         //String WarehouseLocation = pageContext.getParameter("WarehouseLocation");
         // Serializable[] parameters = { Item, WarehouseLocation };

     		//System.out.println("HoldBackQtyAMImpl: am: item is " + Item);                           
     		//System.out.println("HoldBackQtyAMImpl: am: WarehouseLocation is " + WarehouseLocation);  
   // OAViewObject vo = (OAViewObject) getHoldBackQtyVO1();
   
   OAViewObject voEdit = (OAViewObject)getHoldBackQtyEditVO1();
   OAViewObject voList = (OAViewObject) getHoldBackQtyVO1();
   // match up voEdit with voList and then commit values from the voEdit

   // @@ maybe begin
  	HoldBackQtyVORowImpl rowList = (HoldBackQtyVORowImpl) voList.getCurrentRow();
  	HoldBackQtyVORowImpl rowEdit = (HoldBackQtyVORowImpl) voList.first();
   System.out.println("HoldBackQtyAMImpl: editHoldBackQty ** 2");

  	//row.setNewRowState(Row.STATUS_INITIALIZED);
  	//try{
  	  //set all fields
	    // row.setItem(parseString2Number(Item,fileName,rowNbr));
	    // row.setWarehouseLocation(parseString2Number(WarehouseLocation,fileName,rowNbr));
  	  //row.setItem(Item.trim());
  	  //row.setWarehouseLocation(WarehouseLocation.trim());
  
  	  //row.setHoldQuantity(parseString2Number(holdQuantity,fileName,rowNbr));   
	    //row.setStartDate(parseString2Date(startDate,fileName,rowNbr));
  	  //row.setEndDate(parseString2Date(endDate,fileName,rowNbr));
	    //vo.insertRow(row);   
  	//}catch(OAAttrValException oav){

   String listItem = rowList.getItem();
   String listWarehouseLocation = rowList.getWarehouseLocation();

   String editItem = rowEdit.getItem();
   String editWarehouseLocation = rowEdit.getWarehouseLocation();
   String HoldQuantity = rowEdit.getHoldQuantity().toString();
   //String StartDate = (String)rowEdit.getStartDate();
   //String EndDate = (String) rowEdit.getEndDate();

   //	Serializable rowsAdded = Integer.toString(rowCount);   
   //Integer HoldQuantity = row.getHoldQuantity();
   
   // @@ maybe end
   
   //if(vo.getFetchedRowCount()==0){
   //   System.out.println("executeQuery called");   
   //   vo.executeQuery();
   //  }

      //OAViewObject vo = (OAViewObject)am.findViewObject("HoldBackQtyEditVO1");

	    //String Item = (String)vo.getCurrentRow().getAttribute("Item");
	    //String WarehouseLocation = (String)vo.getCurrentRow().getAttribute("WarehouseLocation");

    //String rowIndex = pageContext.getParameter("rowIndex");
    //System.out.println("HoldBackQtyEditCO: processFormRequest: rowIndex: " + rowIndex);

	    //String Item = (String)vo.getAttribute("Item");
	    //String WarehouseLocation = (String)vo.getAttribute("WarehouseLocation");
      System.out.println("HoldBackQtyEditCO: processFormRequest(list): item: " + listItem + " loc " + listWarehouseLocation);

      System.out.println("HoldBackQtyEditCO: processFormRequest(edit): item: " + editItem + " loc " + editWarehouseLocation);
      System.out.println("HoldBackQtyEditCO: processFormRequest(edit): hold qty: " + HoldQuantity); // + " start date " + StartDate + " end date " + EndDate);

      try {
          getDBTransaction().commit();
      }
      catch (OAException ex) {
          getDBTransaction().rollback();
          throw ex;
      }
      
    //Row row = vo.getCurrentRow();
    //vo.insertRow(row);

    // Required per OA Framework Model Coding Standard M69
    //rowEdit.setNewRowState(Row.STATUS_INITIALIZED);
    System.out.println("HoldBackQtyAMImpl: editHoldBackQty exited");

  } // end editHoldBackQty()

  public void apply()
  {
    System.out.println("HoldBackQtyAMImpl: apply called");
  
    getTransaction().commit();
    System.out.println("HoldBackQtyAMImpl: apply exited");
    
  }//end apply()

public void rollbackHoldBackQty()
  {
    Transaction txn = getTransaction();
    if(txn.isDirty())
    {
      txn.rollback();
    }
  }

// code for delete button
public void deleteHoldBackQty(String Item, String WarehouseLocation)
  {
    // int itemToDelete = Integer.parseInt(Item);

    System.out.println("HoldBackQtyAMImpl: deleteHoldBackQty called");   
		System.out.println("!!!!!!!!!!!!!!!!  Item " +Item+" Loc "+WarehouseLocation);                           

    OAViewObject vo = (OAViewObject) getHoldBackQtyVO1();
		System.out.println("!!  1");                           
    
    HoldBackQtyVORowImpl row = null;

    int fetchedRowCount = vo.getRowCount();
		System.out.println("!!  2");                           
    
    RowSetIterator deleteIter = vo.createRowSetIterator("deleteIter");
    if(fetchedRowCount > 0)
    {
  		System.out.println("!!!!!!!!!!!!!!!! rowct more than zero");                           
    
      deleteIter.setRangeStart(0);
      deleteIter.setRangeSize(fetchedRowCount);
      // zero based, so subtract one
      for(int i=1; i < fetchedRowCount; i++)
      {     
        row = (HoldBackQtyVORowImpl) deleteIter.getRowAtRangeIndex(i);
        String primaryKey1 = row.getItem();
        String primaryKey2 = row.getWarehouseLocation();
     		System.out.println("!!! " + " i " + i + " frc " + fetchedRowCount + " key1 " + primaryKey1 + " key2 " + primaryKey2);            
        
        if((primaryKey1.compareTo(Item)==0)&&(primaryKey2.compareTo(WarehouseLocation)==0))
        {
      		System.out.println("!!!!!!!!!!!!!!!! remove row");            
          row.remove();
          System.out.println(primaryKey1+" "+primaryKey2);
          getTransaction().commit();
          break;
        }
      }
    }
    deleteIter.closeRowSetIterator();
    System.out.println("HoldBackQtyAMImpl: deleteHoldBackQty exited");   

  }//end deleteHoldBackQty

  /*
   ****************************************************************************
   * Prepare for an update of an item.
   ****************************************************************************
   */
//public void prepEditItemVO(String Item, String WarehouseLocation)
public void prepEditItemVO2(String[] args)
  {
    //System.out.println("prepUpdateClassVO[" + merchClassId + "]");
    //UpdateClassVOImpl vo = (UpdateClassVOImpl)getUpdateClassVO1();
    //vo.initQuery(merchClassId);

    String Item = args [0];
    String WarehouseLocation = args [1];

    System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO: " + Item);
    System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO: " + WarehouseLocation);
    
    // System.out.println("prepEditItemVO[" + Item + "]");
    //HoldBackQtyEditVOImpl vo = (HoldBackQtyEditVOImpl)getHoldBackQtyEditVO1();
    //System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO: return from vo set ");

   //  @@@@@ get edit row and set to current row

    OAViewObject vo = (OAViewObject) getHoldBackQtyVO1();
		System.out.println("!!  1");                           

    if(vo==null)
    {
         System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO: null vo ");
         MessageToken[] errTokens =
         {new MessageToken("OBJECT_NAME","HoldBackQtyEditVO1")};
         throw new
         OAException("XXMER","XXMER_VC_EDIT_OBJECT_NOT_FOUND",errTokens);
    }

    
    HoldBackQtyVORowImpl row = null;

    int fetchedRowCount = vo.getRowCount();
		System.out.println("!!  2");                           
    
    RowSetIterator editIter = vo.createRowSetIterator("editIter");
    if(fetchedRowCount > 0)
    {
  		System.out.println("!!!!!!!!!!!!!!!! rowct more than zero");                           
    
      editIter.setRangeStart(0);
      editIter.setRangeSize(fetchedRowCount);
      // zero based, so subtract one
      for(int i=1; i < fetchedRowCount; i++)
      {     
        row = (HoldBackQtyVORowImpl) editIter.getRowAtRangeIndex(i);
        String primaryKey1 = row.getItem();
        String primaryKey2 = row.getWarehouseLocation();
     		System.out.println("!!! " + " i " + i + " frc " + fetchedRowCount + " key1 " + primaryKey1 + " key2 " + primaryKey2);            
        
        if((primaryKey1.compareTo(Item)==0)&&(primaryKey2.compareTo(WarehouseLocation)==0))
        {
      		System.out.println("!!!!!!!!!!!!!!!! set current row to " + i);            
          //row.remove();
          vo.setCurrentRow(row);
          System.out.println(primaryKey1+" "+primaryKey2);
          //getTransaction().commit();
          break;
        }
      }
    }
    editIter.closeRowSetIterator();
    System.out.println("HoldBackQtyAMImpl: prepedititemvo2 exited");   
   

   // end get get edit row and set to current row


    //vo.initQuery2(Item, WarehouseLocation);
    //vo.initQuery();
    //Row row = vo.next();
    //UpdateClassVORowImpl up = (UpdateClassVORowImpl)row;
    // System.out.println("UpdateClassVORowImpl-plannerId[" + up.getPlannerId() + "]");
  }

// @@@@@
  /*
   ****************************************************************************
   * Prepare for an update of an item.
   ****************************************************************************
   */
//public void prepEditItemVO(String Item, String WarehouseLocation)
// public void prepEditItemVO3(int rowIndex)
//public void prepEditItemVO3(String[] args)
public void prepEditItemVO3(String rowIndex)
  {
    //System.out.println("prepUpdateClassVO[" + merchClassId + "]");
    //UpdateClassVOImpl vo = (UpdateClassVOImpl)getUpdateClassVO1();
    //vo.initQuery(merchClassId);

    System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO3 called");
    //String rowIndex = args [0];
    int numRowIndex = Integer.parseInt(rowIndex);   

    // HoldBackQtyVORowImpl row = null;
    System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO3 (rowIndex): " + rowIndex);
    OAViewObject vo = (OAViewObject) getHoldBackQtyVO1();

    if(vo==null)
    {
         System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO3: null vo ");
         MessageToken[] errTokens =
         {new MessageToken("OBJECT_NAME","HoldBackQtyEditVO1")};
         throw new
         OAException("XXMER","XXMER_VC_EDIT_OBJECT_NOT_FOUND22",errTokens);
    }

    Row getRow = vo.getCurrentRow();    
		System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO3: getrow: " + getRow);          

    RowSetIterator editIter = vo.createRowSetIterator("editIter");
    //editIter.setRangeStart(0);
    HoldBackQtyVORowImpl row = (HoldBackQtyVORowImpl) editIter.getRowAtRangeIndex(numRowIndex);
    //Row row = (Row) editIter.getRowAtRangeIndex(numRowIndex);
    // HoldBackQtyVORowImpl row = (HoldBackQtyVORowImpl) editIter.getRowAtRangeIndex(2);
		System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO3: row: " + row);          

    if(row==null)
    {
        System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO3: null row ");
        editIter.closeRowSetIterator();

        MessageToken[] errTokens =
        {new MessageToken("OBJECT_NAME","HoldBackQtyEditVO1")};
        throw new
        OAException("XXMER","XXMER_VC_EDIT_OBJECT_NOT_FOUND33",errTokens);
    }
    
    vo.setCurrentRow(row);
    editIter.closeRowSetIterator();
    System.out.println("HoldBackQtyAMImpl: PrepEditItemVO3 exited");   
   
  }

public void prepEditItemVO4(String rowIndex)
  {
    System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO4 called");
    int numRowIndex = Integer.parseInt(rowIndex);   
    System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO4 (rowIndex): " + rowIndex);
    OAViewObject vo = (OAViewObject) getHoldBackQtyVO1();
 
    if(vo==null)
    {
         System.out.println("HoldBackQtyAMImpl: prepUpdateClassVO4: null vo ");
         MessageToken[] errTokens =
         {new MessageToken("OBJECT_NAME","HoldBackQtyEditVO1")};
         throw new
         OAException("XXMER","XXMER_VC_EDIT_OBJECT_NOT_FOUND22",errTokens);
    }

    // 1/30/08@3  RowSetIterator editIter = vo.createRowSetIterator("editIter");
    vo.executeQuery();
    vo.first();
    for(int i=0; i < numRowIndex; i++)
    {     
       vo.next();
    }    
    
    System.out.println("HoldBackQtyAMImpl: PrepEditItemVO4 exited");   
  }

  /**
   * 
   * Container's getter for EditClassVO1
   */
  public HoldBackQtyEditVOImpl getHoldBackQtyEditVO1()
  {
    return (HoldBackQtyEditVOImpl)findViewObject("HoldBackQtyEditVO1");
  }
  
public void initalizeUploadForm()
 {  
  System.out.println("HoldBackQtyAMImpl: initializeUploadForm called");   

  OAViewObject vo = (OAViewObject)getFileVO1();
  if(vo.getFetchedRowCount()==0){
	 vo.executeQuery();
   }
   Row row = vo.createRow();
   row.setNewRowState(Row.STATUS_INITIALIZED);
   vo.insertRow(row);

    System.out.println("HoldBackQtyAMImpl: initializeUploadForm exited");   
   
 } // end initalizeUploadForm()

// @@@@@

  private Number parseString2Number(String s, String fileName, String rowNbr)
  {
  	Number num = null;
  	try{
    	int n = Integer.parseInt(s.trim());
    	num = new Number(n);
    	/*  num =  new oracle.jbo.domain.Number(nls.stringToNumber(s.trim())); */
  	}catch(Exception sqe){
	    MessageToken[] tokens = {new MessageToken("NUMBER",s), new MessageToken("FILE",fileName),new MessageToken("ROW",rowNbr)};   
  	  throw new OAException("XXMER","XXMER_IMPORT_NUMBER_ERROR",tokens);
	  }
     return num;
  }

  private Date parseString2Date(String s, String fileName, String rowNbr)
  {  
    Date d = null;
    try
    {
    	//Date Input string will have to be in MM/DD/YYYY format i.e. "06/27/1980"
    	oracle.sql.DATE sqlDate = Date.fromText(s.trim(),"MM/dd/yyyy",null);
  	  d = new Date(sqlDate);
    }catch(Exception e)
     {
	      MessageToken[] tokens = {new MessageToken("DATE",s), new MessageToken("FILE",fileName),new MessageToken("ROW",rowNbr)};   
  	    throw new OAException("XXMER","XXMER_IMPORT_DATEERROR",tokens);
     }   
     return d;   
  }

// @@@@@ processCSV code to be modified for HBQ

public Serializable processCSVFile(BlobDomain blob, String fileName)
  {
	//Read file in to efficient BufferedReader
        BufferedReader in = new BufferedReader(blob.getCharacterStream()); 
	//Keep a count of Rows Read
	int rowCount = 0;
	String text = null;
	try{
	  //Read the first line of the file
	  text = in.readLine();           
	}catch(IOException ioe)
	{
	  MessageToken[] tokens = {new MessageToken("ERROR",ioe.getMessage()+" "+ioe.getStackTrace())};   
	  throw new OAException("XXMER"," XXMER_IMPORT_EXCEPTION",tokens);           
	}
	while(text!=null){
	  rowCount++;      
	  //Parse line into columns by comma delimiter (hence CSV)
	  StringTokenizer st = new StringTokenizer(text,",");
	  //Only import rows that have 5 columns
	  int cols = 5;	
	  if(st.countTokens()==cols){
		String Item = st.nextToken();
		String WarehouseLocation = st.nextToken();
		String holdQuantity = st.nextToken();
		String startDate = st.nextToken();
		String endDate = st.nextToken();
		//Debug statement
		System.out.println(Item+" "+WarehouseLocation+" "+holdQuantity+" "+startDate+" "+endDate);                           
//Call method to add to database this will be a custom method you will //create
		addHoldBackQty(Item,
            WarehouseLocation,
            holdQuantity,
						startDate,
            endDate,
						Integer.toString(rowCount),
						fileName);
	  }else if(st.countTokens() != 0)
	  {
		MessageToken[] tokens = {new MessageToken("ERROR","-invalid column Length at line "+rowCount)};   
		throw new OAException("XXMER"," XXMER_IMPORT_EXCEPTION",tokens);
	  }else
	  {
		//The following code will be executed if the column count is Zero, 
		//therefore the row is empty.
		rowCount--;
	  }
	  try{
		//Read next line
		text = in.readLine();
	  }catch(IOException ioe)
	  {
		MessageToken[] tokens = {new MessageToken("ERROR",ioe.getMessage()+" "+ioe.getStackTrace())};   
		throw new OAException("XXMER"," XXMER_IMPORT_EXCEPTION",tokens);      
	  } 
	}
      
	Serializable rowsAdded = Integer.toString(rowCount);
	return rowsAdded;
  }
  
 //This method will be different based on the EO you will be doing the insert 
 public void addHoldBackQty(String Item, 
                String WarehouseLocation,
                String holdQuantity,
                String startDate, 
                String endDate,
 							  String rowNbr,  
							  String fileName)
  {   

    System.out.println("HoldBackQtyAMImpl: addHoldBackQty called");   
  
	  OAViewObject vo = (OAViewObject)getHoldBackQtyVO1();
  	//Prepare row for insert
  	if(vo.getFetchedRowCount()==0){
  	  vo.executeQuery();
  	}          
  	HoldBackQtyVORowImpl row = (HoldBackQtyVORowImpl) vo.createRow();
  	row.setNewRowState(Row.STATUS_INITIALIZED);
  	try{
  	  //set all fields
	    // row.setItem(parseString2Number(Item,fileName,rowNbr));
	    // row.setWarehouseLocation(parseString2Number(WarehouseLocation,fileName,rowNbr));
  	  row.setItem(Item.trim());
  	  row.setWarehouseLocation(WarehouseLocation.trim());
  
  	  row.setHoldQuantity(parseString2Number(holdQuantity,fileName,rowNbr));   
	    row.setStartDate(parseString2Date(startDate,fileName,rowNbr));
  	  row.setEndDate(parseString2Date(endDate,fileName,rowNbr));
	    vo.insertRow(row);   
  	}catch(OAAttrValException oav){
	    //rollback data inserted error occured
	    rollbackHoldBackQty();  
  	  //reinitialize form
	    initalizeUploadForm();
	    throw oav;
  	} catch(OAException oae){
	    //rollback data inserted error occured
  	  rollbackHoldBackQty();  
	    //reinitialize form
  	  initalizeUploadForm();     
	    throw oae;
  	}     

    System.out.println("HoldBackQtyAMImpl: addHoldBackQty exited");   

  }

  /**
   * 
   * Container's getter for FileVO1
   */
  public FileVOImpl getFileVO1()
  {
    return (FileVOImpl)findViewObject("FileVO1");
  }

}