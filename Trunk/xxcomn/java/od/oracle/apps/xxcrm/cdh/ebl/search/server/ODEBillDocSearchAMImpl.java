package od.oracle.apps.xxcrm.cdh.ebl.search.server;
/* Subversion Info:
 * $HeadURL: http://svn.na.odcorp.net/svn/od/common/trunk/xxcomn/java/od/oracle/apps/xxcrm/cdh/ebl/search/server/ODEBillDocSearchAMImpl.java $
 * $Rev: 266070 $
 * $Date: 2017-02-17 18:32:55 -0500 (Fri, 17 Feb 2017) $
*/
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
//import oracle.jbo.server.ApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;
//Added by Mangala
import oracle.apps.fnd.framework.OAViewObject;
import oracle.jdbc.OracleCallableStatement;
import java.sql.SQLException;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OADBTransaction;
import java.sql.Types;
import oracle.jbo.domain.Number;
import od.oracle.apps.xxcrm.cdh.ebl.server.ODUtil;
import oracle.apps.fnd.framework.OARow;
//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODEBillDocSearchAMImpl extends OAApplicationModuleImpl 
{
  /**
   * 
   * This is the default constructor (do not remove)
   */
  public ODEBillDocSearchAMImpl()
  {
  }
  /**
  * 
  * Sample main for debugging Business Components code using the tester.
  */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxcrm.cdh.ebl.server", "CustomerSearchAMLocal");
  }
  /**
   * 
   * Container's getter for ODEBillDocSearchVO
   */
  public OAViewObjectImpl getODEBillDocSearchVO()
  {
    return (OAViewObjectImpl)findViewObject("ODEBillDocSearchVO");
  }

 
  // Code for the Copy functionality
  public Number copyRecord(String CustAccountId,String CustDocId ) //, String DCustAcctId)
  {
    Number DCustAcctId = null;
    Number xCustDocId = null;
    ODUtil utl = new ODUtil(this);
	OracleCallableStatement ocs =null;
    try
     {
      OAViewObject searchVO = (OAViewObject) this.findViewObject("ODEBillDocSearchVO");
      OARow mainRow = (OARow) searchVO.first();
      Number CurCustdoc = new Number (CustDocId);
    // OARow mainRow = (OARow)searchVO.getFirstFilteredRow("CustDocId",CurCustdoc);
      for (int i=1;i<=searchVO.getRowCount();i++)
      {
       if (mainRow != null)
       {
           String cAcctId =  mainRow.getAttribute("CustAccountId").toString();
           String cDocId  =  mainRow.getAttribute("CustDocId").toString();
           utl.log ("CustAccountId" +CustAccountId);
           utl.log ("CustDocId" +CustDocId);           
           utl.log("Row is not null:mainRow.getAttribute(CustAccountId):" +cAcctId);
           utl.log ("CustDocId.equals(mainRow.getAttribute(CustDocId):" + cDocId);
           if(CustAccountId.equals(cAcctId) && CustDocId.equals(cDocId))
           {
             utl.log ("Inside IF"); 
             DCustAcctId =(Number) searchVO.getCurrentRow().getAttribute("PCustAccountId"); 
             utl.log("DCustAcctId"+ DCustAcctId);
             break;
          }  
       }  
      mainRow = (OARow)searchVO.next();
     }
    
      utl.log("Inside copyRecord"+ CustAccountId);
      utl.log("Inside copyRecord"+ CustDocId);
      utl.log("Inside copyRecord"+ DCustAcctId);
      //OAViewObject VO = (OAViewObject) this.findViewObject("ODEBillDocSearchVO");
      OADBTransaction db=this.getOADBTransaction();
    
     // Number xCustDocId;
      Number nCustAcctId = new Number (CustAccountId);
      Number nCustDocId = new Number (CustDocId);
      Number nDCustAcctId = new Number (DCustAcctId);
      utl.log("nCustAcctId:"+ nCustAcctId);
      utl.log("nCustDocId:"+ nCustDocId);
      utl.log("nDCustAcctId:"+ nDCustAcctId);
      String stmt = "BEGIN XX_CDH_EBL_COPY_PKG.MAIN_PROC(X_CUST_DOCUMENT_ID       => :1"
                                                        +", P_CUST_ACCOUNT_ID     => :2"
                                                        +", P_SCUST_DOC_ID        => :3"
                                                        +", P_DCUST_ACCOUNT_ID    => :4);" 
                                                        +" END;" ;                  

      ocs = (OracleCallableStatement)db.createCallableStatement(stmt,1);
      ocs.registerOutParameter(1,Types.NUMERIC);
      ocs.setNUMBER(2,nCustAcctId);
      ocs.setNUMBER(3,nCustDocId);
      ocs.setNUMBER(4,nDCustAcctId);
      ocs.execute();      
      xCustDocId = new Number (ocs.getInt(1));
      utl.log(" xCustDocId:"+  xCustDocId);
      ocs.close();
      return xCustDocId;

     } //End of Try
      catch(SQLException sqlexception)
       {
           throw OAException.wrapperException(sqlexception);
       }
      catch(Exception exception)
       {
          throw OAException.wrapperException(exception);
       } 
	   finally
        {
           try{
                if(ocs != null)
                   ocs.close();
              }
		   catch(Exception e){}
        }
   
  }
}