/*===========================================================================+
 |                       Office Depot - Project Simplify                     |
 |            			   Oracle NAC Consulting Organization         		 |
 +===========================================================================+
 |  FILENAME                                                                 |
 |             ODASNSecurityAMImpl.java                               		 |
 |                                                                           |
 |  DESCRIPTION                                                              |
 |    Parent level Application Module for custom security access component   |
 |     					                                                     |
 |                                                                           |
 |  NOTES                                                                    |
 |                                                                           |
 |                                                                           |
 |  DEPENDENCIES                                                             |
 |    This class file contains methods that are inherited and used by 		 |
 |	  ODASNApplicationModuleImpl.java          								 |
 |                                                                           |
 |  HISTORY                                                                  |
 |                                                                           |
 |    30/09/2007 Sami Begg            Created                                |
 |    21/01/2008 Anirban Chaudhuri    Modified the security logic            |
 +===========================================================================*/
package od.oracle.apps.xxcrm.asn.common.fwk.server;

import oracle.apps.asn.common.fwk.server.*;
import com.sun.java.util.collections.AbstractCollection;
import com.sun.java.util.collections.ArrayList;
import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.common.VersionInfo;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.server.*;
import oracle.jbo.domain.Number;
import oracle.jbo.server.*;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.apps.fnd.framework.OAApplicationModule;
import oracle.apps.fnd.framework.OAViewObject;

//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ODASNSecurityAMImpl extends ASNSecurityAMImpl
{
  /**
   *
   * This is the default constructor (do not remove)
   */
  public ODASNSecurityAMImpl()
  {
  }

  /**
   *
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("od.oracle.apps.xxcrm.asn.common.fwk.server", "ODASNSecurityAMLocal");
  }


  /**
   *
   * Determine's which getAccessPrivilege child method to call, based on the entity type
   */
	public String getAccessPrivilege(String entity, String entityId, String resourceId)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(50);
            stringbuffer.append(" entity = " + entity);
            stringbuffer.append(" entityId = " + entityId);
            stringbuffer.append(" resourceId = " + resourceId);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
        String accessPrivilege = "lOllOl11O";
        if("LEAD".equals(entity))
        {
            if(lvl1)
                oadbtransaction.writeDiagnostics(logger, "End", 2);
            accessPrivilege = this.getLeadAccessPrivilege(entityId, resourceId);
        } else
        if("OPPTY".equals(entity))
        {
            if(lvl1)
                oadbtransaction.writeDiagnostics(logger, "End", 2);
            accessPrivilege = this.getOpptyAccessPrivilege(entityId, resourceId);
        } else
        if("CUST".equals(entity))
        {
            if(lvl1)
                oadbtransaction.writeDiagnostics(logger, "End", 2);
            accessPrivilege = this.getCustAccessPrivilege(entityId, resourceId);
        } else
        if("SITE".equals(entity))
        {
            if(lvl1)
                oadbtransaction.writeDiagnostics(logger, "End", 2);
            accessPrivilege = this.getSiteAccessPrivilege(entityId, resourceId);
        }
        if(lvl2)
        {
            StringBuffer stringbuffer1 = new StringBuffer(10);
            stringbuffer1.append(" accessType = ");
            stringbuffer1.append(accessPrivilege);
            oadbtransaction.writeDiagnostics(logger, stringbuffer1.toString(), 1);
        }
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);
        return accessPrivilege;
	}

	public String getAccessPrivilege(String entity, String entityId, String resourceId, String mgrFlag)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(50);
            stringbuffer.append(" entity = " + entity);
            stringbuffer.append(" entityId = " + entityId);
            stringbuffer.append(" resourceId = " + resourceId);
            stringbuffer.append(" managerFlag = " + mgrFlag);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
        String accessPrivilege = "lOllOl11O";
        if("LEAD".equals(entity))
            accessPrivilege = this.getLeadAccessPrivilege(entityId, resourceId, mgrFlag);
        else
        if("OPPTY".equals(entity))
            accessPrivilege = this.getOpptyAccessPrivilege(entityId, resourceId, mgrFlag);
        else
        if("CUST".equals(entity))
            accessPrivilege = this.getCustAccessPrivilege(entityId, resourceId, mgrFlag);
        else
        if("SITE".equals(entity))
            accessPrivilege = this.getSiteAccessPrivilege(entityId, resourceId, mgrFlag);
        if(lvl2)
        {
            StringBuffer stringbuffer1 = new StringBuffer(10);
            stringbuffer1.append(" accessType = ");
            stringbuffer1.append(accessPrivilege);
            oadbtransaction.writeDiagnostics(logger, stringbuffer1.toString(), 1);
        }
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);
        return accessPrivilege;
	}

	public String getAccessPrivilege(String entity, String entityId, String resourceId, ArrayList mgrGrpIds, ArrayList adminGrpIds, String mgrFlag)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(60);
            stringbuffer.append(" entity = " + entity);
            stringbuffer.append(" entityId = " + entityId);
            stringbuffer.append(" resourceId = " + resourceId);
//            stringbuffer.append(" mgrGrpIds = " + mgrGrpIds == null ? "" : mgrGrpIds.toString());
//            stringbuffer.append(" adminGrpIds = " + adminGrpIds == null ? "" : adminGrpIds.toString());
            stringbuffer.append(" managerFlag = " + mgrFlag);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
        String accessPrivilege = "lOllOl11O";
        if("LEAD".equals(entity))
            accessPrivilege = this.getLeadAccessPrivilege(entityId, resourceId, mgrGrpIds, adminGrpIds, mgrFlag);
        else
        if("OPPTY".equals(entity))
            accessPrivilege = this.getOpptyAccessPrivilege(entityId, resourceId, mgrGrpIds, adminGrpIds, mgrFlag);
        else
        if("CUST".equals(entity))
            accessPrivilege = this.getCustAccessPrivilege(entityId, resourceId, mgrGrpIds, adminGrpIds, mgrFlag);
        else
        if("SITE".equals(entity))
            accessPrivilege = this.getSiteAccessPrivilege(entityId, resourceId, mgrGrpIds, adminGrpIds, mgrFlag);
        if(lvl2)
        {
            StringBuffer stringbuffer1 = new StringBuffer(10);
            stringbuffer1.append(" accessType = ");
            stringbuffer1.append(accessPrivilege);
            oadbtransaction.writeDiagnostics(logger, stringbuffer1.toString(), 1);
        }
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);

		oadbtransaction.writeDiagnostics(logger, "1OllOl11O = UPDATE  101lOl11O = READONLY ELSE NO ACCESS", 1);

        return accessPrivilege;
	}

  /**
   *
   * Determine's which profile options and view objects to select and invoke for Lead security access
   */
	public String getLeadAccessPrivilege(String leadId, String resourceId)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getLeadAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(20);
            stringbuffer.append(" entityId = " + leadId);
            stringbuffer.append(" resourceId = " + resourceId);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
        String mgrFlag = getManagerFlag(resourceId);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);

        return this.getLeadAccessPrivilege(leadId, resourceId, mgrFlag);
	}

	public String getLeadAccessPrivilege(String leadId, String resourceId, String mgrFlag)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getLeadAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(30);
            stringbuffer.append(" entityId = " + leadId);
            stringbuffer.append(" resourceId = " + resourceId);
            stringbuffer.append(" managerFlag = " + mgrFlag);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
        ArrayList adminGrpIds = getAdminGroupIds(resourceId);
        ArrayList mgrGrpIds = getManagerGroupIds(resourceId);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);

        return this.getLeadAccessPrivilege(leadId, resourceId, mgrGrpIds, adminGrpIds, mgrFlag);
	}

	public String getLeadAccessPrivilege(String leadId, String resourceId, ArrayList mgrGrpIds, ArrayList adminGrpIds, String mgrFlag)
	{
        String accessPrivilege = super.getLeadAccessPrivilege(leadId, resourceId, mgrGrpIds, adminGrpIds, mgrFlag);
        OADBTransaction oadbtransaction = getOADBTransaction();

		oadbtransaction.writeDiagnostics("getLeadAccessPrivilege", "1OllOl11O = UPDATE  101lOl11O = READONLY ELSE NO ACCESS", 1);

        return accessPrivilege;
	}



  /**
   *
   * Determine's which profile options and view objects to select and invoke for Customer security access
   */
	public String getCustAccessPrivilege(String custId, String resourceId)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getCustAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(30);
            stringbuffer.append(" entityId = " + custId);
            stringbuffer.append(" resourceId = " + resourceId);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
		oadbtransaction.writeDiagnostics(logger, "1OllOl11O = UPDATE  101lOl11O = READONLY ELSE NO ACCESS", 1);

        String mgrFlag = getManagerFlag(resourceId);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);

        return this.getCustAccessPrivilege(custId, resourceId, mgrFlag);
	}

	public String getCustAccessPrivilege(String custId, String resourceId, String mgrFlag)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getCustAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(30);
            stringbuffer.append(" entityId = " + custId);
            stringbuffer.append(" resourceId = " + resourceId);
            stringbuffer.append(" managerFlag = "+ mgrFlag);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
		oadbtransaction.writeDiagnostics(logger, "1OllOl11O = UPDATE  101lOl11O = READONLY ELSE NO ACCESS", 1);
        ArrayList adminGrpIds = getAdminGroupIds(resourceId);
        ArrayList mgrGrpIds = getManagerGroupIds(resourceId);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);

        return this.getCustAccessPrivilege(custId, resourceId, mgrGrpIds, adminGrpIds, mgrFlag);
	}

	public String getCustAccessPrivilege(String custId, String resourceId, ArrayList mgrGrpIds, ArrayList adminGrpIds, String mgrFlag)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getCustAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(60);
            stringbuffer.append(" entityId = " + custId);
            stringbuffer.append(" resourceId = " + resourceId);
//            stringbuffer.append(" mgrGrpIds = " + mgrGrpIds == null ? "" : mgrGrpIds.toString());
//            stringbuffer.append(" adminGrpIds = " + adminGrpIds == null ? "" : adminGrpIds.toString());
            stringbuffer.append(" managerFlag = " + mgrFlag);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
		oadbtransaction.writeDiagnostics(logger, "1OllOl11O = UPDATE  101lOl11O = READONLY ELSE NO ACCESS", 1);
        String accessPrivilege = "lOllOl11O";
        String custProfile = null;
        Object obj = null;
        Object obj1 = null;
        custProfile = oadbtransaction.getProfile("ASN_CUST_ACCESS");
        if(lvl2)
        {
            StringBuffer stringbuffer1 = new StringBuffer(20);
            stringbuffer1.append(" Profile ASN_CUST_ACCESS = ");
            stringbuffer1.append(custProfile);
            oadbtransaction.writeDiagnostics(logger, stringbuffer1.toString(), 1);
        }
        if(custProfile == null || "".equals(custProfile.trim()))
            custProfile = "S";//"T"
        if("F".equals(custProfile))
        {
            accessPrivilege = "1OllOl11O";
            if(lvl2)
                oadbtransaction.writeDiagnostics(logger, " accessType = UPDATE ", 1);
            if(lvl1)
                oadbtransaction.writeDiagnostics(logger, "End", 2);
            return accessPrivilege;
        }
        if("S".equals(custProfile))
        {
            ODCustSalesTeamAccessesVOImpl custsalesteamaccessesvoimpl = getODCustSalesTeamAccessesVO();
            if(custsalesteamaccessesvoimpl == null)
            {
                MessageToken amessagetoken[] = {
                    new MessageToken("NAME", "CustSalesTeamAccessesVO")
                };
                throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", amessagetoken);
            }
            custsalesteamaccessesvoimpl.initQuery(custId, resourceId);
            if(custsalesteamaccessesvoimpl.hasNext())
            {
                ODCustSalesTeamAccessesVORowImpl custsalesteamaccessesvorowimpl = (ODCustSalesTeamAccessesVORowImpl)custsalesteamaccessesvoimpl.first();
                if(custsalesteamaccessesvorowimpl != null)
                {
                    if(lvl2)
                        oadbtransaction.writeDiagnostics(logger, " slsteam exists ", 1);
                    if("Y".equals(custsalesteamaccessesvorowimpl.getUpdateFlag()))
                    {
                        accessPrivilege = "1OllOl11O";
                        if(lvl2)
                            oadbtransaction.writeDiagnostics(logger, " slsteam accessType = UPDATE ", 1);
                        if(lvl1)
                            oadbtransaction.writeDiagnostics(logger, "End", 2);
                        return accessPrivilege;
                    }
                    accessPrivilege = "101lOl11O";
                }
            }
            if("Y".equals(mgrFlag))
            {
                String mgrProfile = oadbtransaction.getProfile("ASN_MGR_UPDATE");
                if(lvl2)
                {
                    StringBuffer stringbuffer3 = new StringBuffer(20);
                    stringbuffer3.append(" Profile ASN_MGR_UPDATE = ");
                    stringbuffer3.append(mgrProfile);
                    oadbtransaction.writeDiagnostics(logger, stringbuffer3.toString(), 1);
                }
                if(mgrProfile == null || "".equals(mgrProfile.trim()))
                    mgrProfile = "U";
                if(mgrGrpIds != null && mgrGrpIds.size() > 0)
                {
                    ODCustHrchyAccessesVOImpl custhrchyaccessesvoimpl = getODCustHrchyAccessesVO();
                    if(custhrchyaccessesvoimpl == null)
                    {
                        MessageToken amessagetoken1[] = {
                            new MessageToken("NAME", "CustHrchyAccessesVO")
                        };
                        throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", amessagetoken1);
                    }
                    custhrchyaccessesvoimpl.initQuery(custId, resourceId, mgrGrpIds);
                    if(custhrchyaccessesvoimpl.hasNext())
                    {
                        accessPrivilege = "101lOl11O";
                        if(lvl2)
                            oadbtransaction.writeDiagnostics(logger, " mgr hrchy exists ", 1);
                        if("U".equals(mgrProfile))
                        {
                            accessPrivilege = "1OllOl11O";
                            if(lvl2)
                                oadbtransaction.writeDiagnostics(logger, " mgr hrchy accessType = UPDATE ", 1);
                            if(lvl1)
                                oadbtransaction.writeDiagnostics(logger, "End", 2);
                            return accessPrivilege;
                        }
                        if("I".equals(mgrProfile))
                        {
                            ODCustHrchyUpdAccessesVOImpl custhrchyupdaccessesvoimpl = getODCustHrchyUpdAccessesVO();
                            if(custhrchyupdaccessesvoimpl == null)
                            {
                                MessageToken amessagetoken3[] = {
                                    new MessageToken("NAME", "CustHrchyUpdAccessesVO")
                                };
                                throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", amessagetoken3);
                            }
                            custhrchyupdaccessesvoimpl.initQuery(custId, mgrGrpIds);
                            if(custhrchyupdaccessesvoimpl.hasNext())
                            {
                                accessPrivilege = "1OllOl11O";
                                if(lvl2)
                                    oadbtransaction.writeDiagnostics(logger, " hrcy inherit accessType = UPDATE ", 1);
                                if(lvl1)
                                    oadbtransaction.writeDiagnostics(logger, "End", 2);
                                return accessPrivilege;
                            }
                        }
                    }
                }
                String adminProfile = oadbtransaction.getProfile("ASN_ADMIN_UPDATE");
                if(lvl2)
                {
                    StringBuffer stringbuffer4 = new StringBuffer(20);
                    stringbuffer4.append(" Profile ASN_ADMIN_UPDATE = ");
                    stringbuffer4.append(adminProfile);
                    oadbtransaction.writeDiagnostics(logger, stringbuffer4.toString(), 1);
                }
                if(adminProfile == null || "".equals(adminProfile.trim()))
                    adminProfile = "R";
                if(adminGrpIds != null && adminGrpIds.size() > 0)
                {
                    ODCustHrchyAccessesVOImpl custhrchyaccessesvoimpl1 = getODCustHrchyAccessesVO();
                    if(custhrchyaccessesvoimpl1 == null)
                    {
                        MessageToken amessagetoken2[] = {
                            new MessageToken("NAME", "CustHrchyAccessesVO")
                        };
                        throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", amessagetoken2);
                    }
                    custhrchyaccessesvoimpl1.initQuery(custId, resourceId, adminGrpIds);
                    if(custhrchyaccessesvoimpl1.hasNext())
                    {
                        accessPrivilege = "101lOl11O";
                        if(lvl2)
                            oadbtransaction.writeDiagnostics(logger, " amdn hrchy exists ", 1);
                        if("U".equals(adminProfile))
                        {
                            accessPrivilege = "1OllOl11O";
                            if(lvl2)
                                oadbtransaction.writeDiagnostics(logger, " admn hrchy accessType = UPDATE ", 1);
                            if(lvl1)
                                oadbtransaction.writeDiagnostics(logger, "End", 2);
                            return accessPrivilege;
                        }
                        if("I".equals(adminProfile))
                        {
                            ODCustHrchyUpdAccessesVOImpl custhrchyupdaccessesvoimpl1 = getODCustHrchyUpdAccessesVO();
                            if(custhrchyupdaccessesvoimpl1 == null)
                            {
                                MessageToken amessagetoken4[] = {
                                    new MessageToken("NAME", "CustHrchyUpdAccessesVO")
                                };
                                throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", amessagetoken4);
                            }
                            custhrchyupdaccessesvoimpl1.initQuery(custId, adminGrpIds);
                            if(custhrchyupdaccessesvoimpl1.hasNext())
                            {
                                accessPrivilege = "1OllOl11O";
                                if(lvl2)
                                    oadbtransaction.writeDiagnostics(logger, " admn hrchy inherit accessType = UPDATE ", 1);
                                if(lvl1)
                                    oadbtransaction.writeDiagnostics(logger, "End", 2);
                                return accessPrivilege;
                            }
                        }
                    }
                }
            }
        }
        if(lvl2)
        {
            StringBuffer stringbuffer2 = new StringBuffer(20);
            stringbuffer2.append(" accessType = ");
            stringbuffer2.append(accessPrivilege);
            oadbtransaction.writeDiagnostics(logger, stringbuffer2.toString(), 1);
        }
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);

		oadbtransaction.writeDiagnostics(logger, "access privilege returned = "+accessPrivilege, 1);
		oadbtransaction.writeDiagnostics(logger, "1OllOl11O = UPDATE  101lOl11O = READONLY ELSE NO ACCESS", 1);

        return accessPrivilege;
	}



  /**
   *
   * Determine's which profile options and view objects to select and invoke for Oppty security access
   */
	public String getOpptyAccessPrivilege(String opptyId, String resourceId)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getOpptyAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(30);
            stringbuffer.append(" entityId = " + opptyId);
            stringbuffer.append(" resourceId = " + resourceId);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
		oadbtransaction.writeDiagnostics(logger, "1OllOl11O = UPDATE  101lOl11O = READONLY ELSE NO ACCESS", 1);

        String mgrFlag = getManagerFlag(resourceId);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);

        return this.getOpptyAccessPrivilege(opptyId, resourceId, mgrFlag);
	}

	public String getOpptyAccessPrivilege(String opptyId, String resourceId, String mgrFlag)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getOpptyAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(30);
            stringbuffer.append(" entityId = " + opptyId);
            stringbuffer.append(" resourceId = " + resourceId);
            stringbuffer.append(" managerFlag = " + mgrFlag);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
		oadbtransaction.writeDiagnostics(logger, "1OllOl11O = UPDATE  101lOl11O = READONLY ELSE NO ACCESS", 1);
        ArrayList adminGrpIds = getAdminGroupIds(resourceId);
        ArrayList mgrGrpIds = getManagerGroupIds(resourceId);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);

        return this.getOpptyAccessPrivilege(opptyId, resourceId, mgrGrpIds, adminGrpIds, mgrFlag);
	}

	public String getOpptyAccessPrivilege(String opptyId, String resourceId, ArrayList mgrGrpIds, ArrayList adminGrpIds, String mgrFlag)
	{
        String accessPrivilege = super.getOpptyAccessPrivilege(opptyId, resourceId, mgrGrpIds, adminGrpIds, mgrFlag);
        OADBTransaction oadbtransaction = getOADBTransaction();

		oadbtransaction.writeDiagnostics("getOpptyAccessPrivilege", "1OllOl11O = UPDATE  101lOl11O = READONLY ELSE NO ACCESS", 1);

        return accessPrivilege;
	}



  /**
   *
   * Determine's which profile options and view objects to select and invoke for Party Site security access
   */
	public String getSiteAccessPrivilege(String siteId, String resourceId)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getSiteAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(30);
            stringbuffer.append(" entityId = " + siteId);
            stringbuffer.append(" resourceId = " + resourceId);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
        String mgrFlag = getManagerFlag(resourceId);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);

        return this.getSiteAccessPrivilege(siteId, resourceId, mgrFlag);
	}

	public String getSiteAccessPrivilege(String siteId, String resourceId, String mgrFlag)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getSiteAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(30);
            stringbuffer.append(" entityId = " + siteId);
            stringbuffer.append(" resourceId = " + resourceId);
            stringbuffer.append(" managerFlag = " + mgrFlag);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
        ArrayList adminGrpIds = getAdminGroupIds(resourceId);
        ArrayList mgrGrpIds = getManagerGroupIds(resourceId);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);

        return this.getSiteAccessPrivilege(siteId, resourceId, mgrGrpIds, adminGrpIds, mgrFlag);
	}

	public String getSiteAccessPrivilege(String siteId, String resourceId, ArrayList mgrGrpIds, ArrayList adminGrpIds, String mgrFlag)
	{
        String logger = "od.oracle.apps.xxcrm.asn.common.fwk.server.ODASNSecurityAMImpl.getSiteAccessPrivilege";
        OADBTransaction oadbtransaction = getOADBTransaction();
        boolean lvl1 = oadbtransaction.isLoggingEnabled(2);
        boolean lvl2 = oadbtransaction.isLoggingEnabled(1);
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "Begin", 2);
        if(lvl2)
        {
            StringBuffer stringbuffer = new StringBuffer(60);
            stringbuffer.append(" entityId = " + siteId);
            stringbuffer.append(" resourceId = " + resourceId);
//            stringbuffer.append(" mgrGrpIds = " + mgrGrpIds == null ? "" : mgrGrpIds.toString());
//            stringbuffer.append(" adminGrpIds = " + adminGrpIds == null ? "" : adminGrpIds.toString());
            stringbuffer.append(" managerFlag = " + mgrFlag);
            oadbtransaction.writeDiagnostics(logger, stringbuffer.toString(), 1);
        }
		oadbtransaction.writeDiagnostics(logger, "1OllOl11O = UPDATE  101lOl11O = READONLY ELSE NO ACCESS", 1);

        String accessPrivilege = "lOllOl11O";
        String siteProfile = null;
        Object obj = null;
        Object obj1 = null;
        siteProfile = oadbtransaction.getProfile("XX_ASN_SITE_ACCESS");
        if(lvl2)
        {
            StringBuffer stringbuffer1 = new StringBuffer(20);
            stringbuffer1.append(" Profile XX_ASN_SITE_ACCESS = ");
            stringbuffer1.append(siteProfile);
            oadbtransaction.writeDiagnostics(logger, stringbuffer1.toString(), 1);
        }
        if(siteProfile == null || "".equals(siteProfile.trim()))
            siteProfile = "T";
        if("F".equals(siteProfile))
        {
            accessPrivilege = "1OllOl11O";
            if(lvl2)
                oadbtransaction.writeDiagnostics(logger, " accessType = UPDATE ", 1);
            if(lvl1)
                oadbtransaction.writeDiagnostics(logger, "End", 2);
            return accessPrivilege;
        }
        if("T".equals(siteProfile))
        {
            ODSiteTeamAccessesVOImpl odsitesalesteamaccessesvoimpl = getODSiteTeamAccessesVO();
            if(odsitesalesteamaccessesvoimpl == null)
            {
                MessageToken amessagetoken[] = {
                    new MessageToken("NAME", "ODSiteTeamAccessesVO")
                };
                throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", amessagetoken);
            }
            odsitesalesteamaccessesvoimpl.initQuery(siteId, resourceId);
            if(odsitesalesteamaccessesvoimpl.hasNext())
            {
                ODSiteTeamAccessesVORowImpl odsitesalesteamaccessesvorowimpl = (ODSiteTeamAccessesVORowImpl)odsitesalesteamaccessesvoimpl.first();
                if(odsitesalesteamaccessesvorowimpl != null)
                {
                    if(lvl2)
                        oadbtransaction.writeDiagnostics(logger, " slsteam exists ", 1);
                    if("Y".equals(odsitesalesteamaccessesvorowimpl.getUpdateFlag()))
                    {
                        accessPrivilege = "1OllOl11O";
                        if(lvl2)
                            oadbtransaction.writeDiagnostics(logger, " slsteam accessType = UPDATE ", 1);
                        if(lvl1)
                            oadbtransaction.writeDiagnostics(logger, "End", 2);
                        return accessPrivilege;
                    }
                    accessPrivilege = "101lOl11O";
                }
            }

            if("Y".equals(mgrFlag))
            {
                String mgrProfile = oadbtransaction.getProfile("ASN_MGR_UPDATE");
                if(lvl2)
                {
                    StringBuffer stringbuffer3 = new StringBuffer(20);
                    stringbuffer3.append(" Profile ASN_MGR_UPDATE = ");
                    stringbuffer3.append(mgrProfile);
                    oadbtransaction.writeDiagnostics(logger, stringbuffer3.toString(), 1);
                }
                if(mgrProfile == null || "".equals(mgrProfile.trim()))
                    mgrProfile = "U";
                if(mgrGrpIds != null && mgrGrpIds.size() > 0)
                {
                    ODSiteHrchyAccessesVOImpl odsitehrchyaccessesvoimpl = getODSiteHrchyAccessesVO();
                    if(odsitehrchyaccessesvoimpl == null)
                    {
                        MessageToken amessagetoken1[] = {
                            new MessageToken("NAME", "SiteHrchyAccessesVO")
                        };
                        throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", amessagetoken1);
                    }
                    odsitehrchyaccessesvoimpl.initQuery(siteId, resourceId, mgrGrpIds);
                    if(odsitehrchyaccessesvoimpl.hasNext())
                    {
                        accessPrivilege = "101lOl11O";
                        if(lvl2)
                            oadbtransaction.writeDiagnostics(logger, " mgr hrchy exists ", 1);
                        if("U".equals(mgrProfile))
                        {
                            accessPrivilege = "1OllOl11O";
                            if(lvl2)
                                oadbtransaction.writeDiagnostics(logger, " mgr hrchy accessType = UPDATE ", 1);
                            if(lvl1)
                                oadbtransaction.writeDiagnostics(logger, "End", 2);
                            return accessPrivilege;
                        }
                        if("I".equals(mgrProfile))
                        {
                            ODSiteHrchyUpdAccessesVOImpl odsitehrchyupdaccessesvoimpl = getODSiteHrchyUpdAccessesVO();
                            if(odsitehrchyupdaccessesvoimpl == null)
                            {
                                MessageToken amessagetoken3[] = {
                                    new MessageToken("NAME", "SiteHrchyUpdAccessesVO")
                                };
                                throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", amessagetoken3);
                            }
                            odsitehrchyupdaccessesvoimpl.initQuery(siteId, mgrGrpIds);
                            if(odsitehrchyupdaccessesvoimpl.hasNext())
                            {
                                accessPrivilege = "1OllOl11O";
                                if(lvl2)
                                    oadbtransaction.writeDiagnostics(logger, " hrcy inherit accessType = UPDATE ", 1);
                                if(lvl1)
                                    oadbtransaction.writeDiagnostics(logger, "End", 2);
                                return accessPrivilege;
                            }
                        }
                    }
                }
                String adminProfile = oadbtransaction.getProfile("ASN_ADMIN_UPDATE");
                if(lvl2)
                {
                    StringBuffer stringbuffer4 = new StringBuffer(20);
                    stringbuffer4.append(" Profile ASN_ADMIN_UPDATE = ");
                    stringbuffer4.append(adminProfile);
                    oadbtransaction.writeDiagnostics(logger, stringbuffer4.toString(), 1);
                }
                if(adminProfile == null || "".equals(adminProfile.trim()))
                    adminProfile = "R";
                if(adminGrpIds != null && adminGrpIds.size() > 0)
                {
                    ODSiteHrchyAccessesVOImpl odsitehrchyaccessesvoimpl1 = getODSiteHrchyAccessesVO();
                    if(odsitehrchyaccessesvoimpl1 == null)
                    {
                        MessageToken amessagetoken2[] = {
                            new MessageToken("NAME", "SiteHrchyAccessesVO")
                        };
                        throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", amessagetoken2);
                    }
                    odsitehrchyaccessesvoimpl1.initQuery(siteId, resourceId, adminGrpIds);
                    if(odsitehrchyaccessesvoimpl1.hasNext())
                    {
                        accessPrivilege = "101lOl11O";
                        if(lvl2)
                            oadbtransaction.writeDiagnostics(logger, " amdn hrchy exists ", 1);
                        if("U".equals(adminProfile))
                        {
                            accessPrivilege = "1OllOl11O";
                            if(lvl2)
                                oadbtransaction.writeDiagnostics(logger, " admn hrchy accessType = UPDATE ", 1);
                            if(lvl1)
                                oadbtransaction.writeDiagnostics(logger, "End", 2);
                            return accessPrivilege;
                        }
                        if("I".equals(adminProfile))
                        {
                            ODSiteHrchyUpdAccessesVOImpl odsitehrchyupdaccessesvoimpl1 = getODSiteHrchyUpdAccessesVO();
                            if(odsitehrchyupdaccessesvoimpl1 == null)
                            {
                                MessageToken amessagetoken4[] = {
                                    new MessageToken("NAME", "SiteHrchyUpdAccessesVO")
                                };
                                throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", amessagetoken4);
                            }
                            odsitehrchyupdaccessesvoimpl1.initQuery(siteId, adminGrpIds);
                            if(odsitehrchyupdaccessesvoimpl1.hasNext())
                            {
                                accessPrivilege = "1OllOl11O";
                                if(lvl2)
                                    oadbtransaction.writeDiagnostics(logger, " admn hrchy inherit accessType = UPDATE ", 1);
                                if(lvl1)
                                    oadbtransaction.writeDiagnostics(logger, "End", 2);
                                return accessPrivilege;
                            }
                        }
                    }
                }
            }
        }
        if(lvl2)
        {
            StringBuffer stringbuffer2 = new StringBuffer(20);
            stringbuffer2.append(" accessType = ");
            stringbuffer2.append(accessPrivilege);
            oadbtransaction.writeDiagnostics(logger, stringbuffer2.toString(), 1);
        }
        if(lvl1)
            oadbtransaction.writeDiagnostics(logger, "End", 2);

		oadbtransaction.writeDiagnostics(logger, "access privilege returned = "+accessPrivilege, 1);
		oadbtransaction.writeDiagnostics(logger, "1OllOl11O = UPDATE  101lOl11O = READONLY ELSE NO ACCESS", 1);

        return accessPrivilege;
	}

  /**
   *
   * Container's getter for ODLeadSalesTeamAccessesVO
   */
  public ODLeadSalesTeamAccessesVOImpl getODLeadSalesTeamAccessesVO()
  {
    return (ODLeadSalesTeamAccessesVOImpl)findViewObject("ODLeadSalesTeamAccessesVO");
  }

  /**
   *
   * Container's getter for ODLeadHrchyAccessesVO
   */
  public ODLeadHrchyAccessesVOImpl getODLeadHrchyAccessesVO()
  {
    return (ODLeadHrchyAccessesVOImpl)findViewObject("ODLeadHrchyAccessesVO");
  }

  /**
   *
   * Container's getter for ODLeadHrchyUpdAccessesVO
   */
  public ODLeadHrchyUpdAccessesVOImpl getODLeadHrchyUpdAccessesVO()
  {
    return (ODLeadHrchyUpdAccessesVOImpl)findViewObject("ODLeadHrchyUpdAccessesVO");
  }

  /**
   *
   * Container's getter for ODLeadMgrHrchyAccessesVO
   */
  public ODLeadMgrHrchyAccessesVOImpl getODLeadMgrHrchyAccessesVO()
  {
    return (ODLeadMgrHrchyAccessesVOImpl)findViewObject("ODLeadMgrHrchyAccessesVO");
  }

  /**
   *
   * Container's getter for ODLeadMgrHrchyUpdAccessesVO
   */
  public ODLeadMgrHrchyUpdAccessesVOImpl getODLeadMgrHrchyUpdAccessesVO()
  {
    return (ODLeadMgrHrchyUpdAccessesVOImpl)findViewObject("ODLeadMgrHrchyUpdAccessesVO");
  }

  /**
   *
   * Container's getter for ODOpptySalesTeamAccessesVO
   */
  public ODOpptySalesTeamAccessesVOImpl getODOpptySalesTeamAccessesVO()
  {
    return (ODOpptySalesTeamAccessesVOImpl)findViewObject("ODOpptySalesTeamAccessesVO");
  }

  /**
   *
   * Container's getter for ODOpptyHrchyAccessesVO
   */
  public ODOpptyHrchyAccessesVOImpl getODOpptyHrchyAccessesVO()
  {
    return (ODOpptyHrchyAccessesVOImpl)findViewObject("ODOpptyHrchyAccessesVO");
  }

  /**
   *
   * Container's getter for ODOpptyHrchyUpdAccessesVO
   */
  public ODOpptyHrchyUpdAccessesVOImpl getODOpptyHrchyUpdAccessesVO()
  {
    return (ODOpptyHrchyUpdAccessesVOImpl)findViewObject("ODOpptyHrchyUpdAccessesVO");
  }

  /**
   *
   * Container's getter for ODOpptyMgrHrchyAccessesVO
   */
  public ODOpptyMgrHrchyAccessesVOImpl getODOpptyMgrHrchyAccessesVO()
  {
    return (ODOpptyMgrHrchyAccessesVOImpl)findViewObject("ODOpptyMgrHrchyAccessesVO");
  }

  /**
   *
   * Container's getter for ODOpptyMgrHrchyUpdAccessesVO
   */
  public ODOpptyMgrHrchyUpdAccessesVOImpl getODOpptyMgrHrchyUpdAccessesVO()
  {
    return (ODOpptyMgrHrchyUpdAccessesVOImpl)findViewObject("ODOpptyMgrHrchyUpdAccessesVO");
  }

  /**
   *
   * Container's getter for ODCustSalesTeamAccessesVO
   */
  public ODCustSalesTeamAccessesVOImpl getODCustSalesTeamAccessesVO()
  {
    return (ODCustSalesTeamAccessesVOImpl)findViewObject("ODCustSalesTeamAccessesVO");
  }

  /**
   *
   * Container's getter for ODCustHrchyAccessesVO
   */
  public ODCustHrchyAccessesVOImpl getODCustHrchyAccessesVO()
  {
    return (ODCustHrchyAccessesVOImpl)findViewObject("ODCustHrchyAccessesVO");
  }

  /**
   *
   * Container's getter for ODCustHrchyUpdAccessesVO
   */
  public ODCustHrchyUpdAccessesVOImpl getODCustHrchyUpdAccessesVO()
  {
    return (ODCustHrchyUpdAccessesVOImpl)findViewObject("ODCustHrchyUpdAccessesVO");
  }

  /**
   *
   * Container's getter for ODCustMgrHrchyAccessesVO
   */
  public ODCustMgrHrchyAccessesVOImpl getODCustMgrHrchyAccessesVO()
  {
    return (ODCustMgrHrchyAccessesVOImpl)findViewObject("ODCustMgrHrchyAccessesVO");
  }

  /**
   *
   * Container's getter for ODCustMgrHrchyUpdAccessesVO
   */
  public ODCustMgrHrchyUpdAccessesVOImpl getODCustMgrHrchyUpdAccessesVO()
  {
    return (ODCustMgrHrchyUpdAccessesVOImpl)findViewObject("ODCustMgrHrchyUpdAccessesVO");
  }


  /**
   *
   * Container's getter for ODSiteHrchyAccessesVO
   */
  public ODSiteHrchyAccessesVOImpl getODSiteHrchyAccessesVO()
  {
    return (ODSiteHrchyAccessesVOImpl)findViewObject("ODSiteHrchyAccessesVO");
  }

  /**
   *
   * Container's getter for ODSiteHrchyUpdAccessesVO
   */
  public ODSiteHrchyUpdAccessesVOImpl getODSiteHrchyUpdAccessesVO()
  {
    return (ODSiteHrchyUpdAccessesVOImpl)findViewObject("ODSiteHrchyUpdAccessesVO");
  }

  /**
   *
   * Container's getter for ODSiteMgrHrchyAccessesVO
   */
  public ODSiteMgrHrchyAccessesVOImpl getODSiteMgrHrchyAccessesVO()
  {
    return (ODSiteMgrHrchyAccessesVOImpl)findViewObject("ODSiteMgrHrchyAccessesVO");
  }

  /**
   *
   * Container's getter for ODSiteMgrHrchyUpdAccessesVO
   */
  public ODSiteMgrHrchyUpdAccessesVOImpl getODSiteMgrHrchyUpdAccessesVO()
  {
    return (ODSiteMgrHrchyUpdAccessesVOImpl)findViewObject("ODSiteMgrHrchyUpdAccessesVO");
  }


  /**
   *
   * Container's getter for ODSiteTeamAccessesVO
   */
  public ODSiteTeamAccessesVOImpl getODSiteTeamAccessesVO()
  {
    return (ODSiteTeamAccessesVOImpl)findViewObject("ODSiteTeamAccessesVO");
  }




}