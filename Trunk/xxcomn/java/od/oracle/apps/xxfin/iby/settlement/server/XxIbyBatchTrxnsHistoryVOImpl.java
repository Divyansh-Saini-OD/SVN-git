package od.oracle.apps.xxfin.iby.settlement.server;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;
import oracle.apps.fnd.framework.server.OADBTransactionImpl;
import oracle.apps.fnd.framework.OAFwkConstants;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxIbyBatchTrxnsHistoryVOImpl extends OAViewObjectImpl {
    /**This is the default constructor (do not remove)
     */
    public XxIbyBatchTrxnsHistoryVOImpl() {
    }
    
    public void initIbyBatchTrxnsHistory( String lsLowDate, String lsHighDate, 
                                    String lsRecptNum, String lsStoreNum, 
                                    String lsRegNum, String lsTrxNum,
                                    String lsBatchNum, String lsDollarAmt, 
                                    String lsTrxType, String lsOrdType)
    
    {
    
        
        System.out.println("--In VOimpl--");
        System.out.println("lsLowDate: " + lsLowDate);
            System.out.println("lsHighDate: " + lsHighDate);                                    
            System.out.println("lsRecptNum: " + lsRecptNum);                                    
            System.out.println("lsStoreNum: " + lsStoreNum);                                    
            System.out.println("lsRegNum: " + lsRegNum);                                    
            System.out.println("lsTrxNum: " + lsTrxNum);                                    
            System.out.println("lsBatchNum: " + lsBatchNum);                                    
            System.out.println("lsDollarAmt: " + lsDollarAmt);                                    
            System.out.println("lsTrxType: " + lsTrxType);                                    
            System.out.println("lsOrdType: " + lsOrdType);
			
			OADBTransactionImpl trx = (OADBTransactionImpl)getDBTransaction();
			
        if (trx.isLoggingEnabled(OAFwkConstants.STATEMENT)) {
		 trx.writeDiagnostics(this, "lsHighDate: " + lsHighDate,   OAFwkConstants.STATEMENT);   
		 trx.writeDiagnostics(this, "lsRecptNum: " + lsRecptNum,   OAFwkConstants.STATEMENT);   
		 trx.writeDiagnostics(this, "lsStoreNum: " + lsStoreNum,   OAFwkConstants.STATEMENT);   
		 trx.writeDiagnostics(this, "lsRegNum: " + lsRegNum,       OAFwkConstants.STATEMENT);       
		 trx.writeDiagnostics(this, "lsTrxNum: " + lsTrxNum,       OAFwkConstants.STATEMENT);       
		 trx.writeDiagnostics(this, "lsBatchNum: " + lsBatchNum,   OAFwkConstants.STATEMENT);   
		 trx.writeDiagnostics(this, "lsDollarAmt: " + lsDollarAmt, OAFwkConstants.STATEMENT); 
		 trx.writeDiagnostics(this, "lsTrxType: " + lsTrxType,     OAFwkConstants.STATEMENT);     
		 trx.writeDiagnostics(this, "lsOrdType: " + lsOrdType,     OAFwkConstants.STATEMENT);
        }				
            
        if( (lsRecptNum == null || "".equals(lsRecptNum)) &&
            (lsStoreNum == null || "".equals(lsStoreNum)) &&
            (lsHighDate == null || "".equals(lsHighDate)) &&
			(lsLowDate == null || "".equals(lsLowDate))
          )
          throw new OAException("1. For Search with Date Range, please provide combination of LowDate, HighDate and Store Number. 2. Or please provide Receipt Number. Either one of the search criteria is Required.", OAException.ERROR);  
    	else if 
		 (
            (
			(lsStoreNum == null || "".equals(lsStoreNum)) ||
            (lsHighDate == null || "".equals(lsHighDate)) ||
			(lsLowDate == null || "".equals(lsLowDate))
			) &&  
			(lsRecptNum == null || "".equals(lsRecptNum))
		 )		
		  throw new OAException("1. For Search with Date Range, please provide combination of LowDate, HighDate and Store Number. 2. Or please provide Receipt Number. Either one of the search criteria is Required.", OAException.ERROR); 

		  
        StringBuffer whereClause = new StringBuffer();
		
		if ( lsRecptNum == null || "".equals(lsRecptNum)) {
           setQuery(null);
		   setWhereClause(null);
		   setWhereClauseParams(null);
		   String strQuery =                                                                                                                                                                         
		    " SELECT   ixreceiptnumber as receipt_num                                                                                                         " +
            "       ,TO_DATE(ixsettlementdate)  as date_val                                                                                                   " +
            "       ,ixstorenumber     store_num                                                                                                              " +
            "       ,DECODE(ixregisternumber,'54','Manual Refunds','55','iRec','99','AOPS','POS') as ord_type                                                 " +
            "       ,ixregisternumber as reg_num                                                                                                              " +
            "       ,DECODE(IXREGISTERNUMBER,'54', NVL(IXINVOICE,' '),'55', NVL(IXINVOICE,' ') ,'56', ' ','99', IXINVOICE ,NVL(IXTRANSNUMBER,'')) as TRX_NUM  " +
            "       ,NVL(IXIPAYMENTBATCHNUMBER,' ') as BATCH_NUM                                                                                              " +
            "       ,ixamount/100    as   dollar_amt                                                                                                          " +
            "       ,ixtransactiontype as trx_type                                                                                                            " +
            "       ,ixrecptnumber as recpt_num                                                                                                               " +
            "       ,attribute7 as cash_rec_id                                                                                                                " +
            "  FROM  XX_IBY_BATCH_TRXNS_HISTORY                                                                                                               " +
            " WHERE IXRECORDTYPE = 101                                                                                                                        " +
            " and TO_DATE(ixsettlementdate) >= :1                                                                                                             " +
            " AND TO_DATE(ixsettlementdate) <= :2                                                                                                             " ;

            String strWhereClauseQuery1 = null;	
            boolean needStoreParam = false;			
            if ( lsStoreNum == null || "".equals(lsStoreNum))	
               strWhereClauseQuery1 = null;
            else {
               strWhereClauseQuery1 = " AND ixstorenumber = :3 "; 
               strQuery = strQuery + strWhereClauseQuery1;	
               needStoreParam = true;			   
            }			   

            String strWhereClauseQuery2 = null;	
            boolean needRegNumParam = false;			
            if ( lsRegNum == null || "".equals(lsRegNum))	
               strWhereClauseQuery2 = null;
            else {
               strWhereClauseQuery2 = " AND lsRegNum = :4 "; 	
               strQuery = strQuery + strWhereClauseQuery2;
               needRegNumParam = true;			   
            }			   
			   
            String strWhereClauseQuery3 = null;	
            boolean needTrxNumParam = false;			
            if ( lsTrxNum == null || "".equals(lsTrxNum))	
               strWhereClauseQuery3 = null;
            else {
               strWhereClauseQuery3 = " AND DECODE(IXREGISTERNUMBER,'54', NVL(IXINVOICE,' '),'55', NVL(IXINVOICE,' ') ,'56', ' ','99', IXINVOICE ,NVL(IXTRANSNUMBER,'')) = :5 "; 	
               strQuery = strQuery + strWhereClauseQuery3;
               needTrxNumParam = true;			   
            }			   
			   
            String strWhereClauseQuery4 = null;	
            boolean needBatchNumParam = false;			
            if ( lsBatchNum == null || "".equals(lsBatchNum))	
               strWhereClauseQuery4 = null;
            else {
               strWhereClauseQuery4 = " AND IXIPAYMENTBATCHNUMBER = :6 "; 
               strQuery = strQuery + strWhereClauseQuery4;	
               needBatchNumParam = true;			   
            }			   
			   
            String strWhereClauseQuery5 = null;		
			boolean needAmountParam = false;
            if ( lsDollarAmt == null || "".equals(lsDollarAmt))	
               strWhereClauseQuery5 = null;
            else {
               strWhereClauseQuery5 = " AND ixamount/100 = :7 ";
			   strQuery = strQuery + strWhereClauseQuery5;	
               needAmountParam = true; 			   
            }		
			
            String strWhereClauseQuery6 = null;	
            boolean needTrxTypeParam = false;			
            if ( lsTrxType == null || "".equals(lsTrxType))	
               strWhereClauseQuery6 = null;
            else {
               strWhereClauseQuery6 = " AND IXTRANSACTIONTYPE = :8 "; 	
			   strQuery = strQuery + strWhereClauseQuery6;	
               needTrxTypeParam = true;			   
            }				   
			
            String strWhereClauseQuery7 = null;	
            boolean needOrdTypeParam = false;			
            if ( lsOrdType == null || "".equals(lsOrdType))	
               strWhereClauseQuery7 = null;
            else {
               strWhereClauseQuery7 = " AND DECODE(ixregisternumber,'54','Manual Refunds','55','iRec','99','AOPS','POS') = :9 "; 			
			   strQuery = strQuery + strWhereClauseQuery7;	
               needOrdTypeParam = true;			   
            }			
            /*			   
                           " AND (:3 IS NULL OR(:3 IS NOT NULL AND  ixstorenumber = :3))                                                                                                             " +
                           " AND (:4 IS NULL OR(:4 IS NOT NULL AND  ixregisternumber = :4))                                                                                                          " +
                           " AND (:5 IS NULL OR(:5 IS NOT NULL AND  ixtransnumber = :5))                                                                                                             " +
                           " AND (:6 IS NULL OR(:6 IS NOT NULL AND  IXIPAYMENTBATCHNUMBER = :6))                                                                                                     " +
                           " AND (:7 IS NULL OR(:7 IS NOT NULL AND  ixamount/100 = :7))                                                                                                              " +
                           " AND (:8 IS NULL OR(:8 IS NOT NULL AND  IXTRANSACTIONTYPE = :8))                                                                                                         " +
                           " AND DECODE(ixregisternumber,'54','Manual Refunds','55','iRec','99','AOPS','POS') = nvl(:9,DECODE(ixregisternumber,'54','Manual Refunds','55','iRec','99','AOPS','POS')) ";
            */						   
			setQuery(strQuery);
            setWhereClauseParam(0,lsLowDate);
            setWhereClauseParam(1,lsHighDate);
			
            if ( needStoreParam)	
              setWhereClauseParam(2,lsStoreNum);  
			  
            if ( needRegNumParam)	
              setWhereClauseParam(3,needRegNumParam);    
			  
            if ( needTrxNumParam)	
              setWhereClauseParam(4,lsTrxNum); 
			  
            if ( needBatchNumParam)	
              setWhereClauseParam(5,lsBatchNum);  
  			  
            if ( needAmountParam)	
              setWhereClauseParam(6,lsDollarAmt);  
			  
            if ( needTrxTypeParam)	
              setWhereClauseParam(7,lsTrxType);  
			     
            if ( needOrdTypeParam)	
              setWhereClauseParam(8,lsOrdType);    
 		
		} else {
			if( 
			    !(lsLowDate  == null || "".equals(lsLowDate  )) ||
				!(lsHighDate == null || "".equals(lsHighDate )) ||
				!(lsStoreNum == null || "".equals(lsStoreNum )) ||
				!(lsRegNum   == null || "".equals(lsRegNum   )) ||
				!(lsTrxNum   == null || "".equals(lsTrxNum   )) ||
				!(lsBatchNum == null || "".equals(lsBatchNum )) ||
				!(lsDollarAmt== null || "".equals(lsDollarAmt)) ||
				!(lsTrxType  == null || "".equals(lsTrxType  )) ||
				!(lsOrdType  == null || "".equals(lsOrdType  ))				
			  )
			  throw new OAException("1. For Search with Date Range, please provide combination of LowDate, HighDate and Store Number. 2. Or please provide Reciept Number. Either one of the search criteria is Required.", OAException.ERROR);  

           setQuery(null);
		   setWhereClause(null);
		   setWhereClauseParams(null);
		   String strQuery = 
		                   " SELECT   ixreceiptnumber as receipt_num                                                                                                                                 " +
                           "       ,TO_DATE(ixsettlementdate)  as date_val                                                                                                                           " +
                           "       ,ixstorenumber     store_num                                                                                                                                      " +
                           "       ,DECODE(ixregisternumber,'54','Manual Refunds','55','iRec','99','AOPS','POS') as ord_type                                                                         " +
                           "       ,ixregisternumber as reg_num                                                                                                                                      " +
                           "       ,DECODE(IXREGISTERNUMBER,'54', NVL(IXINVOICE,' '),'55', NVL(IXINVOICE,' ') ,'56', ' ','99', IXINVOICE ,NVL(IXTRANSNUMBER,'')) as TRX_NUM                          " +
                           "       ,NVL(IXIPAYMENTBATCHNUMBER,' ') as BATCH_NUM                                                                                                                      " +
                           "       ,ixamount/100    as   dollar_amt                                                                                                                                  " +
                           "       ,ixtransactiontype as trx_type                                                                                                                                    " +
                           "       ,ixrecptnumber as recpt_num                                                                                                                                       " +
                           "       ,attribute7 as cash_rec_id                                                                                                                                        " +
                           "  FROM  XX_IBY_BATCH_TRXNS_HISTORY                                                                                                                                       " +
                           " WHERE IXRECORDTYPE = 101                                                                                                                                                " +
                           " and ixrecptnumber = :1                                                                                                                                                  " ;
			setQuery(strQuery);
            setWhereClauseParam(0,lsRecptNum);
		}
            
            
        System.out.println("##### Query="+getQuery());
		if (trx.isLoggingEnabled(OAFwkConstants.STATEMENT)) {
		  trx.writeDiagnostics(this, "Query=" + getQuery(), OAFwkConstants.STATEMENT);
		}
        executeQuery();
        System.out.println("In VO rowcount="+getRowCount());
		if (trx.isLoggingEnabled(OAFwkConstants.STATEMENT)) {
		  trx.writeDiagnostics(this, "In VO rowcount="+getRowCount(), OAFwkConstants.STATEMENT);
		}
       
       
    }
    
    
}
