/*===========================================================================+
 |      Copyright (c) 2005, 2014 Oracle Corporation, Redwood Shores, CA, USA |
 |                         All rights reserved.                              |
 +===========================================================================+
 |  HISTORY                                                                  |
 |       04-Dec-00  krmenon       Created.                                   |
 |       13-May-02  albowicz      Modified for enhancement request 2006628.  |
 |                                The customer search now supports external  |
 |                                users and trx number searches.  Changes    |
 |                                include:  Trx VOs were added, a generic    |
 |                                initialization function was added which    |
 |                                returns the correct VO to use in the       |
 |                                table and functions were added that allows |
 |                                the controller to determine how many       |
 |                                customers/sites a particular user has      |
 |                                access to.                                 |
 |       30-Jan-03  albowicz      Modified for integration with Anonymous    |
 |                                Login Feature.  (Bug 2750792)              |
 |       29-Dec-03  vnb           Bug # 3152910 - 11.5.10 Logging Mandate    |
 |					                      Compliance					                       |
 |       25-Oct-04  vnb           Bug 3926187 - Handle exceptions thrown on  |
 |                                the Customer Search page                   |
 |       02-Feb-05  rsinthre      Bug 4153827 - Search in the cust page not  |
 |                                working after clicking all locations link  |
 |       24-May-05  vnb          Bug 4197060 - MOAC Uptake                       |
 |       12-Dec-07  avepati      Bug 6622674 -Java Code Changes For JDBC 11G On MT|
 |       07-Jul-11  mbolli       Bug#12730811 - Update CustomerSearchPVO values|
 |       12-Jul-11  mbolli       Bug#10265497 - check box or profile option  |
 |                                 needed to restrict contact				 |
 |       13-Jul-11  mbolli       Bug#12751159 - High Performance Issue in    |
 |                                iReceivables Customer Search Page          |
 |       25-Apr-14   melapaku    Bug 18645381 - In Customer search,all       |
 |                               locations shouldn't show ShipTo locations   |
 +===========================================================================*/
/**
 * Application Module: This AM is for the Customer Search Process. The AM
 * contains a View Object which retrieves records from a global temporary table
 * in the database. Data is avaliable as long as the AM exists in the JVM. The
 * table is populated by calling a PL/SQL procedure using the JDBC call. It
 * uses the same database connection associated to the instance of the AM in
 * order to maintain a common database session which is necessary for the
 * global temporary table to work.
 *
 * @author 	Krishnakumar Menon
 */
package oracle.apps.ar.irec.common.server;

// ---------------------------------------------------------------
// ---    File generated by Oracle Business Components for Java.
// ---------------------------------------------------------------


import oracle.apps.fnd.common.VersionInfo;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.ar.irec.framework.IROARootApplicationModuleImpl;
import oracle.apps.ar.irec.common.server.CreditMemoSearchResultsVOImpl;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.ar.irec.common.server.TransactionSearchResultsBaseVOImpl;
import oracle.apps.ar.irec.common.server.ExternalUserSearchResultsVOImpl;
import oracle.apps.ar.irec.common.server.ExternalUserAccessabilityCountsVOImpl;
import com.sun.java.util.collections.ArrayList;
import java.util.StringTokenizer;
import oracle.jdbc.OracleCallableStatement;
import java.sql.Types;
import oracle.jbo.domain.Number;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.apps.ar.irec.common.server.ArwSearchCustomers.CustsiteRec;
import oracle.jbo.RowSetIterator;



public class CustomerSearchAMImpl extends IROARootApplicationModuleImpl {

  public static final String RCS_ID="$Header: CustomerSearchAMImpl.java 120.11.12020000.2 2014/04/25 16:06:23 melapaku ship $";
  public static final boolean RCS_ID_RECORDED =
        VersionInfo.recordClassVersion(RCS_ID, "oracle.apps.ar.irec.common.server");

  protected CustomerSearchResultsVOImpl CustomerSearchResultsVO;
  /**
    * This is the default constructor (do not remove)
    */
  public CustomerSearchAMImpl()
  {
  }


  /**
    * Sample main for debugging Business Components code using the tester.
    */
  public static void main(String[] args)
  {
    launchTester("oracle.apps.ar.irec.common.server", /* package name */
      "CustomerSearchAMLocal" /* Configuration Name */);
  }

  /** This function returns the customer counts info which will allow the controller
   *  to decide if to forward the user to an account/site homepage, pre-populate the 
   *  results table with a customer search or just do nothing.
   */
  public String getCustomerCountInfo()
  {
    ExternalUserAccessabilityCountsVOImpl countsVO = getExternalUserAccessabilityCountsVO();

    if (countsVO.isExecuted() == false)
      countsVO.initQuery( getPersonId() );
    
    String resultString = "TAKE_NO_ACTION";
    ExternalUserAccessabilityCountsVORowImpl row = (ExternalUserAccessabilityCountsVORowImpl)countsVO.first();

    if ( (row.getAccessableSiteCount()).intValue() == 1 )
    {
      resultString = row.getSingleSiteCustomerId().toString();
      resultString += "~~~";
      resultString += row.getSingleSiteSiteId().toString();
    }
    else
    if ( (row.getAccessableCustomerCount()).intValue() == 1)
      return row.getSingleCustomerCustomerId().toString();

    return resultString;
  }


  /** This function returns the concatenation of Customer Id and Site Id only if 
   *  this user has access to a single customer site.
   */
  public String getSingularSiteInfo()
  {
      
    ExternalUserAccessabilityCountsVOImpl countsVO = getExternalUserAccessabilityCountsVO();

    if (countsVO.isExecuted() == false)
      countsVO.initQuery( getPersonId() );
    
    String resultString = null;
    ExternalUserAccessabilityCountsVORowImpl row = (ExternalUserAccessabilityCountsVORowImpl)countsVO.first();

    if ( (row.getAccessableSiteCount()).intValue() == 1 )
    {
      resultString = row.getSingleSiteCustomerId().toString();
      resultString += "~~~";
      resultString += row.getSingleSiteSiteId().toString();
    }

    return resultString;
  }

  /** This function returns Customer Id only if this user has access
   *  to a single customer.
   */
  public String getSingularCustomerId()
  {
 
    ExternalUserAccessabilityCountsVOImpl countsVO = getExternalUserAccessabilityCountsVO();

    if (countsVO.isExecuted() == false)
      countsVO.initQuery( getPersonId() );
    
    ExternalUserAccessabilityCountsVORowImpl row = (ExternalUserAccessabilityCountsVORowImpl)countsVO.first();

    if ( (row.getAccessableCustomerCount()).intValue() == 1)
      return row.getSingleCustomerCustomerId().toString();

    return null;
  }


  /** This function initializes the correct VO based on the searchType.  The
   *  VO name is returned as a result to enable the CO to attach the AK
   *  table to correct results. Customer ID will be set if the user clicks on a particular
   *  customer in the UI.
   */
  public String initializeResultsVO (String sKeyWord, String sSearchType, String sCustomerId,String showAllSites,String searchByNameNumber, String acctGroupOption, String excludeContactInfo, String fromAllLoc,String hideAcctSitesOption,String isSingleCustomer)
  {
    boolean isInternal = (isInternalCustomer()).booleanValue();
    String sPersonId = null;
    OAViewObjectImpl resultsVO = null;
    
    if ( (sSearchType != null && sSearchType.equals("CUSTOMER_NAME")) ||  sCustomerId != null)
    {
        // if Internal use the interMedia search
        if( isInternal )
        {
          if( sSearchType != null)
            resultsVO = initializeInterMediaVO(sKeyWord,searchByNameNumber, excludeContactInfo, showAllSites);
          else
          {
            resultsVO = getInternalCustomerSearchByCustomerIdVO();
            //Modified for Bug 18645381
            ((InternalCustomerSearchByCustomerIdVOImpl)resultsVO).initQuery(sCustomerId, excludeContactInfo, showAllSites);
    
          }
        }
        else
        {
          // Performing an external user customer search
          resultsVO = getExternalUserSearchResultsVO();
          ((ExternalUserSearchResultsVOImpl)resultsVO).initQuery(sKeyWord, getPersonId(), sCustomerId, showAllSites, acctGroupOption, fromAllLoc, excludeContactInfo, hideAcctSitesOption, isSingleCustomer);
        }
    }
    else
    {
      // We are peforming a trx based search.  Need to figure out which
      // VO to use then initialize.
      TransactionSearchResultsBaseVOImpl trxResultsVO = getTransactionSearchResultsBaseVO(sSearchType);

      if( !isInternal)
        sPersonId = getPersonId();

      trxResultsVO.initQuery(sKeyWord, isInternal, sPersonId, sSearchType, excludeContactInfo);
      resultsVO = trxResultsVO;
    }
    
  
    

    // Return the view usage name so CO can assign the results table to the view object
    // that was just initialized.
    return resultsVO.getDefName();
  }


  // This function performs the logic of getting the right VO based on the type of search being performed.
  private TransactionSearchResultsBaseVOImpl getTransactionSearchResultsBaseVO(String sSearchType)
  {
    if (sSearchType.equals("CREDIT_MEMOS"))
      return getCreditMemoSearchResultsVO();

    if (sSearchType.equals("CREDIT_REQUESTS"))
      return getCreditRequestsSearchResultsVO();

    if (sSearchType.equals("DEBIT_MEMOS"))
      return getDebitMemoSearchResultsVO();

    if (sSearchType.equals("DEPOSITS"))
      return getDepositsSearchResultsVO();

    if (sSearchType.equals("INVOICES"))
      return getInvoiceSearchResultsVO();

    if (sSearchType.equals("PAYMENTS"))
      return getPaymentSearchResultsVO();

    if (sSearchType.equals("SALES_ORDERS"))
      return getSalesOrdersSearchResultsVO();

    if (sSearchType.equals("PURCHASE_ORDERS"))
      return getPurchaseOrderSearchResultsVO();

    return null;
  }



  /**
   * This method initializes all the VO associated to this AM. It will populate the
   * view object with the results of the search for the keyword.
   */
  public CustomerSearchResultsVOImpl initializeInterMediaVO( String keyWord, String searchByNameNumber, String excludeContactInfo, String showAllSites)
  {
    doContextSearch(keyWord,searchByNameNumber, excludeContactInfo, showAllSites);

    CustomerSearchResultsVOImpl csVO = getCustomerSearchResultsVO();
    csVO.setPreparedForExecution(true);
    csVO.executeQuery();

    OADBTransaction txn = getOADBTransaction();
    //Bug fix # 3152910	- 11.5.10 Logging Mandate Compliance
    if (txn.isLoggingEnabled(OAFwkConstants.STATEMENT))
      txn.writeDiagnostics(this, "Fetched rows" + csVO.getFetchedRowCount(),
                           OAFwkConstants.STATEMENT );

    return csVO;
  }


  /**
   * This method gets a database connection and executes a PL/SQL procedure.
   * The PL/SQL procedure populates a global temporary table with the results
   * of a context search (which is performed by another PL/SQL procedure). The
   * data in the global temporary table is retained for the current database
   * session. Once this AM is released, the data will no longer be available.
   */
  protected void doContextSearch( String keyWord , String searchByNameNumber, String excludeContactInfo, String showAllSites)
  {
    OADBTransaction tx = (OADBTransaction)this.getOADBTransaction();

    //Bug fix # 3152910	- 11.5.10 Logging Mandate Compliance
    if (tx.isLoggingEnabled(OAFwkConstants.PROCEDURE))
      tx.writeDiagnostics(this, "Starting doContextSearch for" + keyWord, OAFwkConstants.PROCEDURE );

   //Bug 3926187 - Modified to display the SQL error message on the page,
   //in case of exceptions.
    String sStatus        = "";
    String sErrorMessage  = null;
    int iErrorCount       = 0;

    String sqlStatement = "BEGIN" +
                          "  arw_search_customers.ari_search(i_keyword => :1 , " +
                                         "i_name_num            => :2 , " +
										 "i_exclude_contact     => :3 , " +
										 "i_show_all_sites        => :4 , " +
                                         "x_status              => :5 , " +
                                         "x_msg_count           => :6 , " +
                                         "x_msg_data            => :7 ); " +
                          " END;";
    OracleCallableStatement cStmt = (OracleCallableStatement)tx.createCallableStatement(sqlStatement, 1);

    try {
      // Set the input paramater and execute the PL/SQL block
      cStmt.setString(1, keyWord);
      cStmt.setString(2, searchByNameNumber);
	  cStmt.setString(3, excludeContactInfo);
	  cStmt.setString(4, showAllSites);
      cStmt.registerOutParameter(5, java.sql.Types.VARCHAR,0,2);
      cStmt.registerOutParameter(6, Types.INTEGER);
      cStmt.registerOutParameter(7, java.sql.Types.VARCHAR,0,4000);        
      cStmt.execute();

      sStatus        = cStmt.getString(5);
      iErrorCount   = cStmt.getInt(6);
      sErrorMessage = cStmt.getString(7);         

    } catch (Exception e) {
      throw OAException.wrapperException(e);
    } finally {
      try {
        cStmt.close();
      } catch(Exception e) { 
        // Unable to close cursor - give up
        throw OAException.wrapperException(e);
      }
    }

    if ("E".equals(sStatus)) 
    {
        StringTokenizer sTokens  = new StringTokenizer(sErrorMessage,"*");
          
        ArrayList list = new ArrayList();      
        while (sTokens.hasMoreTokens())
          list.add(new OAException(sTokens.nextToken()));    
   
        if (list.size() > 0)
          OAException.raiseBundledOAException(list);                                      
 
    }

    //Bug fix # 3152910	- 11.5.10 Logging Mandate Compliance
    if (tx.isLoggingEnabled(OAFwkConstants.PROCEDURE))
      tx.writeDiagnostics(this, "End doContextSearch for" + keyWord, OAFwkConstants.PROCEDURE );
    
  }

  // The precondition of this function is that initializeExternalUserPersonPartyID
  // function of CustomerSearchPageCO has already been called and has placed the person
  // party ID in session.
  private String getPersonId()
  {
    OADBTransaction txn = (OADBTransaction)getOADBTransaction();
    String sPersonId = (String)txn.getValue("CUSTOMER_SEARCH_PERSON_ID");
    return sPersonId;
  }

  public String getPersonPartyFromFndUser()
  {
      return getPersonIdVO().initQuery(getUserId());
  }

  /**
   * 
   * Container's getter for TransactionSearchTypeVO
   */
  public TransactionSearchTypeVOImpl getTransactionSearchTypeVO()
  {
    return (TransactionSearchTypeVOImpl)findViewObject("TransactionSearchTypeVO");
  }

  /**
   * 
   * Container's getter for CreditMemoSearchResultsVO
   */
  public CreditMemoSearchResultsVOImpl getCreditMemoSearchResultsVO()
  {
    return (CreditMemoSearchResultsVOImpl)findViewObject("CreditMemoSearchResultsVO");
  }

  /**
   * 
   * Container's getter for DepositsSearchResultsVO
   */
  public DepositsSearchResultsVOImpl getDepositsSearchResultsVO()
  {
    return (DepositsSearchResultsVOImpl)findViewObject("DepositsSearchResultsVO");
  }

  /**
   * 
   * Container's getter for DebitMemoSearchResultsVO
   */
  public DebitMemoSearchResultsVOImpl getDebitMemoSearchResultsVO()
  {
    return (DebitMemoSearchResultsVOImpl)findViewObject("DebitMemoSearchResultsVO");
  }


  /**
   * 
   * Container's getter for PaymentSearchResultsVO
   */
  public PaymentSearchResultsVOImpl getPaymentSearchResultsVO()
  {
    return (PaymentSearchResultsVOImpl)findViewObject("PaymentSearchResultsVO");
  }

  /**
   * 
   * Container's getter for PurchaseOrderSearchResultsVO
   */
  public PurchaseOrderSearchResultsVOImpl getPurchaseOrderSearchResultsVO()
  {
    return (PurchaseOrderSearchResultsVOImpl)findViewObject("PurchaseOrderSearchResultsVO");
  }

  /**
   * 
   * Container's getter for CreditRequestsSearchResultsVO
   */
  public CreditRequestsSearchResultsVOImpl getCreditRequestsSearchResultsVO()
  {
    return (CreditRequestsSearchResultsVOImpl)findViewObject("CreditRequestsSearchResultsVO");
  }

  /**
   * 
   * Container's getter for SalesOrdersSearchResultsVO
   */
  public SalesOrdersSearchResultsVOImpl getSalesOrdersSearchResultsVO()
  {
    return (SalesOrdersSearchResultsVOImpl)findViewObject("SalesOrdersSearchResultsVO");
  }



  /**
   * 
   * Container's getter for InvoiceSearchResultsVO
   */
  public InvoiceSearchResultsVOImpl getInvoiceSearchResultsVO()
  {
    return (InvoiceSearchResultsVOImpl)findViewObject("InvoiceSearchResultsVO");
  }

  /**
    * Container's getter for CustomerSearchResultsVO
    */
  public CustomerSearchResultsVOImpl getCustomerSearchResultsVO()
  {
    if (CustomerSearchResultsVO == null)
    {
      CustomerSearchResultsVO = (CustomerSearchResultsVOImpl)findViewObject("CustomerSearchResultsVO");
    }
    return CustomerSearchResultsVO;
  }

  /**
   * 
   * Container's getter for InternalCustomerSearchByCustomerIdVO
   */
  public InternalCustomerSearchByCustomerIdVOImpl getInternalCustomerSearchByCustomerIdVO()
  {
    return (InternalCustomerSearchByCustomerIdVOImpl)findViewObject("InternalCustomerSearchByCustomerIdVO");
  }

  /**
   * 
   * Container's getter for PersonIdVO
   */
  public PersonIdVOImpl getPersonIdVO()
  {
    return (PersonIdVOImpl)findViewObject("PersonIdVO");
  }

  /**
   * 
   * Container's getter for ExternalUserSearchResultsVO
   */
  public ExternalUserSearchResultsVOImpl getExternalUserSearchResultsVO()
  {
    return (ExternalUserSearchResultsVOImpl)findViewObject("ExternalUserSearchResultsVO");
  }

  /**
   * 
   * Container's getter for ExternalUserAccessabilityCountsVO
   */
  public ExternalUserAccessabilityCountsVOImpl getExternalUserAccessabilityCountsVO()
  {
    return (ExternalUserAccessabilityCountsVOImpl)findViewObject("ExternalUserAccessabilityCountsVO");
  }

  /**
   * 
   * Container's getter for CustomCustSearchVO
   */
  public CustomCustSearchVOImpl getCustomCustSearchVO()
  {
    return (CustomCustSearchVOImpl)findViewObject("CustomCustSearchVO");
  }

  /**
   * This method is responsible for calling adapter which in turn call the plsql code
   * for populating the table. 
   * Bug # 5858769 
  */

  public void initAccountsAndSites(Long partyID,Long orgID,Long userID,Long sessionID,Long custID, Long siteID,String isInternalCustomer,String isAccountGroup )
      {
        ArwSearchCustomers.CustsiteRec[] custsiteRecArray=null;
        
        Number partyIDnum = (partyID==null)?null:new Number(partyID.longValue());
        Number orgIDnum = (orgID==null)?null:new Number(orgID.longValue());
        Number userIDnum = (userID==null)?null:new Number(userID.longValue());
        Number sessionIDnum = (sessionID==null)?null:new Number(sessionID.longValue());
        Number custIDnum = (custID==null)?null:new Number(custID.longValue());
        Number siteIDnum = (siteID==null)?null:new Number(siteID.longValue());
        String strLargeCust = "";
        if (siteIDnum != null)
          strLargeCust = isLargeCustomer( custID.toString(), siteIDnum.toString());
        else 
          strLargeCust = isLargeCustomer( custID.toString());
        /*
        if( "N".equals(strLargeCust)) {          
          try {
            if(isAccountGroup.equals("Y") || (custIDnum!=null)){
             ArwSearchCustomers.CustsiteRec rec= new ArwSearchCustomers.CustsiteRec();
             rec.setCustomerid(custIDnum);
             rec.setSiteuseid(siteIDnum);
             custsiteRecArray = new ArwSearchCustomers.CustsiteRec[] {rec};
            }else{
              custsiteRecArray=getCustsiteRecArray();
               }
              OADBTransaction tx = (OADBTransaction)this.getDBTransaction();
              ArwSearchCustomers.initializeAccountSites(tx,custsiteRecArray,partyIDnum,sessionIDnum,userIDnum,orgIDnum,isInternalCustomer);
            }catch(Exception e){
                    throw OAException.wrapperException(e);
            }
        }
        */
     }
  /**
   * This method is responsible for creating array of customerid and siteid pair which are selected 
   * on the customer search page.
   * Bug # 5858769 
  */
  public ArwSearchCustomers.CustsiteRec[] getCustsiteRecArray() throws Exception{
    ArwSearchCustomers.CustsiteRec siteRec = null;
    Number customerId = null;
    Number siteUseId = null;

      ExternalUserSearchResultsVOImpl exVO = ((ExternalUserSearchResultsVOImpl)this.findViewObject("ExternalUserSearchResultsVO"));
      if(!exVO.isExecuted()) return null;
      RowSetIterator iter = exVO.createRowSetIterator("iter");
      iter.reset();
      ArrayList recList = new ArrayList();  
      
      while (iter.hasNext()) {

        ExternalUserSearchResultsVORowImpl row = (ExternalUserSearchResultsVORowImpl)iter.next();

        String sSelected = ((row.getSelected() == null) ? "N":row.getSelected());

        if (sSelected.equals("Y")) {
          customerId = row.getCustomerId();
          siteUseId =  (row.getBillToSiteUseId()==null || row.getBillToSiteUseId().equals("") || "~".equals(row.getBillToSiteUseId()))
          ?null:new Number(row.getBillToSiteUseId());
    ArwSearchCustomers.CustsiteRec rec= new CustsiteRec();
    rec.setCustomerid(customerId);
    rec.setSiteuseid(siteUseId);
    recList.add(rec);

        }
        //Close RowSetIterator
        
      }
      iter.closeRowSetIterator();
      ArwSearchCustomers.CustsiteRec[] arr = new ArwSearchCustomers.CustsiteRec[recList.size()];
       recList.toArray(arr); 


      

     return arr;
  }


    // Bug#12730811
    public void initCustomerSearchPVO()
    {
      OAViewObject custSrchPVO = 
       (OAViewObject)findViewObject("CustomerSearchPVO");
      if (custSrchPVO != null)
      {
        // If the VO already has a row, skip its initialization.  Note that
        // calling getFetchedRowCount() won't perform a DB hit on a VO with
        // no SELECT and only transient attributes.


        if (custSrchPVO.getFetchedRowCount() == 0)
        { 
          // Setting the match fetch size to 0 for an in-memory VO
          // prevents it from trying to query rows. 
          // Calling executeQuery() is a small workaround to a known
          // BC4J issue that ensures that modified rows in this
          // transient view object are not lost after commit.  See
          // View Objects in Detail for additional information about
          // both of these calls.

          custSrchPVO.setMaxFetchSize(0);      
          custSrchPVO.executeQuery();

          // You must create and insert a row in the VO before you can start
          // setting properties.
          custSrchPVO.insertRow(custSrchPVO.createRow());

          // Set the primary key value for this single-row VO.      
          CustomerSearchPVORowImpl row = (CustomerSearchPVORowImpl)custSrchPVO.first();
          row.setAttribute("RowKey", new Number(1));
        }

        setIsCustomSearch("Y");
        showCustomTrxNo("Y");
      }
      else
      {
        // throw exception
      }

    } // end handlePoApproveChangeEvent()

    // Bug#12730811
    public void setIsCustomSearch(String isCustomSearch) {
     if(getCustomerSearchPVO() != null) {
        CustomerSearchPVORowImpl pvoRow = (CustomerSearchPVORowImpl)getCustomerSearchPVO().first();

       if(pvoRow != null) 
       {
         if("Y".equals(isCustomSearch))
           pvoRow.setIsCustomerSearch(Boolean.FALSE);
         else
           pvoRow.setIsCustomerSearch(Boolean.TRUE);
       }
     }     
    }

    // Bug#12730811
    public void showCustomTrxNo(String custTrxNoRender) {
     if(getCustomerSearchPVO() != null) {
        CustomerSearchPVORowImpl pvoRow = (CustomerSearchPVORowImpl)getCustomerSearchPVO().first();

       if(pvoRow != null) 
       {
         if("Y".equals(custTrxNoRender))
           pvoRow.setcustomTxNoRender(Boolean.TRUE);
         else
           pvoRow.setcustomTxNoRender(Boolean.FALSE);
       }
     }     
    }
  

    /**Container's getter for CustomerSearchPVO
     */
    public OAViewObjectImpl getCustomerSearchPVO() {
        return (OAViewObjectImpl)findViewObject("CustomerSearchPVO");
    }

    public String isLargeCustomer(String strCustomerId, String strCustomerSiteUseId){
     OADBTransaction txn = (OADBTransaction)this.getDBTransaction();
     OracleCallableStatement oraclecallablestatement =  null;
     String strIsLargeCust = "N";
     String populateSession = "Y";
     String sessionID=txn.getSessionId() + "";
     try {
         String strSqlStmt = "BEGIN :1 := XX_FIN_ARI_UTIL.IS_LARGE_CUSTOMER(p_customer_id => :2, P_CUSTOMER_SITE_USE_ID => :3, p_session_id => :4, p_populate_session => :5); END;";
    
         oraclecallablestatement = 
             (OracleCallableStatement)txn.createCallableStatement(strSqlStmt, 1);
             if (oraclecallablestatement != null) {
               oraclecallablestatement.registerOutParameter(1, Types.VARCHAR, 0, 1);
               oraclecallablestatement.setString(2, strCustomerId);
               oraclecallablestatement.setString(3, strCustomerSiteUseId);
               oraclecallablestatement.setString(4, sessionID);              
               oraclecallablestatement.setString(5, populateSession);
               oraclecallablestatement.execute();
               strIsLargeCust = oraclecallablestatement.getString(1);
             }
    
     } catch (Exception ex) {
         try {
             if (oraclecallablestatement != null)
                 oraclecallablestatement.close();
         } catch (Exception ex2) {
         }
     }
     return strIsLargeCust;
    }
    
    public String isLargeCustomer(String strCustomerId){
     OADBTransaction txn = (OADBTransaction)this.getDBTransaction();
     OracleCallableStatement oraclecallablestatement =  null;
     String strIsLargeCust = "N";
     String populateSession = "Y";
     String sessionID=txn.getSessionId() + "";
     try {
         String strSqlStmt = "BEGIN :1 := XX_FIN_ARI_UTIL.IS_LARGE_CUSTOMER(p_customer_id => :2, p_session_id => :3, p_populate_session => :4); END;";
    
         oraclecallablestatement = 
             (OracleCallableStatement)txn.createCallableStatement(strSqlStmt, 1);
             if (oraclecallablestatement != null) {
               oraclecallablestatement.registerOutParameter(1, Types.VARCHAR, 0, 1);
               oraclecallablestatement.setString(2, strCustomerId);
               oraclecallablestatement.setString(3, sessionID);              
               oraclecallablestatement.setString(4, populateSession);
               oraclecallablestatement.execute();
               strIsLargeCust = oraclecallablestatement.getString(1);
             }
    
     } catch (Exception ex) {
         try {
             if (oraclecallablestatement != null)
                 oraclecallablestatement.close();
         } catch (Exception ex2) {
         }
     }
     return strIsLargeCust;
    }
    
}
