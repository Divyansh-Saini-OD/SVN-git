/*===========================================================================+
 |      Copyright (c) 2001 Oracle Corporation, Redwood Shores, CA, USA       |
 |                         All rights reserved.                              |
 +===========================================================================+
 |  HISTORY                                                                  |
 |  27-Aug-03   smedasan Added framework API's                               |
 +===========================================================================*/

package oracle.apps.asn.common.fwk.server;

import oracle.apps.fnd.common.VersionInfo;
import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.OARow;
import oracle.apps.fnd.framework.server.OAViewRowImpl;
import oracle.apps.asn.common.fwk.server.ASNViewObjectImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.jbo.RowSetIterator;
import java.util.Vector;
import com.sun.java.util.collections.ArrayList;
import com.sun.java.util.collections.HashMap;
import com.sun.java.util.collections.Iterator;
import com.sun.java.util.collections.Set;
import od.oracle.apps.xxcrm.asn.common.fwk.server.*;

import oracle.apps.fnd.framework.OAFwkConstants;

//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class ASNApplicationModuleImpl extends ODASNSecurityAMImpl
{

  public static final String RCS_ID="$Header: ASNApplicationModuleImpl.java 115.13.115200.3 2005/10/18 21:51:37 smedasan ship $";
  public static final boolean RCS_ID_RECORDED =
        VersionInfo.recordClassVersion(RCS_ID, "oracle.apps.asn.common.fwk.server");

  /**
   *
   * This is the default constructor (do not remove)
   */
  public ASNApplicationModuleImpl()
  {
  }

  /**
   *
   * Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("oracle.apps.asn.common.fwk.server", "ASNApplicationModuleImplLocal");
  }

    /**************************************************************************
     *                  ASN Application Framework API's                       *
     **************************************************************************/

      /****************  User Context Methods  *****************/

  /**
   * Saves the login user context information in the current DB transaction
   *
   * @param contextInfo User context information
   */
  public void initDBContext(HashMap contextInfo)
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.initDBContext";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" contextInfo = ");
      buf.append(contextInfo!=null?contextInfo.toString():"");
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if(contextInfo == null)
      return;

    Set contextKeys = contextInfo.keySet();
    Iterator itr = null;
    String contextKey = null;
    String contextValue = null;
    if(contextKeys!=null)
    {
      itr = contextKeys.iterator();
      while(itr.hasNext())
      {
        contextKey = (String)itr.next();
        if(contextKey!=null)
        {
          contextValue = (String)contextInfo.get(contextKey);
          if(contextValue!=null && contextValue.trim().length()>0)
          {
            dbTxn.putValue(contextKey, contextValue);
          }
        }
      }
    }
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
  }


      /****************  Utility Methods  *****************/
  /**
   * Indicates whether the view object has been queried or not
   *
   * @param viewUsageName view usage name
   * @return indicates whether the view object has been queried
   *
   */
  public String isViewObjectQueried(String viewUsageName)
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.isViewObjectQueried";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" viewUsageName = ");
      buf.append(viewUsageName);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

      // get view instance
    OAViewObject vo = (OAViewObject)findViewObject(viewUsageName);
    String queried = "N";
    if(vo!=null)
    {
      queried = vo.isPreparedForExecution() ? "Y" : "N";
    }

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(10);
      buf.append(" isViewObjectQueried = ");
      buf.append(queried);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);

    return queried;
  }

  /**
   * Returns the option value for the specified profile option name
   *
   * @param profileName   profile option name
   * @return profile value
   */
  public String getProfileValue(String profileName)
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.getProfileValue";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" profileName = ");
      buf.append(profileName);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    String profValue = null;
    if(profileName!=null && profileName.trim().length()>0)
    {
      profValue = dbTxn.getProfile(profileName);
    }

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" profileValue = ");
      buf.append(profValue);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);

    return profValue;
  }

  /**
   * Indentifies the type of customer e.g. PERSON or ORGANIZATION
   *
   * @param customerId customer id
   * @return indicates the type of customer
   */
  public String getCustomerType(String customerId)
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.getCustomerType";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" customerId = ");
      buf.append(customerId);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

      // get view instance
    PartyTypeVOImpl partyTypeVo = this.getPartyTypeVO();
    String partyType = null;
    if(partyTypeVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "PartyTypeVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    if(customerId!=null && !("".equals(customerId.trim())))
    {
      partyTypeVo.initQuery(customerId);
      partyTypeVo.reset();
      if(partyTypeVo.hasNext())
      {
        PartyTypeVORowImpl partyTypeRow = (PartyTypeVORowImpl)partyTypeVo.first();
        if(partyTypeRow!=null)
        {
          partyType = (String)partyTypeRow.getPartyType();
        }
      }
    }

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" partyType = ");
      buf.append(partyType);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);

    return partyType;
  }

  /**
   * Determines whether DBI is enabled for products under contract bin
   * @return indicates whether DBI is enabled for products under contract bin. "Y" or "N"
   */
  public String isPrdtCntrDBIEnabled()
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.isPrdtCntrDBIEnabled";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

      // get view instance
    PrdtCntrDBICheckVOImpl dbiVo = this.getPrdtCntrDBICheckVO();
    String dbiEnbld = "N";
    if(dbiVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "PrdtCntrDBICheckVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    dbiVo.initQuery();
    dbiVo.reset();
    if(dbiVo.hasNext())
    {
      PrdtCntrDBICheckVORowImpl dbiRow = (PrdtCntrDBICheckVORowImpl)dbiVo.next();
      if(dbiRow!=null)
      {
        if("ASNDbiContractY".equals((String)dbiRow.getContractCheck()))
        {
          dbiEnbld = "Y";
        }
      }
    }

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" isPrdtCntrDBIEnabled = ");
      buf.append(dbiEnbld);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);

    return dbiEnbld;
  }

  /**
   * Determines whether DBI is enabled for service summary bin
   * @return indicates whether DBI is enabled for service summary bin. "Y" or "N"
   */
  public String isServiceDBIEnabled()
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.isServiceDBIEnabled";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

      // get view instance
    ServiceDBICheckVOImpl dbiVo = this.getServiceDBICheckVO();
    String dbiEnbld = "N";
    if(dbiVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "ServiceDBICheckVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    dbiVo.initQuery();
    dbiVo.reset();
    if(dbiVo.hasNext())
    {
      ServiceDBICheckVORowImpl dbiRow = (ServiceDBICheckVORowImpl)dbiVo.next();
      if(dbiRow!=null)
      {
        if("ASNDbiServiceY".equals((String)dbiRow.getServiceCheck()))
        {
          dbiEnbld = "Y";
        }
      }
    }

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" isServiceDBIEnabled = ");
      buf.append(dbiEnbld);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);

    return dbiEnbld;
  }

  /**
   * Determines whether DBI is enabled for top customers bin
   * @return indicates whether DBI is enabled for top customers bin. "Y" or "N"
   */
  public String isTopCustomersDBIEnabled()
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.isTopCustomersDBIEnabled";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

      // get view instance
    TopCustomersDBICheckVOImpl dbiVo = this.getTopCustomersDBICheckVO();
    String dbiEnbld = "N";
    if(dbiVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "TopCustomersDBICheckVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    dbiVo.initQuery();
    dbiVo.reset();
    if(dbiVo.hasNext())
    {
      TopCustomersDBICheckVORowImpl dbiRow = (TopCustomersDBICheckVORowImpl)dbiVo.next();
      if(dbiRow!=null)
      {
        if("ASNDbiTopCustY".equals((String)dbiRow.getTopCustCheck()))
        {
          dbiEnbld = "Y";
        }
      }
    }

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" isTopCustomersEnabled = ");
      buf.append(dbiEnbld);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);

    return dbiEnbld;
  }


      /************  Application event handling accessory Methods  *************
       * Most of these methods requires that the calling page AM which extends
       * the ASNApplicationModuleImpl should include the necessary view objects
       ************************************************************************/

  /**
   * Handles the commit transaction for this application module.
   * After commit, if an error or warning message is found in the dailog messages
   * of the current transaction, this method will return the list of the same.
   * All dailog messages will be removed from the transaction.
   * (Note that the transaction may still be committed, unless there is an
   * exception thrown explicitly).
   *
   * @return List of error or warning messages found after committing the transaction
   */
  public ArrayList doCommit()
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.doCommit";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

    dbTxn.commit();
    Vector messages = dbTxn.getDialogMessages();
    byte messageType;

      // Bug - 4109503 - Start
    boolean isWarningExists = false;
    ArrayList trsntWrngMsgs = (ArrayList)dbTxn.getTransientValue(ASNConstants.WARNING_MSG);
    dbTxn.removeTransientValue(ASNConstants.WARNING_MSG);
      // Bug - 4109503 - End

    if(messages!=null)
    {
      if (isStmtLogEnabled)
      {
        StringBuffer buf = new StringBuffer(40);
        buf.append(" dialog messages = ");
        buf.append(messages.toString());
        dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
      }

      OAException oae = null;
      int size = messages.size();
      ArrayList returnMessages = new ArrayList(size + size);
      for(int i=0; i<size; i++)
      {
        oae = (OAException)messages.elementAt(i);
        if(oae!=null)
        {
          messageType = oae.getMessageType();
          if(messageType==OAException.WARNING)
            isWarningExists = true;
          if(messageType==OAException.ERROR || isWarningExists)
          {
            returnMessages.add(oae);
          }
        }
      }

        // Bug - 4109503 - Start
      if(!isWarningExists)
      {
        if(trsntWrngMsgs!=null)
        {
          returnMessages.addAll(trsntWrngMsgs);
        }
      }
        // Bug - 4109503 - End

      if(returnMessages.size()>0)
      {
        dbTxn.removeDialogMessages();
        if (isStmtLogEnabled)
        {
          StringBuffer buf = new StringBuffer(20);
          buf.append(" return messages = ");
          buf.append(returnMessages.toString());
          dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
        }
        if (isProcLogEnabled)
          dbTxn.writeDiagnostics(METHOD_NAME, "End", OAFwkConstants.PROCEDURE);

        return returnMessages;
      }
    }
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);

    return trsntWrngMsgs;
  }

  /**
   * Handles rolling back the changes pending in the current transaction
   */
  public void doRollback()
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.doRollback";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

    dbTxn.rollback();

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
  }

  /**
   * Creates/Inserts a new row on the specified view object
   *
   * @param viewUsageName view usage name
   *
   * @return Indicates whether the create operation is successful or not
   */
  public String createRow(String viewUsageName)
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.createRow";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" viewUsageName = ");
      buf.append(viewUsageName);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    String createSuccess = "N";
    OAViewObject viewObject = (OAViewObject)findViewObject(viewUsageName);
    OARow viewRow = null;
    if(viewObject==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    viewRow = (OARow)viewObject.createRow();
    if(viewRow!=null)
    {
      viewObject.insertRow(viewRow);
      createSuccess = "Y";
    }

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" createSuccess = ");
      buf.append(createSuccess);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);

    return createSuccess;
  }


  /**
   * Removes the row that matches the specified view attribute from the specified view object
   * This method will try to delete the row from only the rows that have been fetched
   *
   * @param viewUsageName view usage name
   * @param viewAttributeName view attribute name
   * @param viewAttributeValue view attribute value
   *
   * @return Indicates whether the remove operation is successful or not
   */
  public String deleteRow(String viewUsageName,
                          String viewAttributeName,
                          String viewAttributeValue
                         )
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.deleteRow";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(40);
      buf.append(" viewUsageName = ");
      buf.append(viewUsageName);
      buf.append(" viewAttributeName = ");
      buf.append(viewAttributeName);
      buf.append(" viewAttributeValue = ");
      buf.append(viewAttributeValue);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);

    return deleteRow(viewUsageName, viewAttributeName,
                     viewAttributeValue, "Y" );
  }

  /**
   * Removes the selected row on a table from the specified view object
   * This method will try to delete the row from only the rows that have been fetched
   *
   * @param viewUsageName view usage name
   *
   * @return Indicates whether the remove operation is successful or not
   */
  public String deleteSelectedRow(String viewUsageName)
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.deleteSelectedRow";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" viewUsageName = ");
      buf.append(viewUsageName);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    return this.deleteRow(viewUsageName, "SelectFlag", "Y", "Y");
  }

  /**
   * Removes the row that matches the specified view attribute from the specified view object
   * This method will try to delete the row from only the rows that have been fetched
   *
   * @param viewUsageName view usage name
   * @param viewAttributeName view attribute name
   * @param viewAttributeValue view attribute value
   * @param validateRow  indicates whether to allow row validation or not.
   *                     possible values are "Y" or "N"
   *
   * @return Indicates whether the remove operation is successful or not
   */
  public String deleteRow(String viewUsageName,
                          String viewAttributeName,
                          String viewAttributeValue,
                          String validateRow
                         )
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.deleteRow";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(40);
      buf.append(" viewUsageName = ");
      buf.append(viewUsageName);
      buf.append(" viewAttributeName = ");
      buf.append(viewAttributeName);
      buf.append(" viewAttributeValue = ");
      buf.append(viewAttributeValue);
      buf.append(" validateRow = ");
      buf.append(validateRow);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

    String deleteSuccess = "N";
    OAViewObject viewObject = (OAViewObject)findViewObject(viewUsageName);
    OAViewRowImpl viewRow = null;
    if(viewObject==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    int fetchedRowCount = viewObject.getFetchedRowCount();
    RowSetIterator viewObjectItr = viewObject.findRowSetIterator("AsnViewObjectIterator");
    if(viewObjectItr==null)
      viewObjectItr = viewObject.createRowSetIterator("AsnViewObjectIterator");
    else
      viewObjectItr.reset();
    if(viewObjectItr!=null && fetchedRowCount>0)
    {
      if("N".equals(validateRow))
      {
        viewObject.setRowValidation(false);
        viewObjectItr.setRowValidation(false);
      }
      viewObjectItr.setRangeStart(0);
      viewObjectItr.setRangeSize(fetchedRowCount);
      String value = null;
      Object valueObj = null;
      for(int i=0; i<fetchedRowCount; i++)
      {
        viewRow = (OAViewRowImpl)viewObjectItr.getRowAtRangeIndex(i);
        if(viewRow!=null)
          valueObj = viewRow.getAttribute(viewAttributeName);
        if(valueObj!=null) {
          value = valueObj.toString();
          if(value.equals(viewAttributeValue))
          {
            viewRow.remove();
            deleteSuccess = "Y";
            break;
          }
        }
      }
    }
    if(viewObjectItr!=null)
      viewObjectItr.closeRowSetIterator();

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(20);
      buf.append(" deleteSuccess = ");
      buf.append(deleteSuccess);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);

    return deleteSuccess;
  }

  /**
   * Removes the selected row on a table from the specified view object
   * This method will try to delete the row from only the rows that have been fetched
   *
   * @param viewUsageName view usage name
   * @param validateRow  indicates whether to allow row validation or not.
   *                     possible values are "Y" or "N"
   *
   * @return Indicates whether the remove operation is successful or not
   */
  public String deleteSelectedRow(String viewUsageName, String validateRow)
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.deleteSelectedRow";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

    return this.deleteRow(viewUsageName, "SelectFlag", "Y", validateRow);
  }

  /**
   * Sets the specified row as selected and as sets it as current row on the view object, un-selects the
   * remaining rows. The given view object must have a transient column defined as "SelectFlag"
   *
   * @param viewUsageName view usage name
   * @param viewAttributeName view attribute name
   * @param viewAttributeValue view attribute value
   *
   */
  public void setRowAsSelected(String viewUsageName,
                               String viewAttributeName,
                               String viewAttributeValue
                              )
  {
    final String METHOD_NAME ="asn.common.fwk.server.ASNApplicationModule.setRowAsSelected";
    OADBTransaction dbTxn = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStmtLogEnabled = dbTxn.isLoggingEnabled(OAFwkConstants.STATEMENT);
    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);

    if (isStmtLogEnabled)
    {
      StringBuffer buf = new StringBuffer(40);
      buf.append(" viewUsageName = ");
      buf.append(viewUsageName);
      buf.append(" viewAttributeName = ");
      buf.append(viewAttributeName);
      buf.append(" viewAttributeValue = ");
      buf.append(viewAttributeValue);
      dbTxn.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
    }

      // get view instance/object
    ASNViewObjectImpl viewObject = (ASNViewObjectImpl)findViewObject(viewUsageName);
    if (viewObject == null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", viewUsageName) };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }
    if(viewAttributeValue!=null && viewAttributeValue.trim().length()>=0)
    {
      int fetchedRowCount = viewObject.getFetchedRowCount();
      RowSetIterator viewObjectItr = viewObject.findRowSetIterator("AsnViewObjectIterator");
      if(viewObjectItr==null)
        viewObjectItr = viewObject.createRowSetIterator("AsnViewObjectIterator");
      else
        viewObjectItr.reset();

      if(viewObjectItr!=null && fetchedRowCount > 0)
      {
        viewObjectItr.setRangeStart(0);
        viewObjectItr.setRangeSize(fetchedRowCount);
        String id = null;
        for(int i=0; i < fetchedRowCount; i++)
        {
          OAViewRowImpl row = (OAViewRowImpl)viewObjectItr.getRowAtRangeIndex(i);
          if(row!=null)
            id = row.getAttribute(viewAttributeName) + "";
          if(viewAttributeValue.equals(id))
          {
            if (isStmtLogEnabled)
              dbTxn.writeDiagnostics(METHOD_NAME, "Selecting the row", OAFwkConstants.STATEMENT);

            row.setAttribute("SelectFlag", "Y");
            viewObject.setCurrentRow(row);
          }
          else
          {
            row.setAttribute("SelectFlag", "N");
          }
        }
      }
      if(viewObjectItr!=null)
        viewObjectItr.closeRowSetIterator();
    }

    if (isProcLogEnabled)
      dbTxn.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);

  }


  /**
   * Validates the group of a manager.  If manager is a memeber of the group id
   * passed then the same group id will be returned else a null value is returned
   *
   * @param groupId group id
   * @param resourceId resource id
   *
   */
  public String validateResourceGroupId(String groupId, String resourceId)
  {
    final String METHOD_NAME = "asn.common.fwk.server.ASNApplicationModule.validateResourceGroupId";
    OADBTransaction dbTrx = (OADBTransaction)getOADBTransaction();
    boolean isProcLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.PROCEDURE);
    boolean isStatLogEnabled = dbTrx.isLoggingEnabled(OAFwkConstants.STATEMENT);
    StringBuffer buf = new StringBuffer(100);

    if (isProcLogEnabled)
    {
      dbTrx.writeDiagnostics(METHOD_NAME, "Begin", OAFwkConstants.PROCEDURE);
    }

    ResourceGroupValidateVOImpl resourceVo = (ResourceGroupValidateVOImpl)this.getResourceGroupValidateVO();
    if(resourceVo==null)
    {
      MessageToken[] tokens = { new MessageToken("NAME", "ResourceGroupValidateVO") };
      throw new OAException("ASN", "ASN_CMMN_OBJ_MISS_ERR", tokens);
    }

    resourceVo.initQuery(groupId, resourceId);
    if(resourceVo.hasNext())
    {
      if (isStatLogEnabled)
      {
        buf.append("groupId returned");
        dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
      }
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return groupId;
    }
    else
    {
      if (isStatLogEnabled)
      {
        buf.append("null returned");
        dbTrx.writeDiagnostics(METHOD_NAME, buf.toString(), OAFwkConstants.STATEMENT);
      }
      if (isProcLogEnabled)
      {
        dbTrx.writeDiagnostics(METHOD_NAME,"End", OAFwkConstants.PROCEDURE);
      }
      return null;
    }

  }



  /**
   *
   * Container's getter for PartyTypeVO
   */
  public PartyTypeVOImpl getPartyTypeVO()
  {
    return (PartyTypeVOImpl)findViewObject("PartyTypeVO");
  }


  /**
   *
   * Container's getter for PrdtCntrDBICheckVO
   */
  public PrdtCntrDBICheckVOImpl getPrdtCntrDBICheckVO()
  {
    return (PrdtCntrDBICheckVOImpl)findViewObject("PrdtCntrDBICheckVO");
  }

  /**
   *
   * Container's getter for ServiceDBICheckVO
   */
  public ServiceDBICheckVOImpl getServiceDBICheckVO()
  {
    return (ServiceDBICheckVOImpl)findViewObject("ServiceDBICheckVO");
  }

  /**
   *
   * Container's getter for TopCustomersDBICheckVO
   */
  public TopCustomersDBICheckVOImpl getTopCustomersDBICheckVO()
  {
    return (TopCustomersDBICheckVOImpl)findViewObject("TopCustomersDBICheckVO");
  }

  /**
   *
   * Container's getter for ResourceGroupValidateVO
   */
  public ResourceGroupValidateVOImpl getResourceGroupValidateVO()
  {
    return (ResourceGroupValidateVOImpl)findViewObject("ResourceGroupValidateVO");
  }

}
