
# +===================================================================+
# |                  Office Depot - Project Simplify                  |
# |      			 				      |
# +===================================================================+
# | Name  : 	   XXCEMRKTPLCLOAD.prog   	                              |
# | RICE ID    :   I3091
# | Description:   This program does the following                    |
# |             1) Call ebay load program                                 |
# |                                                                   |
# |                .                                       |
# |                                                                   |
# |                                                                   |
# |                                                                   |
# |Change Record:                                                     |
# |===============                                                    |
# |Version   Date        Author           Remarks                     |
# |=======   ==========  =============    ============================|
# |DRAFT 1A 17-JUL-2018  Priyam P       Initial draft version       |
# +===================================================================+

 echo "1 st argument = username/password"
 echo "2 nd argument = $2"
 echo "3 rd argument = $3"
 echo "4 th argument = $4"
 echo "5 th argument = $5"

export SQLPATH=$APPL_TOP
 
translationsource=$5 
  
V_RESULT=`sqlplus -s /nolog <<EOF
set pagesize 0
set linesize 255
set sqlprompt " "
set serveroutput on 
set verify off

SELECT XFTV.TARGET_VALUE7
  || '|'||XFTV.TARGET_VALUE8
  || '|'||XFTV.TARGET_VALUE10
  || '|'||XFTV.TARGET_VALUE1
  || '|'|| XX_ENCRYPT_DECRYPTION_TOOLKIT.DECRYPT(NVL(XFTV.TARGET_VALUE2,XX_ENCRYPT_DECRYPTION_TOOLKIT.ENCRYPT('X')))
  || '|'|| XX_ENCRYPT_DECRYPTION_TOOLKIT.DECRYPT(NVL(XFTV.TARGET_VALUE3,XX_ENCRYPT_DECRYPTION_TOOLKIT.ENCRYPT('X')))
  || '|'|| XFTV.TARGET_VALUE4
  || '|'|| XFTV.TARGET_VALUE5
  || '|'|| XX_ENCRYPT_DECRYPTION_TOOLKIT.DECRYPT(NVL(XFTV.TARGET_VALUE6,XX_ENCRYPT_DECRYPTION_TOOLKIT.ENCRYPT('X')))
  || '|'|| XFTV.TARGET_VALUE9
  || '|'|| REPLACE(TO_CHAR(TO_TIMESTAMP_TZ(TO_CHAR(CAST(SYSTIMESTAMP AT TIME ZONE 'UTC' AS DATE),'yyyy-mm-dd"T"hh24:mi:ss'), 'yyyy-mm-dd"T"hh24:mi:ss TZH:TZM'),'YYYY-MM-DD"T"HH24:MI:SS" Z"'),' ','')
  || '|'|| XFTV.TARGET_VALUE20
  || '|'|| to_char(XX_CE_MRKTPLC_PRESTG_PKG.GET_START_DATE('$translationsource'),'YYYY-MM-DD') 
  || '|'|| to_char(sysdate,'YYYY-MM-DD')
  || '|'|| XX_ENCRYPT_DECRYPTION_TOOLKIT.ENCRYPT(to_char(sysdate,'DDMMYYYYHH24MISS')) 
  || '|'||XFTV.TARGET_VALUE22
  || '|'||XFTV.TARGET_VALUE23
  || '|'||XX_ENCRYPT_DECRYPTION_TOOLKIT.DECRYPT(NVL(XFTV.TARGET_VALUE24,XX_ENCRYPT_DECRYPTION_TOOLKIT.ENCRYPT('X'))) TT
  FROM XX_FIN_TRANSLATEDEFINITION XFTD,
  XX_FIN_TRANSLATEVALUES XFTV
WHERE XFTD.TRANSLATION_NAME ='OD_SETTLEMENT_PROCESSES'
AND XFTV.SOURCE_VALUE1      ='$translationsource'
AND XFTD.TRANSLATE_ID       =XFTV.TRANSLATE_ID
AND XFTD.ENABLED_FLAG       ='Y'
AND SYSDATE BETWEEN XFTV.START_DATE_ACTIVE AND NVL(XFTV.END_DATE_ACTIVE,SYSDATE);
	
exit
EOF`

file_type=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[1] }'`
inbound_path=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[2] }'`
archival_path=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[3] }'`
url=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[4] }'`
accesskeyid=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[5] }'`
secretaccesskey=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[6] }'`
appname=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[7] }'`
appversion=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[8] }'`
merchantid=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[9] }'`
filename=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[10] }'`
timestamp=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[11] }'`
seperator=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[12] }'`
start_date=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[13] }'`
end_date=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[14] }'`
walmartcorrelid=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[15] }'`
url2=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[16] }'`
url3=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[17] }'`
google_refresh_token=`echo $V_RESULT | awk '{ split($0,MODULE,"|"); print MODULE[18] }'`



echo " "
echo "Translation set-up Name : OD_SETTLEMENT_PROCESSES "

eval seperator=${seperator// /}

echo "seperator                               = $seperator"

echo " "
echo "Process_name                           = $translationsource"
echo "File type                              = $file_type"
echo "Inbound path                           = $inbound_path"
echo "Archival path                          = $archival_path"




#Google MArketplace

if [ "${5}" = "GOOGLE_MPL" ]
then



eval inbounddirectory=$inbound_path/$filename

TMPFILE=$inbounddirectory > $TMPFILE;chmod 777 $TMPFILE




#1) OUTPUT: token and refresh_token in JSON

#https://accounts.google.com/o/oauth2/token

echo "url1=$url"


curl --request POST --data "client_id=$accesskeyid&client_secret=$secretaccesskey&redirect_uri=urn:ietf:wg:oauth:2.0:oob&refresh_token=$google_refresh_token&grant_type=refresh_token" "$url" > $TMPFILE

Token=`grep '"access_token"' $TMPFILE`

google_access_token=`echo $Token | awk '{ split($0,MODULE,":"); print MODULE[2] }'`

google_access_token=`echo "$google_access_token" | sed 's/"//g'`

echo "google_access_token=$google_access_token"


eval start_date=${start_date// /}

start_date=`date -d "$start_date" '+%Y%m%d'`

end_date=`date -d "$end_date" '+%Y%m%d'`

#2 curl to get next page token and disbursement list

URL2="https://www.googleapis.com/content/v2/$merchantid/orderreports/disbursements?disbursementStartDate=$start_date&disbursementEndDate=$end_date"

echo "URL2=$URL2"


curl -X GET \
 "$URL2" \
  --header "Authorization: Bearer $google_access_token" \
  --header 'Accept: application/json' \
  --compressed > $TMPFILE


Next_page_token=`grep '"nextPageToken"' $TMPFILE`

google_NPG_token=`echo $Next_page_token | awk '{ split($0,MODULE,":"); print MODULE[2] }'`

google_NPG_token=`echo "$google_NPG_token" | sed 's/"//g'`

eval google_NPG_token=${google_NPG_token// /}

echo "google_NPG_token=$google_NPG_token"

disbursementId=`grep 'disbursementId' $TMPFILE | sed 's/disbursementId://g' | sed 's/ //g' `

#disbursementId="1234,34567,7896,9876"

echo "disbursement_list=$disbursementId" 


#3 download transaction file

eval inbound_path=$inbound_path

cd ${inbound_path}


for i in $(echo $disbursementId| sed "s/,/ /g")
do
    # call your procedure/other scripts here below
    echo "$i"

url3="https://www.googleapis.com/content/v2/7933/orderreports/disbursements/$i/transactions?transactionStartDate=$start_date&pageToken=$google_NPG_token&transactionEndDate=$end_date"

echo "url3=$url3"


curl  \
  "$url3" \
  --header "Authorization: Bearer $google_access_token" \
  --header 'Accept: application/json' \
  --compressed > $TMPFILE



DAT=`date '+_%y%m%d%H%M%S_$i.json'`

eval newfile=$inbound_path/$filename$DAT

mv "$filename" "${newfile}" ;

mv "$newfile" "${newfile//.json_/_}" ;


done


fi




#Walmart MArketplace

if [ "${5}" = "WALMART_MPL" ]
then



TMPFILE=$HOME/WALMART_MPL_TMP.$$  > $TMPFILE;chmod 777 $TMPFILE


eval secretaccesskey=${secretaccesskey// /}

wal_auth=`echo -n "$accesskeyid:$secretaccesskey" | base64 -w 0`


#Curl for generating access token for Walmart


curl -X POST \
  $url2 \
  -H 'accept: application/json' \
  -H "authorization: Basic $wal_auth" \
  -H 'content-type: application/x-www-form-urlencoded' \
  -H 'wm_qos.correlation_id: $walmartcorrelid' \
  -H 'wm_svc.name: Walmart Marketplace' \
  -H 'wm_svc.version: 1.0.0' \
  -d 'Content-Type=application/x-www-form-urlencoded&grant_type=client_credentials' > $TMPFILE


Token=`grep '"access_token"' $TMPFILE`

WAL_access_token=`echo $Token | awk '{ split($0,MODULE,":"); print MODULE[2] }'`

WAL_access_token=`echo $WAL_access_token| awk '{ split($0,MODULE,","); print MODULE[1] }'`

WAL_access_token=`echo "$WAL_access_token" | sed 's/"//g'`


#Curl for downloading available reports for Walmart



curl -X GET \
   "$url3" \
  -H 'accept: application/json' \
  -H "authorization: Basic $wal_auth" \
  -H 'content-type: application/json' \
  -H 'host: marketplace.walmartapis.com' \
  -H "wm_qos.correlation_id: $walmartcorrelid" \
  -H "wm_sec.access_token: $WAL_access_token" \
  -H 'wm_svc.name: Walmart Marketplace' > $TMPFILE

Wal_dt=`grep '"availableApReportDates"' $TMPFILE`


Wal_rpt_Dt1=`echo $Wal_dt | awk -F',' ' { print $NF } '`


Wal_rpt_Dt1=`echo $Wal_rpt_Dt1 | tr -d '"}]'`


url="$url""$Wal_rpt_Dt1"

          
eval inbound_path=$inbound_path

cd ${inbound_path}

#Curl for downloading Reports for Walmart using latest date and Access Token

curl -o Walmart.zip -X GET \
   "$url" \
  -H 'accept: application/octet-stream' \
  -H "authorization: Basic $wal_auth" \
  -H 'content-type: application/octet-stream' \
  -H 'host: marketplace.walmartapis.com' \
  -H "wm_qos.correlation_id: $walmartcorrelid" \
  -H "wm_sec.access_token: $WAL_access_token" \
  -H 'wm_svc.name: Walmart Marketplace'



file_Wal=`echo $file_type | awk '{ split($0,MODULE,"~"); print MODULE[1] }'`

for i in $(ls $file_Wal*.*);
do echo "$i";  
unzip "$i" && rm "$i" 
done


for k in `ls Office_Depot__*.* | sort -u` 
do echo "$k"
mv "$k" "${k//Office_Depot__/Walmart_}" ;
done


#file1_Wal=`echo $file_type | awk '{ split($0,MODULE,"~"); print MODULE[1] }'`
#file2_Wal=`echo $file_type | awk '{ split($0,MODULE,"~"); print MODULE[2] }'`


for i in `ls $file_Wal*.* | sort -u`
  do echo "$i"  

     V_RESULT2=`sqlplus -s /nolog <<EOF
     set pagesize 0
     set linesize 255
     set sqlprompt " "
     set serveroutput on 
     set verify off

EXECUTE xx_ce_mrktplc_load_pkg.main_mpl_load_proc('$translationsource','$i','Y','$4');
     COMMIT;

     exit
     EOF` 

	 echo "$V_RESULT2"

     echo " "

     eval archival_file=$archival_path/$i
     eval inbounddirectory=$inbound_path/$i

     echo "File is being Archived" 

     echo "The Inbound File Name "${inbounddirectory}
     echo "The Archival File Name "${archival_file}
     cp ${inbounddirectory} ${archival_file}
     rm ${inbounddirectory}

done;

rm ${TMPFILE}


fi

#Sears MArketplace



if [ "${5}" = "SEARS_MPL" ]
then

eval timestamp=${timestamp// /}

sig=`echo -n "$merchantid:$accesskeyid:$timestamp" | openssl dgst -sha256 -hmac "$secretaccesskey"`

echo "signature                              = $sig"
eval inbounddirectory=$inbound_path/$filename
echo "inbounddirectory                       = $inbounddirectory"
echo "URL                                    = $url? "
echo "timestamp                              = $timestamp"
echo "filename                               = $filename"
echo "start_date                             = $start_date"
echo "end_date                               = $end_date"


TMPFILE=$inbounddirectory > $TMPFILE;chmod 777 $TMPFILE

curl -X GET -H "authorization:HMAC-SHA256 emailaddress=$accesskeyid,timestamp=$timestamp,signature=$sig" "$url?sellerId=$merchantid&fromdate=$start_date&todate=$end_date" | xmllint --format - > $TMPFILE

eval inbound_path=$inbound_path

cd ${inbound_path}

DAT=`date '+_%y%m%d%H%M%S_%N.xml'`

eval newfile=$inbound_path/$filename$DAT 

mv "$filename" "${newfile}" ;

mv "$newfile" "${newfile//.xml_/_}" ;

eval inboundmpldirectory=$inbound_path
cd ${inboundmpldirectory}

file1_Sears=`echo $file_type | awk '{ split($0,MODULE,"~"); print MODULE[1] }'`
file2_Sears=`echo $file_type | awk '{ split($0,MODULE,"~"); print MODULE[2] }'`



for i in `ls $file1_Sears*.* '||' $file2_Sears*.* | sort -u`
  do echo "$i"   
     V_RESULT2=`sqlplus -s /nolog <<EOF
     set pagesize 0
     set linesize 255
     set sqlprompt " "
     set serveroutput on 
     set verify off

EXECUTE xx_ce_mrktplc_load_pkg.main_mpl_load_proc('$translationsource','$i','Y','$4');
     COMMIT;

     exit
     EOF` 

	 echo "$V_RESULT2"

     echo " "

     eval archival_file=$archival_path/$i
     eval inbounddirectory=$inbound_path/$i 

     echo "File is being Archived" 

     echo "The Inbound File Name "${inbounddirectory}
     echo "The Archival File Name "${archival_file}
     cp ${inbounddirectory} ${archival_file}
     rm ${inbounddirectory}

done;

fi

#Rakuten MArketplace


if [ "${5}" = "RAKUTEN_MPL" ]
then

eval inboundmpldirectory=$inbound_path
cd ${inboundmpldirectory}

file_Rak=`echo $file_type | awk '{ split($0,MODULE,"~"); print MODULE[1] }'`
for i in $(ls $file_Rak*.*);
do echo "$i";  
unzip "$i" && rm "$i" 
done



file1_rakuten=`echo $file_type | awk '{ split($0,MODULE,"~"); print MODULE[1] }'`
file2_rakuten=`echo $file_type | awk '{ split($0,MODULE,"~"); print MODULE[2] }'`



for i in `ls $file1_rakuten*.* '||' $file2_rakuten*.* | sort -u`
  do echo "$i"   
     V_RESULT2=`sqlplus -s /nolog <<EOF
     set pagesize 0
     set linesize 255
     set sqlprompt " "
     set serveroutput on 
     set verify off

EXECUTE xx_ce_mrktplc_load_pkg.main_mpl_load_proc('$translationsource','$i','Y','$4');
     COMMIT;

     exit
     EOF` 

	 echo "$V_RESULT2"

     echo " "

     eval archival_file=$archival_path/$i
     eval inbounddirectory=$inbound_path/$i 

     echo "File is being Archived" 

     echo "The Inbound File Name "${inbounddirectory}
     echo "The Archival File Name "${archival_file}
     cp ${inbounddirectory} ${archival_file}
     rm ${inbounddirectory}

done;

fi

#Ebay MArketplace

if [ "${5}" = "EBAY_MPL" ]
then

eval inboundmpldirectory=$inbound_path
cd ${inboundmpldirectory}

file1=`echo $file_type | awk '{ split($0,MODULE,"~"); print MODULE[1] }'`
file2=`echo $file_type | awk '{ split($0,MODULE,"~"); print MODULE[2] }'`



for i in `ls $file1*.* '||' $file2*.* | sort -u`
  do echo "$i"   
     V_RESULT2=`sqlplus -s /nolog <<EOF
     set pagesize 0
     set linesize 255
     set sqlprompt " "
     set serveroutput on 
     set verify off

EXECUTE xx_ce_mrktplc_load_pkg.main_mpl_load_proc('$translationsource','$i','Y','$4');
     COMMIT;

     exit
     EOF` 

	 echo "$V_RESULT2"

     echo " "

     eval archival_file=$archival_path/$i
     eval inbounddirectory=$inbound_path/$i 

     echo "File is being Archived" 

     echo "The Inbound File Name "${inbounddirectory}
     echo "The Archival File Name "${archival_file}
     cp ${inbounddirectory} ${archival_file}
     rm ${inbounddirectory}

done;

fi


#Ebay MArketplace

if [ "${5}" = "EBAY_MPL" ]
then

eval inboundmpldirectory=$inbound_path
cd ${inboundmpldirectory}

file1=`echo $file_type | awk '{ split($0,MODULE,"~"); print MODULE[1] }'`
file2=`echo $file_type | awk '{ split($0,MODULE,"~"); print MODULE[2] }'`



for i in `ls $file1*.* '||' $file2*.* | sort -u`
  do echo "$i"   
     V_RESULT2=`sqlplus -s /nolog <<EOF
     set pagesize 0
     set linesize 255
     set sqlprompt " "
     set serveroutput on 
     set verify off

EXECUTE xx_ce_mrktplc_load_pkg.main_mpl_load_proc('$translationsource','$i','Y','$4');
     COMMIT;

     exit
     EOF` 

	 echo "$V_RESULT2"

     echo " "

     eval archival_file=$archival_path/$i
     eval inbounddirectory=$inbound_path/$i 

     echo "File is being Archived" 

     echo "The Inbound File Name "${inbounddirectory}
     echo "The Archival File Name "${archival_file}
     cp ${inbounddirectory} ${archival_file}
     rm ${inbounddirectory}

done;

fi

exit 0
