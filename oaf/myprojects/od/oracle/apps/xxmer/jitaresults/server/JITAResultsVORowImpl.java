package od.oracle.apps.xxmer.jitaresults.server;
import oracle.apps.fnd.framework.server.OAViewRowImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.RowID;
//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class JITAResultsVORowImpl extends OAViewRowImpl 
{
  protected static final int PONBR = 0;


  protected static final int RECEIPTNUM = 1;
  protected static final int FROMLOCID = 2;
  protected static final int TOLOCID = 3;
  protected static final int SKU = 4;
  protected static final int ALLOCDT = 5;
  protected static final int ALLOCTIMESTAMP = 6;
  protected static final int ALLOCQTY = 7;
  protected static final int DYNAMICQTY = 8;
  protected static final int LOCKINQTY = 9;
  protected static final int ADTLNEEDQTY = 10;
  protected static final int MARKOUTQTY = 11;
  protected static final int ROWID = 12;
  /**
   * 
   * This is the default constructor (do not remove)
   */
  public JITAResultsVORowImpl()
  {
  }

  /**
   * 
   * Gets SubbuJitaResults entity object.
   */
  public od.oracle.apps.xxmer.jitaresults.schema.server.SubbuJitaResultsImpl getSubbuJitaResults()
  {
    return (od.oracle.apps.xxmer.jitaresults.schema.server.SubbuJitaResultsImpl)getEntity(0);
  }

  /**
   * 
   * Gets the attribute value for PO_NBR using the alias name PoNbr
   */
  public Number getPoNbr()
  {
    return (Number)getAttributeInternal(PONBR);
  }

  /**
   * 
   * Sets <code>value</code> as attribute value for PO_NBR using the alias name PoNbr
   */
  public void setPoNbr(Number value)
  {
    setAttributeInternal(PONBR, value);
  }

  /**
   * 
   * Gets the attribute value for RECEIPT_NUM using the alias name ReceiptNum
   */
  public Number getReceiptNum()
  {
    return (Number)getAttributeInternal(RECEIPTNUM);
  }

  /**
   * 
   * Sets <code>value</code> as attribute value for RECEIPT_NUM using the alias name ReceiptNum
   */
  public void setReceiptNum(Number value)
  {
    setAttributeInternal(RECEIPTNUM, value);
  }

  /**
   * 
   * Gets the attribute value for FROM_LOC_ID using the alias name FromLocId
   */
  public Number getFromLocId()
  {
    return (Number)getAttributeInternal(FROMLOCID);
  }

  /**
   * 
   * Sets <code>value</code> as attribute value for FROM_LOC_ID using the alias name FromLocId
   */
  public void setFromLocId(Number value)
  {
    setAttributeInternal(FROMLOCID, value);
  }

  /**
   * 
   * Gets the attribute value for TO_LOC_ID using the alias name ToLocId
   */
  public Number getToLocId()
  {
    return (Number)getAttributeInternal(TOLOCID);
  }

  /**
   * 
   * Sets <code>value</code> as attribute value for TO_LOC_ID using the alias name ToLocId
   */
  public void setToLocId(Number value)
  {
    setAttributeInternal(TOLOCID, value);
  }

  /**
   * 
   * Gets the attribute value for SKU using the alias name Sku
   */
  public Number getSku()
  {
    return (Number)getAttributeInternal(SKU);
  }

  /**
   * 
   * Sets <code>value</code> as attribute value for SKU using the alias name Sku
   */
  public void setSku(Number value)
  {
    setAttributeInternal(SKU, value);
  }

  /**
   * 
   * Gets the attribute value for ALLOC_DT using the alias name AllocDt
   */
  public Date getAllocDt()
  {
    return (Date)getAttributeInternal(ALLOCDT);
  }

  /**
   * 
   * Sets <code>value</code> as attribute value for ALLOC_DT using the alias name AllocDt
   */
  public void setAllocDt(Date value)
  {
    setAttributeInternal(ALLOCDT, value);
  }

  /**
   * 
   * Gets the attribute value for ALLOC_TIMESTAMP using the alias name AllocTimestamp
   */
  public Date getAllocTimestamp()
  {
    return (Date)getAttributeInternal(ALLOCTIMESTAMP);
  }

  /**
   * 
   * Sets <code>value</code> as attribute value for ALLOC_TIMESTAMP using the alias name AllocTimestamp
   */
  public void setAllocTimestamp(Date value)
  {
    setAttributeInternal(ALLOCTIMESTAMP, value);
  }

  /**
   * 
   * Gets the attribute value for ALLOC_QTY using the alias name AllocQty
   */
  public Number getAllocQty()
  {
    return (Number)getAttributeInternal(ALLOCQTY);
  }

  /**
   * 
   * Sets <code>value</code> as attribute value for ALLOC_QTY using the alias name AllocQty
   */
  public void setAllocQty(Number value)
  {
    setAttributeInternal(ALLOCQTY, value);
  }

  /**
   * 
   * Gets the attribute value for DYNAMIC_QTY using the alias name DynamicQty
   */
  public Number getDynamicQty()
  {
    return (Number)getAttributeInternal(DYNAMICQTY);
  }

  /**
   * 
   * Sets <code>value</code> as attribute value for DYNAMIC_QTY using the alias name DynamicQty
   */
  public void setDynamicQty(Number value)
  {
    setAttributeInternal(DYNAMICQTY, value);
  }

  /**
   * 
   * Gets the attribute value for LOCK_IN_QTY using the alias name LockInQty
   */
  public Number getLockInQty()
  {
    return (Number)getAttributeInternal(LOCKINQTY);
  }

  /**
   * 
   * Sets <code>value</code> as attribute value for LOCK_IN_QTY using the alias name LockInQty
   */
  public void setLockInQty(Number value)
  {
    setAttributeInternal(LOCKINQTY, value);
  }

  /**
   * 
   * Gets the attribute value for ADTL_NEED_QTY using the alias name AdtlNeedQty
   */
  public Number getAdtlNeedQty()
  {
    return (Number)getAttributeInternal(ADTLNEEDQTY);
  }

  /**
   * 
   * Sets <code>value</code> as attribute value for ADTL_NEED_QTY using the alias name AdtlNeedQty
   */
  public void setAdtlNeedQty(Number value)
  {
    setAttributeInternal(ADTLNEEDQTY, value);
  }

  /**
   * 
   * Gets the attribute value for MARK_OUT_QTY using the alias name MarkOutQty
   */
  public Number getMarkOutQty()
  {
    return (Number)getAttributeInternal(MARKOUTQTY);
  }

  /**
   * 
   * Sets <code>value</code> as attribute value for MARK_OUT_QTY using the alias name MarkOutQty
   */
  public void setMarkOutQty(Number value)
  {
    setAttributeInternal(MARKOUTQTY, value);
  }

  /**
   * 
   * Gets the attribute value for ROWID using the alias name RowID
   */
  public RowID getRowID()
  {
    return (RowID)getAttributeInternal(ROWID);
  }
  //  Generated method. Do not modify.

  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case PONBR:
        return getPoNbr();
      case RECEIPTNUM:
        return getReceiptNum();
      case FROMLOCID:
        return getFromLocId();
      case TOLOCID:
        return getToLocId();
      case SKU:
        return getSku();
      case ALLOCDT:
        return getAllocDt();
      case ALLOCTIMESTAMP:
        return getAllocTimestamp();
      case ALLOCQTY:
        return getAllocQty();
      case DYNAMICQTY:
        return getDynamicQty();
      case LOCKINQTY:
        return getLockInQty();
      case ADTLNEEDQTY:
        return getAdtlNeedQty();
      case MARKOUTQTY:
        return getMarkOutQty();
      case ROWID:
        return getRowID();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }
  //  Generated method. Do not modify.

  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case PONBR:
        setPoNbr((Number)value);
        return;
      case RECEIPTNUM:
        setReceiptNum((Number)value);
        return;
      case FROMLOCID:
        setFromLocId((Number)value);
        return;
      case TOLOCID:
        setToLocId((Number)value);
        return;
      case SKU:
        setSku((Number)value);
        return;
      case ALLOCDT:
        setAllocDt((Date)value);
        return;
      case ALLOCTIMESTAMP:
        setAllocTimestamp((Date)value);
        return;
      case ALLOCQTY:
        setAllocQty((Number)value);
        return;
      case DYNAMICQTY:
        setDynamicQty((Number)value);
        return;
      case LOCKINQTY:
        setLockInQty((Number)value);
        return;
      case ADTLNEEDQTY:
        setAdtlNeedQty((Number)value);
        return;
      case MARKOUTQTY:
        setMarkOutQty((Number)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }
}