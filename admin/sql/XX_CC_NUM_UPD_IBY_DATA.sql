SET SHOW         OFF
SET VERIFY       OFF
SET ECHO         OFF
SET TAB          OFF
SET FEEDBACK     ON

-- +=======================================================================+
-- |               Office Depot - Credit Card Purge                         |
-- |      Oracle NAIO/Office Depot/Consulting Organization                 |
-- +=======================================================================+
-- | Name        : XX_CC_NUM_UPD_IBY_DATA.sql                              |
-- | Description : Script to update the Credit Card number to NULL for IBY tables  |
-- |                                                                       |
-- |Change History:                                                        |
-- |---------------                                                        |
-- |                                                                       |
-- |Version  Date        Author             Remarks                        |
-- |-------  ----------- -----------------  -------------------------------|
-- | 1.0     13-Oct-2015 Madhu Bolli       Defect#35193 - Initial          |
-- | 1.1     25-Nov-2015 Madhu Bolli       Defect#35193 - For easy testing,  instead of NULL |
-- |                                     update with unique values         |
-- | 1.2     22-Mar-2016 Avinash Baddam    Changed parallel level to 64    |
-- | 1.3     20-Apr-2016 Madhu Bolli       Removed the updation of iby_security_segments |
-- |                       due to row lock as iby_creditcard.cc_num_sec_segment_id values 
-- |                       are duplicate. Another change - update CC# for all records,    |
-- |					   as updated in defect, no need to exclude AMEX, Citi_Con, CITI_Com|
-- | 1.4     06-May-2016 Madhu Bolli        After reviewed with Rick, the attribute7 and AMEX|
-- |                                       clauses needs to be included    |
-- | 1.5     10-May-2016 Madhu Bolli      Modified conditions that -        |
-- |                           if Token and attribute NOT NULL then make attribute4 as NULL |
-- |                            or Update 3 columns to NULL for all Non-Token records |
-- | 1.6     19-May-2016 Madhu Bolli      If attribute7 is NULL then also NULLIFY |
-- +=======================================================================+
/***************************************************************************************************
	Create a procedure to update the records
	using the ids generated by diving the table into chunks.
	This procedure will be called by the script to be run in parallel
****************************************************************************************************/


CREATE OR REPLACE PROCEDURE XXOD_UPDATE_CCNO_IBY_DATA (p_start_id IN NUMBER, p_end_id IN NUMBER) AS

BEGIN
     
	 update iby_creditcard cc
       set cc.cc_number_hash1 = DECODE(NVL(cc.attribute7,'N'), 'N', cc.instrid||'***' , cc_number_hash1)        -- 1.1 and 1.5
		  ,cc.cc_number_hash2 = DECODE(NVL(cc.attribute7,'N'), 'N', NULL , cc_number_hash2) -- 1.5
          ,cc.Attribute4 = NULL   
     where cc.instrid between p_start_id and p_end_id
      and ( NVL(cc.attribute7,'N') = 'N'
            or (NVL(cc.attribute7,'N') = 'Y'  and cc.Attribute4 is NOT NULL) )  -- 1.5
      -- exclude AMEX cards till AMEX tokenization completes for iRec cards
      and cc.card_issuer_code NOT IN ('AMEX');     -- 1.3 and 1.4	   
                          
commit;

end  XXOD_UPDATE_CCNO_IBY_DATA;

/
  
/***************************************************************************************************
	Create task, divide master table into chunks, then run the task
****************************************************************************************************/

DECLARE

  l_task     VARCHAR2(30)     := 'UPDATE_CCNO_IBY_CC_DATA';
  l_sql_stmt VARCHAR2(32767)  := 'BEGIN  XXOD_UPDATE_CCNO_IBY_DATA(:start_id, :end_id); END;';
  l_try      NUMBER;
  l_status   NUMBER;

BEGIN

	-- create a task
	DBMS_PARALLEL_EXECUTE.create_task (task_name => l_task);
	-- point to key column and set batch size
	DBMS_PARALLEL_EXECUTE.create_chunks_by_number_col
		(task_name    => l_task,
		table_owner  => 'IBY',
		table_name   => 'IBY_CREDITCARD',
		table_column => 'INSTRID',
		chunk_size   => 100000);

	DBMS_PARALLEL_EXECUTE.run_task(task_name    => l_task,
                                 sql_stmt       => l_sql_stmt,
                                 language_flag  => DBMS_SQL.NATIVE,
                                 parallel_level => 64);

	l_status := DBMS_PARALLEL_EXECUTE.task_status(l_task);

	dbms_output.put_line('l_status = '||l_status);

  -- If there is error, Try resuming the task for 2 more times.
  l_try := 0;
  l_status := DBMS_PARALLEL_EXECUTE.task_status(l_task);
  WHILE(l_try < 2 and l_status != DBMS_PARALLEL_EXECUTE.FINISHED)
  Loop
    l_try := l_try + 1;
    DBMS_PARALLEL_EXECUTE.resume_task(l_task);
    l_status := DBMS_PARALLEL_EXECUTE.task_status(l_task);
  END LOOP;
  

-- Monitor status
/* SELECT chunk_id, status, start_id, end_id
FROM   user_parallel_execute_chunks
WHERE  task_name = l_task
ORDER BY chunk_id;

--delete task

DBMS_PARALLEL_EXECUTE.DROP_TASK (l_task);

dbms_output.put_line('Task '||l_task||' dropped');
*/

end;
/
