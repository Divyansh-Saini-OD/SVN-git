SET SHOW         OFF
SET VERIFY       OFF
SET ECHO         OFF
SET TAB          OFF
SET FEEDBACK     ON

-- +=======================================================================+
-- |               Office Depot - Credit Card Purge                         |
-- |      Oracle NAIO/Office Depot/Consulting Organization                 |
-- +=======================================================================+
-- | Name        : XX_CC_NUM_UPD_AP_BANK_ACCTS.sql                         |
-- | Description : Script to update the Credit Card number to NULL for AP Bank Acct table |
-- |                                                                       |
-- |Change History:                                                        |
-- |---------------                                                        |
-- |                                                                       |
-- |Version  Date        Author             Remarks                        |
-- |-------  ----------- -----------------  -------------------------------|
-- | 1.0     13-Oct-2015 Madhu Bolli        Defect#35194 - Initial         |
-- | 2.0     22-Mar-2016 Avinash Baddam     Changed parallel level to 64   |
-- | 3.0     22-Apr-2016 Madhu Bolli        Updating attribute15 as sarah mentioned|
-- | 4.0     10-May-2016 Madhu Bolli        Added index hint to sql        |
-- +=======================================================================+
/***************************************************************************************************
	Create a procedure to update the CC number in all records
	using the ids generated by diving the master table into chunks.
	This procedure will be called by the script to be run in parallel
****************************************************************************************************/


CREATE OR REPLACE PROCEDURE XXOD_UPDATE_AP_CC_DATA (p_start_id IN NUMBER, p_end_id IN NUMBER) AS
  
BEGIN

   update /*+ index(ABA AP_BANK_ACCOUNTS_U1) */ AP.AP_BANK_ACCOUNTS_ALL ABA
      set aba.BANK_ACCOUNT_NUM = BANK_ACCOUNT_ID||'***'
	     ,aba.ATTRIBUTE15  = 'CC_BANKNUM_REMOVED'
    where aba.ACCOUNT_TYPE   = 'EXTERNAL'
	  and aba.BANK_BRANCH_ID = 1 -- CREDIT CARD ONLY  -- 3.0
	  and aba.BANK_ACCOUNT_ID between p_start_id and p_end_id;

COMMIT;

END  XXOD_UPDATE_AP_CC_DATA;
/
 
/***************************************************************************************************
	Create task, divide master table into chunks, then run the task
****************************************************************************************************/

DECLARE

  l_task     VARCHAR2(30)     := 'UPDATE_AP_CC_DATA';
  l_sql_stmt VARCHAR2(32767)  := 'BEGIN  XXOD_UPDATE_AP_CC_DATA(:start_id, :end_id); END;';
  l_try      NUMBER;
  l_status   NUMBER;

BEGIN

  DBMS_RLS.ENABLE_POLICY (
  object_schema => 'AP',
  object_name => 'AP_BANK_ACCOUNTS_ALL',
  policy_name => 'XX_CDH_UPD_PLCY_AP_BANK_ACCT',
  enable => FALSE 
  );

	-- create a task
	DBMS_PARALLEL_EXECUTE.create_task (task_name => l_task);
	-- point to key column and set batch size
	DBMS_PARALLEL_EXECUTE.create_chunks_by_number_col
		(task_name    => l_task,
		table_owner  => 'AP',
		table_name   => 'AP_BANK_ACCOUNTS_ALL',
		table_column => 'BANK_ACCOUNT_ID',
		chunk_size   => 100000);

	DBMS_PARALLEL_EXECUTE.run_task(task_name    => l_task,
                                 sql_stmt       => l_sql_stmt,
                                 language_flag  => DBMS_SQL.NATIVE,
                                 parallel_level => 64);

	l_status := DBMS_PARALLEL_EXECUTE.task_status(l_task);

	dbms_output.put_line('l_status = '||l_status);

	
  -- If there is error, Try resuming the task for 2 more times.
  l_try := 0;
  l_status := DBMS_PARALLEL_EXECUTE.task_status(l_task);
  WHILE(l_try < 2 and l_status != DBMS_PARALLEL_EXECUTE.FINISHED)
  Loop
    l_try := l_try + 1;
    DBMS_PARALLEL_EXECUTE.resume_task(l_task);
    l_status := DBMS_PARALLEL_EXECUTE.task_status(l_task);
  END LOOP;
  
/*

-- Monitor status
 SELECT chunk_id, status, start_id, end_id
FROM   user_parallel_execute_chunks
WHERE  task_name = l_task
ORDER BY chunk_id;

--delete task

DBMS_PARALLEL_EXECUTE.DROP_TASK (l_task);

dbms_output.put_line('Task '||l_task||' dropped');

--To view all running jobs --> USER_SCHEDULER_RUNNING_JOBS
--To view job statuses --> USER_SCHEDULER_JOB_RUN_DETAILS
--To view log details --> USER_SCHEDULER_JOB_LOG

*/

  DBMS_RLS.ENABLE_POLICY (
  object_schema => 'AP',
  object_name => 'AP_BANK_ACCOUNTS_ALL',
  policy_name => 'XX_CDH_UPD_PLCY_AP_BANK_ACCT',
  enable => TRUE 
  );


end;
/
