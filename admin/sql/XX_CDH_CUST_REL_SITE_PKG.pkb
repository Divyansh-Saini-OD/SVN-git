SET VERIFY OFF;
WHENEVER SQLERROR CONTINUE;
WHENEVER OSERROR EXIT FAILURE ROLLBACK;

CREATE OR REPLACE PACKAGE BODY XX_CDH_CUST_REL_SITE_PKG
-- +===================================================================+
-- |                  Office Depot - Project Simplify                  |
-- |                Oracle NAIO Consulting Organization                |
-- +===================================================================+
-- | Name        :  XXCDHCUSTRELATEMASTERB.pls                         |
-- | Description :  CDH Customer Account Relate Master Package Body    |
-- |                                                                   |
-- |Change Record:                                                     |
-- |===============                                                    |
-- |Version   Date        Author             Remarks                   |
-- |========  =========== ================== ==========================|
-- |Draft 1a  27-Apr-2007 Ambarish Mukherjee Initial draft version     |
-- |Draft 1b  15-May-2007 Ambarish Mukherjee Modified to handle updates|
-- |Draft 1c  04-Jun-2007 Ambarish Mukherjee Modified to include limit |
-- |                                         clause in bulk fetch      |
-- |Draft 1d  03-Jul-2007 Ambarish Mukherjee Modified for org_id       |
-- |2.1       06-Nov-2008 Indra Varada       Modified Site Use OSR     |
-- |2.2       08-MAR-2014 Arun Gannarapu     Modified as per R12 retrofit |
-- |                                         defect--28030
-- +===================================================================+
AS
gt_request_id                 fnd_concurrent_requests.request_id%TYPE
                              := fnd_global.conc_request_id();
gv_init_msg_list              VARCHAR2(1)          := fnd_api.g_true;
gn_bulk_fetch_limit           NUMBER               := XX_CDH_CONV_MASTER_PKG.g_bulk_fetch_limit;

-- +===================================================================+
-- | Name        :  conv_master_main                                   |
-- | Description :  This procedure is invoked from the CDH Conversion  |
-- |                Master Concurrent Request.This would submit Child  |
-- |                programs based on batch_ids generated by ETL       |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE conv_master_main
      (  x_errbuf              OUT VARCHAR2,
         x_retcode             OUT VARCHAR2,
         p_batch_id_from       IN  NUMBER,
         p_batch_id_to         IN  NUMBER
      )
IS
lv_request_data                VARCHAR2(100);
lv_error_message               VARCHAR2(4000);
ln_return_status               NUMBER;
le_error                       EXCEPTION;

BEGIN
   x_retcode       := 0;
   x_errbuf        := ' ';
   lv_request_data := NULL;

   log_debug_msg( 'Start of CDH Conversion Master Program');

   lv_request_data := fnd_conc_global.request_data;

   IF lv_request_data IS NULL THEN

      submit_sub_requests
            (  lv_error_message,
               ln_return_status,
               p_batch_id_from,
               p_batch_id_to
            );

      IF ln_return_status <> 0 THEN
         x_errbuf := lv_error_message;
         log_debug_msg( 'Error in submit_sub_requests :- ');
         log_debug_msg( lv_error_message );
         RAISE le_error;
      END IF;
   END IF;

   IF lv_request_data IS NOT NULL THEN --Restart of the main / parent request
      log_debug_msg( 'ReStart of CDH Conversion Master Program');
   END IF;


EXCEPTION
   WHEN le_error THEN
      x_retcode := 2;
   WHEN OTHERS THEN
      x_retcode := 2;
      x_errbuf  := 'Unexpected error in main procedure - '||SQLERRM;
      log_debug_msg( x_errbuf );

END conv_master_main;

-- +===================================================================+
-- | Name        :  submit_sub_requests                                |
-- | Description :  This procedure is invoked from the conv_master_main|
-- |                procedure. This would submit child requests based  |
-- |                on batch_id.                                       |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE submit_sub_requests
      (  x_errbuf              OUT VARCHAR2,
         x_retcode             OUT VARCHAR2,
         p_batch_id_from       IN  NUMBER,
         p_batch_id_to         IN  NUMBER
      )
IS
lt_conc_request_id             fnd_concurrent_requests.request_id%TYPE;
le_exception                   EXCEPTION;
ln_index                       NUMBER;
ln_count                       NUMBER;
ln_batch_id                    NUMBER;

TYPE l_batch_range_rec         IS RECORD ( batch_id    NUMBER);

TYPE l_batch_range_tbl_type    IS TABLE OF l_batch_range_rec INDEX BY BINARY_INTEGER;

l_tbl_batch_range              l_batch_range_tbl_type;

CURSOR lc_hz_batch_cur
IS
SELECT batch_id
FROM   hz_imp_batch_summary hibs
where  hibs.batch_id between nvl(p_batch_id_from,hibs.batch_id) and nvl(p_batch_id_to,hibs.batch_id)
;


BEGIN

   log_debug_msg( 'Start Submitting Child Requests');

   ln_count := 0;

   FOR lc_hz_batch_rec IN lc_hz_batch_cur
   LOOP
      ln_count    := ln_count + 1;
      l_tbl_batch_range(ln_count).batch_id := lc_hz_batch_rec.batch_id;
   END LOOP;

   IF ln_count > 0 THEN
      log_debug_msg( 'Submitting Conversion Child Requests... ');
   ELSIF ln_count = 0 THEN
      log_debug_msg( 'No Batch found to submit Conversion Child Request. ');
   END IF;

   log_debug_msg( 'No Of Child Requests to spawn - '||ln_count);

   FOR ln_index IN 1..ln_count
   LOOP

      lt_conc_request_id := FND_REQUEST.submit_request
                              (   application => 'XXCNV',
                                  program     => 'XX_CDH_CUST_ACCT_REL_CHILD',
                                  description => gt_request_id||'-'||TO_CHAR(ln_index), -- UI job display
                                  start_time  => NULL,
                                  sub_request => TRUE, -- TRUE means is a sub request
                                  argument1   => l_tbl_batch_range(ln_index).batch_id
                              );
      IF lt_conc_request_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         log_debug_msg( 'Child Request failed to submit: ' || x_errbuf);
         x_errbuf  := 'Child Request failed to submit: ' || x_errbuf;
         RAISE le_exception;
      ELSE
         log_debug_msg( ' ');
         log_debug_msg( 'Submitted Child Request : '|| TO_CHAR( lt_conc_request_id ));
         log_debug_msg( 'Batch_id                : '|| l_tbl_batch_range(ln_index).batch_id);
      END IF;

   END LOOP;

   -----------------------------------------------------------------
   -- After submitting sub-requests, set the parent status to PAUSED
   -- and set the request_data to a non-null value to detect restart
   -----------------------------------------------------------------

   fnd_conc_global.set_req_globals
      (  conc_status  => 'PAUSED',
         request_data => TO_CHAR( l_tbl_batch_range.count )
      );

   x_errbuf  := TO_CHAR( l_tbl_batch_range.count ) || ' sub requests submitted';
   x_retcode := 0;

   --------------------------------------------------------------------
   -- Parent Paused and waits for sub requests to finish before restart
   --------------------------------------------------------------------
   log_debug_msg( x_errbuf);

EXCEPTION
   WHEN le_exception THEN
      x_retcode := 2;
   WHEN OTHERS THEN
      x_errbuf  := 'Unexpected error while submitting Child Requests - '||SQLERRM;
      x_retcode := 2;

END submit_sub_requests;

-- +===================================================================+
-- | Name        :  conv_child_main                                    |
-- | Description :  This procedure is the main for the Cust Account    |
-- |                Relate Child Program.This would create account     |
-- |                relationships and also update bill-to site uses for|
-- |                the batch_id passed.                               |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE conv_child_main
      (  x_errbuf              OUT VARCHAR2,
         x_retcode             OUT VARCHAR2,
         p_batch_id            IN  NUMBER
      )
IS

lv_errbuf                      VARCHAR2(2000);
lv_retcode                     VARCHAR2(10);

BEGIN
  log_debug_msg( 'Start of Cust Account Relate Child Program');

  log_debug_msg( 'Call procedure for Cust Account Relate');

  process_cust_acct_relate_batch
        (  x_errbuf            => lv_errbuf
          ,x_retcode           => lv_retcode
          ,p_batch_id          => p_batch_id
        );

  log_debug_msg( 'Call procedure for update of Bill-To Site Use');

  update_cust_site_use_batch
        (  x_errbuf            => lv_errbuf
          ,x_retcode           => lv_retcode
          ,p_batch_id          => p_batch_id
        );

EXCEPTION
   WHEN OTHERS THEN
      log_debug_msg( 'Unexpected Error in conv_child_main - '||SQLERRM);
      x_errbuf := 'Unexpected Error in conv_child_main - '||SQLERRM;
      x_retcode := 2;
END;


-- +===================================================================+
-- | Name        :  process_cust_acct_relate_batch                     |
-- | Description :  This procedure would create account relationships  |
-- |                picking records from the staging table based on the|
-- |                batch_id passed.                                   |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE process_cust_acct_relate_batch
      (  x_errbuf              OUT VARCHAR2,
         x_retcode             OUT VARCHAR2,
         p_batch_id            IN  NUMBER
      )
IS

CURSOR lc_fetch_rel_account_cur
IS
SELECT *
FROM   xxod_hz_imp_accounts_stg
WHERE  relate_interface_status IN ('1','4','6')
AND    org_id                  = fnd_global.org_id
AND    related_account_ref     IS NOT NULL
AND    batch_id                = p_batch_id;

TYPE lt_account_tbl_type       IS TABLE OF xxod_hz_imp_accounts_stg%ROWTYPE INDEX BY BINARY_INTEGER;
lt_account_tbl                 lt_account_tbl_type;

l_cust_acct_rel_rec            gt_cust_acct_rel_rec_type;
ln_records_read                NUMBER;
ln_records_success             NUMBER;
ln_records_failed              NUMBER;
le_skip_cust_relate            EXCEPTION;
lv_errbuf                      VARCHAR2(2000);
lv_retcode                     VARCHAR2(10);

BEGIN

   log_debug_msg( '****************************************');
   log_debug_msg( '* Start of Process Cust Account Relate *');
   log_debug_msg( '****************************************');


   ln_records_read    := 0;
   ln_records_success := 0;
   ln_records_failed  := 0;

   OPEN lc_fetch_rel_account_cur;
   LOOP
      FETCH lc_fetch_rel_account_cur BULK COLLECT INTO lt_account_tbl LIMIT gn_bulk_fetch_limit;

      IF lt_account_tbl.count = 0 THEN
         log_debug_msg( 'No eligible records exist in the staging table for batch_id - '||p_batch_id||' for account relationships');
         RAISE le_skip_cust_relate;
      END IF;

      FOR i IN lt_account_tbl.FIRST .. lt_account_tbl.LAST
      LOOP
         log_debug_msg('-----------------------------------------------');
         log_debug_msg('RECORD_ID:'||lt_account_tbl(i).record_id);

         lv_errbuf           := NULL;
         lv_retcode          := NULL;
         l_cust_acct_rel_rec := NULL;
         ln_records_read     := ln_records_read + 1;

         l_cust_acct_rel_rec.record_id                      := lt_account_tbl(i).record_id;
         l_cust_acct_rel_rec.batch_id                       := p_batch_id;
         l_cust_acct_rel_rec.account_orig_system            := lt_account_tbl(i).account_orig_system;
         l_cust_acct_rel_rec.account_orig_system_reference  := lt_account_tbl(i).account_orig_system_reference;
         l_cust_acct_rel_rec.related_account_ref            := lt_account_tbl(i).related_account_ref;
         l_cust_acct_rel_rec.related_acc_ref_f_bill_to_flag := lt_account_tbl(i).related_acc_ref_f_bill_to_flag;
         l_cust_acct_rel_rec.related_acc_ref_f_ship_to_flag := lt_account_tbl(i).related_acc_ref_f_ship_to_flag;
         l_cust_acct_rel_rec.related_acc_ref_b_bill_to_flag := lt_account_tbl(i).related_acc_ref_b_bill_to_flag;
         l_cust_acct_rel_rec.related_acc_ref_b_ship_to_flag := lt_account_tbl(i).related_acc_ref_b_ship_to_flag;
         l_cust_acct_rel_rec.created_by_module              := lt_account_tbl(i).created_by_module;
         l_cust_acct_rel_rec.program_application_id         := lt_account_tbl(i).program_application_id;

         process_cust_acct_relate
            (  x_errbuf            => lv_errbuf
              ,x_retcode           => lv_retcode
              ,p_cust_acct_rel_rec => l_cust_acct_rel_rec
            );

         IF lv_retcode = FND_API.G_RET_STS_SUCCESS THEN
            ln_records_success := ln_records_success + 1;
            --IF MOD(i,1000) = 0 THEN
               COMMIT;
            --END IF;
         ELSE
            log_debug_msg( 'Error while creating Cust Account Relationship');
            log_debug_msg( 'Error - '||lv_errbuf);
         END IF;

      END LOOP;
      EXIT WHEN lc_fetch_rel_account_cur%NOTFOUND;
   END LOOP;
   CLOSE lc_fetch_rel_account_cur;

   ln_records_failed := (ln_records_read - ln_records_success);

   log_debug_msg( ' ');
   log_debug_msg( ' ');
   log_debug_msg( 'Record Statistics after Processing Cust Account Relationships ');
   log_debug_msg( '-------------------------------------------------------------');
   log_debug_msg( 'Staging Table - XXOD_HZ_IMP_ACCOUNTS_STG ');
   log_debug_msg( 'No Of Records Read                   - '||ln_records_read);
   log_debug_msg( 'No Of Records Processesd Succesfully - '||ln_records_success);
   log_debug_msg( 'No Of Records Failed                 - '||ln_records_failed);
   log_debug_msg( '-------------------------------------------------------------');
   log_debug_msg( ' ');
   log_debug_msg( ' ');

   fnd_file.put_line(fnd_file.output, ' ');
   fnd_file.put_line(fnd_file.output, ' ');
   fnd_file.put_line(fnd_file.output, 'Record Statistics after Processing Cust Account Relationships ');
   fnd_file.put_line(fnd_file.output, '-------------------------------------------------------------');
   fnd_file.put_line(fnd_file.output, 'Staging Table - XXOD_HZ_IMP_ACCOUNTS_STG ');
   fnd_file.put_line(fnd_file.output, 'No Of Records Read                   - '||ln_records_read);
   fnd_file.put_line(fnd_file.output, 'No Of Records Processesd Succesfully - '||ln_records_success);
   fnd_file.put_line(fnd_file.output, 'No Of Records Failed                 - '||ln_records_failed);
   fnd_file.put_line(fnd_file.output, '-------------------------------------------------------------');
   fnd_file.put_line(fnd_file.output, ' ');
   fnd_file.put_line(fnd_file.output, ' ');

   log_debug_msg( '****************************************');
   log_debug_msg( '* End   of Process Cust Account Relate *');
   log_debug_msg( '****************************************');
EXCEPTION
   WHEN le_skip_cust_relate THEN
      NULL;
   WHEN OTHERS THEN
      log_debug_msg( 'Unexpected error in procedure process_cust_acct_relate_batch for batch_id - '||p_batch_id);
      log_debug_msg( 'Error - '||SQLERRM);
END process_cust_acct_relate_batch;


-- +===================================================================+
-- | Name        :  process_cust_acct_relate                           |
-- | Description :  This procedure creates account relationship for a  |
-- |                particular record of the staging table which should|
-- |                be passed as input.                                |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE process_cust_acct_relate
      (  x_errbuf              OUT VARCHAR2,
         x_retcode             OUT VARCHAR2,
         p_cust_acct_rel_rec   IN  gt_cust_acct_rel_rec_type
      )
IS

l_cust_acct_relate_rec         HZ_CUST_ACCOUNT_V2PUB.cust_acct_relate_rec_type;
l_df_cust_acct_relate_rec      HZ_CUST_ACCOUNT_V2PUB.cust_acct_relate_rec_type;
lv_return_status               VARCHAR2(10);
ln_msg_count                   NUMBER;
lv_msg_data                    VARCHAR2(2000);
ln_cust_account_id             NUMBER;
ln_rel_cust_account_id         NUMBER;
ln_osr_retcode                 NUMBER;
lv_osr_errbuf                  VARCHAR2(2000);
lt_relate_interface_status     xxod_hz_imp_accounts_stg.relate_interface_status%TYPE;
le_skip_process                EXCEPTION;
ln_object_version_number       NUMBER;
ln_msg_text                    VARCHAR2(32000);

BEGIN
   x_errbuf  := NULL;
   x_retcode := NULL;
   ----------------------------
   -- Fetch Cust Account Id
   ----------------------------

   ln_cust_account_id       := NULL;
   ln_osr_retcode           := NULL;
   lv_osr_errbuf            := NULL;


   XX_CDH_CONV_MASTER_PKG.get_osr_owner_table_id
      (  p_orig_system        => p_cust_acct_rel_rec.account_orig_system,
         p_orig_sys_reference => p_cust_acct_rel_rec.account_orig_system_reference,
         p_owner_table_name   => 'HZ_CUST_ACCOUNTS',
         x_owner_table_id     => ln_cust_account_id,
         x_retcode            => ln_osr_retcode,
         x_errbuf             => lv_osr_errbuf
      );

   IF ln_cust_account_id IS NULL THEN
      log_debug_msg( 'Error while fetching cust_account_id - account_orig_system_reference is invalid');
      log_debug_msg( 'account_orig_system_reference - '||p_cust_acct_rel_rec.account_orig_system_reference);
      x_errbuf := 'Error while fetching cust_account_id - account_orig_system_reference is invalid';
      lt_relate_interface_status := 6;
      log_exception
         (  p_record_control_id      => p_cust_acct_rel_rec.record_id
           ,p_source_system_code     => NULL
           ,p_procedure_name         => 'PROCESS_CUST_ACCT_RELATE'
           ,p_staging_table_name     => 'XXOD_HZ_IMP_ACCOUNTS_STG'
           ,p_staging_column_name    => 'ACCOUNT_ORIG_SYSTEM_REFERENCE'
           ,p_staging_column_value   => p_cust_acct_rel_rec.account_orig_system
           ,p_source_system_ref      => p_cust_acct_rel_rec.account_orig_system_reference
           ,p_batch_id               => p_cust_acct_rel_rec.batch_id
           ,p_exception_log          => 'Error while fetching cust_account_id - account_orig_system_reference is invalid'
           ,p_oracle_error_code      => NULL
           ,p_oracle_error_msg       => NULL
         );
      RAISE le_skip_process;
   END IF;

   ---------------------------------
   -- Fetch Related Cust Account Id
   ---------------------------------

   ln_rel_cust_account_id   := NULL;
   ln_osr_retcode           := NULL;
   lv_osr_errbuf            := NULL;


   XX_CDH_CONV_MASTER_PKG.get_osr_owner_table_id
      (  p_orig_system        => p_cust_acct_rel_rec.account_orig_system,
         p_orig_sys_reference => p_cust_acct_rel_rec.related_account_ref,
         p_owner_table_name   => 'HZ_CUST_ACCOUNTS',
         x_owner_table_id     => ln_rel_cust_account_id,
         x_retcode            => ln_osr_retcode,
         x_errbuf             => lv_osr_errbuf
      );

   IF ln_rel_cust_account_id IS NULL THEN
      log_debug_msg( 'Error while fetching related_cust_account_id - related_account_ref is invalid');
      log_debug_msg( 'related_account_ref - '||p_cust_acct_rel_rec.related_account_ref);
      x_errbuf := 'Error while fetching related_cust_account_id - related_account_ref is invalid';
      lt_relate_interface_status := 6;
      log_exception
         (  p_record_control_id      => p_cust_acct_rel_rec.record_id
           ,p_source_system_code     => NULL
           ,p_procedure_name         => 'PROCESS_CUST_ACCT_RELATE'
           ,p_staging_table_name     => 'XXOD_HZ_IMP_ACCOUNTS_STG'
           ,p_staging_column_name    => 'RELATED_ACCOUNT_REF'
           ,p_staging_column_value   => p_cust_acct_rel_rec.account_orig_system
           ,p_source_system_ref      => p_cust_acct_rel_rec.related_account_ref
           ,p_batch_id               => p_cust_acct_rel_rec.batch_id
           ,p_exception_log          => 'Error while fetching related_cust_account_id - related_account_ref is invalid'
           ,p_oracle_error_code      => NULL
           ,p_oracle_error_msg       => NULL
         );
      RAISE le_skip_process;
   END IF;

   ------------------------------------------------
   -- Check if Forward Relationship already exists
   ------------------------------------------------
   BEGIN

      log_debug_msg( 'Check if Forward Relationship already exists');

      ln_object_version_number := NULL;

      SELECT object_version_number
      INTO   ln_object_version_number
      FROM   hz_cust_acct_relate
      WHERE  cust_account_id         = ln_cust_account_id
      AND    related_cust_account_id = ln_rel_cust_account_id
      AND    status                  = 'A';

      log_debug_msg( 'Forward Relationship already exists !!');

   EXCEPTION
      WHEN OTHERS THEN
         ln_object_version_number := NULL;
   END;

   IF ln_object_version_number = NULL THEN
      --------------------------------
      -- Create Forward Relationship
      --------------------------------

      l_cust_acct_relate_rec                          := l_df_cust_acct_relate_rec;
      l_cust_acct_relate_rec.cust_account_id          := ln_cust_account_id;
      l_cust_acct_relate_rec.related_cust_account_id  := ln_rel_cust_account_id;
      l_cust_acct_relate_rec.relationship_type        := 'ALL';
      -- l_cust_acct_relate_rec.comments                 :=
      -- l_cust_acct_relate_rec.attribute_category       :=
      -- l_cust_acct_relate_rec.attribute1               :=
      -- l_cust_acct_relate_rec.attribute2               :=
      -- l_cust_acct_relate_rec.attribute3               :=
      -- l_cust_acct_relate_rec.attribute4               :=
      -- l_cust_acct_relate_rec.attribute5               :=
      -- l_cust_acct_relate_rec.attribute6               :=
      -- l_cust_acct_relate_rec.attribute7               :=
      -- l_cust_acct_relate_rec.attribute8               :=
      -- l_cust_acct_relate_rec.attribute9               :=
      -- l_cust_acct_relate_rec.attribute10              :=
      -- l_cust_acct_relate_rec.customer_reciprocal_flag :=
      -- l_cust_acct_relate_rec.status                   :=
      -- l_cust_acct_relate_rec.attribute11              :=
      -- l_cust_acct_relate_rec.attribute12              :=
      -- l_cust_acct_relate_rec.attribute13              :=
      -- l_cust_acct_relate_rec.attribute14              :=
      -- l_cust_acct_relate_rec.attribute15              :=

      l_cust_acct_relate_rec.bill_to_flag             := NVL(p_cust_acct_rel_rec.related_acc_ref_f_bill_to_flag,'N');
      l_cust_acct_relate_rec.ship_to_flag             := NVL(p_cust_acct_rel_rec.related_acc_ref_f_ship_to_flag,'N');

      l_cust_acct_relate_rec.created_by_module        := p_cust_acct_rel_rec.created_by_module;
      l_cust_acct_relate_rec.application_id           := p_cust_acct_rel_rec.program_application_id;

      log_debug_msg( 'Creating forward relationship..');
      log_debug_msg( 'Calling API HZ_CUST_ACCOUNT_V2PUB.create_cust_acct_relate');

      lt_relate_interface_status := 4;

      lv_return_status  := NULL;
      ln_msg_count      := 0;
      lv_msg_data       := NULL;

      HZ_CUST_ACCOUNT_V2PUB.create_cust_acct_relate
         (  p_init_msg_list              => gv_init_msg_list,
            p_cust_acct_relate_rec       => l_cust_acct_relate_rec,
            x_return_status              => lv_return_status,
            x_msg_count                  => ln_msg_count,
            x_msg_data                   => lv_msg_data
         );

      IF lv_return_status = FND_API.G_RET_STS_SUCCESS THEN
         --lt_relate_interface_status := 7;
         log_debug_msg( 'API successful.');
         x_errbuf := 'API successful.';
      ELSE
         lt_relate_interface_status := 6;
         ln_msg_text := NULL;
         IF ln_msg_count > 0 THEN
            log_debug_msg( 'API returned Error.');
            x_errbuf := 'API returned Error while creating forward relationship';
            FOR counter IN 1..ln_msg_count
            LOOP
               ln_msg_text := ln_msg_text||' '||FND_MSG_PUB.Get(counter, FND_API.G_FALSE);
               log_debug_msg('Error - '|| FND_MSG_PUB.Get(counter, FND_API.G_FALSE));
            END LOOP;
            FND_MSG_PUB.Delete_Msg;
            log_exception
               (  p_record_control_id      => p_cust_acct_rel_rec.record_id
                 ,p_source_system_code     => NULL
                 ,p_procedure_name         => 'PROCESS_CUST_ACCT_RELATE'
                 ,p_staging_table_name     => 'XXOD_HZ_IMP_ACCOUNTS_STG'
                 ,p_staging_column_name    => 'RELATED_ACCOUNT_REF'
                 ,p_staging_column_value   => p_cust_acct_rel_rec.related_account_ref
                 ,p_source_system_ref      => p_cust_acct_rel_rec.related_account_ref
                 ,p_batch_id               => p_cust_acct_rel_rec.batch_id
                 ,p_exception_log          => XX_CDH_CONV_MASTER_PKG.TRIM_INPUT_MSG('create_cust_acct_relate API for forward relation returned Error - '||ln_msg_text)
                 ,p_oracle_error_code      => NULL
                 ,p_oracle_error_msg       => NULL
               );
         END IF;
         RAISE le_skip_process;
      END IF;
   ELSE
      --------------------------------
      -- Update Forward Relationship
      --------------------------------

      l_cust_acct_relate_rec                          := l_df_cust_acct_relate_rec;
      l_cust_acct_relate_rec.cust_account_id          := ln_cust_account_id;
      l_cust_acct_relate_rec.related_cust_account_id  := ln_rel_cust_account_id;

      l_cust_acct_relate_rec.bill_to_flag             := NVL(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(p_cust_acct_rel_rec.related_acc_ref_f_bill_to_flag),'N');
      l_cust_acct_relate_rec.ship_to_flag             := NVL(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(p_cust_acct_rel_rec.related_acc_ref_f_ship_to_flag),'N');

      l_cust_acct_relate_rec.application_id           := XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_num(p_cust_acct_rel_rec.program_application_id);

      log_debug_msg( 'Update forward relationship..');
      log_debug_msg( 'Calling API HZ_CUST_ACCOUNT_V2PUB.update_cust_acct_relate');

      lt_relate_interface_status := 4;

      lv_return_status  := NULL;
      ln_msg_count      := 0;
      lv_msg_data       := NULL;

      HZ_CUST_ACCOUNT_V2PUB.update_cust_acct_relate
         (  p_init_msg_list              => gv_init_msg_list,
            p_cust_acct_relate_rec       => l_cust_acct_relate_rec,
            p_object_version_number      => ln_object_version_number,
            x_return_status              => lv_return_status,
            x_msg_count                  => ln_msg_count,
            x_msg_data                   => lv_msg_data
         );

      IF lv_return_status = FND_API.G_RET_STS_SUCCESS THEN
         --lt_relate_interface_status := 7;
         log_debug_msg( 'API successful.');
         x_errbuf := 'API successful.';
      ELSE
         lt_relate_interface_status := 6;
         ln_msg_text := NULL;
         IF ln_msg_count > 0 THEN
            log_debug_msg( 'API returned Error.');
            x_errbuf := 'API returned Error while creating forward relationship';
            FOR counter IN 1..ln_msg_count
            LOOP
               ln_msg_text := ln_msg_text||' '||FND_MSG_PUB.Get(counter, FND_API.G_FALSE);
               log_debug_msg('Error - '|| FND_MSG_PUB.Get(counter, FND_API.G_FALSE));
            END LOOP;
            FND_MSG_PUB.Delete_Msg;
            log_exception
               (  p_record_control_id      => p_cust_acct_rel_rec.record_id
                 ,p_source_system_code     => NULL
                 ,p_procedure_name         => 'PROCESS_CUST_ACCT_RELATE'
                 ,p_staging_table_name     => 'XXOD_HZ_IMP_ACCOUNTS_STG'
                 ,p_staging_column_name    => 'RELATED_ACCOUNT_REF'
                 ,p_staging_column_value   => p_cust_acct_rel_rec.related_account_ref
                 ,p_source_system_ref      => p_cust_acct_rel_rec.related_account_ref
                 ,p_batch_id               => p_cust_acct_rel_rec.batch_id
                 ,p_exception_log          => XX_CDH_CONV_MASTER_PKG.TRIM_INPUT_MSG('update_cust_acct_relate API for forward relation returned Error - '||ln_msg_text)
                 ,p_oracle_error_code      => NULL
                 ,p_oracle_error_msg       => NULL
               );
         END IF;
         RAISE le_skip_process;
      END IF;
   END IF;

   -------------------------------------------------
   -- Check if Backward Relationship already exists
   -------------------------------------------------
   BEGIN

      log_debug_msg( 'Check if Backward Relationship already exists');

      ln_object_version_number := NULL;

      SELECT object_version_number
      INTO   ln_object_version_number
      FROM   hz_cust_acct_relate
      WHERE  cust_account_id         = ln_rel_cust_account_id
      AND    related_cust_account_id = ln_cust_account_id
      AND    status                  = 'A';

      log_debug_msg( 'Backward Relationship already exists !!');

   EXCEPTION
      WHEN OTHERS THEN
         ln_object_version_number := NULL;
   END;

   IF ln_object_version_number IS NULL THEN
      --------------------------------
      -- Create Backward Relationship
      --------------------------------

      l_cust_acct_relate_rec                          := l_df_cust_acct_relate_rec;
      l_cust_acct_relate_rec.cust_account_id          := ln_rel_cust_account_id;
      l_cust_acct_relate_rec.related_cust_account_id  := ln_cust_account_id;

      l_cust_acct_relate_rec.bill_to_flag             := NVL(p_cust_acct_rel_rec.related_acc_ref_b_bill_to_flag,'N');
      l_cust_acct_relate_rec.ship_to_flag             := NVL(p_cust_acct_rel_rec.related_acc_ref_b_ship_to_flag,'N');

      l_cust_acct_relate_rec.created_by_module        := p_cust_acct_rel_rec.created_by_module;
      l_cust_acct_relate_rec.application_id           := p_cust_acct_rel_rec.program_application_id;

      log_debug_msg( 'Creating backward relationship..');
      log_debug_msg( 'Calling API HZ_CUST_ACCOUNT_V2PUB.create_cust_acct_relate');

      lv_return_status  := NULL;
      ln_msg_count      := 0;
      lv_msg_data       := NULL;

      HZ_CUST_ACCOUNT_V2PUB.create_cust_acct_relate
         (  p_init_msg_list              => gv_init_msg_list,
            p_cust_acct_relate_rec       => l_cust_acct_relate_rec,
            x_return_status              => lv_return_status,
            x_msg_count                  => ln_msg_count,
            x_msg_data                   => lv_msg_data
         );

      IF lv_return_status = FND_API.G_RET_STS_SUCCESS THEN
         lt_relate_interface_status := 7;
         log_debug_msg( 'API successful.');
         x_errbuf := 'API successful.';
      ELSE
         lt_relate_interface_status := 6;
         ln_msg_text := NULL;
         IF ln_msg_count > 0 THEN
            log_debug_msg( 'API returned Error.');
            x_errbuf := 'API returned Error while creating backward relationship';
            FOR counter IN 1..ln_msg_count
            LOOP
               ln_msg_text := ln_msg_text||' '||FND_MSG_PUB.Get(counter, FND_API.G_FALSE);
               log_debug_msg('Error - '|| FND_MSG_PUB.Get(counter, FND_API.G_FALSE));
            END LOOP;
            FND_MSG_PUB.Delete_Msg;
            log_exception
               (  p_record_control_id      => p_cust_acct_rel_rec.record_id
                 ,p_source_system_code     => NULL
                 ,p_procedure_name         => 'PROCESS_CUST_ACCT_RELATE'
                 ,p_staging_table_name     => 'XXOD_HZ_IMP_ACCOUNTS_STG'
                 ,p_staging_column_name    => 'RELATED_ACCOUNT_REF'
                 ,p_staging_column_value   => p_cust_acct_rel_rec.related_account_ref
                 ,p_source_system_ref      => p_cust_acct_rel_rec.related_account_ref
                 ,p_batch_id               => p_cust_acct_rel_rec.batch_id
                 ,p_exception_log          => XX_CDH_CONV_MASTER_PKG.TRIM_INPUT_MSG('create_cust_acct_relate API for backward relation returned Error - '||ln_msg_text)
                 ,p_oracle_error_code      => NULL
                 ,p_oracle_error_msg       => NULL
               );
         END IF;
      END IF;
   ELSE
      --------------------------------
      -- Update Backward Relationship
      --------------------------------

      l_cust_acct_relate_rec                          := l_df_cust_acct_relate_rec;
      l_cust_acct_relate_rec.cust_account_id          := ln_rel_cust_account_id;
      l_cust_acct_relate_rec.related_cust_account_id  := ln_cust_account_id;

      l_cust_acct_relate_rec.bill_to_flag             := NVL(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(p_cust_acct_rel_rec.related_acc_ref_b_bill_to_flag),'N');
      l_cust_acct_relate_rec.ship_to_flag             := NVL(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(p_cust_acct_rel_rec.related_acc_ref_b_ship_to_flag),'N');

      l_cust_acct_relate_rec.application_id           := XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_num(p_cust_acct_rel_rec.program_application_id);

      log_debug_msg( 'Updating backward relationship..');
      log_debug_msg( 'Calling API HZ_CUST_ACCOUNT_V2PUB.update_cust_acct_relate');

      lv_return_status  := NULL;
      ln_msg_count      := 0;
      lv_msg_data       := NULL;

      HZ_CUST_ACCOUNT_V2PUB.update_cust_acct_relate
         (  p_init_msg_list              => gv_init_msg_list,
            p_cust_acct_relate_rec       => l_cust_acct_relate_rec,
            p_object_version_number      => ln_object_version_number,
            x_return_status              => lv_return_status,
            x_msg_count                  => ln_msg_count,
            x_msg_data                   => lv_msg_data
         );

      IF lv_return_status = FND_API.G_RET_STS_SUCCESS THEN
         lt_relate_interface_status := 7;
         log_debug_msg( 'API successful.');
         x_errbuf := 'API successful.';
      ELSE
         lt_relate_interface_status := 6;
         ln_msg_text := NULL;
         IF ln_msg_count > 0 THEN
            log_debug_msg( 'API returned Error.');
            x_errbuf := 'API returned Error while creating backward relationship';
            FOR counter IN 1..ln_msg_count
            LOOP
               ln_msg_text := ln_msg_text||' '||FND_MSG_PUB.Get(counter, FND_API.G_FALSE);
               log_debug_msg('Error - '|| FND_MSG_PUB.Get(counter, FND_API.G_FALSE));
            END LOOP;
            FND_MSG_PUB.Delete_Msg;
            log_exception
               (  p_record_control_id      => p_cust_acct_rel_rec.record_id
                 ,p_source_system_code     => NULL
                 ,p_procedure_name         => 'PROCESS_CUST_ACCT_RELATE'
                 ,p_staging_table_name     => 'XXOD_HZ_IMP_ACCOUNTS_STG'
                 ,p_staging_column_name    => 'RELATED_ACCOUNT_REF'
                 ,p_staging_column_value   => p_cust_acct_rel_rec.related_account_ref
                 ,p_source_system_ref      => p_cust_acct_rel_rec.related_account_ref
                 ,p_batch_id               => p_cust_acct_rel_rec.batch_id
                 ,p_exception_log          => XX_CDH_CONV_MASTER_PKG.TRIM_INPUT_MSG('update_cust_acct_relate API for backward relation returned Error- '||ln_msg_text)
                 ,p_oracle_error_code      => NULL
                 ,p_oracle_error_msg       => NULL
               );
         END IF;
      END IF;
   END IF;
   ----------------------------------------------
   -- Update staging table with interface status
   ----------------------------------------------
   UPDATE xxod_hz_imp_accounts_stg
   SET    relate_interface_status = lt_relate_interface_status
   WHERE  record_id               = p_cust_acct_rel_rec.record_id;

   x_retcode := FND_API.G_RET_STS_SUCCESS;

EXCEPTION
   WHEN le_skip_process THEN
      x_retcode := FND_API.G_RET_STS_ERROR;
      UPDATE xxod_hz_imp_accounts_stg
      SET    relate_interface_status = lt_relate_interface_status
      WHERE  record_id = p_cust_acct_rel_rec.record_id;
   WHEN OTHERS THEN
      x_errbuf := 'Unexpected Error in procedure process_cust_acct_relate - '||SQLERRM;
      x_retcode := FND_API.G_RET_STS_ERROR;
END process_cust_acct_relate;


-- +===================================================================+
-- | Name        :  update_cust_site_use_batch                         |
-- | Description :  This procedure updates bill_to site uses picking   |
-- |                records from the staging table based on the        |
-- |                batch_id passed as input.                          |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+

PROCEDURE update_cust_site_use_batch
      (  x_errbuf                  OUT VARCHAR2,
         x_retcode                 OUT VARCHAR2,
         p_batch_id                IN  NUMBER
      )
IS

CURSOR lc_fetch_cust_site_use_cur
IS
SELECT *
FROM   xxod_hz_imp_acct_site_uses_stg
WHERE  bill_to_acct_site_ref       IS NOT NULL
AND    update_interface_status     IN ('1','4','6')
AND    org_id                       = fnd_global.org_id
AND    batch_id                     = p_batch_id;

TYPE  lt_cust_site_use_tbl_type    IS TABLE OF xxod_hz_imp_acct_site_uses_stg%ROWTYPE INDEX BY BINARY_INTEGER;
lt_cust_site_use_tbl               lt_cust_site_use_tbl_type;

TYPE lt_upd_tbl_type               IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
lt_upd_record_tbl                  lt_upd_tbl_type;
lt_upd_interface_tbl               lt_upd_tbl_type;
ln_records_read                    NUMBER;
ln_records_success                 NUMBER;
ln_records_failed                  NUMBER;
l_upd_cust_site_use_rec            gt_upd_cust_site_use_rec_type;
lv_errbuf                          VARCHAR2(2000);
lv_retcode                         VARCHAR2(10);
le_skip_procedure                  EXCEPTION;


BEGIN


   log_debug_msg( ' ');
   log_debug_msg( '*********************************************');
   log_debug_msg( '* Start of Update Cust Site Use  Procedure. *');
   log_debug_msg( '*********************************************');
   log_debug_msg( ' ');
   ln_records_read    := 0;
   ln_records_success := 0;
   ln_records_failed  := 0;

   OPEN  lc_fetch_cust_site_use_cur;
   LOOP
      FETCH lc_fetch_cust_site_use_cur BULK COLLECT INTO lt_cust_site_use_tbl LIMIT gn_bulk_fetch_limit;

      IF lt_cust_site_use_tbl.count = 0 THEN
         log_debug_msg( 'No records exist in the staging table for batch_id - '||p_batch_id);
         RAISE le_skip_procedure;
      END IF;

      FOR i IN lt_cust_site_use_tbl.FIRST .. lt_cust_site_use_tbl.LAST

      LOOP

         lv_errbuf               := NULL;
         lv_retcode              := NULL;
         l_upd_cust_site_use_rec := NULL;
         ln_records_read         := ln_records_read + 1;

         l_upd_cust_site_use_rec.record_id                    := lt_cust_site_use_tbl(i).record_id;
         l_upd_cust_site_use_rec.batch_id                     := lt_cust_site_use_tbl(i).batch_id;
         l_upd_cust_site_use_rec.acct_site_orig_system        := lt_cust_site_use_tbl(i).acct_site_orig_system;
         l_upd_cust_site_use_rec.acct_site_orig_sys_reference := lt_cust_site_use_tbl(i).acct_site_orig_sys_reference;
         l_upd_cust_site_use_rec.site_use_code                := lt_cust_site_use_tbl(i).site_use_code;
         l_upd_cust_site_use_rec.bill_to_orig_system          := lt_cust_site_use_tbl(i).bill_to_orig_system;
         l_upd_cust_site_use_rec.bill_to_acct_site_ref        := lt_cust_site_use_tbl(i).bill_to_acct_site_ref;

         log_debug_msg('-----------------------------------------------');
         log_debug_msg('RECORD_ID:'||lt_cust_site_use_tbl(i).record_id);

         update_cust_site_use
            (  x_errbuf                 => lv_errbuf,
               x_retcode                => lv_retcode,
               p_upd_cust_site_use_rec  => l_upd_cust_site_use_rec
            );

         IF lv_retcode = FND_API.G_RET_STS_SUCCESS THEN
            ln_records_success := ln_records_success + 1;
            --IF MOD(i,1000) = 0 THEN
               COMMIT;
            --END IF;
         ELSE
            log_debug_msg( 'Error while update bill_to site use');
            log_debug_msg( 'Error - '||lv_errbuf);
         END IF;

      END LOOP;
      EXIT WHEN lc_fetch_cust_site_use_cur%NOTFOUND;
   END LOOP;
   CLOSE lc_fetch_cust_site_use_cur;

   ln_records_failed := (ln_records_read - ln_records_success);

   log_debug_msg( ' ');
   log_debug_msg( ' ');
   log_debug_msg( 'Record Statistics after updating Bill_to Site Use');
   log_debug_msg( '-------------------------------------------------------------');
   log_debug_msg( 'Staging Table - XXOD_HZ_IMP_ACCT_SITE_USES_STG ');
   log_debug_msg( 'No Of Records Read                   - '||ln_records_read);
   log_debug_msg( 'No Of Records Processesd Succesfully - '||ln_records_success);
   log_debug_msg( 'No Of Records Failed                 - '||ln_records_failed);
   log_debug_msg( '-------------------------------------------------------------');
   log_debug_msg( ' ');
   log_debug_msg( ' ');

   fnd_file.put_line(fnd_file.output, ' ');
   fnd_file.put_line(fnd_file.output, ' ');
   fnd_file.put_line(fnd_file.output, 'Record Statistics after updating Bill_to Site Use');
   fnd_file.put_line(fnd_file.output, '-------------------------------------------------------------');
   fnd_file.put_line(fnd_file.output, 'Staging Table - XXOD_HZ_IMP_ACCT_SITE_USES_STG ');
   fnd_file.put_line(fnd_file.output, 'No Of Records Read                   - '||ln_records_read);
   fnd_file.put_line(fnd_file.output, 'No Of Records Processesd Succesfully - '||ln_records_success);
   fnd_file.put_line(fnd_file.output, 'No Of Records Failed                 - '||ln_records_failed);
   fnd_file.put_line(fnd_file.output, '-------------------------------------------------------------');
   fnd_file.put_line(fnd_file.output, ' ');
   fnd_file.put_line(fnd_file.output, ' ');

   log_debug_msg( '******************************************');
   log_debug_msg( '* End of Update Cust Site Use  Procedure *');
   log_debug_msg( '******************************************');

EXCEPTION
   WHEN le_skip_procedure THEN
      NULL;
   WHEN OTHERS THEN
      log_debug_msg( 'Unexpected error in procedure update_cust_site_use_batch for batch_id - '||p_batch_id);
      log_debug_msg( 'Error - '||SQLERRM);

END update_cust_site_use_batch;

-- +===================================================================+
-- | Name        :  update_cust_site_use                               |
-- | Description :  This procedure would update bill_to site uses for  |
-- |                a particular record of the staging table which     |
-- |                ia passed as input to the procedure                |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+

PROCEDURE update_cust_site_use
      (  x_errbuf                  OUT VARCHAR2,
         x_retcode                 OUT VARCHAR2,
         p_upd_cust_site_use_rec   IN  gt_upd_cust_site_use_rec_type
      )
IS

ln_site_use_id                     hz_cust_site_uses_all.site_use_id%TYPE;
ln_billto_site_use_id              hz_cust_site_uses_all.site_use_id%TYPE;
lt_object_version_number           hz_cust_site_uses_all.object_version_number%TYPE;
le_skip_process                    EXCEPTION;
l_cust_site_use_rec                HZ_CUST_ACCOUNT_SITE_V2PUB.cust_site_use_rec_type;
lv_return_status                   VARCHAR2(10);
ln_msg_count                       NUMBER;
lv_msg_data                        VARCHAR2(2000);
ln_osr_retcode                     NUMBER;
lv_osr_errbuf                      VARCHAR2(2000);
lt_update_interface_status         xxod_hz_imp_acct_site_uses_stg.update_interface_status%TYPE;
ln_msg_text                        VARCHAR2(32000);
lc_site_orig_sys_ref               VARCHAR2(50) := NULL;
ln_cust_acct_site_id               hz_cust_site_uses_all.cust_acct_site_id%TYPE;

BEGIN

   x_errbuf  := NULL;
   x_retcode := NULL;

   ----------------------
   -- Fetch site_use_id
   ----------------------
   ln_site_use_id := NULL;
   ln_osr_retcode := NULL;
   lv_osr_errbuf  := NULL;
   ln_cust_acct_site_id := NULL;

   IF p_upd_cust_site_use_rec.site_use_code = 'BILL_TO' THEN
      lc_site_orig_sys_ref                            := p_upd_cust_site_use_rec.acct_site_orig_sys_reference||'-'||p_upd_cust_site_use_rec.site_use_code;
    ELSE
      lc_site_orig_sys_ref                            := RTRIM(p_upd_cust_site_use_rec.acct_site_orig_sys_reference,'CA')||'-'||p_upd_cust_site_use_rec.site_use_code; 
    END IF;

   XX_CDH_CONV_MASTER_PKG.get_osr_owner_table_id
         (  p_orig_system        => p_upd_cust_site_use_rec.acct_site_orig_system,
            p_orig_sys_reference => lc_site_orig_sys_ref,
            p_owner_table_name   => 'HZ_CUST_SITE_USES_ALL',
            x_owner_table_id     => ln_site_use_id,
            x_retcode            => ln_osr_retcode,
            x_errbuf             => lv_osr_errbuf
         );
   IF ln_site_use_id IS NULL THEN

      log_debug_msg( 'Error while fetching site_use_id - orig_system_reference is invalid');
      log_debug_msg( 'orig_system_reference - '||lc_site_orig_sys_ref);
      x_errbuf := 'Error while fetching site_use_id - orig_system_reference is invalid';
      lt_update_interface_status := 6;
      log_exception
         (  p_record_control_id      => p_upd_cust_site_use_rec.record_id
           ,p_source_system_code     => NULL
           ,p_procedure_name         => 'UPDATE_CUST_SITE_USE'
           ,p_staging_table_name     => 'XXOD_HZ_IMP_ACCT_SITE_USES_STG'
           ,p_staging_column_name    => 'ACCT_SITE_ORIG_SYS_REFERENCE'
           ,p_staging_column_value   => p_upd_cust_site_use_rec.acct_site_orig_sys_reference
           ,p_source_system_ref      => p_upd_cust_site_use_rec.acct_site_orig_sys_reference
           ,p_batch_id               => p_upd_cust_site_use_rec.batch_id
           ,p_exception_log          => 'Error while fetching site_use_id - orig_system_reference is invalid'
           ,p_oracle_error_code      => NULL
           ,p_oracle_error_msg       => NULL
         );
      RAISE le_skip_process;
   END IF;

   ------------------------------
   -- Fetch object_version_number
   ------------------------------

   BEGIN

      SELECT object_version_number,
             cust_acct_site_id
      INTO   lt_object_version_number,
             ln_cust_acct_site_id
      FROM   hz_cust_site_uses_all
      WHERE  site_use_id = ln_site_use_id;

   EXCEPTION
      WHEN OTHERS THEN
         log_debug_msg( 'Error while fetching object_version_number - '||SQLERRM);
         log_debug_msg( 'site_use_id - '||ln_site_use_id);
         x_errbuf := 'Error while fetching object_version_number - '||SQLERRM;
         lt_update_interface_status := 6;
         RAISE le_skip_process;
   END;


   ----------------------------
   -- Fetch billto_site_use_id
   ----------------------------
   ln_billto_site_use_id := NULL;
   ln_osr_retcode        := NULL;
   lv_osr_errbuf         := NULL;

   XX_CDH_CONV_MASTER_PKG.get_osr_owner_table_id
         (  p_orig_system        => p_upd_cust_site_use_rec.bill_to_orig_system,
            p_orig_sys_reference => p_upd_cust_site_use_rec.bill_to_acct_site_ref||'-'||'BILL_TO',
            p_owner_table_name   => 'HZ_CUST_SITE_USES_ALL',
            x_owner_table_id     => ln_billto_site_use_id,
            x_retcode            => ln_osr_retcode,
            x_errbuf             => lv_osr_errbuf
         );
   IF ln_site_use_id IS NULL THEN

      log_debug_msg( 'Error while fetching billto_site_use_id - orig_system_reference is invalid');
      log_debug_msg( 'orig_system_reference - '||p_upd_cust_site_use_rec.bill_to_acct_site_ref||'-'||'BILL_TO');
      x_errbuf := 'Error while fetching billto_site_use_id - orig_system_reference is invalid';
      lt_update_interface_status := 6;
      log_exception
         (  p_record_control_id      => p_upd_cust_site_use_rec.record_id
           ,p_source_system_code     => NULL
           ,p_procedure_name         => 'UPDATE_CUST_SITE_USE'
           ,p_staging_table_name     => 'XXOD_HZ_IMP_ACCT_SITE_USES_STG'
           ,p_staging_column_name    => 'ACCT_SITE_ORIG_SYS_REFERENCE'
           ,p_staging_column_value   => p_upd_cust_site_use_rec.acct_site_orig_sys_reference
           ,p_source_system_ref      => p_upd_cust_site_use_rec.acct_site_orig_sys_reference
           ,p_batch_id               => p_upd_cust_site_use_rec.batch_id
           ,p_exception_log          => 'Error while fetching billto_site_use_id - orig_system_reference is invalid'
           ,p_oracle_error_code      => NULL
           ,p_oracle_error_msg       => NULL
         );
      RAISE le_skip_process;
   END IF;

   lt_update_interface_status := 4;

   l_cust_site_use_rec.site_use_id         := ln_site_use_id;
   l_cust_site_use_rec.bill_to_site_use_id := ln_billto_site_use_id;
   l_cust_site_use_rec.cust_acct_site_id       := ln_cust_acct_site_id ; -- Defect 28030

   HZ_CUST_ACCOUNT_SITE_V2PUB.update_cust_site_use
         (  p_init_msg_list          => gv_init_msg_list
           ,p_cust_site_use_rec      => l_cust_site_use_rec
           ,p_object_version_number  => lt_object_version_number
           ,x_return_status          => lv_return_status
           ,x_msg_count              => ln_msg_count
           ,x_msg_data               => lv_msg_data
         );

   IF lv_return_status = FND_API.G_RET_STS_SUCCESS THEN
      lt_update_interface_status := 7;
      log_debug_msg( 'API successful.');
      x_errbuf := 'API successful.';
   ELSE
      lt_update_interface_status := 6;
      ln_msg_text := NULL;
      IF ln_msg_count > 0 THEN
         log_debug_msg( 'API returned Error.');
         x_errbuf := 'API returned Error.';
         FOR counter IN 1..ln_msg_count
         LOOP
            ln_msg_text := ln_msg_text||' '||FND_MSG_PUB.Get(counter, FND_API.G_FALSE);
            log_debug_msg('Error - '|| FND_MSG_PUB.Get(counter, FND_API.G_FALSE));
         END LOOP;
         FND_MSG_PUB.Delete_Msg;
         log_exception
            (  p_record_control_id      => p_upd_cust_site_use_rec.record_id
              ,p_source_system_code     => NULL
              ,p_procedure_name         => 'UPDATE_CUST_SITE_USE'
              ,p_staging_table_name     => 'XXOD_HZ_IMP_ACCT_SITE_USES_STG'
              ,p_staging_column_name    => 'ACCT_SITE_ORIG_SYS_REFERENCE'
              ,p_staging_column_value   => p_upd_cust_site_use_rec.acct_site_orig_sys_reference
              ,p_source_system_ref      => p_upd_cust_site_use_rec.acct_site_orig_sys_reference
              ,p_batch_id               => p_upd_cust_site_use_rec.batch_id
              ,p_exception_log          => XX_CDH_CONV_MASTER_PKG.TRIM_INPUT_MSG('create_cust_acct_relate API for backward relation returned Error- '||ln_msg_text)
              ,p_oracle_error_code      => NULL
              ,p_oracle_error_msg       => NULL
            );
      END IF;
   END IF;

   ----------------------------------------------
   -- Update staging table with interface status
   ----------------------------------------------
   UPDATE xxod_hz_imp_acct_site_uses_stg
   SET    update_interface_status = lt_update_interface_status
   WHERE  record_id               = p_upd_cust_site_use_rec.record_id;


   x_retcode := FND_API.G_RET_STS_SUCCESS;

EXCEPTION
   WHEN le_skip_process THEN
      x_retcode := FND_API.G_RET_STS_ERROR;

      UPDATE xxod_hz_imp_acct_site_uses_stg
      SET    update_interface_status = lt_update_interface_status
      WHERE  record_id               = p_upd_cust_site_use_rec.record_id;

   WHEN OTHERS THEN
      x_errbuf := 'Unexpected Error in procedure update_cust_site_use - '||SQLERRM;
      x_retcode := FND_API.G_RET_STS_ERROR;
END update_cust_site_use;

-- +===================================================================+
-- | Name        :  log_exception                                      |
-- | Description :  This procedure is invoked is used for logging      |
-- |                exceptions into conversion common elements tables. |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+

PROCEDURE log_exception
      (  p_record_control_id      IN NUMBER
        ,p_source_system_code     IN VARCHAR2
        ,p_procedure_name         IN VARCHAR2
        ,p_staging_table_name     IN VARCHAR2
        ,p_staging_column_name    IN VARCHAR2
        ,p_staging_column_value   IN VARCHAR2
        ,p_source_system_ref      IN VARCHAR2
        ,p_batch_id               IN NUMBER
        ,p_exception_log          IN VARCHAR2
        ,p_oracle_error_code      IN VARCHAR2
        ,p_oracle_error_msg       IN VARCHAR2
      )

AS
   lv_package_name                VARCHAR2(32)  := 'XX_CDH_CUST_REL_SITE_PKG';
   ln_conversion_id               NUMBER        := 00246;
BEGIN
   XX_COM_CONV_ELEMENTS_PKG.log_exceptions_proc
      (   p_conversion_id          => ln_conversion_id
         ,p_record_control_id      => p_record_control_id
         ,p_source_system_code     => p_source_system_code
         ,p_package_name           => lv_package_name
         ,p_procedure_name         => p_procedure_name
         ,p_staging_table_name     => p_staging_table_name
         ,p_staging_column_name    => p_staging_column_name
         ,p_staging_column_value   => p_staging_column_value
         ,p_source_system_ref      => p_source_system_ref
         ,p_batch_id               => p_batch_id
         ,p_exception_log          => p_exception_log
         ,p_oracle_error_code      => p_oracle_error_code
         ,p_oracle_error_msg       => p_oracle_error_msg
      );

END log_exception;
-- +===================================================================+
-- | Name        : log_debug_msg                                       |
-- | Description :                                                     |
-- |                                                                   |
-- | Parameters  :  p_debug_msg                                        |
-- |                                                                   |
-- +===================================================================+
PROCEDURE log_debug_msg
    (
         p_debug_msg              IN        VARCHAR2
    )
IS
BEGIN
    XX_CDH_CONV_MASTER_PKG.write_conc_log_message(p_debug_msg);
END log_debug_msg;

END XX_CDH_CUST_REL_SITE_PKG;
/
SHOW ERRORS;
