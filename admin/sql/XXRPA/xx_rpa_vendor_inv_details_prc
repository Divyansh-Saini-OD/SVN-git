create or replace PROCEDURE xx_rpa_vendor_inv_details_prc (p_inv_num IN ap_invoices_all.invoice_num%TYPE,
                                                  p_sup_num IN ap_suppliers.segment1%type,
                                                  p_org_id  IN ap_invoices_all.org_id%TYPE  default 404,
                                                  p_date_from IN DATE,
                                                  p_date_to   IN DATE,
                                                  Status       OUT  VARCHAR2,
                                                  err_msg      OUT  VARCHAR2,
                                                  inv_cursor   OUT SYS_REFCURSOR
                                                )
    AS
    BEGIN
    STATUS := 'S';
       OPEN inv_cursor FOR
          select hr.NAME Operating_Unit,ai.INVOICE_TYPE_LOOKUP_CODE Type, sup.VENDOR_NAME Trading_Partner,
sup.SEGMENT1 Supplier_Num, VENDOR_SITE_CODE Supplier_Site_Name, ai.Invoice_Date, ai.Invoice_Num,ai.Invoice_Amount,
ai.SOURCE,ai.Description,        ai.GL_Date,        (select name from ap_terms where TERM_ID  = ai.TERMs_ID)Terms,        
ai.Terms_Date, --null Payment_Method,
ai.PAY_GROUP_LOOKUP_CODE Pay_Group, --ai.SELF_ASSESSED_TAX_AMOUNT,
nvl(ai.TAX_AMOUNT,0),
ai.INVOICE_CURRENCY_CODE,ai.PAYMENT_CURRENCY_CODE  , ai.PAYMENT_CROSS_RATE_DATE
from ap_invoices_all ai, ap_suppliers sup, ap_supplier_sites_all ss, hr_operating_units hr
where 1=1
and ai.invoice_num = nvl(p_inv_num, ai.invoice_num)
and ai.vendor_id = sup.vendor_id
and sup.segment1 = nvl(p_sup_num, sup.segment1)  -- 249724
and ai.vendor_site_id = ss.vendor_site_id
and ss.org_id = hr.organization_id
and ai.org_id = nvl(p_org_id, ai.org_id) --404
and trunc(ai.creation_date) >= nvl(p_date_from,trunc(ai.creation_date))
and trunc(ai.creation_date) <= nvl(p_date_to, trunc(ai.creation_date))
;

   EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      DBMS_OUTPUT.put_line ('<Error Out1>' || SQLERRM);
      status :='E';
      Err_msg := 'ERR_1 ' ||SQLERRM;
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('<Error Out2>' || DBMS_UTILITY.format_error_backtrace);
      status :='E';
      Err_msg := SQLERRM;
END xx_rpa_vendor_inv_details_prc;