REM $Header: $
REM +======================================================================+
REM | Copyright (c) 2007 Oracle Corporation Redwood Shores, California, USA|
REM |                       All rights reserved.                           |
REM +======================================================================+
REM NAME
REM   xx_gi_new_store_auto_pkg_w.pkb
REM
REM DESCRIPTION
REM
REM   Rosetta-generated file.  Modification is not recommended.
REM
REM NOTES
REM   generated by Rosetta Version 2.061
REM
REM +======================================================================+
REM
REM dbdrv: sql ~PROD ~PATH ~FILE  none none none package &phase=plb \
REM dbdrv:     checkfile:~PROD:~PATH:~FILE 

SET VERIFY OFF
WHENEVER SQLERROR EXIT FAILURE ROLLBACK;
WHENEVER OSERROR EXIT FAILURE ROLLBACK;

create or replace package body xx_gi_new_store_auto_pkg_w as
  /* $Header: $ */
  procedure rosetta_table_copy_in_p4(t out nocopy xx_gi_new_store_auto_pkg.xx_conc_requests_tbl_type, a0 JTF_NUMBER_TABLE
    , a1 JTF_VARCHAR2_TABLE_100
    ) as
    ddindx binary_integer; indx binary_integer;
  begin
  if a0 is not null and a0.count > 0 then
      if a0.count > 0 then
        indx := a0.first;
        ddindx := 1;
        while true loop
          t(ddindx).conc_request_id := a0(indx);
          t(ddindx).group_code := a1(indx);
          ddindx := ddindx+1;
          if a0.last =indx
            then exit;
          end if;
          indx := a0.next(indx);
        end loop;
      end if;
   end if;
  end rosetta_table_copy_in_p4;
  procedure rosetta_table_copy_out_p4(t xx_gi_new_store_auto_pkg.xx_conc_requests_tbl_type, a0 out nocopy JTF_NUMBER_TABLE
    , a1 out nocopy JTF_VARCHAR2_TABLE_100
    ) as
    ddindx binary_integer; indx binary_integer;
  begin
  if t is null or t.count = 0 then
    a0 := JTF_NUMBER_TABLE();
    a1 := JTF_VARCHAR2_TABLE_100();
  else
      a0 := JTF_NUMBER_TABLE();
      a1 := JTF_VARCHAR2_TABLE_100();
      if t.count > 0 then
        a0.extend(t.count);
        a1.extend(t.count);
        ddindx := t.first;
        indx := 1;
        while true loop
          a0(indx) := t(ddindx).conc_request_id;
          a1(indx) := t(ddindx).group_code;
          indx := indx+1;
          if t.last =ddindx
            then exit;
          end if;
          ddindx := t.next(ddindx);
        end loop;
      end if;
   end if;
  end rosetta_table_copy_out_p4;

  procedure rosetta_table_copy_in_p5(t out nocopy xx_gi_new_store_auto_pkg.xx_inv_accounts_tbl_type, a0 JTF_NUMBER_TABLE
    , a1 JTF_NUMBER_TABLE
    , a2 JTF_NUMBER_TABLE
    , a3 JTF_NUMBER_TABLE
    , a4 JTF_NUMBER_TABLE
    , a5 JTF_NUMBER_TABLE
    , a6 JTF_NUMBER_TABLE
    , a7 JTF_NUMBER_TABLE
    , a8 JTF_NUMBER_TABLE
    , a9 JTF_NUMBER_TABLE
    , a10 JTF_NUMBER_TABLE
    , a11 JTF_NUMBER_TABLE
    , a12 JTF_NUMBER_TABLE
    , a13 JTF_NUMBER_TABLE
    , a14 JTF_NUMBER_TABLE
    , a15 JTF_NUMBER_TABLE
    , a16 JTF_NUMBER_TABLE
    , a17 JTF_NUMBER_TABLE
    , a18 JTF_NUMBER_TABLE
    , a19 JTF_NUMBER_TABLE
    , a20 JTF_NUMBER_TABLE
    , a21 JTF_NUMBER_TABLE
    , a22 JTF_NUMBER_TABLE
    , a23 JTF_VARCHAR2_TABLE_2000
    , a24 JTF_VARCHAR2_TABLE_2000
    , a25 JTF_VARCHAR2_TABLE_2000
    , a26 JTF_VARCHAR2_TABLE_2000
    , a27 JTF_VARCHAR2_TABLE_2000
    , a28 JTF_VARCHAR2_TABLE_2000
    , a29 JTF_VARCHAR2_TABLE_2000
    , a30 JTF_VARCHAR2_TABLE_2000
    , a31 JTF_VARCHAR2_TABLE_2000
    , a32 JTF_VARCHAR2_TABLE_2000
    , a33 JTF_VARCHAR2_TABLE_2000
    , a34 JTF_VARCHAR2_TABLE_2000
    , a35 JTF_VARCHAR2_TABLE_2000
    , a36 JTF_VARCHAR2_TABLE_2000
    , a37 JTF_VARCHAR2_TABLE_2000
    , a38 JTF_VARCHAR2_TABLE_2000
    , a39 JTF_VARCHAR2_TABLE_2000
    , a40 JTF_VARCHAR2_TABLE_2000
    , a41 JTF_VARCHAR2_TABLE_2000
    , a42 JTF_VARCHAR2_TABLE_2000
    , a43 JTF_VARCHAR2_TABLE_2000
    , a44 JTF_VARCHAR2_TABLE_2000
    , a45 JTF_VARCHAR2_TABLE_2000
    ) as
    ddindx binary_integer; indx binary_integer;
  begin
  if a0 is not null and a0.count > 0 then
      if a0.count > 0 then
        indx := a0.first;
        ddindx := 1;
        while true loop
          t(ddindx).material_account := a0(indx);
          t(ddindx).material_overhead_account := a1(indx);
          t(ddindx).matl_ovhd_absorption_acct := a2(indx);
          t(ddindx).resource_account := a3(indx);
          t(ddindx).purchase_price_var_account := a4(indx);
          t(ddindx).ap_accrual_account := a5(indx);
          t(ddindx).overhead_account := a6(indx);
          t(ddindx).outside_processing_account := a7(indx);
          t(ddindx).intransit_inv_account := a8(indx);
          t(ddindx).interorg_receivables_account := a9(indx);
          t(ddindx).interorg_price_var_account := a10(indx);
          t(ddindx).interorg_payables_account := a11(indx);
          t(ddindx).cost_of_sales_account := a12(indx);
          t(ddindx).encumbrance_account := a13(indx);
          t(ddindx).project_cost_account := a14(indx);
          t(ddindx).interorg_transfer_cr_account := a15(indx);
          t(ddindx).receiving_account_id := a16(indx);
          t(ddindx).clearing_account_id := a17(indx);
          t(ddindx).retroprice_adj_account_id := a18(indx);
          t(ddindx).sales_account := a19(indx);
          t(ddindx).expense_account := a20(indx);
          t(ddindx).avg_cost_var_account := a21(indx);
          t(ddindx).invoice_price_var_account := a22(indx);
          t(ddindx).material_acc_cd := a23(indx);
          t(ddindx).material_overhead_ac_cd := a24(indx);
          t(ddindx).matl_ovhd_abs_acc_cd := a25(indx);
          t(ddindx).resource_acc_cd := a26(indx);
          t(ddindx).pur_price_var_acc_cd := a27(indx);
          t(ddindx).ap_accrual_acc_cd := a28(indx);
          t(ddindx).overhead_acc_cd := a29(indx);
          t(ddindx).outside_processing_acc_cd := a30(indx);
          t(ddindx).intransit_inv_acc_cd := a31(indx);
          t(ddindx).interorg_rec_acc_cd := a32(indx);
          t(ddindx).interorg_price_var_acc_cd := a33(indx);
          t(ddindx).interorg_payables_acc_cd := a34(indx);
          t(ddindx).cost_of_sales_acc_cd := a35(indx);
          t(ddindx).encumbrance_acc_cd := a36(indx);
          t(ddindx).project_cost_acc_cd := a37(indx);
          t(ddindx).interorg_trnfr_cr_acc_cd := a38(indx);
          t(ddindx).receiving_acc_cd := a39(indx);
          t(ddindx).clearing_acc_cd := a40(indx);
          t(ddindx).retropr_adj_acc_cd := a41(indx);
          t(ddindx).sales_acc_cd := a42(indx);
          t(ddindx).expense_acc_cd := a43(indx);
          t(ddindx).avg_cost_var_acc_cd := a44(indx);
          t(ddindx).invoice_price_var_acc_cd := a45(indx);
          ddindx := ddindx+1;
          if a0.last =indx
            then exit;
          end if;
          indx := a0.next(indx);
        end loop;
      end if;
   end if;
  end rosetta_table_copy_in_p5;
  procedure rosetta_table_copy_out_p5(t xx_gi_new_store_auto_pkg.xx_inv_accounts_tbl_type, a0 out nocopy JTF_NUMBER_TABLE
    , a1 out nocopy JTF_NUMBER_TABLE
    , a2 out nocopy JTF_NUMBER_TABLE
    , a3 out nocopy JTF_NUMBER_TABLE
    , a4 out nocopy JTF_NUMBER_TABLE
    , a5 out nocopy JTF_NUMBER_TABLE
    , a6 out nocopy JTF_NUMBER_TABLE
    , a7 out nocopy JTF_NUMBER_TABLE
    , a8 out nocopy JTF_NUMBER_TABLE
    , a9 out nocopy JTF_NUMBER_TABLE
    , a10 out nocopy JTF_NUMBER_TABLE
    , a11 out nocopy JTF_NUMBER_TABLE
    , a12 out nocopy JTF_NUMBER_TABLE
    , a13 out nocopy JTF_NUMBER_TABLE
    , a14 out nocopy JTF_NUMBER_TABLE
    , a15 out nocopy JTF_NUMBER_TABLE
    , a16 out nocopy JTF_NUMBER_TABLE
    , a17 out nocopy JTF_NUMBER_TABLE
    , a18 out nocopy JTF_NUMBER_TABLE
    , a19 out nocopy JTF_NUMBER_TABLE
    , a20 out nocopy JTF_NUMBER_TABLE
    , a21 out nocopy JTF_NUMBER_TABLE
    , a22 out nocopy JTF_NUMBER_TABLE
    , a23 out nocopy JTF_VARCHAR2_TABLE_2000
    , a24 out nocopy JTF_VARCHAR2_TABLE_2000
    , a25 out nocopy JTF_VARCHAR2_TABLE_2000
    , a26 out nocopy JTF_VARCHAR2_TABLE_2000
    , a27 out nocopy JTF_VARCHAR2_TABLE_2000
    , a28 out nocopy JTF_VARCHAR2_TABLE_2000
    , a29 out nocopy JTF_VARCHAR2_TABLE_2000
    , a30 out nocopy JTF_VARCHAR2_TABLE_2000
    , a31 out nocopy JTF_VARCHAR2_TABLE_2000
    , a32 out nocopy JTF_VARCHAR2_TABLE_2000
    , a33 out nocopy JTF_VARCHAR2_TABLE_2000
    , a34 out nocopy JTF_VARCHAR2_TABLE_2000
    , a35 out nocopy JTF_VARCHAR2_TABLE_2000
    , a36 out nocopy JTF_VARCHAR2_TABLE_2000
    , a37 out nocopy JTF_VARCHAR2_TABLE_2000
    , a38 out nocopy JTF_VARCHAR2_TABLE_2000
    , a39 out nocopy JTF_VARCHAR2_TABLE_2000
    , a40 out nocopy JTF_VARCHAR2_TABLE_2000
    , a41 out nocopy JTF_VARCHAR2_TABLE_2000
    , a42 out nocopy JTF_VARCHAR2_TABLE_2000
    , a43 out nocopy JTF_VARCHAR2_TABLE_2000
    , a44 out nocopy JTF_VARCHAR2_TABLE_2000
    , a45 out nocopy JTF_VARCHAR2_TABLE_2000
    ) as
    ddindx binary_integer; indx binary_integer;
  begin
  if t is null or t.count = 0 then
    a0 := JTF_NUMBER_TABLE();
    a1 := JTF_NUMBER_TABLE();
    a2 := JTF_NUMBER_TABLE();
    a3 := JTF_NUMBER_TABLE();
    a4 := JTF_NUMBER_TABLE();
    a5 := JTF_NUMBER_TABLE();
    a6 := JTF_NUMBER_TABLE();
    a7 := JTF_NUMBER_TABLE();
    a8 := JTF_NUMBER_TABLE();
    a9 := JTF_NUMBER_TABLE();
    a10 := JTF_NUMBER_TABLE();
    a11 := JTF_NUMBER_TABLE();
    a12 := JTF_NUMBER_TABLE();
    a13 := JTF_NUMBER_TABLE();
    a14 := JTF_NUMBER_TABLE();
    a15 := JTF_NUMBER_TABLE();
    a16 := JTF_NUMBER_TABLE();
    a17 := JTF_NUMBER_TABLE();
    a18 := JTF_NUMBER_TABLE();
    a19 := JTF_NUMBER_TABLE();
    a20 := JTF_NUMBER_TABLE();
    a21 := JTF_NUMBER_TABLE();
    a22 := JTF_NUMBER_TABLE();
    a23 := JTF_VARCHAR2_TABLE_2000();
    a24 := JTF_VARCHAR2_TABLE_2000();
    a25 := JTF_VARCHAR2_TABLE_2000();
    a26 := JTF_VARCHAR2_TABLE_2000();
    a27 := JTF_VARCHAR2_TABLE_2000();
    a28 := JTF_VARCHAR2_TABLE_2000();
    a29 := JTF_VARCHAR2_TABLE_2000();
    a30 := JTF_VARCHAR2_TABLE_2000();
    a31 := JTF_VARCHAR2_TABLE_2000();
    a32 := JTF_VARCHAR2_TABLE_2000();
    a33 := JTF_VARCHAR2_TABLE_2000();
    a34 := JTF_VARCHAR2_TABLE_2000();
    a35 := JTF_VARCHAR2_TABLE_2000();
    a36 := JTF_VARCHAR2_TABLE_2000();
    a37 := JTF_VARCHAR2_TABLE_2000();
    a38 := JTF_VARCHAR2_TABLE_2000();
    a39 := JTF_VARCHAR2_TABLE_2000();
    a40 := JTF_VARCHAR2_TABLE_2000();
    a41 := JTF_VARCHAR2_TABLE_2000();
    a42 := JTF_VARCHAR2_TABLE_2000();
    a43 := JTF_VARCHAR2_TABLE_2000();
    a44 := JTF_VARCHAR2_TABLE_2000();
    a45 := JTF_VARCHAR2_TABLE_2000();
  else
      a0 := JTF_NUMBER_TABLE();
      a1 := JTF_NUMBER_TABLE();
      a2 := JTF_NUMBER_TABLE();
      a3 := JTF_NUMBER_TABLE();
      a4 := JTF_NUMBER_TABLE();
      a5 := JTF_NUMBER_TABLE();
      a6 := JTF_NUMBER_TABLE();
      a7 := JTF_NUMBER_TABLE();
      a8 := JTF_NUMBER_TABLE();
      a9 := JTF_NUMBER_TABLE();
      a10 := JTF_NUMBER_TABLE();
      a11 := JTF_NUMBER_TABLE();
      a12 := JTF_NUMBER_TABLE();
      a13 := JTF_NUMBER_TABLE();
      a14 := JTF_NUMBER_TABLE();
      a15 := JTF_NUMBER_TABLE();
      a16 := JTF_NUMBER_TABLE();
      a17 := JTF_NUMBER_TABLE();
      a18 := JTF_NUMBER_TABLE();
      a19 := JTF_NUMBER_TABLE();
      a20 := JTF_NUMBER_TABLE();
      a21 := JTF_NUMBER_TABLE();
      a22 := JTF_NUMBER_TABLE();
      a23 := JTF_VARCHAR2_TABLE_2000();
      a24 := JTF_VARCHAR2_TABLE_2000();
      a25 := JTF_VARCHAR2_TABLE_2000();
      a26 := JTF_VARCHAR2_TABLE_2000();
      a27 := JTF_VARCHAR2_TABLE_2000();
      a28 := JTF_VARCHAR2_TABLE_2000();
      a29 := JTF_VARCHAR2_TABLE_2000();
      a30 := JTF_VARCHAR2_TABLE_2000();
      a31 := JTF_VARCHAR2_TABLE_2000();
      a32 := JTF_VARCHAR2_TABLE_2000();
      a33 := JTF_VARCHAR2_TABLE_2000();
      a34 := JTF_VARCHAR2_TABLE_2000();
      a35 := JTF_VARCHAR2_TABLE_2000();
      a36 := JTF_VARCHAR2_TABLE_2000();
      a37 := JTF_VARCHAR2_TABLE_2000();
      a38 := JTF_VARCHAR2_TABLE_2000();
      a39 := JTF_VARCHAR2_TABLE_2000();
      a40 := JTF_VARCHAR2_TABLE_2000();
      a41 := JTF_VARCHAR2_TABLE_2000();
      a42 := JTF_VARCHAR2_TABLE_2000();
      a43 := JTF_VARCHAR2_TABLE_2000();
      a44 := JTF_VARCHAR2_TABLE_2000();
      a45 := JTF_VARCHAR2_TABLE_2000();
      if t.count > 0 then
        a0.extend(t.count);
        a1.extend(t.count);
        a2.extend(t.count);
        a3.extend(t.count);
        a4.extend(t.count);
        a5.extend(t.count);
        a6.extend(t.count);
        a7.extend(t.count);
        a8.extend(t.count);
        a9.extend(t.count);
        a10.extend(t.count);
        a11.extend(t.count);
        a12.extend(t.count);
        a13.extend(t.count);
        a14.extend(t.count);
        a15.extend(t.count);
        a16.extend(t.count);
        a17.extend(t.count);
        a18.extend(t.count);
        a19.extend(t.count);
        a20.extend(t.count);
        a21.extend(t.count);
        a22.extend(t.count);
        a23.extend(t.count);
        a24.extend(t.count);
        a25.extend(t.count);
        a26.extend(t.count);
        a27.extend(t.count);
        a28.extend(t.count);
        a29.extend(t.count);
        a30.extend(t.count);
        a31.extend(t.count);
        a32.extend(t.count);
        a33.extend(t.count);
        a34.extend(t.count);
        a35.extend(t.count);
        a36.extend(t.count);
        a37.extend(t.count);
        a38.extend(t.count);
        a39.extend(t.count);
        a40.extend(t.count);
        a41.extend(t.count);
        a42.extend(t.count);
        a43.extend(t.count);
        a44.extend(t.count);
        a45.extend(t.count);
        ddindx := t.first;
        indx := 1;
        while true loop
          a0(indx) := t(ddindx).material_account;
          a1(indx) := t(ddindx).material_overhead_account;
          a2(indx) := t(ddindx).matl_ovhd_absorption_acct;
          a3(indx) := t(ddindx).resource_account;
          a4(indx) := t(ddindx).purchase_price_var_account;
          a5(indx) := t(ddindx).ap_accrual_account;
          a6(indx) := t(ddindx).overhead_account;
          a7(indx) := t(ddindx).outside_processing_account;
          a8(indx) := t(ddindx).intransit_inv_account;
          a9(indx) := t(ddindx).interorg_receivables_account;
          a10(indx) := t(ddindx).interorg_price_var_account;
          a11(indx) := t(ddindx).interorg_payables_account;
          a12(indx) := t(ddindx).cost_of_sales_account;
          a13(indx) := t(ddindx).encumbrance_account;
          a14(indx) := t(ddindx).project_cost_account;
          a15(indx) := t(ddindx).interorg_transfer_cr_account;
          a16(indx) := t(ddindx).receiving_account_id;
          a17(indx) := t(ddindx).clearing_account_id;
          a18(indx) := t(ddindx).retroprice_adj_account_id;
          a19(indx) := t(ddindx).sales_account;
          a20(indx) := t(ddindx).expense_account;
          a21(indx) := t(ddindx).avg_cost_var_account;
          a22(indx) := t(ddindx).invoice_price_var_account;
          a23(indx) := t(ddindx).material_acc_cd;
          a24(indx) := t(ddindx).material_overhead_ac_cd;
          a25(indx) := t(ddindx).matl_ovhd_abs_acc_cd;
          a26(indx) := t(ddindx).resource_acc_cd;
          a27(indx) := t(ddindx).pur_price_var_acc_cd;
          a28(indx) := t(ddindx).ap_accrual_acc_cd;
          a29(indx) := t(ddindx).overhead_acc_cd;
          a30(indx) := t(ddindx).outside_processing_acc_cd;
          a31(indx) := t(ddindx).intransit_inv_acc_cd;
          a32(indx) := t(ddindx).interorg_rec_acc_cd;
          a33(indx) := t(ddindx).interorg_price_var_acc_cd;
          a34(indx) := t(ddindx).interorg_payables_acc_cd;
          a35(indx) := t(ddindx).cost_of_sales_acc_cd;
          a36(indx) := t(ddindx).encumbrance_acc_cd;
          a37(indx) := t(ddindx).project_cost_acc_cd;
          a38(indx) := t(ddindx).interorg_trnfr_cr_acc_cd;
          a39(indx) := t(ddindx).receiving_acc_cd;
          a40(indx) := t(ddindx).clearing_acc_cd;
          a41(indx) := t(ddindx).retropr_adj_acc_cd;
          a42(indx) := t(ddindx).sales_acc_cd;
          a43(indx) := t(ddindx).expense_acc_cd;
          a44(indx) := t(ddindx).avg_cost_var_acc_cd;
          a45(indx) := t(ddindx).invoice_price_var_acc_cd;
          indx := indx+1;
          if t.last =ddindx
            then exit;
          end if;
          ddindx := t.next(ddindx);
        end loop;
      end if;
   end if;
  end rosetta_table_copy_out_p5;

  procedure rosetta_table_copy_in_p6(t out nocopy xx_gi_new_store_auto_pkg.xx_inv_sixaccts_tbl_type, a0 JTF_VARCHAR2_TABLE_2000
    , a1 JTF_VARCHAR2_TABLE_2000
    , a2 JTF_VARCHAR2_TABLE_2000
    , a3 JTF_VARCHAR2_TABLE_2000
    , a4 JTF_VARCHAR2_TABLE_2000
    , a5 JTF_VARCHAR2_TABLE_2000
    ) as
    ddindx binary_integer; indx binary_integer;
  begin
  if a0 is not null and a0.count > 0 then
      if a0.count > 0 then
        indx := a0.first;
        ddindx := 1;
        while true loop
          t(ddindx).material_account := a0(indx);
          t(ddindx).material_overhead_account := a1(indx);
          t(ddindx).resource_account := a2(indx);
          t(ddindx).overhead_account := a3(indx);
          t(ddindx).outside_processing_account := a4(indx);
          t(ddindx).expense_account := a5(indx);
          ddindx := ddindx+1;
          if a0.last =indx
            then exit;
          end if;
          indx := a0.next(indx);
        end loop;
      end if;
   end if;
  end rosetta_table_copy_in_p6;
  procedure rosetta_table_copy_out_p6(t xx_gi_new_store_auto_pkg.xx_inv_sixaccts_tbl_type, a0 out nocopy JTF_VARCHAR2_TABLE_2000
    , a1 out nocopy JTF_VARCHAR2_TABLE_2000
    , a2 out nocopy JTF_VARCHAR2_TABLE_2000
    , a3 out nocopy JTF_VARCHAR2_TABLE_2000
    , a4 out nocopy JTF_VARCHAR2_TABLE_2000
    , a5 out nocopy JTF_VARCHAR2_TABLE_2000
    ) as
    ddindx binary_integer; indx binary_integer;
  begin
  if t is null or t.count = 0 then
    a0 := JTF_VARCHAR2_TABLE_2000();
    a1 := JTF_VARCHAR2_TABLE_2000();
    a2 := JTF_VARCHAR2_TABLE_2000();
    a3 := JTF_VARCHAR2_TABLE_2000();
    a4 := JTF_VARCHAR2_TABLE_2000();
    a5 := JTF_VARCHAR2_TABLE_2000();
  else
      a0 := JTF_VARCHAR2_TABLE_2000();
      a1 := JTF_VARCHAR2_TABLE_2000();
      a2 := JTF_VARCHAR2_TABLE_2000();
      a3 := JTF_VARCHAR2_TABLE_2000();
      a4 := JTF_VARCHAR2_TABLE_2000();
      a5 := JTF_VARCHAR2_TABLE_2000();
      if t.count > 0 then
        a0.extend(t.count);
        a1.extend(t.count);
        a2.extend(t.count);
        a3.extend(t.count);
        a4.extend(t.count);
        a5.extend(t.count);
        ddindx := t.first;
        indx := 1;
        while true loop
          a0(indx) := t(ddindx).material_account;
          a1(indx) := t(ddindx).material_overhead_account;
          a2(indx) := t(ddindx).resource_account;
          a3(indx) := t(ddindx).overhead_account;
          a4(indx) := t(ddindx).outside_processing_account;
          a5(indx) := t(ddindx).expense_account;
          indx := indx+1;
          if t.last =ddindx
            then exit;
          end if;
          ddindx := t.next(ddindx);
        end loop;
      end if;
   end if;
  end rosetta_table_copy_out_p6;

  procedure rosetta_table_copy_in_p7(t out nocopy xx_gi_new_store_auto_pkg.xx_control_tbl_type, a0 JTF_NUMBER_TABLE
    , a1 JTF_NUMBER_TABLE
    , a2 JTF_VARCHAR2_TABLE_300
    ) as
    ddindx binary_integer; indx binary_integer;
  begin
  if a0 is not null and a0.count > 0 then
      if a0.count > 0 then
        indx := a0.first;
        ddindx := 1;
        while true loop
          t(ddindx).control_id := a0(indx);
          t(ddindx).location_number_sw := a1(indx);
          t(ddindx).org_name := a2(indx);
          ddindx := ddindx+1;
          if a0.last =indx
            then exit;
          end if;
          indx := a0.next(indx);
        end loop;
      end if;
   end if;
  end rosetta_table_copy_in_p7;
  procedure rosetta_table_copy_out_p7(t xx_gi_new_store_auto_pkg.xx_control_tbl_type, a0 out nocopy JTF_NUMBER_TABLE
    , a1 out nocopy JTF_NUMBER_TABLE
    , a2 out nocopy JTF_VARCHAR2_TABLE_300
    ) as
    ddindx binary_integer; indx binary_integer;
  begin
  if t is null or t.count = 0 then
    a0 := JTF_NUMBER_TABLE();
    a1 := JTF_NUMBER_TABLE();
    a2 := JTF_VARCHAR2_TABLE_300();
  else
      a0 := JTF_NUMBER_TABLE();
      a1 := JTF_NUMBER_TABLE();
      a2 := JTF_VARCHAR2_TABLE_300();
      if t.count > 0 then
        a0.extend(t.count);
        a1.extend(t.count);
        a2.extend(t.count);
        ddindx := t.first;
        indx := 1;
        while true loop
          a0(indx) := t(ddindx).control_id;
          a1(indx) := t(ddindx).location_number_sw;
          a2(indx) := t(ddindx).org_name;
          indx := indx+1;
          if t.last =ddindx
            then exit;
          end if;
          ddindx := t.next(ddindx);
        end loop;
      end if;
   end if;
  end rosetta_table_copy_out_p7;

  procedure get_accounts(p_model_org_id  NUMBER
    , p_location_number  NUMBER
    , p_does_rcv_exist  NUMBER
    , p3_a0 out nocopy JTF_NUMBER_TABLE
    , p3_a1 out nocopy JTF_NUMBER_TABLE
    , p3_a2 out nocopy JTF_NUMBER_TABLE
    , p3_a3 out nocopy JTF_NUMBER_TABLE
    , p3_a4 out nocopy JTF_NUMBER_TABLE
    , p3_a5 out nocopy JTF_NUMBER_TABLE
    , p3_a6 out nocopy JTF_NUMBER_TABLE
    , p3_a7 out nocopy JTF_NUMBER_TABLE
    , p3_a8 out nocopy JTF_NUMBER_TABLE
    , p3_a9 out nocopy JTF_NUMBER_TABLE
    , p3_a10 out nocopy JTF_NUMBER_TABLE
    , p3_a11 out nocopy JTF_NUMBER_TABLE
    , p3_a12 out nocopy JTF_NUMBER_TABLE
    , p3_a13 out nocopy JTF_NUMBER_TABLE
    , p3_a14 out nocopy JTF_NUMBER_TABLE
    , p3_a15 out nocopy JTF_NUMBER_TABLE
    , p3_a16 out nocopy JTF_NUMBER_TABLE
    , p3_a17 out nocopy JTF_NUMBER_TABLE
    , p3_a18 out nocopy JTF_NUMBER_TABLE
    , p3_a19 out nocopy JTF_NUMBER_TABLE
    , p3_a20 out nocopy JTF_NUMBER_TABLE
    , p3_a21 out nocopy JTF_NUMBER_TABLE
    , p3_a22 out nocopy JTF_NUMBER_TABLE
    , p3_a23 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a24 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a25 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a26 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a27 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a28 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a29 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a30 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a31 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a32 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a33 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a34 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a35 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a36 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a37 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a38 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a39 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a40 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a41 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a42 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a43 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a44 out nocopy JTF_VARCHAR2_TABLE_2000
    , p3_a45 out nocopy JTF_VARCHAR2_TABLE_2000
    , x_errbuf out nocopy  VARCHAR2
    , x_retcode out nocopy  VARCHAR2
  )

  as 
    ddx_accounts_tbl_type xx_gi_new_store_auto_pkg.xx_inv_accounts_tbl_type;
    ddindx binary_integer; indx binary_integer;
  begin

    -- copy data to the local IN or IN-OUT args, if any






    -- here's the delegated call to the old PL/SQL routine
    xx_gi_new_store_auto_pkg.get_accounts(p_model_org_id,
      p_location_number,
      p_does_rcv_exist,
      ddx_accounts_tbl_type,
      x_errbuf,
      x_retcode);

    -- copy data back from the local variables to OUT or IN-OUT args, if any



    xx_gi_new_store_auto_pkg_w.rosetta_table_copy_out_p5(ddx_accounts_tbl_type, p3_a0
      , p3_a1
      , p3_a2
      , p3_a3
      , p3_a4
      , p3_a5
      , p3_a6
      , p3_a7
      , p3_a8
      , p3_a9
      , p3_a10
      , p3_a11
      , p3_a12
      , p3_a13
      , p3_a14
      , p3_a15
      , p3_a16
      , p3_a17
      , p3_a18
      , p3_a19
      , p3_a20
      , p3_a21
      , p3_a22
      , p3_a23
      , p3_a24
      , p3_a25
      , p3_a26
      , p3_a27
      , p3_a28
      , p3_a29
      , p3_a30
      , p3_a31
      , p3_a32
      , p3_a33
      , p3_a34
      , p3_a35
      , p3_a36
      , p3_a37
      , p3_a38
      , p3_a39
      , p3_a40
      , p3_a41
      , p3_a42
      , p3_a43
      , p3_a44
      , p3_a45
      );


  end;

  procedure get_ccid_wrapper(p0_a0 in out nocopy JTF_VARCHAR2_TABLE_2000
    , p0_a1 in out nocopy JTF_VARCHAR2_TABLE_2000
    , p0_a2 in out nocopy JTF_VARCHAR2_TABLE_2000
    , p0_a3 in out nocopy JTF_VARCHAR2_TABLE_2000
    , p0_a4 in out nocopy JTF_VARCHAR2_TABLE_2000
    , p0_a5 in out nocopy JTF_VARCHAR2_TABLE_2000
    , p_location_number  NUMBER
  )

  as 
    ddp_inv_sixaccts_in xx_gi_new_store_auto_pkg.xx_inv_sixaccts_tbl_type;
    ddindx binary_integer; indx binary_integer;
  begin

    -- copy data to the local IN or IN-OUT args, if any
    xx_gi_new_store_auto_pkg_w.rosetta_table_copy_in_p6(ddp_inv_sixaccts_in, p0_a0
      , p0_a1
      , p0_a2
      , p0_a3
      , p0_a4
      , p0_a5
      );


    -- here's the delegated call to the old PL/SQL routine
    xx_gi_new_store_auto_pkg.get_ccid_wrapper(ddp_inv_sixaccts_in,
      p_location_number);

    -- copy data back from the local variables to OUT or IN-OUT args, if any
    xx_gi_new_store_auto_pkg_w.rosetta_table_copy_out_p6(ddp_inv_sixaccts_in, p0_a0
      , p0_a1
      , p0_a2
      , p0_a3
      , p0_a4
      , p0_a5
      );

  end;

end xx_gi_new_store_auto_pkg_w;
/
commit;
exit;
