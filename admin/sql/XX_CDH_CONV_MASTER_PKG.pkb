--SET VERIFY OFF;
--WHENEVER SQLERROR CONTINUE;
--WHENEVER OSERROR EXIT FAILURE ROLLBACK;

CREATE OR REPLACE PACKAGE BODY XX_CDH_CONV_MASTER_PKG
-- +===================================================================+
-- |                  Office Depot - Project Simplify                  |
-- |                Oracle NAIO Consulting Organization                |
-- +===================================================================+
-- | Name        :  XXCDHCONVMASTERB.pls                               |
-- | Description :  CDH Customer Conversion Master Package Body        |
-- |                                                                   |
-- |Change Record:                                                     |
-- |===============                                                    |
-- |Version   Date        Author             Remarks                   |
-- |========  =========== ================== ==========================|
-- |DRAFT 1a  29-Mar-2007 Ambarish Mukherjee Initial draft version     |
-- |Draft 1b  16-Apr-2007 Ambarish Mukherjee Added procedure           |
-- |                                         get_osr_owner_table_id    |
-- |Draft 1c  19-Jul-2007 Ambarish Mukherjee Removed waits and included|
-- |                                         separate conc requests    |
-- |Draft 1d  13-Aug-2007 Ambarish Mukherjee Added procedure           |
-- |                                         submit_conv_request_set   |
-- |1.0       08-Apr-2008 Ambarish Mukherjee Added seamless procedures |
-- |1.1       02-May-2008 Ambarish Mukherjee Made changed to g_miss    |
-- |                                         functions                 |
-- |1.2       01-Mar-2010 Sreedhar Mohan     Added Copy Cust Profile   |
-- |                                         Program in main requestset|
-- |1.3       18-NOV-15   Manikant Kasu      Removed schema alias as   | 
-- |                                         part of GSCC R12.2.2      |
-- |                                         Retrofit                  |
-- |1.4      03-JUN-2018  Dinesh Nagapuri    Replaced V$database with DB_Name for LNS   			 |
-- +===================================================================+
AS
gt_request_id                 fnd_concurrent_requests.request_id%TYPE
                              := fnd_global.conc_request_id();
                              
-- +===================================================================+
-- | Name        :  conv_master_main                                   |
-- | Description :  This procedure is invoked from the CDH Conversion  |
-- |                Master Concurrent Request.This would submit Child  |
-- |                programs based on batch_ids generated by ETL       |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE conv_master_main
      (  x_errbuf              OUT VARCHAR2,
         x_retcode             OUT VARCHAR2,
         p_batch_id_from       IN  NUMBER,
         p_batch_id_to         IN  NUMBER,
         p_submit_bulk         IN  VARCHAR2,
         p_create_cust_acct    IN  VARCHAR2,
         p_create_contact      IN  VARCHAR2,
         p_create_cust_prof    IN  VARCHAR2,
         p_create_bank_paymeth IN  VARCHAR2,
         p_create_ext_attrib   IN  VARCHAR2,
         p_import_run_option   IN  VARCHAR2, -- Bulk Import Parameter
         p_run_batch_dedup     IN  VARCHAR2, -- Bulk Import Parameter
         p_batch_dedup_rule    IN  VARCHAR2, -- Bulk Import Parameter
         p_action_duplicates   IN  VARCHAR2, -- Bulk Import Parameter
         p_run_addr_val        IN  VARCHAR2, -- Bulk Import Parameter
         p_run_reg_dedup       IN  VARCHAR2, -- Bulk Import Parameter
         p_reg_dedup_rule      IN  VARCHAR2, -- Bulk Import Parameter
         p_generate_fuzzy_key  IN  VARCHAR2  -- Bulk Import Parameter
      )
IS
lv_request_data                VARCHAR2(100);
lv_error_message               VARCHAR2(4000);
ln_return_status               NUMBER;
le_error                       EXCEPTION;

BEGIN

   x_retcode := 0;
   x_errbuf  := ' ';
   lv_request_data   := NULL;
   

   fnd_file.put_line(fnd_file.log, 'Start of CDH Conversion Master Program');
   
   lv_request_data := fnd_conc_global.request_data;
   
   IF lv_request_data IS NULL THEN
      
      submit_sub_requests 
            (  lv_error_message,
               ln_return_status,
               p_batch_id_from,
               p_batch_id_to,
               p_submit_bulk,
               p_create_cust_acct,
               p_create_contact,
               p_create_cust_prof,
               p_create_bank_paymeth,
               p_create_ext_attrib,
               p_import_run_option,
               p_run_batch_dedup,
               p_batch_dedup_rule,
               p_action_duplicates,
               p_run_addr_val,
               p_run_reg_dedup,
               p_reg_dedup_rule,
               p_generate_fuzzy_key
            ); 

      IF ln_return_status <> 0 THEN
         x_errbuf := lv_error_message;
         fnd_file.put_line (fnd_file.log, 'Error in submit_sub_requests :- ');
         fnd_file.put_line (fnd_file.log, lv_error_message );
         RAISE le_error;
      END IF;
   END IF;

   IF lv_request_data IS NOT NULL THEN --Restart of the main / parent request
      fnd_file.put_line(fnd_file.log, 'ReStart of CDH Conversion Master Program');
   END IF;

EXCEPTION
   WHEN le_error THEN
      x_retcode := 2;
   WHEN OTHERS THEN
      x_retcode :=2;
      x_errbuf  := 'Unexpected error in main procedure - '||SQLERRM;
      fnd_file.put_line (fnd_file.log, x_errbuf );
END conv_master_main;

-- +===================================================================+
-- | Name        :  submit_sub_requests                                |
-- | Description :  This procedure is invoked from the conv_master_main|
-- |                procedure. This would submit child requests based  |
-- |                on batch_id.                                       |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE submit_sub_requests 
      (  x_errbuf              OUT VARCHAR2,
         x_retcode             OUT VARCHAR2,
         p_batch_id_from       IN  NUMBER,
         p_batch_id_to         IN  NUMBER,
         p_submit_bulk         IN  VARCHAR2,
         p_create_cust_acct    IN  VARCHAR2,
         p_create_contact      IN  VARCHAR2,
         p_create_cust_prof    IN  VARCHAR2,
         p_create_bank_paymeth IN  VARCHAR2,
         p_create_ext_attrib   IN  VARCHAR2,
         p_import_run_option   IN  VARCHAR2,
         p_run_batch_dedup     IN  VARCHAR2,
         p_batch_dedup_rule    IN  VARCHAR2,
         p_action_duplicates   IN  VARCHAR2,
         p_run_addr_val        IN  VARCHAR2,
         p_run_reg_dedup       IN  VARCHAR2,
         p_reg_dedup_rule      IN  VARCHAR2,
         p_generate_fuzzy_key  IN  VARCHAR2
      )
IS
lt_conc_request_id           fnd_concurrent_requests.request_id%TYPE;
le_exception                 EXCEPTION;
ln_index                     NUMBER;
ln_count                     NUMBER;
ln_batch_id                  NUMBER;

TYPE l_batch_range_rec       IS RECORD ( batch_id    NUMBER);
   
TYPE l_batch_range_tbl_type  IS TABLE OF l_batch_range_rec INDEX BY BINARY_INTEGER;

l_tbl_batch_range            l_batch_range_tbl_type;

CURSOR lc_conc_batch_cur
IS
SELECT batch_id
FROM   xxod_hz_imp_accounts_stg
GROUP  BY batch_id;

CURSOR lc_hz_batch_cur
IS
SELECT batch_id
FROM   hz_imp_batch_summary hibs
where  hibs.batch_id between nvl(p_batch_id_from,hibs.batch_id) and nvl(p_batch_id_to,hibs.batch_id)
;


BEGIN

   fnd_file.put_line(fnd_file.log, 'Start Submitting Child Requests');
   /*
   IF p_batch_id_from IS NOT NULL AND
      p_batch_id_to   IS NOT NULL THEN
      
      ln_batch_id := p_batch_id_from;
      ln_count    := 0;
      
      FOR i IN p_batch_id_from..p_batch_id_to
      LOOP
         ln_count    := ln_count + 1;
         l_tbl_batch_range(ln_count).batch_id := ln_batch_id;
         ln_batch_id := ln_batch_id + 1;
         
      END LOOP;
      
   ELSE*/
   
      ln_count := 0;
           
      FOR lc_hz_batch_rec IN lc_hz_batch_cur
      LOOP
         ln_count    := ln_count + 1;
         l_tbl_batch_range(ln_count).batch_id := lc_hz_batch_rec.batch_id;
      END LOOP;
      
      /*
      FOR lc_conc_batch_rec IN lc_conc_batch_cur
      LOOP

         IF ln_count = 0 THEN
            ln_batch_id := lc_conc_batch_rec.batch_id;
            ln_count    := ln_count + 1;
            l_tbl_batch_range(ln_count).batch_id := ln_batch_id; 
         ELSE
            IF lc_conc_batch_rec.batch_id <> ln_batch_id THEN
               ln_count := ln_count + 1;
               l_tbl_batch_range(ln_count).batch_id := lc_conc_batch_rec.batch_id;
            END IF;
         END IF;
      END LOOP;*/
  -- END IF;
   
   IF ln_count > 0 THEN
      fnd_file.put_line (fnd_file.log, 'Submitting Conversion Child Requests... ');
   ELSIF ln_count = 0 THEN
      fnd_file.put_line (fnd_file.log, 'No Batch found to submit Conversion Child Request. ');
   END IF;
   
   fnd_file.put_line(fnd_file.log, 'No Of Child Requests to spawn - '||ln_count);
   
   FOR ln_index IN 1..ln_count
   LOOP
      
      lt_conc_request_id := FND_REQUEST.submit_request 
                              (   application => 'XXCNV',
                                  program     => 'XX_CDH_CUST_CONV_CHILD',
                                  description => gt_request_id||'-'||TO_CHAR(ln_index), -- UI job display
                                  start_time  => NULL,
                                  sub_request => TRUE, -- TRUE means is a sub request
                                  argument1   => p_submit_bulk,
                                  argument2   => p_create_cust_acct,
                                  argument3   => p_create_contact,
                                  argument4   => p_create_cust_prof,
                                  argument5   => p_create_bank_paymeth,
                                  argument6   => p_create_ext_attrib,
                                  argument7   => l_tbl_batch_range(ln_index).batch_id,
                                  argument8   => p_import_run_option,
                                  argument9   => p_run_batch_dedup,
                                  argument10  => p_batch_dedup_rule,
                                  argument11  => p_action_duplicates,
                                  argument12  => p_run_addr_val,
                                  argument13  => p_run_reg_dedup,
                                  argument14  => p_reg_dedup_rule,
                                  argument15  => p_generate_fuzzy_key
                              );
      IF lt_conc_request_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         fnd_file.put_line (fnd_file.log, 'Child Request failed to submit: ' || x_errbuf);
         x_errbuf  := 'Child Request failed to submit: ' || x_errbuf;
         RAISE le_exception;
      ELSE
         fnd_file.put_line (fnd_file.log, ' ');
         fnd_file.put_line (fnd_file.log, 'Submitted Child Request : '|| TO_CHAR( lt_conc_request_id ));
         fnd_file.put_line (fnd_file.log, 'Batch_id                : '|| l_tbl_batch_range(ln_index).batch_id);
      END IF;

   END LOOP;
   
   -----------------------------------------------------------------
   -- After submitting sub-requests, set the parent status to PAUSED
   -- and set the request_data to a non-null value to detect restart
   -----------------------------------------------------------------
   
   fnd_conc_global.set_req_globals 
      (  conc_status  => 'PAUSED',
         request_data => TO_CHAR( l_tbl_batch_range.count )
      );
      
   x_errbuf  := TO_CHAR( l_tbl_batch_range.count ) || ' sub requests submitted';
   x_retcode := 0;
   
   -------------------------------------------------------------------
   -- Parent Paused and waits for sub requests to finish before restart
   -------------------------------------------------------------------
   fnd_file.put_line(fnd_file.log, x_errbuf);

EXCEPTION
   WHEN le_exception THEN
      x_retcode := 2;
   WHEN OTHERS THEN
      x_errbuf  := 'Unexpected error while submitting Child Requests - '||SQLERRM;
      x_retcode := 2;

END submit_sub_requests;

-- +===================================================================+
-- | Name        :  conv_child_main                                    |
-- | Description :  This procedure is invoked from the CDH Conversion  |
-- |                Child  Concurrent Request.This would submit        |
-- |                conversion programs based on input parameters.     |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE conv_child_main
      (  x_errbuf              OUT VARCHAR2,
         x_retcode             OUT VARCHAR2,
         p_submit_bulk         IN  VARCHAR2,
         p_create_cust_acct    IN  VARCHAR2,
         p_create_contact      IN  VARCHAR2,
         p_create_cust_prof    IN  VARCHAR2,
         p_create_bank_paymeth IN  VARCHAR2,
         p_create_ext_attrib   IN  VARCHAR2, 
         p_batch_id            IN  NUMBER,
         p_import_run_option   IN  VARCHAR2, -- Bulk Import Parameter
         p_run_batch_dedup     IN  VARCHAR2, -- Bulk Import Parameter
         p_batch_dedup_rule    IN  VARCHAR2, -- Bulk Import Parameter
         p_action_duplicates   IN  VARCHAR2, -- Bulk Import Parameter
         p_run_addr_val        IN  VARCHAR2, -- Bulk Import Parameter
         p_run_reg_dedup       IN  VARCHAR2, -- Bulk Import Parameter
         p_reg_dedup_rule      IN  VARCHAR2, -- Bulk Import Parameter
         p_generate_fuzzy_key  IN  VARCHAR2  -- Bulk Import Parameter
      )
IS

lv_phase              VARCHAR2(50);
lv_status             VARCHAR2(50);
lv_dev_phase          VARCHAR2(15);
lv_dev_status         VARCHAR2(15);
lb_wait               BOOLEAN;
lv_message            VARCHAR2(4000);
lv_error_exist        VARCHAR2(1);
lv_warning            VARCHAR2(1);
lt_conc_request_id    fnd_concurrent_requests.request_id%TYPE;
le_exception          EXCEPTION;
lv_msg_data           VARCHAR2(2000);
lv_return_status      VARCHAR2(1);
ln_msg_count          NUMBER;
ln_counter            NUMBER;
ln_exists             NUMBER;


BEGIN
   
   
   --------------------
   -- Call Bulk Import
   --------------------
   IF p_submit_bulk = 'Y' THEN
      -------------------------------------------------------------------
      -- Activate the batch_id irrespective of status
      -- Error msg will be displayed if already active or activation fails.
      -------------------------------------------------------------------
      HZ_IMP_BATCH_SUMMARY_V2PUB.activate_batch 
         (  p_batch_id      => p_batch_id, 
            x_return_status => lv_return_status, 
            x_msg_count     => ln_msg_count, 
            x_msg_data      => lv_msg_data
         );  

      IF lv_return_status <> FND_API.G_RET_STS_SUCCESS THEN
         IF ln_msg_count > 0 THEN
            fnd_file.put_line (fnd_file.log,'Warning: Error while activating batch_id -'||p_batch_id);
            FOR ln_counter IN 1..ln_msg_count
            LOOP
               fnd_file.put_line (fnd_file.log,'Warning ->'||fnd_msg_pub.get(ln_counter, FND_API.G_FALSE));
            END LOOP;
            fnd_msg_pub.delete_msg;
         END IF;
      END IF;      
      
      ------------------------------
      -- Check if batch_id is active
      ------------------------------
      BEGIN
            
         ln_exists := 0;

         SELECT 1
         INTO   ln_exists
         FROM   hz_imp_batch_summary bs,
                fnd_user us,
                ar_lookups al
         WHERE  bs.created_by      = us.user_id (+)
         AND    bs.original_system = al.lookup_code (+)
         AND    al.lookup_type (+) = 'ORIG_SYSTEM'
         AND    (NVL(bs.batch_status,'X') NOT IN ('REJECTED','PURGED','COMPLETED','X') OR NVL(bs.batch_status,'X') = 'ACTIVE')
         AND    NVL(bs.main_conc_status,'X') <> 'PROCESSING'
         AND    bs.batch_id        = p_batch_id;

      EXCEPTION
         WHEN TOO_MANY_ROWS THEN
            ln_exists := 1;
         WHEN OTHERS THEN
            ln_exists := 0;
      END;
      
      ----------------------------------------------------------
      -- Bulk Import to be submitted only if batch_id is active
      ----------------------------------------------------------
      
      IF ln_exists = 1 THEN
      
         -----------------------------------
         -- Submit Bulk Import Conc Request
         -----------------------------------

         lt_conc_request_id := FND_REQUEST.submit_request 
                                 (   application => 'AR',
                                     program     => 'ARHIMAIN',
                                     description => NULL,
                                     start_time  => NULL,
                                     sub_request => FALSE, 
                                     argument1   => p_batch_id,
                                     argument2   => p_import_run_option,
                                     argument3   => p_run_batch_dedup,
                                     argument4   => p_batch_dedup_rule,
                                     argument5   => p_action_duplicates,
                                     argument6   => p_run_addr_val,
                                     argument7   => p_run_reg_dedup,
                                     argument8   => p_reg_dedup_rule,
                                     argument9   => p_generate_fuzzy_key
                                 );


         IF lt_conc_request_id = 0 THEN
            x_errbuf  := fnd_message.get;
            x_retcode := 2;
            fnd_file.put_line (fnd_file.log, 'Bulk Import Program failed to submit: ' || x_errbuf);
            x_errbuf  := 'Bulk Import Program failed to submit: ' || x_errbuf;
         ELSE
            fnd_file.put_line (fnd_file.log, ' ');
            fnd_file.put_line (fnd_file.log, 'Submitted Bulk Import Program : '|| TO_CHAR( lt_conc_request_id ));
            COMMIT;
         END IF;

         -----------------------------------
         -- Wait for Bulk Import to Complete
         -----------------------------------
         lv_phase       := NULL;
         lv_status      := NULL;
         lv_dev_phase   := NULL;
         lv_dev_status  := NULL;
         lv_message     := NULL;
         lv_error_exist := NULL;
         lv_warning     := NULL;


         lb_wait := FND_CONCURRENT.wait_for_request 
                       (   request_id      => lt_conc_request_id,
                           interval        => 10,
                           phase           => lv_phase,
                           status          => lv_status,
                           dev_phase       => lv_dev_phase,
                           dev_status      => lv_dev_status,
                           message         => lv_message
                       );

         IF lv_dev_status = 'PAUSED' THEN

            lb_wait := FND_CONCURRENT.wait_for_request 
                          (   request_id      => lt_conc_request_id,
                              interval        => 10,
                              phase           => lv_phase,
                              status          => lv_status,
                              dev_phase       => lv_dev_phase,
                              dev_status      => lv_dev_status,
                              message         => lv_message
                          );
         END IF;
      END IF;
   ELSE
      fnd_file.put_line (fnd_file.log, 'Error : Cannot submit Bulk Import Program.');
      fnd_file.put_line (fnd_file.log, 'Batch Id not eligible for Bulk Import Program.');
   END IF;
   
   -------------------------------------------------
   -- Submit OD: CDH Party Relationship Conversion
   -------------------------------------------------
   IF p_create_cust_acct = 'Y' THEN

      lt_conc_request_id := 0;
      lt_conc_request_id := FND_REQUEST.submit_request 
                                    (   application => 'XXCNV',
                                        program     => 'XX_CDH_PARTY_RELATIONSHIP_CONV',
                                        description => NULL,
                                        start_time  => NULL,
                                        sub_request => FALSE, 
                                        argument1   => p_batch_id,
                                        argument2   => 'Y'
                                    );
      IF lt_conc_request_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         fnd_file.put_line (fnd_file.log, 'OD: CDH Party Relationship Conversion Program failed to submit: ' || x_errbuf);
         x_errbuf  := 'OD: CDH Party Relationship Conversion Program failed to submit: ' || x_errbuf;
      ELSE
         fnd_file.put_line (fnd_file.log, ' ');
         fnd_file.put_line (fnd_file.log, 'OD: CDH Party Relationship Conversion submitted with request id: '|| TO_CHAR( lt_conc_request_id ));
         COMMIT;
      END IF;
   END IF;
   
   
   ------------------------------------------------------
   -- Submit OD: CDH Customer Account Conversion Program
   ------------------------------------------------------
   IF p_create_cust_acct = 'Y' THEN
   
      lt_conc_request_id := 0;
      lt_conc_request_id := FND_REQUEST.submit_request 
                                    (   application => 'XXCNV',
                                        program     => 'XX_CDH_CUST_ACCOUNT_CONV',
                                        description => NULL,
                                        start_time  => NULL,
                                        sub_request => FALSE, 
                                        argument1   => p_batch_id,
                                        argument2   => 'Y'
                                    );
      IF lt_conc_request_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         fnd_file.put_line (fnd_file.log, 'Customer Account Conversion Program failed to submit: ' || x_errbuf);
         x_errbuf  := 'Customer Account Conversion Program failed to submit: ' || x_errbuf;
      ELSE
         fnd_file.put_line (fnd_file.log, ' ');
         fnd_file.put_line (fnd_file.log, 'Customer Account Conversion Program submitted with request id: '|| TO_CHAR( lt_conc_request_id ));
         COMMIT;
      END IF;
      
      --------------------------------------------------------------------
      -- Wait for OD: CDH Customer Account Conversion Program to Complete
      --------------------------------------------------------------------
      lv_phase       := NULL;
      lv_status      := NULL;
      lv_dev_phase   := NULL;
      lv_dev_status  := NULL;
      lv_message     := NULL;
      lv_error_exist := NULL;
      lv_warning     := NULL;


      lb_wait := FND_CONCURRENT.wait_for_request 
                    (   request_id      => lt_conc_request_id,
                        interval        => 10,
                        phase           => lv_phase,
                        status          => lv_status,
                        dev_phase       => lv_dev_phase,
                        dev_status      => lv_dev_status,
                        message         => lv_message
                    );
   END IF;
   
   -----------------------------------------------------------
   -- Submit OD: CDH Customer Account Site Conversion Program
   -----------------------------------------------------------
   IF p_create_cust_acct = 'Y' THEN

      lt_conc_request_id := 0;
      lt_conc_request_id := FND_REQUEST.submit_request 
                                    (   application => 'XXCNV',
                                        program     => 'XX_CDH_CUST_ACCT_SITE_CONV',
                                        description => NULL,
                                        start_time  => NULL,
                                        sub_request => FALSE, 
                                        argument1   => p_batch_id,
                                        argument2   => 'Y'
                                    );
      IF lt_conc_request_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         fnd_file.put_line (fnd_file.log, 'Customer Account Site Conversion Program failed to submit: ' || x_errbuf);
         x_errbuf  := 'Customer Account Site Conversion Program failed to submit: ' || x_errbuf;
      ELSE
         fnd_file.put_line (fnd_file.log, ' ');
         fnd_file.put_line (fnd_file.log, 'Customer Account Site Conversion Program submitted with request id: '|| TO_CHAR( lt_conc_request_id ));
         COMMIT;
      END IF;

      -------------------------------------------------------------------------
      -- Wait for OD: CDH Customer Account Site Conversion Program to Complete
      -------------------------------------------------------------------------
      lv_phase       := NULL;
      lv_status      := NULL;
      lv_dev_phase   := NULL;
      lv_dev_status  := NULL;
      lv_message     := NULL;
      lv_error_exist := NULL;
      lv_warning     := NULL;


      lb_wait := FND_CONCURRENT.wait_for_request 
                    (   request_id      => lt_conc_request_id,
                        interval        => 10,
                        phase           => lv_phase,
                        status          => lv_status,
                        dev_phase       => lv_dev_phase,
                        dev_status      => lv_dev_status,
                        message         => lv_message
                    );
   END IF;
   
   ---------------------------------------------------------------
   -- Submit OD: CDH Customer Account Site Use Conversion Program
   ---------------------------------------------------------------
   IF p_create_cust_acct = 'Y' THEN 
      lt_conc_request_id := 0;
      lt_conc_request_id := FND_REQUEST.submit_request 
                                    (   application => 'XXCNV',
                                        program     => 'XX_CDH_CUST_ACCT_SITE_USE_CONV',
                                        description => NULL,
                                        start_time  => NULL,
                                        sub_request => FALSE, 
                                        argument1   => p_batch_id,
                                        argument2   => 'Y'
                                    );
      IF lt_conc_request_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         fnd_file.put_line (fnd_file.log, 'Customer Account Site Use Conversion Program failed to submit: ' || x_errbuf);
         x_errbuf  := 'Customer Account Site Use Conversion Program failed to submit: ' || x_errbuf;
      ELSE
         fnd_file.put_line (fnd_file.log, ' ');
         fnd_file.put_line (fnd_file.log, 'Customer Account Site Use Conversion Program submitted with request id: '|| TO_CHAR( lt_conc_request_id ));
         COMMIT;
      END IF;
   END IF;
   
   -------------------------------------------------------------
   -- Submit OD: CDH Customer Contact Points Conversion Program
   -------------------------------------------------------------
   IF p_create_contact = 'Y' THEN 
      lt_conc_request_id := 0;
      lt_conc_request_id := FND_REQUEST.submit_request 
                                    (   application => 'XXCNV',
                                        program     => 'XX_CDH_CUST_CONTACT_POINT_CONV',
                                        description => NULL,
                                        start_time  => NULL,
                                        sub_request => FALSE, 
                                        argument1   => p_batch_id,
                                        argument2   => 'Y'
                                    );
      IF lt_conc_request_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         fnd_file.put_line (fnd_file.log, 'Customer Contact Point Conversion Program failed to submit: ' || x_errbuf);
         x_errbuf  := 'Customer Contact Point Conversion Program failed to submit: ' || x_errbuf;
      ELSE
         fnd_file.put_line (fnd_file.log, ' ');
         fnd_file.put_line (fnd_file.log, 'Customer Contact Point Conversion Program submitted with request id: '|| TO_CHAR( lt_conc_request_id ));
         COMMIT;
      END IF;
   END IF;
   
   ------------------------------------------------------
   -- Submit OD: CDH Customer Contact Conversion Program
   ------------------------------------------------------
   IF p_create_contact = 'Y' THEN

      lt_conc_request_id := 0;
      lt_conc_request_id := FND_REQUEST.submit_request 
                                    (   application => 'XXCNV',
                                        program     => 'XX_CDH_CUST_CONTACT_CONV',
                                        description => NULL,
                                        start_time  => NULL,
                                        sub_request => FALSE, 
                                        argument1   => p_batch_id,
                                        argument2   => 'Y'
                                    );
      IF lt_conc_request_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         fnd_file.put_line (fnd_file.log, 'Customer Contact Conversion Program failed to submit: ' || x_errbuf);
         x_errbuf  := 'Customer Contact Conversion Program failed to submit: ' || x_errbuf;
      ELSE
         fnd_file.put_line (fnd_file.log, ' ');
         fnd_file.put_line (fnd_file.log, 'Customer Contact Conversion Program submitted with request id: '|| TO_CHAR( lt_conc_request_id ));
         COMMIT;
      END IF;
/*
      --------------------------------------------------------------------
      -- Wait for OD: CDH Customer Contact Conversion Program to Complete
      --------------------------------------------------------------------
      lv_phase       := NULL;
      lv_status      := NULL;
      lv_dev_phase   := NULL;
      lv_dev_status  := NULL;
      lv_message     := NULL;
      lv_error_exist := NULL;
      lv_warning     := NULL;


      lb_wait := FND_CONCURRENT.wait_for_request 
                    (   request_id      => lt_conc_request_id,
                        interval        => 10,
                        phase           => lv_phase,
                        status          => lv_status,
                        dev_phase       => lv_dev_phase,
                        dev_status      => lv_dev_status,
                        message         => lv_message
                    );*/
   END IF;
   
   ------------------------------------------------------
   -- Submit OD: CDH Customer Profile Conversion Program
   ------------------------------------------------------
   IF p_create_cust_prof = 'Y' THEN

      lt_conc_request_id := 0;
      lt_conc_request_id := FND_REQUEST.submit_request 
                                    (   application => 'XXCNV',
                                        program     => 'XX_CDH_CUST_PROFILE_CONV',
                                        description => NULL,
                                        start_time  => NULL,
                                        sub_request => FALSE, 
                                        argument1   => p_batch_id,
                                        argument2   => 'Y'
                                    );
      IF lt_conc_request_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         fnd_file.put_line (fnd_file.log, 'Customer Profile Conversion Program failed to submit: ' || x_errbuf);
         x_errbuf  := 'Customer Profile Conversion Program failed to submit: ' || x_errbuf;
      ELSE
         fnd_file.put_line (fnd_file.log, ' ');
         fnd_file.put_line (fnd_file.log, 'Customer Profile Conversion Program submitted with request id: '|| TO_CHAR( lt_conc_request_id ));
         COMMIT;
      END IF;
/*
      --------------------------------------------------------------------
      -- Wait for OD: CDH Customer Profile Conversion Program to Complete
      --------------------------------------------------------------------
      lv_phase       := NULL;
      lv_status      := NULL;
      lv_dev_phase   := NULL;
      lv_dev_status  := NULL;
      lv_message     := NULL;
      lv_error_exist := NULL;
      lv_warning     := NULL;


      lb_wait := FND_CONCURRENT.wait_for_request 
                    (   request_id      => lt_conc_request_id,
                        interval        => 10,
                        phase           => lv_phase,
                        status          => lv_status,
                        dev_phase       => lv_dev_phase,
                        dev_status      => lv_dev_status,
                        message         => lv_message
                    );*/
   END IF;
   
   ---------------------------------------------------------------
   -- Submit OD: CDH Customer Bank and Payment Conversion Program
   ---------------------------------------------------------------
   IF p_create_bank_paymeth = 'Y' THEN

      lt_conc_request_id := 0;
      lt_conc_request_id := FND_REQUEST.submit_request 
                                    (   application => 'XXCNV',
                                        program     => 'XX_CDH_CUST_BANK_PAYMETH_CONV',
                                        description => NULL,
                                        start_time  => NULL,
                                        sub_request => FALSE, 
                                        argument1   => p_batch_id,
                                        argument2   => 'Y'
                                    );
      IF lt_conc_request_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         fnd_file.put_line (fnd_file.log, 'Customer Bank and Payment Conversion Program failed to submit: ' || x_errbuf);
         x_errbuf  := 'Customer Bank and Payment Conversion Program failed to submit: ' || x_errbuf;
      ELSE
         fnd_file.put_line (fnd_file.log, ' ');
         fnd_file.put_line (fnd_file.log, 'Customer Bank and Payment Conversion Program submitted with request id: '|| TO_CHAR( lt_conc_request_id ));
         COMMIT;
      END IF;
/*
      -----------------------------------------------------------------------------
      -- Wait for OD: CDH Customer Bank and Payment Conversion Program to Complete
      -----------------------------------------------------------------------------
      lv_phase       := NULL;
      lv_status      := NULL;
      lv_dev_phase   := NULL;
      lv_dev_status  := NULL;
      lv_message     := NULL;
      lv_error_exist := NULL;
      lv_warning     := NULL;


      lb_wait := FND_CONCURRENT.wait_for_request 
                    (   request_id      => lt_conc_request_id,
                        interval        => 10,
                        phase           => lv_phase,
                        status          => lv_status,
                        dev_phase       => lv_dev_phase,
                        dev_status      => lv_dev_status,
                        message         => lv_message
                    );*/
   END IF;
   
   --------------------------------------------------------------------
   -- Submit OD: CDH Customer Extensible Attributes Conversion Program
   --------------------------------------------------------------------
   IF p_create_ext_attrib = 'Y' THEN

      lt_conc_request_id := 0;
      lt_conc_request_id := FND_REQUEST.submit_request 
                                    (   application => 'XXCNV',
                                        program     => 'XX_CDH_CUST_EXT_ATTRIB_CONV',
                                        description => NULL,
                                        start_time  => NULL,
                                        sub_request => FALSE, 
                                        argument1   => p_batch_id,
                                        argument2   => 'Y'
                                    );
      IF lt_conc_request_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         fnd_file.put_line (fnd_file.log, 'Customer Extensible Attributes Conversion Program failed to submit: ' || x_errbuf);
         x_errbuf  := 'Customer Extensible Attributes Conversion Program failed to submit: ' || x_errbuf;
      ELSE
         fnd_file.put_line (fnd_file.log, ' ');
         fnd_file.put_line (fnd_file.log, 'Customer Extensible Attributes Conversion Program submitted with request id: '|| TO_CHAR( lt_conc_request_id ));
         COMMIT;
      END IF;
/*
      ----------------------------------------------------------------------------------
      -- Wait for OD: CDH Customer Extensible Attributes Conversion Program to Complete
      ----------------------------------------------------------------------------------
      lv_phase       := NULL;
      lv_status      := NULL;
      lv_dev_phase   := NULL;
      lv_dev_status  := NULL;
      lv_message     := NULL;
      lv_error_exist := NULL;
      lv_warning     := NULL;


      lb_wait := FND_CONCURRENT.wait_for_request 
                    (   request_id      => lt_conc_request_id,
                        interval        => 10,
                        phase           => lv_phase,
                        status          => lv_status,
                        dev_phase       => lv_dev_phase,
                        dev_status      => lv_dev_status,
                        message         => lv_message
                    );*/
   END IF;

EXCEPTION
   WHEN le_exception THEN
      x_retcode := 2;
   WHEN OTHERS THEN
      x_errbuf  := 'Unexpected error in conv_master_child - '||SQLERRM;
      x_retcode := 2;
END conv_child_main;

-- +===================================================================+
-- | Name        :  get_osr_owner_table_id                             |
-- | Description :  This procedure fetches the owner table is from     |
-- |                hz_orig_sys_reference table for the OSR and        |
-- |                owner_table_name passed.                           |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE get_osr_owner_table_id
      (  p_orig_system         IN  hz_orig_sys_references.orig_system%TYPE,
         p_orig_sys_reference  IN  hz_orig_sys_references.orig_system_reference%TYPE,
         p_owner_table_name    IN  hz_orig_sys_references.owner_table_name%TYPE,
         x_owner_table_id     OUT  hz_orig_sys_references.owner_table_id%TYPE,
         x_retcode            OUT  NUMBER, 
         x_errbuf             OUT  VARCHAR2
      )
IS
ln_owner_table_id             hz_orig_sys_references.owner_table_id%TYPE;
BEGIN

   x_owner_table_id := NULL;
   x_retcode        := 0;
   x_errbuf         := NULL;
   
   SELECT owner_table_id
   INTO   ln_owner_table_id
   FROM   hz_orig_sys_references
   WHERE  orig_system           = p_orig_system
   AND    orig_system_reference = p_orig_sys_reference
   AND    owner_table_name      = p_owner_table_name
   AND    status                = 'A';
   
   x_owner_table_id := ln_owner_table_id;
   x_retcode        := 0;
   x_errbuf         := NULL;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      x_retcode := 1;
      x_owner_table_id := NULL;
      x_errbuf := 'OSR entered does not exist.';
   WHEN TOO_MANY_ROWS THEN
      x_retcode := 2;
      x_owner_table_id := NULL;
      x_errbuf := 'OSR entered returns multiple rows.';
   WHEN OTHERS THEN
      x_retcode := 3;
      x_owner_table_id := NULL;
      x_errbuf := 'Unexpected Error while fetching id for OSR - '||SQLERRM;
   
END get_osr_owner_table_id;

-- +===================================================================+
-- | Name        :  get_hz_imp_g_miss_char                             |
-- | Description :  This function compares the column value passed to  |
-- |                the profile to indicate NULL for import and returns|
-- |                NULL OR G_MISS_CHAR OR column value.               |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+

FUNCTION get_hz_imp_g_miss_char 
      ( p_column_value VARCHAR2 )
RETURN VARCHAR2
IS
BEGIN

   CASE 
      WHEN p_column_value = fnd_profile.value('HZ_IMP_G_MISS_CHAR') THEN
         RETURN FND_API.G_MISS_CHAR;         
      WHEN p_column_value IS NULL THEN
         RETURN NULL;         
      ELSE
         RETURN p_column_value;
   END CASE;

EXCEPTION
   WHEN OTHERS THEN
      RETURN p_column_value; 
END get_hz_imp_g_miss_char;

-- +===================================================================+
-- | Name        :  get_hz_imp_g_miss_num                              |
-- | Description :  This function compares the column value passed to  |
-- |                the profile to indicate NULL for import and returns|
-- |                NULL OR G_MISS_NUM OR column value.                |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+

FUNCTION get_hz_imp_g_miss_num  
      ( p_column_value VARCHAR2 )
RETURN NUMBER
IS
BEGIN

   CASE 
      WHEN p_column_value = fnd_profile.value('HZ_IMP_G_MISS_NUM') THEN
         RETURN FND_API.G_MISS_NUM;
      WHEN p_column_value IS NULL THEN
         RETURN NULL;
      ELSE
         RETURN p_column_value;
   END CASE;

EXCEPTION
   WHEN OTHERS THEN
      RETURN p_column_value; 
END get_hz_imp_g_miss_num;


-- +===================================================================+
-- | Name        :  get_hz_imp_g_miss_date                             |
-- | Description :  This function compares the column value passed to  |
-- |                the profile to indicate NULL for import and returns|
-- |                NULL OR G_MISS_DATE OR column value.               |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+

FUNCTION get_hz_imp_g_miss_date
      ( p_column_value VARCHAR2 )
RETURN DATE
IS
BEGIN

   CASE 
      WHEN p_column_value = fnd_profile.value('HZ_IMP_G_MISS_DATE') THEN
         RETURN FND_API.G_MISS_DATE;         
      WHEN p_column_value IS NULL THEN
         RETURN NULL;
      ELSE
         RETURN p_column_value;
   END CASE;

EXCEPTION
   WHEN OTHERS THEN
      RETURN p_column_value; 
END get_hz_imp_g_miss_date;

-- +===================================================================+
-- | Name        :  write_conc_log_message                             |
-- | Description :  This procedure checks the profile option           |
-- |                'OD: Show Log in Customer Conversion Program' and  |
-- |                writes messages in concurrent program log          |
-- |                accordingly.                                       |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE write_conc_log_message
      ( p_message  IN   VARCHAR2)
IS
lv_profile_value   VARCHAR2(10);
BEGIN

   lv_profile_value := NVL(fnd_profile.value ('XX_CDH_CONV_SHOW_LOG'),'N');
   
   IF lv_profile_value = 'Y' THEN
      fnd_file.put_line(fnd_file.log, p_message);
   END IF;

EXCEPTION
   WHEN OTHERS THEN
      fnd_file.put_line(fnd_file.log, 'Unable to log messages - '||SQLERRM);
END;

-- +===================================================================+
-- | Name        :  trim_input_msg                                     |
-- | Description :  This function  would trim trailing spaces and      |
-- |                truncate the input message to 2000 characters.     |
-- |                                                                   |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :  p_message                                          |
-- |                                                                   |
-- | Returns     :  VARCHAR2                                           |
-- |                                                                   |
-- +===================================================================+
FUNCTION trim_input_msg
      ( p_message   IN  VARCHAR2)
RETURN VARCHAR2      
IS
lv_message      VARCHAR2(2000);
BEGIN
   IF p_message IS NOT NULL THEN
      lv_message := RTRIM(p_message);
      lv_message := substr(lv_message,1,2000);
      RETURN lv_message;
   ELSE
      RETURN NULL;
   END IF;   
END trim_input_msg;

-- +===================================================================+
-- | Name        :  submit_conv_request_set                            |
-- | Description :  This function  would trim trailing spaces and      |
-- |                truncate the input message to 2000 characters.     |
-- |                                                                   |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :  p_message                                          |
-- |                                                                   |
-- | Returns     :  VARCHAR2                                           |
-- |                                                                   |
-- +===================================================================+
PROCEDURE submit_conv_request_set
      ( x_errbuf                 OUT VARCHAR2,
        x_retcode                OUT VARCHAR2,
        p_aops_batch_id          IN  NUMBER,
        p_submit_update          IN  VARCHAR2, 
        p_submit_load_owb        IN  VARCHAR2, 
        p_submit_bulk            IN  VARCHAR2,
        p_process_party_rel      IN  VARCHAR2, 
        p_process_accounts       IN  VARCHAR2,
        p_process_acct_sites     IN  VARCHAR2,
        p_process_acct_site_uses IN  VARCHAR2,
        p_process_contacts       IN  VARCHAR2,
        p_process_contact_points IN  VARCHAR2,
        p_process_profiles       IN  VARCHAR2,
        p_process_bank           IN  VARCHAR2,
        p_process_ext_attrib     IN  VARCHAR2,
        p_import_run_option      IN  VARCHAR2,
        p_run_batch_dedup        IN  VARCHAR2,
        p_batch_dedup_rule       IN  VARCHAR2,
        p_action_duplicates      IN  VARCHAR2,
        p_run_addr_val           IN  VARCHAR2,
        p_run_reg_dedup          IN  VARCHAR2,
        p_reg_dedup_rule         IN  VARCHAR2,
        p_gen_fuz_key            IN  VARCHAR2
      )
IS
le_skip_procedure                EXCEPTION;
le_submit_failed                 EXCEPTION;
ln_ebs_batch_id                  NUMBER;
lb_success                       BOOLEAN;
ln_req_id                        NUMBER;

BEGIN
   
   BEGIN
      SELECT ebs_batch_id
      INTO   ln_ebs_batch_id
      FROM   xx_owb_crmbatch_status
      WHERE  aops_batch_id = p_aops_batch_id;   
   EXCEPTION
      WHEN OTHERS THEN
         fnd_file.put_line (fnd_file.log, 'EBS Batch Id not Found for AOPS Batch Id - '||p_aops_batch_id);
         fnd_file.put_line (fnd_file.log, 'Aborting..');
         RAISE le_skip_procedure;
   END;
   
   ----------------------------------------------------------
   -- Set the context for the request set XX_CDH_LOAD_CV_TCA
   ----------------------------------------------------------
   lb_success := fnd_submit.set_request_set('XXCNV', 'XX_CDH_LOAD_CV_TCA');
   
   IF ( lb_success ) THEN
      
      ----------------------------------------------------------------------------------
      -- Submit program OD: CDH Conversion: Update CV for AOPS which is in stage STAGE10 
      ----------------------------------------------------------------------------------
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_CUST_CV_AOPSUPDATE_CONV',
                          stage       => 'XX_CDH_CUST_CV_AOPSUPDATE_CONV', 
                          argument1   => ln_ebs_batch_id,
                          argument2   => p_submit_update
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;   
       
      ----------------------------------------------------------------------------------
      -- Submit program OD: CDH OWB Load from Oracle CV to STG which is in stage STAGE20 
      ----------------------------------------------------------------------------------
      
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_OWB_CVSTG',
                          stage       => 'XX_CDH_OWB_CVSTG', 
                          argument1   => ln_ebs_batch_id,
                          argument2   => ln_ebs_batch_id,
                          argument3   => 50,
                          argument4   => p_submit_load_owb
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      ----------------------------------------------------------------------------------
      -- Submit program OD: CDH Activate Bulk Batch Program which is in stage STAGE30 
      ----------------------------------------------------------------------------------

      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_ACTIVATE_BULK_BATCH',
                          stage       => 'XX_CDH_ACTIVATE_BULK_BATCH', 
                          argument1   => ln_ebs_batch_id                          
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      -------------------------------------------------------------------------------
      -- Submit program OD: CDH Submit Bulk Import Program which is in stage STAGE35
      -------------------------------------------------------------------------------
      
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_SUBMIT_BULK_WRAPPER',
                          stage       => 'XX_CDH_SUBMIT_BULK_IMP', 
                          argument1   => p_submit_bulk,
                          argument2   => ln_ebs_batch_id,
                          argument3   => p_import_run_option,
                          argument4   => p_run_batch_dedup  ,
                          argument5   => p_batch_dedup_rule ,
                          argument6   => p_action_duplicates,
                          argument7   => p_run_addr_val     ,
                          argument8   => p_run_reg_dedup    ,
                          argument9   => p_reg_dedup_rule   ,
                          argument10  => p_gen_fuz_key
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      --------------------------------------------------------------------------------------
      -- Submit program OD: CDH Customer Account Conversion Program which is in stage STAGE40 
      --------------------------------------------------------------------------------------
      
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_CUST_ACCOUNT_CONV',
                          stage       => 'XX_CDH_CUST_ACCOUNT_CONV', 
                          argument1   => ln_ebs_batch_id,
                          argument2   => p_process_accounts
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      --------------------------------------------------------------------------------------
      -- Submit program OD: CDH Party Relationship Conversion which is in stage STAGE40 
      --------------------------------------------------------------------------------------
     
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_PARTY_RELATIONSHIP_CONV',
                          stage       => 'XX_CDH_CUST_ACCOUNT_CONV', 
                          argument1   => ln_ebs_batch_id,
                          argument2   => p_process_party_rel
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      ---------------------------------------------------------------------------------------------
      -- Submit program OD: CDH Customer Account Site Conversion Program which is in stage STAGE50 
      ---------------------------------------------------------------------------------------------
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_CUST_ACCT_SITE_CONV',
                          stage       => 'XX_CDH_CUST_ACCT_SITE_CONV', 
                          argument1   => ln_ebs_batch_id,
                          argument2   => p_process_acct_sites
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      --------------------------------------------------------------------------------------------------
      -- Submit program OD: CDH Customer Account Site Uses Conversion Program which is in stage STAGE60 
      --------------------------------------------------------------------------------------------------
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_CUST_ACCT_SITE_USE_CONV',
                          stage       => 'XX_CDH_OTHER_ENT_CONV', 
                          argument1   => ln_ebs_batch_id,
                          argument2   => p_process_acct_site_uses
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      --------------------------------------------------------------------------------------------------
      -- Submit program OD: CDH Customer Contact Points Conversion Program which is in stage STAGE60 
      --------------------------------------------------------------------------------------------------
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_CUST_CONTACT_POINT_CONV',
                          stage       => 'XX_CDH_OTHER_ENT_CONV', 
                          argument1   => ln_ebs_batch_id,
                          argument2   => p_process_contact_points
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      --------------------------------------------------------------------------------------------------
      -- Submit program OD: CDH Customer Contact Conversion Program which is in stage STAGE60 
      --------------------------------------------------------------------------------------------------
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_CUST_CONTACT_CONV',
                          stage       => 'XX_CDH_OTHER_ENT_CONV', 
                          argument1   => ln_ebs_batch_id,
                          argument2   => p_process_contacts
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      --------------------------------------------------------------------------------------------------
      -- Submit program OD: CDH Customer Profile Conversion Program which is in stage STAGE60 
      --------------------------------------------------------------------------------------------------
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_CUST_PROFILE_CONV',
                          stage       => 'XX_CDH_OTHER_ENT_CONV', 
                          argument1   => ln_ebs_batch_id,
                          argument2   => p_process_profiles
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;      
      
      --------------------------------------------------------------------------------------------------
      -- Submit program OD: CDH Customer Bank  Payment Conversion Program which is in stage STAGE60 
      --------------------------------------------------------------------------------------------------
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_CUST_BANK_PAYMETH_CONV',
                          stage       => 'XX_CDH_OTHER_ENT_CONV', 
                          argument1   => ln_ebs_batch_id,
                          argument2   => p_process_bank
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      --------------------------------------------------------------------------------------------------
      -- Submit program OD: CDH Customer Extensible Attributes Conversion Program which is in stage STAGE60 
      --------------------------------------------------------------------------------------------------
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_CUST_EXT_ATTRIB_CONV',
                          stage       => 'XX_CDH_OTHER_ENT_CONV', 
                          argument1   => ln_ebs_batch_id,
                          argument2   => p_process_ext_attrib
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      -------------------------------------------------------------------------------------------------------------
      -- Submit program OD: CDH Customer Account Relate and Site Use Update Child Program which is in stage STAGE70 
      -------------------------------------------------------------------------------------------------------------
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_CUST_ACCT_REL_CHILD',
                          stage       => 'XX_CDH_CUST_ACCT_REL_CHILD', 
                          argument1   => ln_ebs_batch_id
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      -------------------------------------------------------------------------------------------------------------
      -- Submit program OD: CDH Contact Role Responsibility Conversion Program which is in stage STAGE70 
      -------------------------------------------------------------------------------------------------------------
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XX_CDH_CONTACT_ROLE_RESP',
                          stage       => 'XX_CDH_CUST_ACCT_REL_CHILD', 
                          argument1   => ln_ebs_batch_id,
                          argument2   => p_process_contacts
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;

      ----------------------------------------------------------------------------------------
      -- Submit program OD: CDH Copy Customer Profiles for the Batch which is in stage STAGE80 
      ----------------------------------------------------------------------------------------
      lb_success := fnd_submit.submit_program
                       (  application => 'XXCNV',
                          program     => 'XXOD_COPY_CUST_PROF_BATCH',
                          stage       => 'XXOD_COPY_CUST_PROF_BATCH', 
                          argument1   => ln_ebs_batch_id
                       );   
      IF ( NOT lb_success ) THEN
         RAISE le_submit_failed;
      END IF;
      
      ------------------------------
      -- Submit the Request Set 
      ------------------------------
      ln_req_id := fnd_submit.submit_set(null,FALSE);
       
      IF ln_req_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         fnd_file.put_line (fnd_file.log, 'Error while submitting Request Set - '||x_errbuf);
      ELSE
         fnd_file.put_line (fnd_file.log, ' ');
         fnd_file.put_line (fnd_file.log, 'Request Set submitted with request id: '|| TO_CHAR( ln_req_id ));
         COMMIT;
      END IF;
   END IF;
  
   
EXCEPTION
   WHEN le_submit_failed THEN
      fnd_file.put_line (fnd_file.log, 'Error while submitting request Set - '||fnd_message.get); 
      x_errbuf := 'Error while submitting request Set - '||fnd_message.get;
      x_retcode := 2;
   WHEN le_skip_procedure THEN
      NULL;
   WHEN OTHERS THEN
      fnd_file.put_line (fnd_file.log, 'Unexpected Error in proecedure submit_conv_request_set - Error - '||SQLERRM);
      x_errbuf := 'Unexpected Error in proecedure submit_conv_request_set - Error - '||SQLERRM;
      x_retcode := 2;
END submit_conv_request_set;

-- +===================================================================+
-- | Name        :  activate_bulk_batch                                |
-- | Description :  This procedure would activate the batch for bulk   |
-- |                import generated by extract.                       |
-- |                                                                   |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :  p_bulk_batch_id                                    |
-- |                                                                   |
-- | Returns     :  VARCHAR2                                           |
-- |                                                                   |
-- +===================================================================+
PROCEDURE activate_bulk_batch
      ( x_errbuf              OUT VARCHAR2,
        x_retcode             OUT VARCHAR2,
        p_bulk_batch_id       IN  NUMBER        
      )
IS
lv_return_status      VARCHAR2(1);
ln_msg_count          NUMBER;
ln_counter            NUMBER;
lv_msg_data           VARCHAR2(2000);

BEGIN

 IF FND_GLOBAL.ORG_ID = 404 THEN

   HZ_IMP_BATCH_SUMMARY_V2PUB.activate_batch 
      (  p_batch_id      => p_bulk_batch_id, 
         x_return_status => lv_return_status, 
         x_msg_count     => ln_msg_count, 
         x_msg_data      => lv_msg_data
      );  

   IF lv_return_status <> FND_API.G_RET_STS_SUCCESS THEN
      IF ln_msg_count > 0 THEN
         fnd_file.put_line (fnd_file.log,'Error while activating batch_id -'||p_bulk_batch_id);
         FOR ln_counter IN 1..ln_msg_count
         LOOP
            fnd_file.put_line (fnd_file.log,'Error ->'||fnd_msg_pub.get(ln_counter, FND_API.G_FALSE));
         END LOOP;
         fnd_msg_pub.delete_msg;
      END IF;
   ELSE
      fnd_file.put_line (fnd_file.log,'Batch ID - '||p_bulk_batch_id||' Successfully activated!!');
   END IF;
  END IF;
EXCEPTION
   WHEN OTHERS THEN
      fnd_file.put_line (fnd_file.log,'Unexpected error while activating batch_id -'||SQLERRM);
      x_retcode := 2;
      x_errbuf  := 'Unexpected error while activating batch_id -'||SQLERRM;
END activate_bulk_batch;

-- +===================================================================+
-- | Name        :  generate_bulk_batch                                |
-- | Description :  This procedure would generate the batch for bulk   |
-- |                import .                                           |
-- |                                                                   |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :  p_bulk_batch_id                                    |
-- |                                                                   |
-- | Returns     :  VARCHAR2                                           |
-- |                                                                   |
-- +===================================================================+
PROCEDURE generate_bulk_batch
      ( x_errbuf              OUT VARCHAR2,
        x_retcode             OUT VARCHAR2,
        p_batch_name          IN  VARCHAR2,
        p_description         IN  VARCHAR2,
        p_original_system     IN  VARCHAR2,
        p_est_no_of_records   IN  VARCHAR2
      )
IS
lv_return_status      VARCHAR2(1);
ln_msg_count          NUMBER;
ln_counter            NUMBER;
lv_msg_data           VARCHAR2(2000);
ln_batch_id           NUMBER;

BEGIN

   HZ_IMP_BATCH_SUMMARY_V2PUB.create_import_batch 
      (  p_batch_name        => p_batch_name, 
         p_description       => p_description, 
         p_original_system   => p_original_system, 
         p_load_type         => '', 
         p_est_no_of_records => p_est_no_of_records, 
         x_batch_id          => ln_batch_id, 
         x_return_status     => lv_return_status, 
         x_msg_count         => ln_msg_count, 
         x_msg_data          => lv_msg_data
      ); 
   IF lv_return_status <> FND_API.G_RET_STS_SUCCESS THEN
      IF ln_msg_count > 0 THEN
         fnd_file.put_line (fnd_file.log,'Error while generating batch_id - ');
         FOR ln_counter IN 1..ln_msg_count
         LOOP
            fnd_file.put_line (fnd_file.log,'Error ->'||fnd_msg_pub.get(ln_counter, FND_API.G_FALSE));
         END LOOP;
         fnd_msg_pub.delete_msg;
      END IF;
   ELSE
      fnd_file.put_line (fnd_file.log,'Batch ID - '||ln_batch_id||' Successfully generated!!');
   END IF;

EXCEPTION
   WHEN OTHERS THEN
      fnd_file.put_line (fnd_file.log,'Unexpected error while generating batch_id -'||SQLERRM);
      x_retcode := 2;
      x_errbuf  := 'Unexpected error while generating batch_id -'||SQLERRM;
END generate_bulk_batch;

-- +===================================================================+
-- | Name        :  submit_tca_bulk_wrapper                            |
-- | Description :  This procedure would submit TCA Bulk Import        |
-- |                Program based on parameter.                        |
-- |                                                                   |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :                                                     |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE submit_tca_bulk_wrapper
      ( x_errbuf              OUT VARCHAR2,
        x_retcode             OUT VARCHAR2,
        p_submit_bulk         IN  VARCHAR2,
        p_batch_id            IN  VARCHAR2,
        p_import_run_option   IN  VARCHAR2, -- Bulk Import Parameter
        p_run_batch_dedup     IN  VARCHAR2, -- Bulk Import Parameter
        p_batch_dedup_rule    IN  VARCHAR2, -- Bulk Import Parameter
        p_action_duplicates   IN  VARCHAR2, -- Bulk Import Parameter
        p_run_addr_val        IN  VARCHAR2, -- Bulk Import Parameter
        p_run_reg_dedup       IN  VARCHAR2, -- Bulk Import Parameter
        p_reg_dedup_rule      IN  VARCHAR2, -- Bulk Import Parameter
        p_generate_fuzzy_key  IN  VARCHAR2  -- Bulk Import Parameter
      )
IS
lt_conc_request_id                NUMBER;
lv_phase              VARCHAR2(50);
lv_status             VARCHAR2(50);
lv_dev_phase          VARCHAR2(15);
lv_dev_status         VARCHAR2(15);
lb_wait               BOOLEAN;
lv_message            VARCHAR2(4000);
lv_error_exist        VARCHAR2(1);
lv_warning            VARCHAR2(1);

BEGIN

   IF p_submit_bulk = 'Y' THEN
      
      -----------------------------------
      -- Submit Bulk Import Conc Request
      -----------------------------------

      lt_conc_request_id := FND_REQUEST.submit_request 
                              (   application => 'AR',
                                  program     => 'ARHIMAIN',
                                  description => NULL,
                                  start_time  => NULL,
                                  sub_request => FALSE, 
                                  argument1   => p_batch_id,
                                  argument2   => p_import_run_option,
                                  argument3   => p_run_batch_dedup,
                                  argument4   => p_batch_dedup_rule,
                                  argument5   => p_action_duplicates,
                                  argument6   => p_run_addr_val,
                                  argument7   => p_run_reg_dedup,
                                  argument8   => p_reg_dedup_rule,
                                  argument9   => p_generate_fuzzy_key
                              );


      IF lt_conc_request_id = 0 THEN
         x_errbuf  := fnd_message.get;
         x_retcode := 2;
         fnd_file.put_line (fnd_file.log, 'Bulk Import Program failed to submit: ' || x_errbuf);
         x_errbuf  := 'Bulk Import Program failed to submit: ' || x_errbuf;
      ELSE
         fnd_file.put_line (fnd_file.log, ' ');
         fnd_file.put_line (fnd_file.log, 'Submitted Bulk Import Program : '|| TO_CHAR( lt_conc_request_id ));
         COMMIT;
      END IF;
      
      -----------------------------------
      -- Wait for Bulk Import to Complete
      -----------------------------------
      lv_phase       := NULL;
      lv_status      := NULL;
      lv_dev_phase   := NULL;
      lv_dev_status  := NULL;
      lv_message     := NULL;
      lv_error_exist := NULL;
      lv_warning     := NULL;


      lb_wait := FND_CONCURRENT.wait_for_request 
                    (   request_id      => lt_conc_request_id,
                        interval        => 10,
                        phase           => lv_phase,
                        status          => lv_status,
                        dev_phase       => lv_dev_phase,
                        dev_status      => lv_dev_status,
                        message         => lv_message
                    );

      IF lv_dev_status = 'PAUSED' THEN

         lb_wait := FND_CONCURRENT.wait_for_request 
                       (   request_id      => lt_conc_request_id,
                           interval        => 10,
                           phase           => lv_phase,
                           status          => lv_status,
                           dev_phase       => lv_dev_phase,
                           dev_status      => lv_dev_status,
                           message         => lv_message
                       );
      END IF;   
   END IF;

   --defect 29511 -- CA Conversion Program is not picking the batches to process

   IF FND_GLOBAL.ORG_ID = 404 THEN
   
     update hz_imp_batch_summary
	 set    batch_status = 'READY_FOR_CA'
	 where  batch_id = p_batch_id;
	 
	 commit;
	 
   END IF;

EXCEPTION
   WHEN OTHERS THEN 
      fnd_file.put_line (fnd_file.log,'Unexpected error in submit_tca_bulk_wrapper -'||SQLERRM);
      x_retcode := 2;
      x_errbuf  := 'Unexpected error in submit_tca_bulk_wrapper -'||SQLERRM;
END submit_tca_bulk_wrapper;

-- +===================================================================+
-- | Name        :  submit_cdh_aops_master                             |
-- | Description :  This function  would trim trailing spaces and      |
-- |                truncate the input message to 2000 characters.     |
-- |                                                                   |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :  p_message                                          |
-- |                                                                   |
-- | Returns     :  VARCHAR2                                           |
-- |                                                                   |
-- +===================================================================+
PROCEDURE submit_cdh_aops_master
      ( x_errbuf                 OUT VARCHAR2,
        x_retcode                OUT VARCHAR2,
        p_from_aops_batch_id     IN  NUMBER,
        p_to_aops_batch_id       IN  NUMBER,
        p_submit_extract_owb     IN  VARCHAR2,
        p_submit_update          IN  VARCHAR2, 
        p_submit_load_owb        IN  VARCHAR2, 
        p_submit_bulk            IN  VARCHAR2,
        p_process_party_rel      IN  VARCHAR2, 
        p_process_accounts       IN  VARCHAR2,
        p_process_acct_sites     IN  VARCHAR2,
        p_process_acct_site_uses IN  VARCHAR2,
        p_process_contacts       IN  VARCHAR2,
        p_process_contact_points IN  VARCHAR2,
        p_process_profiles       IN  VARCHAR2,
        p_process_bank           IN  VARCHAR2,
        p_process_ext_attrib     IN  VARCHAR2,
        p_import_run_option      IN  VARCHAR2,
        p_run_batch_dedup        IN  VARCHAR2,
        p_batch_dedup_rule       IN  VARCHAR2,
        p_action_duplicates      IN  VARCHAR2,
        p_run_addr_val           IN  VARCHAR2,
        p_run_reg_dedup          IN  VARCHAR2,
        p_reg_dedup_rule         IN  VARCHAR2,
        p_gen_fuz_key            IN  VARCHAR2
      )
IS
le_skip_procedure                EXCEPTION;
le_submit_failed                 EXCEPTION;
ln_ebs_batch_id                  NUMBER;
lb_success                       BOOLEAN;
ln_req_id                        NUMBER;
lv_instance_name                 VARCHAR2(100);
-- Added parameter for identifying the target host for FTP
lv_ftp_target_host               VARCHAR2(100);

BEGIN

   FOR i IN p_from_aops_batch_id..p_to_aops_batch_id
   LOOP
   
      ----------------------------------------------------------
      -- Set the context for the request set XX_CDH_CONV_AOPS_RS
      ----------------------------------------------------------
      lb_success := fnd_submit.set_request_set('XXCNV', 'XX_CDH_CONV_AOPS_RS');
      
      IF ( lb_success ) THEN
         
         ------------------------------------------------------------------------------------------
         -- Submit program OD: CDH OWB Extract from AOPS CV to Oracle CV which is in stage STAGE10 
         ------------------------------------------------------------------------------------------
         lb_success := fnd_submit.submit_program
                          (  application => 'XXCNV',
                             program     => 'XX_CDH_OWB_AOPS_CV',
                             stage       => 'XX_CDH_OWB_AOPS_CV', 
                             argument1   => 50,
                             argument2   => i,
                             argument3   => p_submit_extract_owb
                          );   
         IF ( NOT lb_success ) THEN
            RAISE le_submit_failed;
         END IF;        
         
         ------------------------------------------------------------------------------------------
         -- Submit program OD: CDH OWB Extract from AOPS CV to Oracle CV which is in stage STAGE20 
         ------------------------------------------------------------------------------------------
         -- Changed to v$database to account for RAC enabled system
         -- Added Parameter to program - Target Name (where files are FTPd)
         /*
		 SELECT name 
         INTO   lv_instance_name
         FROM   v$database;
		 */
		 
		SELECT SUBSTR(SYS_CONTEXT('USERENV','DB_NAME'),1,8) 		-- Added from V$database to DB_NAME
		INTO lv_instance_name
		FROM dual;
         
         lv_ftp_target_host := NVL(fnd_profile.value('XX_CDH_CONV_FTP_TARGET'), 'FTP target host not defined');
         
         lb_success := fnd_submit.submit_program
                          (  application => 'XXCNV',
                             program     => 'XX_CDH_CUST_STATUS_FTP_AOPS',
                             stage       => 'XX_CDH_SUBMIT_AOPS_RS', 
                             argument1   => lv_instance_name,
                             argument2   => lv_ftp_target_host
                          );   
         IF ( NOT lb_success ) THEN
            RAISE le_submit_failed;
         END IF;
         
         ------------------------------------------------------------------------------------------
         -- Submit program OD: CDH Submit AOPS Conversion Request Set which is in stage STAGE20 
         ------------------------------------------------------------------------------------------
         lb_success := fnd_submit.submit_program
                          (    application => 'XXCNV'
                              ,program     => 'XX_CDH_SUBMIT_AOPS_RS'
                              ,stage       => 'XX_CDH_SUBMIT_AOPS_RS' 
                              ,argument1   => i
                              ,argument2   => p_submit_update         
                              ,argument3   => p_submit_load_owb       
                              ,argument4   => p_submit_bulk           
                              ,argument5   => p_process_party_rel     
                              ,argument6   => p_process_accounts      
                              ,argument7   => p_process_acct_sites    
                              ,argument8   => p_process_acct_site_uses
                              ,argument9   => p_process_contacts      
                              ,argument10  => p_process_contact_points
                              ,argument11  => p_process_profiles      
                              ,argument12  => p_process_bank          
                              ,argument13  => p_process_ext_attrib    
                              ,argument14  => p_import_run_option     
                              ,argument15  => p_run_batch_dedup       
                              ,argument16  => p_batch_dedup_rule      
                              ,argument17  => p_action_duplicates     
                              ,argument18  => p_run_addr_val          
                              ,argument19  => p_run_reg_dedup         
                              ,argument20  => p_reg_dedup_rule        
                              ,argument21  => p_gen_fuz_key                             
                          );   
         IF ( NOT lb_success ) THEN
            RAISE le_submit_failed;
         END IF;
         
         ------------------------------
         -- Submit the Request Set 
         ------------------------------
         ln_req_id := fnd_submit.submit_set(null,FALSE);

         IF ln_req_id = 0 THEN
            x_errbuf  := fnd_message.get;
            x_retcode := 2;
            fnd_file.put_line (fnd_file.log, 'Error while submitting Request Set - '||x_errbuf);
         ELSE
            fnd_file.put_line (fnd_file.log, ' ');
            fnd_file.put_line (fnd_file.log, 'AOPS Conversion Request Set submitted with request id: '|| TO_CHAR( ln_req_id )||' for AOPS batch : '||i);
            COMMIT;
         END IF;
      END IF;
   END LOOP;

EXCEPTION
   WHEN le_submit_failed THEN
      fnd_file.put_line (fnd_file.log, 'Error while submitting request Set - '||fnd_message.get); 
      x_errbuf := 'Error while submitting request Set - '||fnd_message.get;
      x_retcode := 2;
   WHEN OTHERS THEN
      fnd_file.put_line (fnd_file.log, 'Unexpected Error in proecedure submit_conv_request_set - Error - '||SQLERRM);
      x_errbuf := 'Unexpected Error in proecedure submit_conv_request_set - Error - '||SQLERRM;
      x_retcode := 2;

END submit_cdh_aops_master;

-- +===================================================================+
-- | Name        :  seamless_aops_conversion                           |
-- | Description :  This procedure will be registered as a Concurrent  |
-- |                Program and will be polling AOPS database to fetch |
-- |                and submit AOPS conversion batches.                |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :  p_message                                          |
-- |                                                                   |
-- | Returns     :  VARCHAR2                                           |
-- |                                                                   |
-- +===================================================================+
PROCEDURE seamless_aops_conversion
   (   x_errbuf                 OUT VARCHAR2,
       x_retcode                OUT VARCHAR2,
       p_batch_type             IN  VARCHAR2,
       p_submit_extract_owb     IN  VARCHAR2,
       p_submit_update          IN  VARCHAR2,
       p_submit_load_owb        IN  VARCHAR2,
       p_submit_bulk            IN  VARCHAR2,
       p_process_party_rel      IN  VARCHAR2,
       p_process_accounts       IN  VARCHAR2,
       p_process_acct_sites     IN  VARCHAR2,
       p_process_acct_site_uses IN  VARCHAR2,
       p_process_contacts       IN  VARCHAR2,
       p_process_contact_points IN  VARCHAR2,
       p_process_profiles       IN  VARCHAR2,
       p_process_bank           IN  VARCHAR2,
       p_process_ext_attrib     IN  VARCHAR2,
       p_import_run_option      IN  VARCHAR2,
       p_run_batch_dedup        IN  VARCHAR2,
       p_batch_dedup_rule       IN  VARCHAR2,
       p_action_duplicates      IN  VARCHAR2,
       p_run_addr_val           IN  VARCHAR2,
       p_run_reg_dedup          IN  VARCHAR2,
       p_reg_dedup_rule         IN  VARCHAR2,
       p_gen_fuz_key            IN  VARCHAR2
   )
IS

TYPE lt_aops_batch_rec_type     IS RECORD
   (   aops_batch_id            NUMBER
   );

lt_aops_batch_rec               lt_aops_batch_rec_type;

TYPE lt_aops_batch_cur_type     IS REF CURSOR;

lc_aops_batch_cur               lt_aops_batch_cur_type;

lv_aops_table_name              VARCHAR2(2000);

ln_counter                      NUMBER := 0;
lv_batch_submitted              VARCHAR2(1) := 'N';
lv_select_query                 VARCHAR2(2000);
lt_conc_request_id              NUMBER;
ln_start_aops_batch             NUMBER;
ln_end_aops_batch               NUMBER;
le_skip_process                 EXCEPTION;

BEGIN
   
   lv_aops_table_name           := fnd_profile.value('XX_CDH_OWB_AOPS_DBLINK_NAME');
   
   IF lv_aops_table_name IS NULL THEN
      fnd_file.put_line (fnd_file.log, 'Profile Option OD: CDH Conversion AOPS DB Link Name is not SET.');
      x_retcode := 2;
      RAISE le_skip_process;
   END IF;   
      
   
   -----------------------------------
   -- The select query for the cursor 
   -----------------------------------
   IF p_batch_type IS NOT NULL THEN
      lv_select_query := 
      ' SELECT orebatchf_aops_batch_id    '||
      ' FROM   '||lv_aops_table_name||' a '||
      ' WHERE  NOT EXISTS ( SELECT 1      '||
      '                     FROM    xx_owb_crmbatch_status b '||
      '                     WHERE   a.orebatchf_aops_batch_id = b.aops_batch_id '||
      '                   ) ' ||
      ' AND    orebatchf_job_name LIKE ''DELTA%'''   ||
      ' AND    ( trim(orebatchf_status) = ''O'' OR trim(orebatchf_status) = ''C'' )' ||
      ' AND    trim(orebatchf_parent) = '''||p_batch_type || '''' ||
      ' ORDER BY orebatchf_aops_batch_id ';
   ELSE
      lv_select_query := 
      ' SELECT orebatchf_aops_batch_id    '||
      ' FROM   '||lv_aops_table_name||' a '||
      ' WHERE  NOT EXISTS ( SELECT 1      '||
      '                     FROM    xx_owb_crmbatch_status b '||
      '                     WHERE   a.orebatchf_aops_batch_id = b.aops_batch_id '||
      '                   ) ' ||
      ' AND    orebatchf_job_name LIKE ''DELTA%'''   ||
      ' AND    ( trim(orebatchf_status) = ''O'' OR trim(orebatchf_status) = ''C'' )' ||
      ' AND    trim(orebatchf_parent)  IS NULL ' ||
      ' ORDER BY orebatchf_aops_batch_id ';
   
   END IF;
   
   fnd_file.put_line (fnd_file.log, 'Query Used - ' || lv_select_query);
   
   OPEN lc_aops_batch_cur FOR lv_select_query;
   LOOP
      
      FETCH lc_aops_batch_cur INTO lt_aops_batch_rec;
      
      EXIT WHEN lc_aops_batch_cur%NOTFOUND;        

      ln_counter := ln_counter + 1;

      IF ln_counter = 1 OR lv_batch_submitted = 'Y' THEN
         ln_start_aops_batch := lt_aops_batch_rec.aops_batch_id;
         ln_end_aops_batch   := lt_aops_batch_rec.aops_batch_id;
         lv_batch_submitted  := 'N';
      ELSE
         IF lt_aops_batch_rec.aops_batch_id = (ln_end_aops_batch + 1) THEN
            ln_end_aops_batch := lt_aops_batch_rec.aops_batch_id;
         ELSE
            --------------------- 
            -- Submit AOPS Master 
            ---------------------
            lv_batch_submitted := 'Y';

            lt_conc_request_id := FND_REQUEST.submit_request 
                                          (   application => 'XXCNV',
                                              program     => 'XX_CDH_AOPS_CONV_MASTER',
                                              description => NULL,
                                              start_time  => NULL,
                                              sub_request => FALSE, 
                                              argument1   => ln_start_aops_batch,
                                              argument2   => ln_end_aops_batch,
                                              argument3   => p_submit_extract_owb,
                                              argument4   => p_submit_update,
                                              argument5   => p_submit_load_owb,
                                              argument6   => p_submit_bulk,
                                              argument7   => p_process_party_rel,
                                              argument8   => p_process_accounts,
                                              argument9   => p_process_acct_sites,
                                              argument10  => p_process_acct_site_uses,
                                              argument11  => p_process_contacts,
                                              argument12  => p_process_contact_points,
                                              argument13  => p_process_profiles,
                                              argument14  => p_process_bank,
                                              argument15  => p_process_ext_attrib,
                                              argument16  => p_import_run_option,
                                              argument17  => p_run_batch_dedup,
                                              argument18  => p_batch_dedup_rule,
                                              argument19  => p_action_duplicates,
                                              argument20  => p_run_addr_val,
                                              argument21  => p_run_reg_dedup,
                                              argument22  => p_reg_dedup_rule,
                                              argument23  => p_gen_fuz_key
                                          );

            IF lt_conc_request_id = 0 THEN
               x_errbuf  := fnd_message.get;
               x_retcode := 2;
               fnd_file.put_line (fnd_file.log, 'AOPS Conversion Master Program failed to submit: ' || x_errbuf);
               x_errbuf  := 'AOPS Conversion Master Program to submit: ' || x_errbuf;
            ELSE
               fnd_file.put_line (fnd_file.log, ' ');
               fnd_file.put_line (fnd_file.log, 'Submitted AOPS Conversion Master Program : '|| TO_CHAR( lt_conc_request_id ));
               fnd_file.put_line (fnd_file.log, 'Start AOPS Batch Id : '|| ln_start_aops_batch);
               fnd_file.put_line (fnd_file.log, 'End   AOPS Batch Id : '|| ln_end_aops_batch);
               COMMIT;
            END IF;
         END IF;
      END IF;

      
      EXIT;
   END LOOP;
   CLOSE lc_aops_batch_cur;
   
   IF lv_batch_submitted = 'N' AND
      ln_start_aops_batch IS NOT NULL AND
      ln_end_aops_batch   IS NOT NULL THEN
      
      --------------------- 
      -- Submit AOPS Master 
      ---------------------
      lt_conc_request_id := FND_REQUEST.submit_request 
                                          (   application => 'XXCNV',
                                              program     => 'XX_CDH_AOPS_CONV_MASTER',
                                              description => NULL,
                                              start_time  => NULL,
                                              sub_request => FALSE, 
                                              argument1   => ln_start_aops_batch,
                                              argument2   => ln_end_aops_batch,
                                              argument3   => p_submit_extract_owb,
                                              argument4   => p_submit_update,
                                              argument5   => p_submit_load_owb,
                                              argument6   => p_submit_bulk,
                                              argument7   => p_process_party_rel,
                                              argument8   => p_process_accounts,
                                              argument9   => p_process_acct_sites,
                                              argument10  => p_process_acct_site_uses,
                                              argument11  => p_process_contacts,
                                              argument12  => p_process_contact_points,
                                              argument13  => p_process_profiles,
                                              argument14  => p_process_bank,
                                              argument15  => p_process_ext_attrib,
                                              argument16  => p_import_run_option,
                                              argument17  => p_run_batch_dedup,
                                              argument18  => p_batch_dedup_rule,
                                              argument19  => p_action_duplicates,
                                              argument20  => p_run_addr_val,
                                              argument21  => p_run_reg_dedup,
                                              argument22  => p_reg_dedup_rule,
                                              argument23  => p_gen_fuz_key
                                          );


            IF lt_conc_request_id = 0 THEN
               x_errbuf  := fnd_message.get;
               x_retcode := 2;
               fnd_file.put_line (fnd_file.log, 'AOPS Conversion Master Program failed to submit: ' || x_errbuf);
               x_errbuf  := 'AOPS Conversion Master Program failed to submit: ' || x_errbuf;
            ELSE
               fnd_file.put_line (fnd_file.log, ' ');
               fnd_file.put_line (fnd_file.log, 'Submitted AOPS Conversion Master Program : '|| TO_CHAR( lt_conc_request_id ));
               fnd_file.put_line (fnd_file.log, 'Start AOPS Batch Id : '|| ln_start_aops_batch);
               fnd_file.put_line (fnd_file.log, 'End   AOPS Batch Id : '|| ln_end_aops_batch);
               COMMIT;
      END IF;
   
   END IF;
   
   IF ln_counter = 0 THEN
      fnd_file.put_line (fnd_file.log, 'No Eligible Batches were found to submit..');
   END IF;   

EXCEPTION
   WHEN le_skip_process THEN
      NULL;
   WHEN OTHERS THEN
      fnd_file.put_line (fnd_file.log, 'Unexpected Error in proecedure seamless_aops_conversion - Error - '||SQLERRM);
      x_errbuf := 'Unexpected Error in proecedure seamless_aops_conversion - Error - '||SQLERRM;
      x_retcode := 2;

END seamless_aops_conversion;

-- +===================================================================+
-- | Name        :  seamless_conv_other_sources                        |
-- | Description :  This procedure will be registered as a Concurrent  |
-- |                Program and will be look at hz_imp_batch_summary   |
-- |                table and submit all active batches.               |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :  p_message                                          |
-- |                                                                   |
-- | Returns     :  VARCHAR2                                           |
-- |                                                                   |
-- +===================================================================+
PROCEDURE seamless_conv_other_sources
   (   x_errbuf                 OUT VARCHAR2,
       x_retcode                OUT VARCHAR2,
       p_submit_load_owb        IN  VARCHAR2,
       p_submit_bulk            IN  VARCHAR2,
       p_process_party_rel      IN  VARCHAR2,
       p_process_accounts       IN  VARCHAR2,
       p_process_acct_sites     IN  VARCHAR2,
       p_process_acct_site_uses IN  VARCHAR2,
       p_process_contacts       IN  VARCHAR2,
       p_process_contact_points IN  VARCHAR2,
       p_process_profiles       IN  VARCHAR2,
       p_process_bank           IN  VARCHAR2,
       p_process_ext_attrib     IN  VARCHAR2,
       p_import_run_option      IN  VARCHAR2,
       p_run_batch_dedup        IN  VARCHAR2,
       p_batch_dedup_rule       IN  VARCHAR2,
       p_action_duplicates      IN  VARCHAR2,
       p_run_addr_val           IN  VARCHAR2,
       p_run_reg_dedup          IN  VARCHAR2,
       p_reg_dedup_rule         IN  VARCHAR2,
       p_gen_fuz_key            IN  VARCHAR2
   )
IS

CURSOR lc_fetch_active_batch_cur
IS
SELECT batch_id
FROM   hz_imp_batch_summary
WHERE  batch_status = 'ACTIVE';

le_skip_procedure                EXCEPTION;
le_submit_failed                 EXCEPTION;
ln_ebs_batch_id                  NUMBER;
lb_success                       BOOLEAN;
ln_req_id                        NUMBER;

BEGIN

   FOR lc_fetch_active_batch_rec IN lc_fetch_active_batch_cur
   LOOP
      
      ----------------------------------------------------------
      -- Set the context for the request set XX_CDH_CONV_AOPS_RS
      ----------------------------------------------------------
      lb_success := fnd_submit.set_request_set('XXCNV', 'XX_CDH_CONV_SET_OTH_SOURCES');
      
      IF ( lb_success ) THEN
               
          ----------------------------------------------------------------------------------
          -- Submit program OD: CDH OWB Load from Oracle CV to STG which is in stage STAGE10 
          ----------------------------------------------------------------------------------
          
          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_OWB_CVSTG',
                              stage       => 'XX_CDH_OWB_LOAD_CV_STG', 
                              argument1   => lc_fetch_active_batch_rec.batch_id,
                              argument2   => lc_fetch_active_batch_rec.batch_id,
                              argument3   => 50,
                              argument4   => p_submit_load_owb
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;
          
          ----------------------------------------------------------------------------------
          -- Submit program OD: CDH Activate Bulk Batch Program which is in stage STAGE15 
          ----------------------------------------------------------------------------------

          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_ACTIVATE_BULK_BATCH',
                              stage       => 'XX_CDH_ACT_BULK_BATCH', 
                              argument1   => lc_fetch_active_batch_rec.batch_id                          
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;

          -------------------------------------------------------------------------------
          -- Submit program OD: CDH Submit Bulk Import Program which is in stage STAGE20
          -------------------------------------------------------------------------------

          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_SUBMIT_BULK_WRAPPER',
                              stage       => 'XX_CDH_BULK_IMP_WRAPPER', 
                              argument1   => p_submit_bulk,
                              argument2   => lc_fetch_active_batch_rec.batch_id,
                              argument3   => p_import_run_option,
                              argument4   => p_run_batch_dedup  ,
                              argument5   => p_batch_dedup_rule ,
                              argument6   => p_action_duplicates,
                              argument7   => p_run_addr_val     ,
                              argument8   => p_run_reg_dedup    ,
                              argument9   => p_reg_dedup_rule   ,
                              argument10  => p_gen_fuz_key
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;

          --------------------------------------------------------------------------------------
          -- Submit program OD: CDH Customer Account Conversion Program which is in stage STAGE30 
          --------------------------------------------------------------------------------------

          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_CUST_ACCOUNT_CONV',
                              stage       => 'XX_CDH_ACCT_CONV', 
                              argument1   => lc_fetch_active_batch_rec.batch_id,
                              argument2   => p_process_accounts
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;

          --------------------------------------------------------------------------------------
          -- Submit program OD: CDH Party Relationship Conversion which is in stage STAGE30 
          --------------------------------------------------------------------------------------

          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_PARTY_RELATIONSHIP_CONV',
                              stage       => 'XX_CDH_ACCT_CONV', 
                              argument1   => lc_fetch_active_batch_rec.batch_id,
                              argument2   => p_process_party_rel
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;

          ---------------------------------------------------------------------------------------------
          -- Submit program OD: CDH Customer Account Site Conversion Program which is in stage STAGE40 
          ---------------------------------------------------------------------------------------------
          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_CUST_ACCT_SITE_CONV',
                              stage       => 'XX_CDH_ACCT_SITE_CONV', 
                              argument1   => lc_fetch_active_batch_rec.batch_id,
                              argument2   => p_process_acct_sites
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;

          --------------------------------------------------------------------------------------------------
          -- Submit program OD: CDH Customer Account Site Uses Conversion Program which is in stage STAGE50 
          --------------------------------------------------------------------------------------------------
          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_CUST_ACCT_SITE_USE_CONV',
                              stage       => 'XX_CDH_CONV_OTH_ENT', 
                              argument1   => lc_fetch_active_batch_rec.batch_id,
                              argument2   => p_process_acct_site_uses
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;

          --------------------------------------------------------------------------------------------------
          -- Submit program OD: CDH Customer Contact Points Conversion Program which is in stage STAGE50 
          --------------------------------------------------------------------------------------------------
          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_CUST_CONTACT_POINT_CONV',
                              stage       => 'XX_CDH_CONV_OTH_ENT', 
                              argument1   => lc_fetch_active_batch_rec.batch_id,
                              argument2   => p_process_contact_points
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;

          --------------------------------------------------------------------------------------------------
          -- Submit program OD: CDH Customer Contact Conversion Program which is in stage STAGE50 
          --------------------------------------------------------------------------------------------------
          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_CUST_CONTACT_CONV',
                              stage       => 'XX_CDH_CONV_OTH_ENT', 
                              argument1   => lc_fetch_active_batch_rec.batch_id,
                              argument2   => p_process_contacts
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;

          --------------------------------------------------------------------------------------------------
          -- Submit program OD: CDH Customer Profile Conversion Program which is in stage STAGE50 
          --------------------------------------------------------------------------------------------------
          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_CUST_PROFILE_CONV',
                              stage       => 'XX_CDH_CONV_OTH_ENT', 
                              argument1   => lc_fetch_active_batch_rec.batch_id,
                              argument2   => p_process_profiles
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;

          --------------------------------------------------------------------------------------------------
          -- Submit program OD: CDH Customer Bank  Payment Conversion Program which is in stage STAGE50 
          --------------------------------------------------------------------------------------------------
          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_CUST_BANK_PAYMETH_CONV',
                              stage       => 'XX_CDH_CONV_OTH_ENT', 
                              argument1   => lc_fetch_active_batch_rec.batch_id,
                              argument2   => p_process_bank
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;

          --------------------------------------------------------------------------------------------------
          -- Submit program OD: CDH Customer Extensible Attributes Conversion Program which is in stage STAGE50 
          --------------------------------------------------------------------------------------------------
          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_CUST_EXT_ATTRIB_CONV',
                              stage       => 'XX_CDH_CONV_OTH_ENT', 
                              argument1   => lc_fetch_active_batch_rec.batch_id,
                              argument2   => p_process_ext_attrib
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;          

          -------------------------------------------------------------------------------------------------------------
          -- Submit program OD: CDH Contact Role Responsibility Conversion Program which is in stage STAGE60 
          -------------------------------------------------------------------------------------------------------------
          lb_success := fnd_submit.submit_program
                           (  application => 'XXCNV',
                              program     => 'XX_CDH_CONTACT_ROLE_RESP',
                              stage       => 'XX_CDH_CONT_ROLE_RESP', 
                              argument1   => lc_fetch_active_batch_rec.batch_id,
                              argument2   => p_process_contacts
                           );   
          IF ( NOT lb_success ) THEN
             RAISE le_submit_failed;
          END IF;

          ------------------------------
          -- Submit the Request Set 
          ------------------------------
          ln_req_id := fnd_submit.submit_set(null,FALSE);

          IF ln_req_id = 0 THEN
             x_errbuf  := fnd_message.get;
             x_retcode := 2;
             fnd_file.put_line (fnd_file.log, 'Error while submitting Request Set - '||x_errbuf);
          ELSE
             fnd_file.put_line (fnd_file.log, ' ');
             fnd_file.put_line (fnd_file.log, '-------------------------------------------------------- ');
             fnd_file.put_line (fnd_file.log, 'Batch ID: '||lc_fetch_active_batch_rec.batch_id);
             fnd_file.put_line (fnd_file.log, 'Request Set submitted with request id: '|| TO_CHAR( ln_req_id ));
             COMMIT;
          END IF;
       END IF;  
   
   END LOOP;


EXCEPTION
   WHEN le_submit_failed THEN
      fnd_file.put_line (fnd_file.log, 'Error while submitting request Set - '||fnd_message.get); 
      x_errbuf := 'Error while submitting request Set - '||fnd_message.get;
      x_retcode := 2;
   WHEN le_skip_procedure THEN
      NULL;
   WHEN OTHERS THEN
      fnd_file.put_line (fnd_file.log, 'Unexpected Error in proecedure submit_conv_request_set - Error - '||SQLERRM);
      x_errbuf := 'Unexpected Error in proecedure submit_conv_request_set - Error - '||SQLERRM;
      x_retcode := 2;

END seamless_conv_other_sources;

END XX_CDH_CONV_MASTER_PKG;
/
SHOW ERRORS;
