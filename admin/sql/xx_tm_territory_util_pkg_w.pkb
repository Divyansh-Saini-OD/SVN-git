REM $Header: $
REM +======================================================================+
REM | Copyright (c) 2007 Oracle Corporation Redwood Shores, California, USA|
REM |                       All rights reserved.                           |
REM +======================================================================+
REM NAME
REM   xx_tm_territory_util_pkg_w.pkb
REM
REM DESCRIPTION
REM
REM   Rosetta-generated file.  Modification is not recommended.
REM
REM NOTES
REM   generated by Rosetta Version 2.05
REM
REM +======================================================================+
REM
REM dbdrv: sql ~PROD ~PATH ~FILE  none none none package &phase=plb \
REM dbdrv:     checkfile:~PROD:~PATH:~FILE 

SET VERIFY OFF
WHENEVER SQLERROR EXIT FAILURE ROLLBACK;
WHENEVER OSERROR EXIT FAILURE ROLLBACK;

create or replace package body xx_tm_territory_util_pkg_w as
  /* $Header: $ */
  rosetta_g_mistake_date date := to_date('01/01/+4713', 'MM/DD/SYYYY');
  rosetta_g_miss_date date := to_date('01/01/-4712', 'MM/DD/SYYYY');

  -- this is to workaround the JDBC bug regarding IN DATE of value GMiss
  function rosetta_g_miss_date_in_map(d date) return date as
  begin
    if d = rosetta_g_mistake_date then return fnd_api.g_miss_date; end if;
    return d;
  end;

  procedure rosetta_table_copy_in_p2(t out nocopy xx_tm_territory_util_pkg.nam_terr_lookup_out_tbl_type, a0 JTF_NUMBER_TABLE
    , a1 JTF_NUMBER_TABLE
    , a2 JTF_NUMBER_TABLE
    , a3 JTF_NUMBER_TABLE
    , a4 JTF_VARCHAR2_TABLE_100
    , a5 JTF_NUMBER_TABLE
    ) as
    ddindx binary_integer; indx binary_integer;
  begin
  if a0 is not null and a0.count > 0 then
      if a0.count > 0 then
        indx := a0.first;
        ddindx := 1;
        while true loop
          t(ddindx).nam_terr_id := a0(indx);
          t(ddindx).resource_id := a1(indx);
          t(ddindx).role_id := a2(indx);
          t(ddindx).rsc_group_id := a3(indx);
          t(ddindx).entity_type := a4(indx);
          t(ddindx).entity_id := a5(indx);
          ddindx := ddindx+1;
          if a0.last =indx
            then exit;
          end if;
          indx := a0.next(indx);
        end loop;
      end if;
   end if;
  end rosetta_table_copy_in_p2;
  procedure rosetta_table_copy_out_p2(t xx_tm_territory_util_pkg.nam_terr_lookup_out_tbl_type, a0 out nocopy JTF_NUMBER_TABLE
    , a1 out nocopy JTF_NUMBER_TABLE
    , a2 out nocopy JTF_NUMBER_TABLE
    , a3 out nocopy JTF_NUMBER_TABLE
    , a4 out nocopy JTF_VARCHAR2_TABLE_100
    , a5 out nocopy JTF_NUMBER_TABLE
    ) as
    ddindx binary_integer; indx binary_integer;
  begin
  if t is null or t.count = 0 then
    a0 := JTF_NUMBER_TABLE();
    a1 := JTF_NUMBER_TABLE();
    a2 := JTF_NUMBER_TABLE();
    a3 := JTF_NUMBER_TABLE();
    a4 := JTF_VARCHAR2_TABLE_100();
    a5 := JTF_NUMBER_TABLE();
  else
      a0 := JTF_NUMBER_TABLE();
      a1 := JTF_NUMBER_TABLE();
      a2 := JTF_NUMBER_TABLE();
      a3 := JTF_NUMBER_TABLE();
      a4 := JTF_VARCHAR2_TABLE_100();
      a5 := JTF_NUMBER_TABLE();
      if t.count > 0 then
        a0.extend(t.count);
        a1.extend(t.count);
        a2.extend(t.count);
        a3.extend(t.count);
        a4.extend(t.count);
        a5.extend(t.count);
        ddindx := t.first;
        indx := 1;
        while true loop
          a0(indx) := t(ddindx).nam_terr_id;
          a1(indx) := t(ddindx).resource_id;
          a2(indx) := t(ddindx).role_id;
          a3(indx) := t(ddindx).rsc_group_id;
          a4(indx) := t(ddindx).entity_type;
          a5(indx) := t(ddindx).entity_id;
          indx := indx+1;
          if t.last =ddindx
            then exit;
          end if;
          ddindx := t.next(ddindx);
        end loop;
      end if;
   end if;
  end rosetta_table_copy_out_p2;

  procedure nam_terr_lookup(p_api_version_number  NUMBER
    , p_nam_terr_id  NUMBER
    , p_resource_id  NUMBER
    , p_res_role_id  NUMBER
    , p_res_group_id  NUMBER
    , p_entity_type  VARCHAR2
    , p_entity_id  NUMBER
    , p_as_of_date  date 
    , p8_a0 out nocopy JTF_NUMBER_TABLE
    , p8_a1 out nocopy JTF_NUMBER_TABLE
    , p8_a2 out nocopy JTF_NUMBER_TABLE
    , p8_a3 out nocopy JTF_NUMBER_TABLE
    , p8_a4 out nocopy JTF_VARCHAR2_TABLE_100
    , p8_a5 out nocopy JTF_NUMBER_TABLE
    , x_return_status out nocopy  VARCHAR2
    , x_message_data out nocopy  VARCHAR2
  )

  as 
    ddp_as_of_date date;
    --ddx_nam_terr_lookup_out_tbl_type xx_tm_territory_util_pkg.nam_terr_lookup_out_tbl_type;
    ddx_nam_terr_lookup_out_tbl_t xx_tm_territory_util_pkg.nam_terr_lookup_out_tbl_type;
    ddindx binary_integer; indx binary_integer;
  begin

    -- copy data to the local IN or IN-OUT args, if any







    ddp_as_of_date := rosetta_g_miss_date_in_map(p_as_of_date);




    -- here's the delegated call to the old PL/SQL routine
  --  xx_tm_territory_util_pkg.nam_terr_lookup(p_api_version_number,
  --    p_nam_terr_id,
 --     p_resource_id,
  --    p_res_role_id,
  --    p_res_group_id,
  --    p_entity_type,
   --   p_entity_id,
  --    ddp_as_of_date,
      --ddx_nam_terr_lookup_out_tbl_type,
   --   ddx_nam_terr_lookup_out_tbl_t,
   --   x_return_status,
  --    x_message_data);

       -- here's the delegated call to the old PL/SQL routine
    xx_tm_territory_util_pkg.nam_terr_lookup(p_api_version_number,
      null,
      null,
      null,
      null,
      p_entity_type,
      p_entity_id,
      sysdate,
      --ddx_nam_terr_lookup_out_tbl_type,
      ddx_nam_terr_lookup_out_tbl_t,
      x_return_status,
      x_message_data);
  
    -- copy data back from the local variables to OUT or IN-OUT args, if any







    --xx_tm_territory_util_pkg_w.rosetta_table_copy_out_p2(ddx_nam_terr_lookup_out_tbl_type, p8_a0
    xx_tm_territory_util_pkg_w.rosetta_table_copy_out_p2(ddx_nam_terr_lookup_out_tbl_t, p8_a0
      , p8_a1
      , p8_a2
      , p8_a3
      , p8_a4
      , p8_a5
      );


  end;

end xx_tm_territory_util_pkg_w;
/
--show err;
commit;
exit;
