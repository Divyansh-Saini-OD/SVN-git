SET VERIFY OFF;
WHENEVER SQLERROR CONTINUE;
WHENEVER OSERROR EXIT FAILURE ROLLBACK;

CREATE OR REPLACE PACKAGE BODY XX_CDH_CUST_BANK_PAYMENT_PKG
-- +===================================================================+
-- |                  Office Depot - Project Simplify                  |
-- |                Oracle NAIO Consulting Organization                |
-- +===================================================================+
-- | Name        :  XX_CDH_CUST_BANK_PAYMENT_PKG.pkb                   |
-- | Description :  CDH Customer Conversion Create Contact Pkg Body    |
-- |                                                                   |
-- |Change Record:                                                     |
-- |===============                                                    |
-- |Version   Date        Author             Remarks                   |
-- |========  =========== ================== ==========================|
-- |DRAFT 1a  10-Apr-2007 Jeevan Babu        Initial draft version     |
-- |Draft 1b  03-Jul-2007 Ambarish Mukherjee Modified for org_id       |
-- |                                         changes                   |  
-- |Draft 1c  08-Aug-2007 Ambarish Mukherjee Fixed Bug                 |
-- |1.0       27-Mar-2008 Ambarish Mukherjee If Bank Exists, interface |
-- |                                         status will be 5          |
-- |1.1       28-Jul-2008 Ambarish Mukherjee Changed interface status  |
-- |                                         to 5 if bank acct exists  |
-- |1.2       28-JUL-2013 Deepak V           I0024 - Changes for R12   |
-- |                                         Upgrade retrofit.         |
-- +===================================================================+
AS
gt_request_id                fnd_concurrent_requests.request_id%TYPE
                             := fnd_global.conc_request_id();

gt_program_id                fnd_concurrent_requests.CONCURRENT_PROGRAM_ID%TYPE
                             := fnd_global.conc_program_id();   

gt_prg_appl_id               fnd_concurrent_requests.program_application_id%TYPE;
                                  
gn_batch_id                  NUMBER;
gn_bulk_fetch_limit          NUMBER               := XX_CDH_CONV_MASTER_PKG.g_bulk_fetch_limit;

-- +===================================================================+
-- | Name        :  BANK_PAYMENT_MAIN                                  |
-- | Description :  This procedure is invoked from the CDH Conversion  |
-- |                Master Concurrent Request.This would submit Child  |
-- |                programs based on batch_ids generated by ETL       |
-- |                                                                   |
-- |                                                                   |
-- | Parameters  :  Batch_id                                           |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE bank_payment_main
      (  x_errbuf            OUT VARCHAR2,
         x_retcode           OUT VARCHAR2,
         p_batch_id          IN  NUMBER,
         p_process_yn        IN  VARCHAR2
      )

IS

CURSOR c_prg_application_id (p_concurr_id NUMBER)
IS 
SELECT application_id 
FROM   fnd_concurrent_programs
WHERE  concurrent_program_id = p_concurr_id;

ln_rows                   NATURAL;
lc_errbuf                 VARCHAR2(500);
lc_retcode                VARCHAR2(100);
le_skip_procedure         EXCEPTION;

BEGIN
   IF p_process_yn = 'N' THEN
      RAISE le_skip_procedure;
   END IF;   
   gn_batch_id := p_batch_id;
   --Retrieving Application Id 
   OPEN  c_prg_application_id(gt_program_id);
   FETCH c_prg_application_id INTO gt_prg_appl_id;
   CLOSE c_prg_application_id;
   
   ---------------------------------
   -- Calling Bank Branch Procedure
   ---------------------------------
   
   create_bank_branch
      (  x_errbuf,
         x_retcode,
         p_batch_id
      );
   
   ---------------------------------------
   -- Calling Bank and Bank Use Procedure
   ---------------------------------------      
   create_bank_bankuse
      (  x_errbuf,
         x_retcode,
         p_batch_id
      );
	
   ------------------------------------
   -- Calling Payment Method Procedure
   ------------------------------------
   create_payment
      (  x_errbuf,
         x_retcode,
         p_batch_id
      );

EXCEPTION
   WHEN le_skip_procedure THEN 
      x_retcode := 0;
      fnd_file.put_line (fnd_file.log,'Processing was skipped!!');
   WHEN OTHERS THEN
      x_errbuf :='Others Exception in Bank_Payment_Main procedure '||SQLERRM;
      x_retcode:='2';
END bank_payment_main;

-- +===================================================================+
-- | Name        :  CREATE_BANK_BANKUSE                                |
-- | Description :  This procedure is create Bank Account              |
-- |                   and Bank Account Use for CDH                    |
-- |                                                                   |
-- | Parameters  :  p_batch_id                                         |
-- |                   Payment method records are retrieved based on   |
-- |                   the batch_id                                    |
-- |                                                                   |
-- |                                                                   |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE create_bank_bankuse
      (  x_errbuf            OUT VARCHAR2,
         x_retcode           OUT VARCHAR2,
         p_batch_id          IN  NUMBER
      )
IS
lc_errbuf                     VARCHAR2(500);
lc_retcode                    VARCHAR2(100);
ln_conversion_id              NUMBER;
--Cursor to retrieve bank information from the staging table
CURSOR c_xxod_customer_bank_stg(cp_batch_id NUMBER)
IS 
SELECT * 
FROM   xxod_hz_imp_customer_banks_stg
WHERE  batch_id = cp_batch_id
--AND    org_id = FND_GLOBAL.org_id      -- Added by Ambarish --Commented for r12 retrofit
AND    interface_status IN ('1','4','6');

--Cursor to retrieve bank information from the staging table
CURSOR c_xxod_cust_bank_use_stg(cp_batch_id NUMBER)
IS 
SELECT * 
FROM   xxod_hz_imp_customer_banks_stg
WHERE  batch_id = cp_batch_id
AND    org_id = FND_GLOBAL.org_id      -- Added by Ambarish
AND    bank_use_interface_status IN ('1','4','6');


-- Bank Account validated with Branch information
CURSOR c_bank_branches 
   (  p_bank_name         VARCHAR2, 
      p_bank_branch_name  VARCHAR2,
      p_bank_number       VARCHAR2,
      p_bank_num          VARCHAR2
   )
IS 
/*Query as per 11i
SELECT 1 
FROM   ap_bank_branches
WHERE  (( bank_name = p_bank_name AND bank_branch_name = p_bank_branch_name) OR    
        ( NVL(bank_number,'0') = NVL(p_bank_number,'0') AND NVL(bank_num,'0') = NVL(p_bank_num,'0')));
*/		
		
/*Cursor Query changed for r12 retrofit */
SELECT 1 
FROM   ce_bank_branches_v
WHERE  (( bank_name = p_bank_name AND bank_branch_name = p_bank_branch_name) OR    
        ( NVL(bank_number,'0') = NVL(p_bank_number,'0') AND NVL(branch_number,'0') = NVL(p_bank_num,'0')));

-- Bank Account validated with self inner query
CURSOR c_bank_branches_valid1 (p_record_id NUMBER)
IS 
/* Query as per 11i
SELECT 1
FROM   ap_bank_branches   bb,
       xxod_hz_imp_customer_banks_stg cbi
WHERE  cbi.interface_status in ('1','4','6')
AND    cbi.org_id            = FND_GLOBAL.org_id 
AND    cbi.record_id         = p_record_id
    --AND cbi.bank_name         = bb.bank_name
    --AND cbi.bank_branch_name  = bb.bank_branch_name       
AND    (( cbi.bank_name = bb.bank_name AND cbi.bank_branch_name = bb.bank_branch_name) OR    
        ( NVL(cbi.bank_number,'0') = NVL(bb.bank_number,'0') AND NVL(cbi.bank_num,'0') = NVL(bb.bank_num,'0')))
AND    cbi.ROWID  = (  SELECT MIN(cbi2.ROWID)
                       FROM   xxod_hz_imp_customer_banks_stg cbi2
                       WHERE  cbi2.bank_name                  = cbi.bank_name
                       AND    cbi2.org_id                     = FND_GLOBAL.org_id        -- Added by Ambarish
                       AND    cbi2.batch_id                   = cbi.batch_id             -- Added by Ambarish 
                       AND    cbi2.bank_branch_name           = cbi.bank_branch_name 
                       AND    cbi2.bank_account_num           = cbi.bank_account_num 
                       AND    cbi2.bank_account_currency_code = cbi.bank_account_currency_code
                       AND    cbi2.interface_status          IN ('1','4','6'));
*/
					   
/* Cursor query changed for r12 retrofit */
SELECT 1
FROM   ce_bank_branches_v   bb,
       xxod_hz_imp_customer_banks_stg cbi
WHERE  cbi.interface_status in ('1','4','6')
AND    cbi.record_id         = p_record_id
    --AND cbi.bank_name         = bb.bank_name
    --AND cbi.bank_branch_name  = bb.bank_branch_name       
AND    (( cbi.bank_name = bb.bank_name AND cbi.bank_branch_name = bb.bank_branch_name) OR    
        ( NVL(cbi.bank_number,'0') = NVL(bb.bank_number,'0') AND NVL(cbi.bank_num,'0') = NVL(bb.branch_number,'0')))
AND    cbi.ROWID  = (  SELECT MIN(cbi2.ROWID)
                       FROM   xxod_hz_imp_customer_banks_stg cbi2
                       WHERE  cbi2.bank_name                  = cbi.bank_name                       
                       AND    cbi2.batch_id                   = cbi.batch_id             -- Added by Ambarish 
                       AND    cbi2.bank_branch_name           = cbi.bank_branch_name 
                       AND    cbi2.bank_account_num           = cbi.bank_account_num 
                       AND    cbi2.bank_account_currency_code = cbi.bank_account_currency_code
                       AND    cbi2.interface_status          IN ('1','4','6'));

-- Complete validation of the Bank Account information                             
CURSOR c_bank_branches_valid2 (p_record_id NUMBER )
IS 

/* Query as per 11i 
SELECT 1
FROM   ap_bank_branches   bb,
       xxod_hz_imp_customer_banks_stg cbi
WHERE  cbi.interface_status in ('1','4','6')
AND    cbi.record_id         = p_record_id
AND    cbi.org_id            = FND_GLOBAL.org_id  
AND    cbi.batch_id          = p_batch_id         
--AND    cbi.bank_name         = bb.bank_name
--AND    cbi.bank_branch_name  = bb.bank_branch_name       
AND (( cbi.bank_name = bb.bank_name AND cbi.bank_branch_name = bb.bank_branch_name) OR    
     ( NVL(cbi.bank_number,'0') = NVL(bb.bank_number,'0') AND NVL(cbi.bank_num,'0') = NVL(bb.bank_num,'0')))
AND    cbi.ROWID = ( SELECT MIN(cbi2.ROWID)
                     FROM   xxod_hz_imp_customer_banks_stg cbi2
                     WHERE  cbi2.bank_name                  = cbi.bank_name
                     AND    cbi2.org_id                     = FND_GLOBAL.org_id      -- Added by Ambarish
                     AND    cbi2.batch_id                   = cbi.batch_id             -- Added by Ambarish 
                     AND    cbi2.bank_branch_name           = cbi.bank_branch_name 
                     AND    cbi2.bank_account_num           = cbi.bank_account_num 
                     AND    cbi2.bank_account_currency_code = cbi.bank_account_currency_code
                     AND    cbi2.interface_status          IN ('1','4','6'))
AND    NOT EXISTS ( SELECT 'x'
                    FROM   ap_bank_accounts bac
                    WHERE  bac.bank_branch_id   = bb.bank_branch_id
                    AND    bac.bank_account_num = cbi.bank_account_num
                    AND    bac.org_id           = FND_GLOBAL.org_id      -- Added by Ambarish
                    AND    bac.account_type     = 'EXTERNAL' 
                    AND    bac.currency_code    = cbi.bank_account_currency_code);  
*/
					
/* Cursor query changed for r12 retrofit */
SELECT 1
FROM   ce_bank_branches_v   bb,
       xxod_hz_imp_customer_banks_stg cbi
WHERE  cbi.interface_status in ('1','4','6')
AND    cbi.record_id         = p_record_id
AND    cbi.batch_id          = p_batch_id               
AND (( cbi.bank_name = bb.bank_name AND cbi.bank_branch_name = bb.bank_branch_name) OR    
     ( NVL(cbi.bank_number,'0') = NVL(bb.bank_number,'0') AND NVL(cbi.bank_num,'0') = NVL(bb.branch_number,'0')))
AND    cbi.ROWID = ( SELECT MIN(cbi2.ROWID)
                     FROM   xxod_hz_imp_customer_banks_stg cbi2
                     WHERE  cbi2.bank_name                  = cbi.bank_name                     
                     AND    cbi2.batch_id                   = cbi.batch_id             -- Added by Ambarish 
                     AND    cbi2.bank_branch_name           = cbi.bank_branch_name 
                     AND    cbi2.bank_account_num           = cbi.bank_account_num 
                     AND    cbi2.bank_account_currency_code = cbi.bank_account_currency_code
                     AND    cbi2.interface_status          IN ('1','4','6'))
AND    NOT EXISTS ( SELECT 'x'
                    FROM   iby_ext_bank_accounts bac
                    WHERE  bac.branch_id   = bb.branch_party_id
                    AND    bac.bank_account_num = cbi.bank_account_num
					AND    bac.currency_code    = cbi.bank_account_currency_code);                                

-- Bank Account Uses Validation Cursors
-- Account Information is validated with
-- hz_cust_accounts via orig_system_reference
CURSOR c_account(p_orig_system_reference VARCHAR2)
IS 
SELECT 1 
FROM   hz_cust_accounts
WHERE  orig_system_reference = p_orig_system_reference;

-- Bank Account information is valided 
-- with ap_bank_branches and ap_bank_accounts

CURSOR c_bank_account(p_bank_account_currency_code VARCHAR2,
                      p_bank_account_num           VARCHAR2,
                      p_bank_name                  VARCHAR2, 
                      p_bank_branch_name           VARCHAR2,
                      p_bank_number                VARCHAR2,
                      p_bank_num                   VARCHAR2)
IS
/* Query as per 11i
SELECT 1 
FROM   ap_bank_branches           abb,
       ap_bank_accounts           aba
WHERE  aba.bank_account_num       = p_bank_account_num
AND    aba.bank_branch_id         = abb.bank_branch_id
AND    aba.account_type           = 'EXTERNAL' 
--AND    abb.bank_name              = p_bank_name
--AND    abb.bank_branch_name       = p_bank_branch_name
AND    (( abb.bank_name = p_bank_name AND abb.bank_branch_name = p_bank_branch_name) OR    
        ( NVL(abb.bank_number,'0') = NVL(p_bank_number,'0') AND NVL(abb.bank_num,'0') = NVL(p_bank_num,'0')))
AND    aba.currency_code          = p_bank_account_currency_code;
*/

/* Cursor query changed for r12 retrofit */
SELECT 1 
FROM   ce_bank_branches_v           abb,
       iby_ext_bank_accounts        aba
WHERE  aba.bank_account_num       = p_bank_account_num
AND    aba.branch_id              = abb.branch_party_id
AND    (( abb.bank_name = p_bank_name AND abb.bank_branch_name = p_bank_branch_name) OR    
        ( NVL(abb.bank_number,'0') = NVL(p_bank_number,'0') AND NVL(abb.branch_number,'0') = NVL(p_bank_num,'0')))
AND    aba.currency_code          = p_bank_account_currency_code;
        
-- Bank Account is validates customer site information if the 
-- ORIG_SYSTEM_ADDRESS_REF column is not null

CURSOR c_bank_use_site (p_orig_system_reference VARCHAR2)
IS
SELECT 1
FROM   hz_cust_site_uses          rsu,
       hz_cust_acct_sites         ra
WHERE  ra.orig_system_reference   = p_orig_system_reference
AND    ra.cust_acct_site_id       = rsu.cust_acct_site_id(+)
AND    rsu.site_use_code(+)       = 'BILL_TO'
AND    rsu.status(+)              = 'A';       
        
-- Complete cursor validation for the Bank Use

CURSOR c_bank_use_valid (p_record_id NUMBER) 
IS 
SELECT 1 
FROM   hz_cust_accounts            rc,
       ap_bank_branches            abb,
       ap_bank_accounts            aba,
--    hz_cust_site_uses           rsu,
--    hz_cust_acct_sites          ra,
       xxod_hz_imp_customer_banks_stg i
WHERE  i.bank_use_interface_status    IN ('1','4','6')
AND    i.org_id                        = FND_GLOBAL.org_id     
AND    i.record_id                     = p_record_id
AND    i.account_orig_system_reference = rc.orig_system_reference
--    AND i.orig_system_address_ref    = ra.orig_system_reference(+)
AND    i.bank_account_num              = aba.bank_account_num
AND    aba.bank_branch_id              = abb.bank_branch_id
AND    aba.account_type                = 'EXTERNAL'
AND    aba.currency_code               =  i.bank_account_currency_code 
--AND    i.bank_branch_name              = abb.bank_branch_name
--AND    i.bank_name                     = abb.bank_name
AND (( i.bank_name = abb.bank_name AND i.bank_branch_name = abb.bank_branch_name) OR    
     ( NVL(i.bank_number,'0') = NVL(abb.bank_number,'0') AND NVL(i.bank_num,'0') = NVL(abb.bank_num,'0')))
--    AND ra.cust_acct_site_id       = rsu.cust_acct_site_id(+)
--    AND rsu.site_use_code(+)       = 'BILL_TO'
--    AND rsu.status(+)              = 'A'
;

CURSOR c_is_bank_use_valid (P_RECORD_ID NUMBER)
IS
/* Query as per 11i
SELECT 1 
FROM   hz_cust_accounts            rc,
       ce_bank_branches            abb,
       ap_bank_accounts            aba,
       xxod_hz_imp_customer_banks_stg i
WHERE NVL(i.bank_use_interface_status,'1') IN ('1','4','6')
AND   i.record_id                     = P_RECORD_ID  
AND   i.org_id                        = FND_GLOBAL.org_id      -- Added by Ambarish
AND   i.account_orig_system_reference = rc.orig_system_reference
AND   i.bank_account_num              = aba.bank_account_num
AND   aba.bank_branch_id              = abb.bank_branch_id*/
--AND   aba.account_type                = 'EXTERNAL'              /* 804180 */
--AND   aba.currency_code               =  i.bank_account_currency_code /* 939154 */
--AND   i.bank_branch_name              = abb.bank_branch_name
--AND   i.bank_name                     = abb.bank_name
/*AND (( i.bank_name = abb.bank_name AND i.bank_branch_name = abb.bank_branch_name) OR    
     ( NVL(i.bank_number,'0') = NVL(abb.bank_number,'0') AND NVL(i.bank_num,'0') = NVL(abb.bank_num,'0')))
AND   NOT EXISTS ( SELECT 1 
                   FROM   ap_bank_account_uses
                   WHERE  external_bank_account_id = aba.bank_account_id
                   AND    customer_id = rc.cust_account_id
                 );*/

/* Changed query as per r12 retrofit */
SELECT 1 
FROM   hz_cust_accounts            rc,
       ce_bank_branches_v            abb,
       iby_ext_bank_accounts            aba,
       xxod_hz_imp_customer_banks_stg i
WHERE NVL(i.bank_use_interface_status,'1') IN ('1','4','6')
AND   i.record_id                     = P_RECORD_ID  
AND   i.org_id                        = FND_GLOBAL.org_id      -- Added by Ambarish
AND   i.account_orig_system_reference = rc.orig_system_reference
AND   i.bank_account_num              = aba.bank_account_num
AND   aba.branch_id                   = abb.branch_party_id
--AND   aba.account_type                = 'EXTERNAL'              /* 804180 */
--AND   aba.currency_code               =  i.bank_account_currency_code /* 939154 */
--AND   i.bank_branch_name              = abb.bank_branch_name
--AND   i.bank_name                     = abb.bank_name
AND (( i.bank_name = abb.bank_name AND i.bank_branch_name = abb.bank_branch_name) OR    
     ( NVL(i.bank_number,'0') = NVL(abb.bank_number,'0') AND NVL(i.bank_num,'0') = NVL(abb.branch_number,'0')))
AND   NOT EXISTS ( SELECT 1 
                   FROM   CE_BANK_ACCT_USES_ALL
                   WHERE  bank_account_id = aba.ext_bank_account_id
                 );				 
				 
				 
				 
TYPE l_xxod_customer_bank_stg IS TABLE OF C_XXOD_CUSTOMER_BANK_STG%ROWTYPE INDEX BY BINARY_INTEGER;
TYPE xx_upd_interface_table   IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE xx_upd_record_table      IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

lx_od_customer_bank_stg         l_xxod_customer_bank_stg;
lx_od_cust_bank_use_stg         l_xxod_customer_bank_stg;
lc_bank_acct_record_table       xx_upd_record_table;
lc_bank_acct_interface_table    xx_upd_interface_table;
lc_bank_use_record_table        xx_upd_record_table;
lc_bank_use_interface_table     xx_upd_interface_table;
l_record_count                  NUMBER;
l_sucess_count                  NUMBER;
l_failed_count                  NUMBER;
l_db_count                      NUMBER;
ln_bulk_limit                   NUMBER := XX_CDH_CONV_MASTER_PKG.g_bulk_fetch_limit;

/* Added for r12 retrofit */
l_ext_bankacct                  IBY_EXT_BANKACCT_PUB.ExtBankAcct_rec_type;
l_branch_id                     NUMBER;
l_bank_id                       NUMBER;
l_skip_acct_creation			NUMBER;
l_account_id                    NUMBER;
l_end_date						DATE;
l_start_date					DATE;
l_response						IBY_FNDCPT_COMMON_PUB.Result_rec_type;
l_return_status                 VARCHAR2(2000);
l_msg_count						NUMBER(5);
l_msg_data                      VARCHAR2(2000);
BEGIN 

-- Opening Bank Account Cursor to fetch all the record 
-- to pl/sql table via bulk collect
   Log_Debug_Msg('==================       BEGIN       =================');
   Log_Debug_Msg('===============  Create Bank Account   ===============');

ln_conversion_id:=00244.1;
l_sucess_count:=0;
l_failed_count:=0;

--Retrieving All Bank Account records for given Batch_id   
OPEN c_xxod_customer_bank_stg(p_batch_id);
LOOP
 FETCH c_xxod_customer_bank_stg BULK COLLECT INTO lx_od_customer_bank_stg limit ln_bulk_limit;
 
 IF lx_od_customer_bank_stg.COUNT =0 THEN 
  Log_Debug_Msg('No records exist in the staging table for batch_id - '||p_batch_id||' for Bank Account');
    
 Elsif lx_od_customer_bank_stg.COUNT >0 THEN 
  FOR I IN lx_od_customer_bank_stg.FIRST .. lx_od_customer_bank_stg.LAST 
  LOOP
  --Log_Debug_Msg('Bank Account: Record_id :'||lx_od_customer_bank_stg(i).record_id||' '||lx_od_customer_bank_stg.last);
  lx_od_customer_bank_stg(i).interface_status :='0';
  L_RECORD_COUNT :=NULL;
  
  -- Bank Account Validation cursor to validate the data 
  -- Based on the output interface_status column is updated accordingly
  IF lx_od_customer_bank_stg(i).bank_name is null THEN 
    Log_Debug_Msg('Bank Account: Bank Name is null');
    lx_od_customer_bank_stg(i).interface_status :='6';
    log_exception
            (
            p_conversion_id          =>ln_conversion_id
            ,p_record_control_id      =>lx_od_customer_bank_stg(i).record_id
            ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
            ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
            ,p_staging_column_name    =>'RECORD_ID'
            ,p_staging_column_value   =>lx_od_customer_bank_stg(I).record_id
            ,p_batch_id               =>gn_batch_id
            ,p_exception_log          =>'Bank Account: Bank Name is null'
            ,p_oracle_error_msg       =>SQLERRM
            ,p_source_system_code     =>lx_od_customer_bank_stg(I).party_orig_system
            ,p_source_system_ref      =>lx_od_customer_bank_stg(I).bank_name
            ,p_oracle_error_code      =>SQLCODE             
            );      

  END IF;
  
  IF lx_od_customer_bank_stg(i).bank_branch_name is null THEN 
    Log_Debug_Msg('Bank Account: Bank Branch Name is null');
    lx_od_customer_bank_stg(i).interface_status :='6';
    log_exception
            (
            p_conversion_id          =>ln_conversion_id
            ,p_record_control_id      =>lx_od_customer_bank_stg(i).record_id
            ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
            ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
            ,p_staging_column_name    =>'RECORD_ID'
            ,p_staging_column_value   =>lx_od_customer_bank_stg(I).record_id
            ,p_batch_id               =>gn_batch_id
            ,p_exception_log          =>'Bank Account: Bank Branch Name is null'
            ,p_oracle_error_msg       =>SQLERRM
            ,p_source_system_code     =>lx_od_customer_bank_stg(I).party_orig_system
            ,p_source_system_ref      =>lx_od_customer_bank_stg(I).bank_name
            ,p_oracle_error_code      =>SQLCODE             
            );      

  END IF;
  IF lx_od_customer_bank_stg(i).bank_account_currency_code is null THEN 
    Log_Debug_Msg('Bank Account: Bank Account Currency Code is null');
    lx_od_customer_bank_stg(i).interface_status :='6';
    log_exception
            (
            p_conversion_id          =>ln_conversion_id
            ,p_record_control_id      =>lx_od_customer_bank_stg(i).record_id
            ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
            ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
            ,p_staging_column_name    =>'RECORD_ID'
            ,p_staging_column_value   =>lx_od_customer_bank_stg(I).record_id
            ,p_batch_id               =>gn_batch_id
            ,p_exception_log          =>'Bank Account: Bank Account Currency Code is null'
            ,p_oracle_error_msg       =>SQLERRM
            ,p_source_system_code     =>lx_od_customer_bank_stg(I).party_orig_system
            ,p_source_system_ref      =>lx_od_customer_bank_stg(I).bank_name
            ,p_oracle_error_code      =>SQLCODE              
            );      

  END IF;
  
  IF (lx_od_customer_bank_stg(i).bank_name IS NOT NULL AND 
      lx_od_customer_bank_stg(i).bank_branch_name IS NOT NULL)
     OR
     (lx_od_customer_bank_stg(i).bank_number IS NOT NULL AND
      lx_od_customer_bank_stg(i).bank_num IS NOT NULL)
  AND lx_od_customer_bank_stg(i).bank_account_currency_code IS NOT NULL THEN 
  
    OPEN  c_bank_branches(lx_od_customer_bank_stg(i).bank_name,
                          lx_od_customer_bank_stg(i).bank_branch_name,
                          lx_od_customer_bank_stg(i).bank_number,
                          lx_od_customer_bank_stg(i).bank_num);
    FETCH c_bank_branches INTO l_record_count;                       
    CLOSE c_bank_branches;
    
    IF l_record_count IS NULL THEN 
      Log_Debug_Msg('Bank Account: Bank Branch Information is invalid');
      lx_od_customer_bank_stg(i).interface_status :='6';
      log_exception
              (
              p_conversion_id          =>ln_conversion_id
              ,p_record_control_id      =>lx_od_customer_bank_stg(i).record_id
              ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
              ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
              ,p_staging_column_name    =>'BANK_NAME'
              ,p_staging_column_value   =>lx_od_customer_bank_stg(I).bank_name
              ,p_batch_id               =>gn_batch_id
              ,p_exception_log          =>'Bank Account: Bank Branch Information is invalid'
              ,p_oracle_error_msg       =>SQLERRM
              ,p_source_system_code     =>lx_od_customer_bank_stg(I).party_orig_system
              ,p_source_system_ref      =>lx_od_customer_bank_stg(I).bank_name
              ,p_oracle_error_code      =>SQLCODE                 
              );      
        log_exception
                (
                p_conversion_id          =>ln_conversion_id
                ,p_record_control_id      =>lx_od_customer_bank_stg(i).record_id
                ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
                ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
                ,p_staging_column_name    =>'BANK_BRANCH_NAME'
                ,p_staging_column_value   =>lx_od_customer_bank_stg(I).bank_branch_name
                ,p_batch_id               =>gn_batch_id
                ,p_exception_log          =>'Bank Account: Bank Branch Information is invalid'
                ,p_oracle_error_msg       =>SQLERRM
                ,p_source_system_code     =>lx_od_customer_bank_stg(I).party_orig_system
                ,p_source_system_ref      =>lx_od_customer_bank_stg(I).bank_name
                ,p_oracle_error_code      =>SQLCODE                
                );      

    END IF;
    
    
    l_record_count :=NULL;
    OPEN c_bank_branches_valid1(lx_od_customer_bank_stg(I).RECORD_ID);
    FETCH c_bank_branches_valid1 INTO l_record_count;
    CLOSE c_bank_branches_valid1;
    IF l_record_count IS NULL THEN
      Log_Debug_Msg('Bank Account: Basic validation failure : Bank Account information is invalid');
      lx_od_customer_bank_stg(i).interface_status :='6';
      log_exception
              (
              p_conversion_id          =>ln_conversion_id
              ,p_record_control_id      =>lx_od_customer_bank_stg(i).record_id
              ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
              ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
              ,p_staging_column_name    =>'RECORD_ID'
              ,p_staging_column_value   =>lx_od_customer_bank_stg(I).record_id
              ,p_batch_id               =>gn_batch_id
              ,p_exception_log          =>'Bank Account: Basic validation failure : Bank Account information is invalid'
              ,p_oracle_error_msg       =>SQLERRM
              ,p_source_system_code     =>lx_od_customer_bank_stg(I).party_orig_system
              ,p_source_system_ref      =>lx_od_customer_bank_stg(I).bank_name
              ,p_oracle_error_code      =>SQLCODE              
              );     
    END IF;
    
    L_RECORD_COUNT :=NULL;
    
    OPEN c_bank_branches_valid2(lx_od_customer_bank_stg(I).RECORD_ID);
    FETCH c_bank_branches_valid2 INTO l_record_count;
    CLOSE c_bank_branches_valid2;
    
    IF l_record_count IS NULL THEN 
      Log_Debug_Msg('Bank Account: Complete validation failure : Bank Account information is invalid');
      -- Changed 28-July - Interface status 5
      lx_od_customer_bank_stg(i).interface_status :='5';
      log_exception
              (
              p_conversion_id          =>ln_conversion_id
              ,p_record_control_id      =>lx_od_customer_bank_stg(i).record_id
              ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
              ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
              ,p_staging_column_name    =>'RECORD_ID'
              ,p_staging_column_value   =>lx_od_customer_bank_stg(I).record_id
              ,p_batch_id               =>gn_batch_id
              ,p_exception_log          =>'Bank Account: Complete validation failure : Bank Account information is invalid'
              ,p_oracle_error_msg       =>SQLERRM
              ,p_source_system_code     =>lx_od_customer_bank_stg(I).party_orig_system
              ,p_source_system_ref      =>lx_od_customer_bank_stg(I).bank_name
              ,p_oracle_error_code      =>SQLCODE                
              ); 
    END IF;
  END IF;
  
  Log_Debug_Msg('Interface Status : '||lx_od_customer_bank_stg(i).interface_status);
  
  --/*Bank Account creation added for r12 retrofit */
  
  -- API call to get bank information.
  BEGIN
	Log_Debug_Msg('Get Bank Details');
	IBY_EXT_BANKACCT_PUB.check_bank_exist
					(
					p_api_version => 1.0,
					p_init_msg_list => fnd_api.g_false,
					p_country_code => lx_od_customer_bank_stg(i).bank_branch_country,
					p_bank_name => lx_od_customer_bank_stg(i).bank_name,
					p_bank_number => null,
					x_response => l_response,
					x_bank_id => l_bank_id,
					x_end_date => l_end_date,
					x_return_status => l_return_status,
					x_msg_count => l_msg_count,
					x_msg_data => l_msg_data
					);	  
		
	IF NVL(l_bank_id,0) = 0 THEN
		Log_Debug_Msg('Error getting bank Information for bank ' || lx_od_customer_bank_stg(i).bank_name);
	ELSE
		Log_Debug_Msg('Bank ID = ' || l_bank_id);
	END IF;
  EXCEPTION
	WHEN OTHERS THEN
	   Log_Debug_Msg('Error getting bank Information for bank ' || lx_od_customer_bank_stg(i).bank_name);
  END;  

  BEGIN
		Log_Debug_Msg('Get Bank Branch Details');
		IBY_EXT_BANKACCT_PUB.check_ext_bank_branch_exist
		(		
		 p_api_version => 1.0,
		 p_init_msg_list => fnd_api.g_false,
		 p_bank_id => l_bank_id,
		 p_branch_name => lx_od_customer_bank_stg(i).bank_branch_name,
		 p_branch_number => null,
		 x_response => l_response,
		 x_branch_id => l_branch_id,
		 x_end_date => l_end_date,
		 x_return_status => l_return_status,
		 x_msg_count => l_msg_count,
		 x_msg_data => l_msg_data
		);
		
		IF NVL(l_branch_id,0) = 0 THEN
			Log_Debug_Msg('Error getting branch Information for bank branch ' || lx_od_customer_bank_stg(i).BANK_BRANCH_NAME);
			l_skip_acct_creation := 1;	
		ELSE
			Log_Debug_Msg('Bank Branch ID = ' || l_branch_id);
		END IF;
  EXCEPTION
	WHEN OTHERS THEN
		Log_Debug_Msg('Error getting branch Information for bank branch ' || lx_od_customer_bank_stg(i).BANK_BRANCH_NAME);
  END;
  
  IF NVL(l_bank_id,0) > 0 AND NVL(l_branch_id,0) > 0 THEN
		l_skip_acct_creation := 0;
		l_ext_bankacct.branch_id            := l_branch_id;
		l_ext_bankacct.bank_id              := l_bank_id;
		l_ext_bankacct.country_code         := lx_od_customer_bank_stg(i).bank_branch_country;
		l_ext_bankacct.currency             := lx_od_customer_bank_stg(i).bank_account_currency_code;
		l_ext_bankacct.bank_account_name    := lx_od_customer_bank_stg(i).bank_account_name;
		l_ext_bankacct.bank_account_num     := lx_od_customer_bank_stg(i).bank_account_num;
		BEGIN
			SELECT party_id 
			INTO l_ext_bankacct.acct_owner_party_id
			FROM hz_party_sites
			WHERE party_site_id = (
								   SELECT party_site_id 
								   FROM hz_cust_acct_sites_all
								   WHERE orig_system_reference = lx_od_customer_bank_stg(i).ACCOUNT_ORIG_SYSTEM_REFERENCE
								  );
			
		EXCEPTION
			WHEN OTHERS THEN
				Log_Debug_Msg('Error while getting the party for OSR ' || lx_od_customer_bank_stg(i).ACCOUNT_ORIG_SYSTEM_REFERENCE || ' Error= ' || sqlerrm);
		END;						
		
		IF NVL(l_ext_bankacct.acct_owner_party_id,0)  = 0 THEN
			l_skip_acct_creation := 1;				
		END IF;
		
		--Check if account already exists (Added for r12 retrofit)
		
		BEGIN
			 
			  SELECT EXT_BANK_ACCOUNT_ID
			  INTO l_account_id
			  FROM iby_ext_bank_accounts_v
				WHERE COUNTRY_CODE = lx_od_customer_bank_stg(i).bank_branch_country
				  AND BRANCH_PARTY_ID = l_branch_id
				  AND BANK_PARTY_ID = l_bank_id
				  AND BANK_ACCOUNT_Name = lx_od_customer_bank_stg(i).bank_account_name
				  AND PRIMARY_ACCT_OWNER_PARTY_ID = l_ext_bankacct.acct_owner_party_id;
			  
			  Log_Debug_Msg('Checking for Bank Account returned value ' || l_account_id);
			  IF l_account_id > 0 THEN
				Log_Debug_Msg('Bank account already exists with ID ' || l_account_id);								
				l_skip_acct_creation :=1;			  
			  END IF;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN				
				l_skip_acct_creation := 0;				
            WHEN OTHERS THEN
				Log_Debug_Msg('Error while looking for account ' || SQLERRM);
				l_skip_acct_creation := 1;
				l_failed_count := l_failed_count +1;
		END;
		
		
		IF l_skip_acct_creation = 0 THEN
			BEGIN
				IBY_EXT_BANKACCT_PUB.create_ext_bank_acct(
				                                           p_api_version            => 1.0,
														   p_init_msg_list          => fnd_api.g_false,
														   p_ext_bank_acct_rec       => l_ext_bankacct,
														   x_acct_id			     => l_account_id,
														   x_return_status           => l_return_status,
														   x_msg_count               => l_msg_count,
														   x_msg_data                => l_msg_data,
														   x_response                => l_response										
														 );
			
				if l_account_id > 0 AND l_return_status = FND_API.G_RET_STS_SUCCESS THEN
					log_debug_msg( 'Bank account Created Successfully with ID = ' || l_account_id);										
					l_sucess_count := l_sucess_count +1;
					lx_od_customer_bank_stg(i).interface_status	:= 7;
					COMMIT;
				else
					log_debug_msg( 'Bank Account Creation Failed for OSR ' || lx_od_customer_bank_stg(i).ACCOUNT_ORIG_SYSTEM_REFERENCE);
					log_debug_msg( 'Error Message ' || l_msg_data);
					l_failed_count := l_failed_count +1;
					lx_od_customer_bank_stg(i).interface_status	:= 6;
					ROLLBACK;
				end if;				
			EXCEPTION
				WHEN OTHERS THEN
					log_debug_msg( 'Bank Account Creation Failed for OSR ' || lx_od_customer_bank_stg(i).ACCOUNT_ORIG_SYSTEM_REFERENCE);
			END;
		ELSE
			l_sucess_count := l_sucess_count +1;
			lx_od_customer_bank_stg(i).interface_status	:= 5;
		END IF;
		
   END IF;
  
       --Log_Debug_Msg('Bank Account: Record_id :'||lx_od_customer_bank_stg(i).record_id 
       --              ||' Interface_status :'||lx_od_customer_bank_stg(i).Interface_status);
  END LOOP;
  FOR i IN lx_od_customer_bank_stg.first .. lx_od_customer_bank_stg.last
  LOOP
     lc_bank_acct_record_table(lc_bank_acct_record_table.count +1) := lx_od_customer_bank_stg(i).record_id;
     lc_bank_acct_interface_table(lc_bank_acct_interface_table.count+1) :=lx_od_customer_bank_stg(i).interface_status;
  END LOOP;
 END IF;
 EXIT when c_xxod_customer_bank_stg%notfound;
END LOOP;
CLOSE c_xxod_customer_bank_stg;
  
  /***********************
  
  ---Creating Bank Accounts
  
  ***********************/
 IF lc_bank_acct_record_table.count > 0 THEN
 
    Log_Debug_Msg('Start Insert for Bank Accounts');
  
  /* Insert as per 11i
  INSERT INTO ap_bank_accounts
         (bank_account_id,
          last_update_date,
          last_updated_by,
          last_update_login,
          creation_date,
        created_by,
        bank_account_name,
        bank_account_num,
        bank_branch_id,
        set_of_books_id,
        currency_code,
        description,
        contact_first_name,
        contact_middle_name,
        contact_last_name,
        contact_prefix,
        contact_title,
        contact_area_code,
        contact_phone,
        max_check_amount,
        min_check_amount,
        one_signature_max_flag,
        inactive_date,
        avg_float_days,
        asset_code_combination_id,
        gain_code_combination_id,
        loss_code_combination_id,
        bank_account_type,
        validation_number,
        max_outlay,
        multi_currency_flag,
        account_type,
        attribute_category,
        attribute1,
        attribute2,
        attribute3,
        attribute4,
        attribute5,
        attribute6,
        attribute7,
        attribute8,
        attribute9,
        attribute10,
        attribute11,
        attribute12,
        attribute13,
        attribute14,
        attribute15,
        pooled_flag,
        zero_amounts_allowed,
        check_digits,
        request_id,
        program_application_id,
        program_id,
        program_update_date        
       ) 
   SELECT ap_bank_accounts_s.nextval,
           SYSDATE,
           fnd_profile.value('user_id'),
           fnd_profile.value('login_id'),
           SYSDATE,
           fnd_profile.value('user_id'),
           cbi.bank_account_name,
           cbi.bank_account_num,
           bb.bank_branch_id,
           Fnd_profile.value('GL_SET_OF_BKS_ID'),
           cbi.bank_account_currency_code,
           cbi.bank_account_description,*/
           --null,                /* contact_first_name           */
           --null,                /* contact_middle_name          */
           --null,                /* contact_last_name            */
           --null,                /* contact_prefix               */
           --null,                /* contact_title                */
           --null,                /* contact_area_code            */
           --null,                /* contact_phone                */
           --null,                /* max_check_amount             */
           --null,                /* min_check_amount             */
           --null,                /* one_signature_max_flag       */
           --cbi.bank_account_inactive_date,
           --null,                /* avg_float_days               */
           --null,                /* asset_code_combination_id    */
           --null,                /* gain_code_combination_id     */
           --null,                /* loss_code_combination_id     */
           --null,                /* bank_account_type            */
           --null,                /* validation_number            */
           --null,                /* max_outlay                   */
           --'N',                 /* multi_currency_flag          */
           --'EXTERNAL',          /* account_type                 */
           /*cbi.bank_account_att_category,
           cbi.bank_account_attribute1,
           cbi.bank_account_attribute2,
           cbi.bank_account_attribute3,
           cbi.bank_account_attribute4,
           cbi.bank_account_attribute5,
           cbi.bank_account_attribute6,
           cbi.bank_account_attribute7,
           cbi.bank_account_attribute8,
           cbi.bank_account_attribute9,
           cbi.bank_account_attribute10,
           cbi.bank_account_attribute11,
           cbi.bank_account_attribute12,
           cbi.bank_account_attribute13,
           cbi.bank_account_attribute14,
           cbi.bank_account_attribute15,*/
           --null,                /* pooled_flag              */
           --null,                 /* zero_amounts_allowed    */
           /*cbi.bank_account_check_digits,
           gt_request_id,
           nvl(cbi.program_application_id,gt_prg_appl_id), 
           nvl(cbi.program_id,gt_program_id),
           SYSDATE
      FROM ap_bank_branches   bb,
           xxod_hz_imp_customer_banks_stg cbi
     WHERE cbi.interface_status in ('1','4','6')
       AND cbi.org_id            = FND_GLOBAL.org_id    -- Added by Ambarish 
       AND cbi.batch_id          = p_batch_id
       --AND cbi.bank_name         = bb.bank_name
       --AND cbi.bank_branch_name  = bb.bank_branch_name       
       AND (( cbi.bank_name = bb.bank_name AND cbi.bank_branch_name = bb.bank_branch_name) OR    
            ( NVL(cbi.bank_number,'0') = NVL(bb.bank_number,'0') AND NVL(cbi.bank_num,'0') = NVL(bb.bank_num,'0')))
       AND cbi.rowid  = (  SELECT MIN(cbi2.ROWID)
                           FROM   xxod_hz_imp_customer_banks_stg cbi2
                           WHERE  cbi2.bank_name        = cbi.bank_name
                           AND    cbi2.bank_branch_name = cbi.bank_branch_name 
                           AND    cbi2.bank_account_num = cbi.bank_account_num */
                           --AND    cbi2.bank_account_currency_code /* 999291 */
                           /*                             = cbi.bank_account_currency_code
                           AND    cbi2.org_id           = FND_GLOBAL.org_id    -- Added by Ambarish
                           AND    cbi2.batch_id         = cbi.batch_id
                           AND    cbi2.interface_status in ('1','4','6')
                        )                 
       AND NOT EXISTS ( SELECT 'x'
                        FROM   ap_bank_accounts bac
                        WHERE  bac.bank_branch_id   = bb.bank_branch_id
                        AND    bac.bank_account_num = cbi.bank_account_num*/
                        --AND    bac.account_type     = 'EXTERNAL'  /* 804180 */
                        --AND    bac.currency_code    = cbi.bank_account_currency_code);   /* 939154 */
							                          
  --Log_Debug_Msg ('Bank Account : No. of Records sucessfull in validation :'|| l_sucess_count);
  --Log_Debug_Msg ('Bank Account : No. of Records created successfully :'|| sql%rowcount);                       
  --COMMIT;
  
  FORALL i in 1 .. lc_bank_acct_interface_table.LAST
     UPDATE xxod_hz_imp_customer_banks_stg 
     SET    interface_status = lc_bank_acct_interface_table(i) 
     WHERE  record_id        = lc_bank_acct_record_table(i);    
  COMMIT;
  
  XX_COM_CONV_ELEMENTS_PKG.Log_control_info_proc(
           p_conversion_id            => ln_conversion_id
          ,p_batch_id                 => gn_batch_id
          ,p_num_bus_objs_processed   => 0);
          
  XX_COM_CONV_ELEMENTS_PKG.upd_control_info_proc(
           p_conc_mst_req_id              => APPS.FND_GLOBAL.CONC_REQUEST_ID
          ,p_batch_id                     => gn_batch_id
          ,p_conversion_id                => ln_conversion_id
          ,p_num_bus_objs_failed_valid    => 0
          ,p_num_bus_objs_failed_process  => l_failed_count
          ,p_num_bus_objs_succ_process    => l_sucess_count); 
  Log_debug_msg('Total No. of Records Processed :'||lc_bank_acct_interface_table.last);
  Log_debug_msg('Total No. of Records succeded :'||l_sucess_count);
  Log_debug_msg('Total No. of Records failed :'||l_failed_count);
  
  --FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'===============  Create Bank Account   ===============');
  --FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'Total No. of Records Processed :'||lc_bank_acct_interface_table.last);
  --FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'Total No. of Records succeded :'||l_sucess_count);
  --FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'Total No. of Records failed :'||l_failed_count);  
 END IF;   
 
 FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'===============  Create Bank Account   ===============');
 FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'Total No. of Records Processed :'||lc_bank_acct_interface_table.last);
 FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'Total No. of Records succeded :'||l_sucess_count);
 FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'Total No. of Records failed :'||l_failed_count);  
 
 
Log_Debug_Msg('==================       END       ================='||chr(10));
  
/* Bank Use has been eliminated from r12retrofit */  
 /* 
Log_Debug_Msg('==================       BEGIN       =================');
Log_Debug_Msg('===============  Create Bank Acct Use  ==============='); 
ln_conversion_id:=00244.2;
l_sucess_count :=0;
l_failed_count :=0;
OPEN c_xxod_cust_bank_use_stg(p_batch_id);
 Loop
  FETCH c_xxod_cust_bank_use_stg BULK COLLECT INTO lx_od_cust_bank_use_stg limit ln_bulk_limit;    
  IF lx_od_cust_bank_use_stg.COUNT =0 THEN 
     Log_Debug_Msg('No records exist in the staging table for batch_id - '||p_batch_id||' for Bank Account Use');
     Log_Debug_Msg('==================       END       ================='||chr(10));
  ELSIF lx_od_cust_bank_use_stg.COUNT >0 THEN  
   
   FOR I IN lx_od_cust_bank_use_stg.FIRST .. lx_od_cust_bank_use_stg.LAST 
   LOOP
   lx_od_cust_bank_use_stg(i).bank_use_interface_status:='0';
   l_record_count :=NULL;
   IF lx_od_cust_bank_use_stg(I).account_orig_system_reference IS NULL THEN
     Log_Debug_Msg('Bank Account Use: Account orig system reference is Null');
     lx_od_cust_bank_use_stg(i).Bank_use_interface_status:='6';
     log_exception
             (
             p_conversion_id          =>ln_conversion_id
             ,p_record_control_id      =>lx_od_cust_bank_use_stg(i).record_id
             ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
             ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
             ,p_staging_column_name    =>'RECORD_ID'
             ,p_staging_column_value   =>lx_od_cust_bank_use_stg(I).record_id
             ,p_batch_id               =>gn_batch_id
             ,p_exception_log          =>'Bank Account Use: Account orig system reference is Null'
             ,p_oracle_error_msg       =>SQLERRM
             ,p_source_system_code     =>lx_od_cust_bank_use_stg(I).party_orig_system
             ,p_source_system_ref      =>lx_od_cust_bank_use_stg(I).bank_name
             ,p_oracle_error_code      =>SQLCODE               
             );   
   END IF;
   IF lx_od_cust_bank_use_stg(I).account_orig_system_reference IS NOT NULL THEN
     OPEN c_account(lx_od_cust_bank_use_stg(I).account_orig_system_reference);
     FETCH c_account INTO l_record_count;
     CLOSE c_account;
     if l_record_count IS NULL THEN
       Log_Debug_Msg('Bank Account Use: Customer Account Information is invalid');
       lx_od_cust_bank_use_stg(i).bank_use_interface_status:='6';
       log_exception
               (
               p_conversion_id          =>ln_conversion_id
               ,p_record_control_id      =>lx_od_cust_bank_use_stg(i).record_id
               ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
               ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
               ,p_staging_column_name    =>'ACCOUNT_ORIG_SYSTEM_REFERENCE'
               ,p_staging_column_value   =>lx_od_cust_bank_use_stg(I).account_orig_system_reference
               ,p_batch_id               =>gn_batch_id
               ,p_exception_log          =>'Bank Account Use: Customer Account Information is invalid'
               ,p_oracle_error_msg       =>SQLERRM
               ,p_source_system_code     =>lx_od_cust_bank_use_stg(I).party_orig_system
               ,p_source_system_ref      =>lx_od_cust_bank_use_stg(I).bank_name
               ,p_oracle_error_code      =>SQLCODE                 
               );       
     END IF;
   END IF;
   IF lx_od_cust_bank_use_stg(I).bank_account_currency_code IS NULL THEN
     Log_Debug_Msg('Bank Account Use: Bank Account Currency Code is Null');
     lx_od_cust_bank_use_stg(i).Bank_use_interface_status:='6';
     log_exception
             (
             p_conversion_id          =>ln_conversion_id
             ,p_record_control_id      =>lx_od_cust_bank_use_stg(i).record_id
             ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
             ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
             ,p_staging_column_name    =>'RECORD_ID'
             ,p_staging_column_value   =>lx_od_cust_bank_use_stg(I).record_id
             ,p_batch_id               =>gn_batch_id
             ,p_exception_log          =>'Bank Account Use: Bank Account Currency Code is Null'
             ,p_oracle_error_msg       =>SQLERRM
             ,p_source_system_code     =>lx_od_cust_bank_use_stg(I).party_orig_system
             ,p_source_system_ref      =>lx_od_cust_bank_use_stg(I).bank_name
             ,p_oracle_error_code      =>SQLCODE               
             );   
   END IF;
   IF lx_od_cust_bank_use_stg(I).bank_account_num IS NULL THEN
     Log_Debug_Msg('Bank Account Use: Bank Account Number is Null');
     lx_od_cust_bank_use_stg(i).Bank_use_interface_status:='6';
     log_exception
             (
             p_conversion_id          =>ln_conversion_id
             ,p_record_control_id      =>lx_od_cust_bank_use_stg(i).record_id
             ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
             ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
             ,p_staging_column_name    =>'RECORD_ID'
             ,p_staging_column_value   =>lx_od_cust_bank_use_stg(I).record_id
             ,p_batch_id               =>gn_batch_id
             ,p_exception_log          =>'Bank Account Use: Bank Account Number is Null'
             ,p_oracle_error_msg       =>SQLERRM
             ,p_source_system_code     =>lx_od_cust_bank_use_stg(I).party_orig_system
             ,p_source_system_ref      =>lx_od_cust_bank_use_stg(I).bank_name
             ,p_oracle_error_code      =>SQLCODE               
             );   

   END IF;
   IF lx_od_cust_bank_use_stg(I).bank_name IS NULL THEN
     Log_Debug_Msg('Bank Account Use: Bank Name is Null');
     lx_od_cust_bank_use_stg(i).Bank_use_interface_status:='6';
     log_exception
             (
             p_conversion_id          =>ln_conversion_id
             ,p_record_control_id      =>lx_od_cust_bank_use_stg(i).record_id
             ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
             ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
             ,p_staging_column_name    =>'RECORD_ID'
             ,p_staging_column_value   =>lx_od_cust_bank_use_stg(I).record_id
             ,p_batch_id               =>gn_batch_id
             ,p_exception_log          =>'Bank Account Use: Bank Name is Null'
             ,p_oracle_error_msg       =>SQLERRM
             ,p_source_system_code     =>lx_od_cust_bank_use_stg(I).party_orig_system
             ,p_source_system_ref      =>lx_od_cust_bank_use_stg(I).bank_name
             ,p_oracle_error_code      =>SQLCODE               
             );   

   END IF;
   IF lx_od_cust_bank_use_stg(I).bank_branch_name IS NULL THEN
     Log_Debug_Msg('Bank Account Use: Bank Branch Name is Null');
     lx_od_cust_bank_use_stg(i).Bank_use_interface_status:='6';
     log_exception
             (
             p_conversion_id          =>ln_conversion_id
             ,p_record_control_id      =>lx_od_cust_bank_use_stg(i).record_id
             ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
             ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
             ,p_staging_column_name    =>'RECORD_ID'
             ,p_staging_column_value   =>lx_od_cust_bank_use_stg(I).record_id
             ,p_batch_id               =>gn_batch_id
             ,p_exception_log          =>'Bank Account Use: Bank Branch Name is Null'
             ,p_oracle_error_msg       =>SQLERRM
             ,p_source_system_code     =>lx_od_cust_bank_use_stg(I).party_orig_system
             ,p_source_system_ref      =>lx_od_cust_bank_use_stg(I).bank_name
             ,p_oracle_error_code      =>SQLCODE               
             );   

   END IF;
   
   IF lx_od_cust_bank_use_stg(I).bank_account_currency_code IS NOT NULL OR
      lx_od_cust_bank_use_stg(I).bank_account_num           IS NOT NULL OR
      lx_od_cust_bank_use_stg(I).bank_name                  IS NOT NULL OR
      lx_od_cust_bank_use_stg(I).bank_branch_name           IS NOT NULL OR
      lx_od_cust_bank_use_stg(I).bank_num                   IS NOT NULL OR
      lx_od_cust_bank_use_stg(I).bank_number                IS NOT NULL THEN
   
      l_record_count :=NULL;
      OPEN c_bank_account
         (   lx_od_cust_bank_use_stg(I).bank_account_currency_code,
             lx_od_cust_bank_use_stg(I).bank_account_num,
             lx_od_cust_bank_use_stg(I).bank_name,
             lx_od_cust_bank_use_stg(I).bank_branch_name,
             lx_od_cust_bank_use_stg(I).bank_number,
             lx_od_cust_bank_use_stg(I).bank_num
         );
     
      FETCH c_bank_account INTO l_record_count;
      CLOSE c_bank_account;
     
     IF l_record_count IS NULL THEN 
        Log_Debug_Msg('Bank Account Use: Bank Related information is invalid');
        lx_od_cust_bank_use_stg(i).Bank_use_interface_status:='6';
        log_exception
           (   p_conversion_id          => ln_conversion_id
              ,p_record_control_id      => lx_od_cust_bank_use_stg(i).record_id
              ,p_procedure_name         => 'CREATE_BANK_BANKUSE'
              ,p_staging_table_name     => 'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
              ,p_staging_column_name    => 'BANK_ACCOUNT_NUM'
              ,p_staging_column_value   => lx_od_cust_bank_use_stg(I).record_id
              ,p_batch_id               => gn_batch_id
              ,p_exception_log          => 'Bank Account Use: Bank Account was not found'
              ,p_oracle_error_msg       => SQLERRM
              ,p_source_system_code     => lx_od_cust_bank_use_stg(I).party_orig_system
              ,p_source_system_ref      => lx_od_cust_bank_use_stg(I).bank_account_num
              ,p_oracle_error_code      => SQLCODE                      
           );    
     END IF;
     */
     
       /*
       l_record_count :=NULL;
       IF lx_od_cust_bank_use_stg(I).orig_system_address_ref is not null THEN
       OPEN c_bank_use_site (lx_od_cust_bank_use_stg(I).orig_system_address_ref);
       FETCH c_bank_use_site INTO l_record_count;
       CLOSE c_bank_use_site;
         IF l_record_count IS NULL THEN
           Log_Debug_Msg('Bank Account Use: Customer Account Information is invalid');
           lx_od_cust_bank_use_stg(i).Bank_use_interface_status:='6';
         END IF;
       END IF;
       */
     /*
	 l_record_count :=NULL;
     OPEN c_is_bank_use_valid (lx_od_cust_bank_use_stg(I).record_id); 
     FETCH c_is_bank_use_valid INTO l_record_count;
     CLOSE c_is_bank_use_valid;
     IF l_record_count IS NULL THEN
       Log_Debug_Msg('Bank Account Use: Bank Account And Customer Account Combination already exists');
       lx_od_cust_bank_use_stg(i).Bank_use_interface_status:='6';
       log_exception
               (
               p_conversion_id          =>ln_conversion_id
               ,p_record_control_id      =>lx_od_cust_bank_use_stg(i).record_id
               ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
               ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
               ,p_staging_column_name    =>'RECORD_ID'
               ,p_staging_column_value   =>lx_od_cust_bank_use_stg(I).record_id
               ,p_batch_id               =>gn_batch_id
               ,p_exception_log          =>'Bank Account Use: Bank Account And Customer Account Combination already exists'
               ,p_oracle_error_msg       =>SQLERRM
               ,p_source_system_code     =>lx_od_cust_bank_use_stg(I).party_orig_system
               ,p_source_system_ref      =>lx_od_cust_bank_use_stg(I).bank_name
               ,p_oracle_error_code      =>SQLCODE                      
               );    
     END IF;    
     l_record_count :=NULL;
     OPEN C_bank_use_valid (lx_od_cust_bank_use_stg(I).record_id); 
     FETCH C_bank_use_valid INTO l_record_count;
     CLOSE C_bank_use_valid;
     IF l_record_count IS NULL THEN
       Log_Debug_Msg('Bank Account Use: Customer Account Information is invalid');
       lx_od_cust_bank_use_stg(i).Bank_use_interface_status:='6';
       log_exception
               (
               p_conversion_id          =>ln_conversion_id
               ,p_record_control_id      =>lx_od_cust_bank_use_stg(i).record_id
               ,p_procedure_name         =>'CREATE_BANK_BANKUSE'
               ,p_staging_table_name     =>'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
               ,p_staging_column_name    =>'RECORD_ID'
               ,p_staging_column_value   =>lx_od_cust_bank_use_stg(I).record_id
               ,p_batch_id               =>gn_batch_id
               ,p_exception_log          =>'Bank Account Use: Customer Account Information is invalid'
               ,p_oracle_error_msg       =>SQLERRM
               ,p_source_system_code     =>lx_od_cust_bank_use_stg(I).party_orig_system
               ,p_source_system_ref      =>lx_od_cust_bank_use_stg(I).bank_name
               ,p_oracle_error_code      =>SQLCODE               
               );    
     END IF;
   END IF;
   
   IF lx_od_cust_bank_use_stg(i).Bank_use_interface_status='0' THEN 
      lx_od_cust_bank_use_stg(i).Bank_use_interface_status:='7';
      l_sucess_count := l_sucess_count +1;
   ELSE
      l_failed_count := l_failed_count +1;
   END IF;
      --Log_Debug_Msg('Bank Account Use: Record_id :'||lx_od_cust_bank_use_stg(i).record_id 
      --                ||' Interface_status :'||lx_od_cust_bank_use_stg(i).Bank_use_interface_status);
   END LOOP;
   For i in lx_od_cust_bank_use_stg.first .. lx_od_cust_bank_use_stg.last
   LOOP
    lc_bank_use_record_table(lc_bank_use_record_table.count + 1) := lx_od_cust_bank_use_stg(i).record_id;
    lc_bank_use_interface_table(lc_bank_use_interface_table.count +1) :=lx_od_cust_bank_use_stg(i).Bank_use_interface_status;
   END LOOP;   
  END IF;
  EXIT WHEN c_xxod_cust_bank_use_stg%notfound;
 END LOOP;
 CLOSE c_xxod_cust_bank_use_stg;
*/
/* ****************************

--Creating Bank Account Uses

******************************/
/*
IF lc_bank_use_record_table.count > 0 then 
 INSERT INTO ap_bank_account_uses
        ( bank_account_uses_id,
          last_update_date,
          last_updated_by,
          creation_date,
          created_by,
          last_update_login,
          customer_id,
          --customer_site_use_id,
          vendor_id,
          vendor_site_id,
          external_bank_account_id,
          start_date,
          end_date,
          primary_flag,
          attribute_category,
          attribute1,
          attribute2,
          attribute3,
          attribute4,
          attribute5,
          attribute6,
          attribute7,
          attribute8,
          attribute9,
          attribute10,
          attribute11,
          attribute12,
          attribute13,
          attribute14,
          attribute15,
          request_id,
          program_application_id,
          program_id,
          program_update_date
         )         
      SELECT ap_bank_account_uses_s.NEXTVAL,
            SYSDATE,
            fnd_profile.value('user_id'),
            sysdate, 
            fnd_profile.value('user_id'), 
            fnd_profile.value('login_id'),
            rc.cust_account_id,
            --rsu.site_use_id,
            null,
            null,
            aba.bank_account_id,
            i.start_date,
            i.end_date,
            i.primary_flag,
            i.attribute_category,
            i.attribute1,
            i.attribute2,
            i.attribute3,
            i.attribute4,
            i.attribute5,
            i.attribute6,
            i.attribute7,
            i.attribute8,
            i.attribute9,
            i.attribute10,
            i.attribute11,
            i.attribute12,
            i.attribute13,
            i.attribute14,
            i.attribute15,
            gt_request_id,
            nvl(i.program_application_id,gt_prg_appl_id), 
            nvl(i.program_id,gt_program_id),
            sysdate
       FROM hz_cust_accounts               rc,
            ap_bank_branches               abb,
            ap_bank_accounts               aba,
            --hz_cust_site_uses           rsu,
            --hz_cust_acct_sites          ra,
            xxod_hz_imp_customer_banks_stg i
      WHERE NVL(i.Bank_use_interface_status,'1') in ('1','4','6')
      AND   i.batch_id                 = p_batch_id    
      AND   i.org_id                   = FND_GLOBAL.org_id    -- Added by Ambarish
      AND   i.account_orig_system_reference = rc.orig_system_reference
      --AND i.orig_system_address_ref  = ra.orig_system_reference(+)
      AND   i.bank_account_num         = aba.bank_account_num
      AND   aba.bank_branch_id         = abb.bank_branch_id*/
      --AND   aba.account_type           = 'EXTERNAL'              /* 804180 */
      --AND   aba.currency_code          =  i.bank_account_currency_code /* 939154 */
      --AND   i.bank_branch_name         = abb.bank_branch_name
      --AND   i.bank_name                = abb.bank_name       
      /*AND (( i.bank_name = abb.bank_name AND i.bank_branch_name = abb.bank_branch_name) OR    
           ( NVL(i.bank_number,'0') = NVL(abb.bank_number,'0') AND NVL(i.bank_num,'0') = NVL(abb.bank_num,'0')))
      --AND ra.cust_acct_site_id       = rsu.cust_acct_site_id(+)
      --AND rsu.site_use_code(+)       = 'BILL_TO'
      --AND rsu.status(+)              = 'A'
      AND NOT EXISTS ( SELECT 1 
                       FROM   ap_bank_account_uses
                       WHERE  external_bank_account_id = aba.bank_account_id
                       AND    customer_id = rc.cust_account_id);
        
        
  Log_Debug_Msg ('Bank Account Use: No. of Records sucessfull in validation :'|| l_sucess_count);
  Log_Debug_Msg ('Bank Account Use: No. of Records created successfully :'|| sql%rowcount);
  commit;

  FORALL i in 1 .. lc_bank_use_interface_table.last
   UPDATE xxod_hz_imp_customer_banks_stg 
   SET bank_use_interface_status =lc_bank_use_interface_table(i) 
   WHERE record_id = lc_bank_use_record_table(i);
  commit;
  XX_COM_CONV_ELEMENTS_PKG.Log_control_info_proc(
           p_conversion_id            => ln_conversion_id
          ,p_batch_id                 => gn_batch_id
          ,p_num_bus_objs_processed   => 0);
          
  XX_COM_CONV_ELEMENTS_PKG.upd_control_info_proc(
           p_conc_mst_req_id              => APPS.FND_GLOBAL.CONC_REQUEST_ID
          ,p_batch_id                     => gn_batch_id
          ,p_conversion_id                => ln_conversion_id
          ,p_num_bus_objs_failed_valid    => 0
          ,p_num_bus_objs_failed_process  => l_failed_count
          ,p_num_bus_objs_succ_process    => l_sucess_count); 
  Log_debug_msg('Total No. of Records Processed :'||lc_bank_use_interface_table.last);
  Log_debug_msg('Total No. of Records Succeded :'||l_sucess_count);
  Log_debug_msg('Total No. of Records Failed :'||l_failed_count);          
  Log_Debug_Msg('==================       END       ================='||chr(10));
  
  
 END IF;
 FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'===============  Create Bank Acct Use  ==============='); 
 FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'Total No. of Records Processed :'||lc_bank_use_interface_table.last);
 FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'Total No. of Records Succeded :'||l_sucess_count);
 FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'Total No. of Records Failed :'||l_failed_count);          
 FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'==================       END       ================='||chr(10));
  */
  --Comment complete for r12 retrofit
EXCEPTION 
WHEN OTHERS THEN 
   x_errbuf    :='Others Exception in CREATE_BANK_BANKUSE procedure '||SQLERRM;
   x_retcode   :='2';
END CREATE_BANK_BANKUSE;

-- +===================================================================+
-- | Name        :  CREATE_PAYMENT                                     |
-- | Description :  This procedure is create payment method for CDH    |
-- |                                                                   |
-- | Parameters  :  p_batch_id                                         |
-- |                   Payment method records are retrieved based on   |
-- |                   the batch_id                                    |
-- |                                                                   |
-- |                                                                   |
-- |                                                                   |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+

PROCEDURE CREATE_PAYMENT
      (  x_errbuf            OUT VARCHAR2,
         x_retcode           OUT VARCHAR2,
         p_batch_id          IN  NUMBER
      )
IS 

CURSOR c_xxod_customer_payment_stg(CP_BATCH_ID NUMBER) 
IS 
SELECT * 
FROM   xxod_hz_imp_acct_paymeth_stg
WHERE  batch_id          = cp_batch_id
AND    interface_status IN ('1','4','6');

TYPE l_xxod_customer_payment_stg       IS TABLE OF c_xxod_customer_payment_stg%ROWTYPE INDEX BY BINARY_INTEGER;
TYPE xx_upd_interface_table            IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER; 
TYPE xx_upd_record_table               IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

lx_od_customer_payment_stg             l_xxod_customer_payment_stg;
lc_pay_record_table                    xx_upd_record_table;
lc_pay_interface_table                 xx_upd_interface_table;
l_record_count                         NUMBER;
l_sucess_count                         NUMBER;
l_update_count                         NUMBER;
l_failed_count                         NUMBER;
lc_cust_receipt_method_id              NUMBER;
ln_conversion_id                       NUMBER;
ln_bulk_limit                          NUMBER := XX_CDH_CONV_MASTER_PKG.g_bulk_fetch_limit;
-- Validation cursor for Payment Methods
-- Account Validation 
CURSOR C_Account (p_orig_system_reference VARCHAR2)
IS 
SELECT 1 
  FROM 
     hz_cust_accounts rc
  WHERE
     orig_system_reference = p_orig_system_reference;

-- Payment Method Validation
CURSOR c_payment( p_name VARCHAR2)
IS 
SELECT 1 
  FROM 
     ar_receipt_methods
  WHERE 
     name = p_name;

-- Customer Account site validation based on the 
-- ORIG_SYSTEM_ADDRESS_REF is not null

CURSOR c_account_site (P_orig_system_reference VARCHAR2)
IS 
SELECT 1
    FROM 
        hz_cust_acct_sites ra, 
        hz_cust_site_uses rsu
    WHERE 
        ra.orig_system_reference(+) = p_orig_system_reference
        AND ra.cust_acct_site_id = rsu.cust_acct_site_id(+)
        AND rsu.site_use_code(+) = 'BILL_TO'
        AND rsu.status(+) = 'A';

-- Complete Payment Method validation 
CURSOR c_payment_valid(P_RECORD_ID NUMBER)
IS 
SELECT 1 
    FROM 
        hz_cust_accounts rc,
        ar_receipt_methods arm,
        --hz_cust_acct_sites ra,
        --hz_cust_site_uses rsu,
        xxod_hz_imp_acct_paymeth_stg i
     WHERE i.interface_status IN ('1','4','6')
     AND   i.record_id         = p_record_id
     AND   i.account_orig_system_reference = rc.orig_system_reference
--       AND i.orig_system_address_ref = ra.orig_system_reference(+)
     AND   i.payment_method_name = arm.name
       --AND ra.cust_acct_site_id = rsu.cust_acct_site_id(+)
       --AND rsu.site_use_code(+) = 'BILL_TO'
       --AND rsu.status(+) = 'A'
       ;

-- Create/Update validation 
CURSOR c_cust_receipt_methods (p_record_id NUMBER)
IS
SELECT cust_receipt_method_id 
FROM   ra_cust_receipt_methods      rcrm,
       hz_cust_accounts             hca,
       ar_receipt_methods           arm,
       xxod_hz_imp_acct_paymeth_stg i
WHERE  rcrm.receipt_method_id    = arm.receipt_method_id 
AND    rcrm.customer_id          = hca.cust_account_id
AND    i.record_id               = p_record_id
AND    arm.name                  = i.payment_method_name
AND    hca.orig_system_reference = i.account_orig_system_reference;
    
BEGIN 
Log_Debug_Msg('==================       BEGIN       =================');
Log_Debug_Msg('=============== Create Payment Method  ===============');
l_update_count :=0;
l_sucess_count :=0;
l_failed_count :=0;
ln_conversion_id:=00244.3;
OPEN c_xxod_customer_payment_stg(p_batch_id);
Loop
 FETCH c_xxod_customer_payment_stg 
       BULK COLLECT INTO lx_od_customer_payment_stg Limit ln_bulk_limit; 

 IF lx_od_customer_payment_stg.count =0 THEN
  Log_Debug_Msg('No records exist in the staging table for batch_id - '||p_batch_id||' for Payment Method');
  Log_Debug_Msg('==================       END       ================='||chr(10));
  --RETURN;
 
 ELSIF lx_od_customer_payment_stg.count > 0 THEN
  FOR I IN lx_od_customer_payment_stg.FIRST .. lx_od_customer_payment_stg.LAST
   LOOP
   
   lx_od_customer_payment_stg(i).interface_status :='0';
      Log_Debug_Msg('--------------------------------------------------');
   Log_Debug_Msg('Payment Method: Record Id :'||lx_od_customer_payment_stg(i).record_id);
   l_record_count:=NULL;
   IF lx_od_customer_payment_stg(I).account_orig_system_reference IS NULL THEN
     Log_Debug_Msg('Payment Method:Account Orig System reference is null');
     lx_od_customer_payment_stg(i).interface_status :='6';
     log_exception
          (
          p_conversion_id          =>ln_conversion_id
          ,p_record_control_id      =>lx_od_customer_payment_stg(i).record_id
          ,p_procedure_name         =>'CREATE_PAYMENT'
          ,p_staging_table_name     =>'XXOD_HZ_IMP_ACCT_PAYMETH_STG'
          ,p_staging_column_name    =>'RECORD_ID'
          ,p_staging_column_value   =>lx_od_customer_payment_stg(I).record_id
          ,p_batch_id               =>gn_batch_id
          ,p_exception_log          =>'Payment Method:Account Orig System reference is null'
          ,p_oracle_error_msg       =>SQLERRM
          ,p_source_system_code     =>lx_od_customer_payment_stg(I).party_orig_system
          ,p_source_system_ref      =>lx_od_customer_payment_stg(I).payment_method_name
          ,p_oracle_error_code      =>SQLCODE           
          );       
   END IF;
   IF lx_od_customer_payment_stg(I).account_orig_system_reference IS NOT NULL THEN
     OPEN c_account(lx_od_customer_payment_stg(I).account_orig_system_reference);
     FETCH C_account INTO l_record_count;
     CLOSE c_account;
     
     IF l_record_count IS NULL THEN 
         Log_Debug_Msg('Payment Method:Customer Account doesn''t exists in hz_cust_accounts Table');
         lx_od_customer_payment_stg(i).interface_status :='6';
         log_exception
              (
              p_conversion_id          =>ln_conversion_id
              ,p_record_control_id      =>lx_od_customer_payment_stg(i).record_id
              ,p_procedure_name         =>'CREATE_PAYMENT'
              ,p_staging_table_name     =>'XXOD_HZ_IMP_ACCT_PAYMETH_STG'
              ,p_staging_column_name    =>'ACCOUNT_ORIG_SYSTEM_REFERENCE'
              ,p_staging_column_value   =>lx_od_customer_payment_stg(I).account_orig_system_reference
              ,p_batch_id               =>gn_batch_id
              ,p_exception_log          =>'Payment Method:Customer Account doesn''t exists in hz_cust_accounts Table'
              ,p_oracle_error_msg       =>SQLERRM
              ,p_source_system_code     =>lx_od_customer_payment_stg(I).party_orig_system
              ,p_source_system_ref      =>lx_od_customer_payment_stg(I).payment_method_name
              ,p_oracle_error_code      =>SQLCODE               
              );       
     END IF;
   END IF;
   IF lx_od_customer_payment_stg(I).payment_method_name IS NULL THEN
     Log_Debug_Msg('Payment Method:Payment Method Name is null');
     lx_od_customer_payment_stg(i).interface_status :='6';
     log_exception
          (
          p_conversion_id          =>ln_conversion_id
          ,p_record_control_id      =>lx_od_customer_payment_stg(i).record_id
          ,p_procedure_name         =>'CREATE_PAYMENT'
          ,p_staging_table_name     =>'XXOD_HZ_IMP_ACCT_PAYMETH_STG'
          ,p_staging_column_name    =>'RECORD_ID'
          ,p_staging_column_value   =>lx_od_customer_payment_stg(I).record_id
          ,p_batch_id               =>gn_batch_id
          ,p_exception_log          =>'Payment Method:Payment Method Name  is null'
          ,p_oracle_error_msg       =>SQLERRM
          ,p_source_system_code     =>lx_od_customer_payment_stg(I).party_orig_system
          ,p_source_system_ref      =>lx_od_customer_payment_stg(I).payment_method_name
          ,p_oracle_error_code      =>SQLCODE           
          );       
   
   END IF;
   IF lx_od_customer_payment_stg(I).payment_method_name IS NOT NULL THEN 
     l_record_count:=null;
     OPEN c_payment(lx_od_customer_payment_stg(I).payment_method_name);
     FETCH c_payment into l_record_count;
     CLOSE c_payment;
     
     IF l_record_count IS NULL THEN 
         Log_Debug_Msg('Payment Method: Payment Method doesn''t exists in ar_receipt_methods Table');
         lx_od_customer_payment_stg(i).interface_status :='6';
         log_exception
              (
              p_conversion_id          =>ln_conversion_id
              ,p_record_control_id      =>lx_od_customer_payment_stg(i).record_id
              ,p_procedure_name         =>'CREATE_PAYMENT'
              ,p_staging_table_name     =>'XXOD_HZ_IMP_ACCT_PAYMETH_STG'
              ,p_staging_column_name    =>'PAYMENT_METHOD_NAME'
              ,p_staging_column_value   =>lx_od_customer_payment_stg(I).payment_method_name
              ,p_batch_id               =>gn_batch_id
              ,p_exception_log          =>'Payment Method: Payment Method doesn''t exists in ar_receipt_methods Table'
              ,p_oracle_error_msg       =>SQLERRM
              ,p_source_system_code     =>lx_od_customer_payment_stg(I).party_orig_system
              ,p_source_system_ref      =>lx_od_customer_payment_stg(I).payment_method_name
              ,p_oracle_error_code      =>SQLCODE               
              );        
     END IF;
   END IF;
   /*
   l_record_count:=NULL;
   IF lx_od_customer_payment_stg(I).orig_system_address_ref IS NOT NULL THEN 
   
   OPEN c_account_site(lx_od_customer_payment_stg(I).orig_system_address_ref);
   FETCH c_account_site INTO l_record_count;
   CLOSE c_account_site;

    IF l_record_count IS NULL THEN 
     Log_Debug_Msg('Payment Method: Customer Site Validation Failed');
     lx_od_customer_payment_stg(i).interface_status :='6';
     log_exception
            (
            p_conversion_id          =>ln_conversion_id
            ,p_record_control_id      =>lx_od_customer_payment_stg(i).record_id
            ,p_procedure_name         =>'CREATE_PAYMENT'
            ,p_staging_table_name     =>'XXOD_HZ_IMP_ACCT_PAYMETH_STG'
            ,p_staging_column_name    =>'ORIG_SYSTEM_ADDRESS_REF'
            ,p_staging_column_value   =>lx_od_customer_payment_stg(I).orig_system_address_ref
            ,p_batch_id               =>gn_batch_id
            ,p_exception_log          =>'Payment Method: Customer Site Validation Failed'
            ,p_oracle_error_msg       =>null
            );     
    END IF;
   END IF;
   */
   IF lx_od_customer_payment_stg(I).payment_method_name IS NOT NULL 
   AND lx_od_customer_payment_stg(I).account_orig_system_reference IS NOT NULL THEN
     l_record_count:=NULL;
     OPEN c_payment_valid(lx_od_customer_payment_stg(i).record_id);
     FETCH c_payment_valid INTO l_record_count;
     CLOSE c_payment_valid;
     
     IF l_record_count IS NULL THEN 
       Log_Debug_Msg('Payment Method: Payment Method(c) Validation Failed');
       lx_od_customer_payment_stg(i).interface_status :=6;
       log_exception
              (
              p_conversion_id          =>ln_conversion_id
              ,p_record_control_id      =>lx_od_customer_payment_stg(i).record_id
              ,p_procedure_name         =>'CREATE_PAYMENT'
              ,p_staging_table_name     =>'XXOD_HZ_IMP_ACCT_PAYMETH_STG'
              ,p_staging_column_name    =>'RECORD_ID'
              ,p_staging_column_value   =>lx_od_customer_payment_stg(I).record_id
              ,p_batch_id               =>gn_batch_id
              ,p_exception_log          =>'Payment Method: Payment Method(c) Validation Failed'
              ,p_oracle_error_msg       =>SQLERRM
              ,p_source_system_code     =>lx_od_customer_payment_stg(I).party_orig_system
              ,p_source_system_ref      =>lx_od_customer_payment_stg(I).payment_method_name
              ,p_oracle_error_code      =>SQLCODE              
              );      
     END IF;
   END IF;

   IF lx_od_customer_payment_stg(i).start_date IS NULL THEN 
     Log_Debug_Msg('Payment Method: Start Date is Null');
     lx_od_customer_payment_stg(i).interface_status :=6;
     log_exception
            (
            p_conversion_id          =>ln_conversion_id
            ,p_record_control_id      =>lx_od_customer_payment_stg(i).record_id
            ,p_procedure_name         =>'CREATE_PAYMENT'
            ,p_staging_table_name     =>'XXOD_HZ_IMP_ACCT_PAYMETH_STG'
            ,p_staging_column_name    =>'START_DATE'
            ,p_staging_column_value   =>lx_od_customer_payment_stg(I).start_date
            ,p_batch_id               =>gn_batch_id
            ,p_exception_log          =>'Payment Method: Start Date is Null'
            ,p_oracle_error_msg       =>null
            ,p_source_system_code     =>lx_od_customer_payment_stg(I).party_orig_system
            ,p_source_system_ref      =>lx_od_customer_payment_stg(I).payment_method_name
            ,p_oracle_error_code      =>SQLCODE            
            );      
   END IF;
   lc_cust_receipt_method_id := NULL;
   BEGIN
     OPEN c_cust_receipt_methods (lx_od_customer_payment_stg(i).record_id); 
     FETCH c_cust_receipt_methods into lc_cust_receipt_method_id;
     CLOSE c_cust_receipt_methods;
   EXCEPTION 
     WHEN OTHERS THEN 
        lc_cust_receipt_method_id := NULL;
   END;
   IF lc_cust_receipt_method_id IS NOT NULL THEN 
     log_debug_msg ('Payment Method: lc_cust_receipt_method_id :'||lc_cust_receipt_method_id);
     Log_Debug_Msg ('Payment Method: Update'); 
   UPDATE ra_cust_receipt_methods 
   SET 
   primary_flag      = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).primary_flag),
                                FND_API.G_MISS_CHAR,'N',
                                NULL,primary_flag,
                                lx_od_customer_payment_stg(i).primary_flag),
   end_date          = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_date(lx_od_customer_payment_stg(i).end_date),
                                FND_API.G_MISS_DATE,NULL,
                                NULL,end_date,
                                lx_od_customer_payment_stg(i).end_date),
   attribute_category= decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute_category),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute_category,
                                lx_od_customer_payment_stg(i).attribute_category),
   attribute1        = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute1),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute1,
                                lx_od_customer_payment_stg(i).attribute1),
   attribute2        = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute2),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute2,
                                lx_od_customer_payment_stg(i).attribute2),
   attribute3        = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute3),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute3,
                                lx_od_customer_payment_stg(i).attribute3),
   attribute4        = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute4),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute4,
                                lx_od_customer_payment_stg(i).attribute4),
   attribute5        = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute5),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute5,
                                lx_od_customer_payment_stg(i).attribute5),
   attribute6        = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute6),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute6,
                                lx_od_customer_payment_stg(i).attribute6),
   attribute7        = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute7),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute7,
                                lx_od_customer_payment_stg(i).attribute7),
   attribute8        = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute8),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute8,
                                lx_od_customer_payment_stg(i).attribute8),
   attribute9        = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute9),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute9,
                                lx_od_customer_payment_stg(i).attribute9),
   attribute10       = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute10),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute10,
                                lx_od_customer_payment_stg(i).attribute10),
   attribute11       = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute11),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute11,
                                lx_od_customer_payment_stg(i).attribute11),
   attribute12       = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute12),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute12,
                                lx_od_customer_payment_stg(i).attribute12),
   attribute13       = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute13),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute13,
                                lx_od_customer_payment_stg(i).attribute13),
   attribute14       = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute14),
                                FND_API.G_MISS_CHAR,NULL,
                                null,attribute14,
                                lx_od_customer_payment_stg(i).attribute14),
   attribute15       = decode(XX_CDH_CONV_MASTER_PKG.get_hz_imp_g_miss_char(lx_od_customer_payment_stg(i).attribute15),
                                FND_API.G_MISS_CHAR,NULL,
                                NULL,attribute15,
                                lx_od_customer_payment_stg(i).attribute15),  
   last_updated_by   = Fnd_profile.value('user_id'), 
   last_update_date  = Sysdate, 
   last_update_login = Fnd_profile.value('login_id')
   WHERE 
   cust_receipt_method_id = lc_cust_receipt_method_id;
     IF SQL%rowcount > 0 then 
       Log_Debug_Msg ('Payment Method: Updated successfully ');
       lx_od_customer_payment_stg(i).interface_status :='7';
       l_update_count := l_update_count+1;
     ELSE 
       Log_Debug_Msg ('Payment Method: Updated failed ');
       l_failed_count := l_failed_count +1;
       lx_od_customer_payment_stg(i).interface_status :=6;
       log_exception
          (
          p_conversion_id          =>ln_conversion_id
          ,p_record_control_id      =>lx_od_customer_payment_stg(i).record_id
          ,p_procedure_name         =>'CREATE_PAYMENT'
          ,p_staging_table_name     =>'XXOD_HZ_IMP_ACCT_PAYMETH_STG'
          ,p_staging_column_name    =>'RECORD_ID'
          ,p_staging_column_value   =>lx_od_customer_payment_stg(I).record_id
          ,p_batch_id               =>gn_batch_id
          ,p_exception_log          =>'Payment Method: Updated failed'
          ,p_oracle_error_msg       =>null
          ,p_source_system_code     =>lx_od_customer_payment_stg(I).party_orig_system
          ,p_source_system_ref      =>lx_od_customer_payment_stg(I).party_orig_system_reference
          ,p_oracle_error_code      =>SQLCODE            
          );   
     END IF;
   ELSE 
    Log_Debug_Msg ('Payment Method: Insert');   
   END IF;
   IF lx_od_customer_payment_stg(i).interface_status in ('0','7') THEN 
     lx_od_customer_payment_stg(i).interface_status :='7';
     l_sucess_count := l_sucess_count+1;
   ELSE
     l_failed_count := l_failed_count +1;
   END IF;

   --Log_Debug_Msg(' Payment Method: Record_id :'||lx_od_customer_payment_stg(i).record_id 
   --                  ||' Interface_status :'||lx_od_customer_payment_stg(i).interface_status);
  END LOOP;
  For i in lx_od_customer_payment_stg.first .. lx_od_customer_payment_stg.last
  LOOP
    lc_pay_record_table(lc_pay_record_table.count +1) := lx_od_customer_payment_stg(i).record_id;
    lc_pay_interface_table(lc_pay_interface_table.count +1) :=lx_od_customer_payment_stg(i).interface_status;
  END LOOP;  
 END IF;
Exit when c_xxod_customer_payment_stg%NOTFOUND; 
END LOOP;
CLOSE c_xxod_customer_payment_stg;

IF lc_pay_record_table.count > 0 THEN
 INSERT INTO ra_cust_receipt_methods
       (cust_receipt_method_id,
        created_by,
        creation_date,
        customer_id,
        last_updated_by,
        last_update_date,
        primary_flag,
        receipt_method_id,
        start_date,
        end_date,
        last_update_login,
        program_application_id,
        program_id,
        program_update_date,
        request_id,
        --site_use_id,
        attribute_category,
        attribute1,
        attribute2,
        attribute3,
        attribute4,
        attribute5,
        attribute6,
        attribute7,
        attribute8,
        attribute9,
        attribute10,
        attribute11,
        attribute12,
        attribute13,
        attribute14,
        attribute15
       ) 
 SELECT ra_cust_receipt_methods_s.nextval,
           Fnd_profile.value('user_id'),
           sysdate, 
           rc.cust_account_id,
           Fnd_profile.value('user_id'), 
           sysdate,
           nvl(i.primary_flag,'N'),
           arm.receipt_method_id,
           trunc(i.start_date),
           trunc(i.end_date),
           Fnd_profile.value('login_id'),
           nvl(i.program_application_id,gt_prg_appl_id),
           nvl(i.program_id,gt_program_id),
           sysdate,
           gt_request_id,
--           rsu.site_use_id,
           i.attribute_category,
           i.attribute1,
           i.attribute2,
           i.attribute3,
           i.attribute4,
           i.attribute5,
           i.attribute6,
           i.attribute7,
           i.attribute8,
           i.attribute9,
           i.attribute10,
           i.attribute11,
           i.attribute12,
           i.attribute13,
           i.attribute14,
           i.attribute15
      FROM hz_cust_accounts rc,
           ar_receipt_methods arm,
           --hz_cust_acct_sites ra,
           --hz_cust_site_uses rsu,
           xxod_hz_imp_acct_paymeth_stg i
     WHERE i.interface_status IN ('1','4','6')
       AND i.start_date is not null
       AND i.batch_id = p_batch_id
       AND i.account_orig_system_reference = rc.orig_system_reference
       --AND i.orig_system_address_ref = ra.orig_system_reference(+)
       AND i.payment_method_name = arm.name
       AND NOT EXISTS ( SELECT 'x' FROM ra_cust_receipt_methods
       WHERE customer_id = rc.cust_account_id
       AND receipt_method_id =arm.receipt_method_id)
       --AND ra.cust_acct_site_id = rsu.cust_acct_site_id(+)
       --AND rsu.site_use_code(+) = 'BILL_TO'
       --AND rsu.status(+) = 'A'
       ;

   Log_Debug_Msg ('Payment Method: No. of Records Sucessful in validation :'|| l_sucess_count);
   Log_Debug_Msg ('Payment Method: No. of Records Created successfully :'|| sql%rowcount);
   Log_Debug_Msg ('Payment Method: No. of Records Updated successfully :'|| l_update_count);
    
   commit;

   FORALL i in 1 .. lc_pay_record_table.last
    UPDATE xxod_hz_imp_acct_paymeth_stg 
    SET Interface_status =lc_pay_interface_table(i) 
    WHERE record_id = lc_pay_record_table(i);   
   commit;
   XX_COM_CONV_ELEMENTS_PKG.Log_control_info_proc(
            p_conversion_id            => ln_conversion_id
           ,p_batch_id                 => gn_batch_id
           ,p_num_bus_objs_processed   => 0);
           
   XX_COM_CONV_ELEMENTS_PKG.upd_control_info_proc(
            p_conc_mst_req_id              => APPS.FND_GLOBAL.CONC_REQUEST_ID
           ,p_batch_id                     => gn_batch_id
           ,p_conversion_id                => ln_conversion_id
           ,p_num_bus_objs_failed_valid    => 0
           ,p_num_bus_objs_failed_process  => l_failed_count
           ,p_num_bus_objs_succ_process    => l_sucess_count); 
   
   Log_debug_msg('Total No. of Records Processed :'||lc_pay_record_table.last);
   Log_debug_msg('Total No. of Records Succeded :'||l_sucess_count);
   Log_debug_msg('Total No. of Records Failed :'||l_failed_count);                   
   Log_Debug_Msg('==================       END       =================');
   
   FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'=============== Create Payment Method  ===============');
   FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'Total No. of Records Processed :'||lc_pay_record_table.last);
   FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'Total No. of Records Succeded :'||l_sucess_count);
   FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'Total No. of Records Failed :'||l_failed_count);                   
   FND_FILE.PUT_LINE(FND_FILE.OUTPUT,'==================       END       =================');   
END IF;
   
   
EXCEPTION
 WHEN OTHERS THEN 
   x_errbuf    :='Others Exception in CREATE_PAYMENT procedure '||SQLERRM;
   x_retcode   :='2';   
END CREATE_PAYMENT;

-- +===================================================================+
-- | Name : Log_Debug_Msg                                              |
-- | Description :                                                     |
-- |                                                                   |
-- | Parameters :  p_debug_msg                                         |
-- |                                                                   |
-- +===================================================================+
PROCEDURE Log_Debug_Msg(
         p_debug_msg              IN        VARCHAR2)
AS

BEGIN
    --IF fnd_profile.value ('') = 'Y' THEN
    --DBMS_OUTPUT.PUT_LINE(p_debug_msg);
    --FND_FILE.PUT_LINE(FND_FILE.LOG,p_debug_msg);
    --END IF;
	FND_FILE.PUT_LINE(FND_FILE.LOG,p_debug_msg);
    XX_CDH_CONV_MASTER_PKG.WRITE_CONC_LOG_MESSAGE( P_DEBUG_MSG);
END Log_Debug_Msg;

PROCEDURE LOG_EXCEPTION(
         p_conversion_id          IN NUMBER
        ,p_record_control_id      IN NUMBER
        ,p_procedure_name         IN VARCHAR2
        ,p_staging_table_name     IN VARCHAR2
        ,p_staging_column_name    IN VARCHAR2
        ,p_staging_column_value   IN VARCHAR2
        ,p_batch_id               IN NUMBER
        ,p_exception_log          IN VARCHAR2
        ,p_oracle_error_msg       IN VARCHAR2
        ,p_source_system_code     IN VARCHAR2
        ,p_source_system_ref      IN VARCHAR2
        ,p_oracle_error_code      IN VARCHAR2)

AS
    lc_package_name           VARCHAR2(32)  := 'XX_CDH_CUST_BANK_PAYMENT_PKG';
    lc_source_system_code     VARCHAR2(5)   := 'SSR';
    lc_source_system_ref      VARCHAR2(80)  := 'Source System Ref';
    lc_oracle_error_code      VARCHAR2(10)  := 'ErrCode';

 BEGIN    
    XX_COM_CONV_ELEMENTS_PKG.log_exceptions_proc(   
             p_conversion_id          => p_conversion_id
            ,p_record_control_id      => p_record_control_id 
            ,p_source_system_code     => p_source_system_code
            ,p_package_name           => lc_package_name
            ,p_procedure_name         => p_procedure_name
            ,p_staging_table_name     => p_staging_table_name
            ,p_staging_column_name    => p_staging_column_name
            ,p_staging_column_value   => p_staging_column_value
            ,p_source_system_ref      => p_source_system_ref
            ,p_batch_id               => p_batch_id
            ,p_exception_log          => p_exception_log
            ,p_oracle_error_code      => p_oracle_error_code
            ,p_oracle_error_msg       => p_oracle_error_msg);
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error in Calling Procedure :'||SQLERRM);
END LOG_EXCEPTION;

-- +===================================================================+
-- | Name        :  CREATE_BANK_BRANCH                                 |
-- | Description :  This procedure is create Bank Branch for CDH       |
-- |                                                                   |
-- | Parameters  :  p_batch_id                                         |
-- |                   Bank Branch records are retrieved based on      |
-- |                   the batch_id                                    |
-- |                                                                   |
-- |                                                                   |
-- |                                                                   |
-- | Returns     :                                                     |
-- |                                                                   |
-- +===================================================================+
PROCEDURE create_bank_branch
      (  x_errbuf            OUT VARCHAR2,
         x_retcode           OUT VARCHAR2,
         p_batch_id          IN  NUMBER
      )
IS

CURSOR lc_fetch_bank_branch_cur
IS
SELECT *
FROM   xxod_hz_imp_customer_banks_stg
WHERE  bank_branch_interface_status IN (1,4,6)
AND    batch_id = p_batch_id;

TYPE lt_bank_branch_tbl_type     IS TABLE OF xxod_hz_imp_customer_banks_stg%ROWTYPE INDEX BY BINARY_INTEGER;
lt_bank_branch_tbl               lt_bank_branch_tbl_type;

TYPE lt_upd_tbl_type             IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
lt_upd_record_tbl                lt_upd_tbl_type;
lt_upd_interface_tbl             lt_upd_tbl_type;

ln_bank_exists                   NUMBER;
ln_bank_num_exists               NUMBER;
ln_records_read                  NUMBER;
ln_records_success               NUMBER;
ln_records_failed                NUMBER;
le_skip_loop                     EXCEPTION;
ln_conversion_id                 NUMBER := 00244.4;
le_skip_procedure                EXCEPTION;

-- Added by Deepak for r12 Retrofit.
l_bank_branch_id                 NUMBER; 
l_return_status					 VARCHAR2(2000);
l_msg_count						 NUMBER(5);
l_msg_data						 VARCHAR2(2000);
l_response						 IBY_FNDCPT_COMMON_PUB.Result_rec_type;
lr_result_rec					 iby_fndcpt_common_pub.result_rec_type;
l_extbank_recbranch_rec      	 iby_ext_bankacct_pub.extbankbranch_rec_type;
l_location_rec 					 HZ_LOCATION_V2PUB.LOCATION_REC_TYPE;
l_party_site_rec				 hz_party_site_v2pub.party_site_rec_type;
l_contact_point_rec              hz_contact_point_v2pub.contact_point_rec_type;
l_phone_rec						 hz_contact_point_v2pub.phone_rec_type;

l_edi_rec                        HZ_CONTACT_POINT_V2PUB.EDI_REC_TYPE;
l_email_rec                      HZ_CONTACT_POINT_V2PUB.EMAIL_REC_TYPE;
l_telex_rec                      HZ_CONTACT_POINT_V2PUB.TELEX_REC_TYPE;
l_web_rec                        HZ_CONTACT_POINT_V2PUB.WEB_REC_TYPE;

l_location_id                    NUMBER;
l_addr_val_status                VARCHAR2(2000);
l_addr_warn_msg                  VARCHAR2(2000);

l_party_site_id                  NUMBER;
l_party_site_number              VARCHAR2(2000);

l_contact_point_id				 NUMBER;

l_bank_id						 NUMBER;
l_branch_id					     NUMBER;

l_end_date						 DATE;
BEGIN

   log_debug_msg( '******************************************');
   log_debug_msg( '* Start of Create Bank Branch Procedure. *');
   log_debug_msg( '******************************************');

   ln_records_read    := 0;
   ln_records_success := 0;
   ln_records_failed  := 0;
      
   OPEN  lc_fetch_bank_branch_cur;
   LOOP
      FETCH lc_fetch_bank_branch_cur BULK COLLECT INTO lt_bank_branch_tbl LIMIT gn_bulk_fetch_limit;
      
      IF lt_bank_branch_tbl.count = 0 THEN
         log_debug_msg( 'No records exist in the staging table for batch_id - '||p_batch_id||' for contact roles');
         fnd_file.put_line(fnd_file.output, ' ');
         fnd_file.put_line(fnd_file.output, ' ');
         fnd_file.put_line(fnd_file.output, 'Record Statistics after Processing Banks ');
         fnd_file.put_line(fnd_file.output, '-------------------------------------------------------------');
         fnd_file.put_line(fnd_file.output, 'Staging Table - XXOD_HZ_IMP_CUSTOMER_BANKS_STG ');
         fnd_file.put_line(fnd_file.output, 'No Of Records Read                   - '||ln_records_read);
         fnd_file.put_line(fnd_file.output, 'No Of Records Processesd Succesfully - '||ln_records_success);
         fnd_file.put_line(fnd_file.output, 'No Of Records Failed                 - '||ln_records_failed);
         fnd_file.put_line(fnd_file.output, '-------------------------------------------------------------');
         fnd_file.put_line(fnd_file.output, ' ');
         fnd_file.put_line(fnd_file.output, ' ');   
         RAISE le_skip_procedure;
      END IF;
      
      FOR i IN lt_bank_branch_tbl.FIRST .. lt_bank_branch_tbl.LAST
      LOOP
         BEGIN
            ln_records_read := ln_records_read + 1;
            log_debug_msg( ' ');
            log_debug_msg( '-----------------------------------------------');
            log_debug_msg( 'RECORD_ID:'||lt_bank_branch_tbl(i).record_id);
            log_debug_msg( ' ');
            log_debug_msg( ' ');
            
            ---------------------------------------
            -- Check if Bank Branch Already exists
            ---------------------------------------
            ln_bank_exists := 0;
			
			BEGIN
				IBY_EXT_BANKACCT_PUB.check_bank_exist
					(
					p_api_version => 1.0,
					p_init_msg_list => fnd_api.g_false,
					p_country_code => lt_bank_branch_tbl(i).bank_branch_country,
					p_bank_name => lt_bank_branch_tbl(i).bank_name,
					p_bank_number => null,
					x_response => l_response,
					x_bank_id => ln_bank_exists,
					x_end_date => l_end_date,
					x_return_status => l_return_status,
					x_msg_count => l_msg_count,
					x_msg_data => l_msg_data
					);
					
				IF NVL(ln_bank_exists,0) = 0 THEN
					Log_Debug_Msg('Error getting bank Information for bank ' || lt_bank_branch_tbl(i).bank_name);
				END IF;
			EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  NULL;
               WHEN OTHERS THEN
                  log_debug_msg( 'Unexpected error while validating bank branch - '||SQLERRM);
                  lt_bank_branch_tbl(i).bank_branch_interface_status := 6;
                  log_exception
                     (   p_conversion_id          => ln_conversion_id
                        ,p_record_control_id      => lt_bank_branch_tbl(i).record_id
                        ,p_procedure_name         => 'CREATE_BANK_BRANCH'
                        ,p_staging_table_name     => 'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
                        ,p_staging_column_name    => 'BANK_NAME'
                        ,p_staging_column_value   => lt_bank_branch_tbl(i).bank_name
                        ,p_batch_id               => p_batch_id
                        ,p_exception_log          => 'Unexpected error while validating bank branch - '||SQLERRM
                        ,p_oracle_error_msg       => NULL
                        ,p_source_system_code     => lt_bank_branch_tbl(i).party_orig_system
                        ,p_source_system_ref      => lt_bank_branch_tbl(i).party_orig_system_reference
                        ,p_oracle_error_code      => NULL       
                     ); 
                  RAISE le_skip_loop;   
            END;
            
            IF ln_bank_exists = 0 THEN
               --ln_records_success := ln_records_success + 1;
               --lt_bank_branch_tbl(i).bank_branch_interface_status := 7;
               log_debug_msg('Bank does not exist ' || lt_bank_branch_tbl(i).bank_name);
               --RAISE le_skip_loop;
            END IF;   
               
            ln_bank_num_exists := 0;
               --------------------------------------------------
               -- Check if Bank Number and Bank Num already exist
               --------------------------------------------------
			   
			   --  bank_num is replaced by branch_number. Changed for R12 retrofit		
			BEGIN
				IBY_EXT_BANKACCT_PUB.check_ext_bank_branch_exist
				(		
				 p_api_version => 1.0,
				 p_init_msg_list => fnd_api.g_false,
				 p_bank_id => ln_bank_exists,
				 p_branch_name => lt_bank_branch_tbl(i).bank_branch_name,
				 p_branch_number => null,
				 x_response => l_response,
				 x_branch_id => ln_bank_num_exists,
				 x_end_date => l_end_date,
				 x_return_status => l_return_status,
				 x_msg_count => l_msg_count,
				 x_msg_data => l_msg_data
				);				
				IF nvl(ln_bank_num_exists,0) = 0 THEN
					Log_Debug_Msg('No Branch Information for bank branch ' || lt_bank_branch_tbl(i).bank_branch_name);
				END IF;
			EXCEPTION			
                  WHEN NO_DATA_FOUND THEN
                     NULL;
                  WHEN OTHERS THEN
                     log_debug_msg( 'Unexpected error while validating bank branch - '||SQLERRM);
                     lt_bank_branch_tbl(i).bank_branch_interface_status := 6;
                     log_exception
                        (   p_conversion_id          => ln_conversion_id
                           ,p_record_control_id      => lt_bank_branch_tbl(i).record_id
                           ,p_procedure_name         => 'CREATE_BANK_BRANCH'
                           ,p_staging_table_name     => 'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
                           ,p_staging_column_name    => 'BANK_NUMBER'
                           ,p_staging_column_value   => lt_bank_branch_tbl(i).bank_number
                           ,p_batch_id               => p_batch_id
                           ,p_exception_log          => 'Unexpected error while validating bank number - '||SQLERRM
                           ,p_oracle_error_msg       => NULL
                           ,p_source_system_code     => lt_bank_branch_tbl(i).party_orig_system
                           ,p_source_system_ref      => lt_bank_branch_tbl(i).party_orig_system_reference
                           ,p_oracle_error_code      => NULL       
                        );
                     RAISE le_skip_loop;   
            END;               

            
			
			IF ln_bank_num_exists > 1 THEN
               --ln_records_success := ln_records_success + 1;
               --lt_bank_branch_tbl(i).bank_branch_interface_status := 7;
               log_debug_msg('Bank Branch Already Exists');               
            END IF;  
            
            --------------------------------
            -- Insert into ap_bank_branches
            --------------------------------
			
			--Code added for r12 retrofit changes. The below qry picks the party id that needs to be passed 
			--to create a  bank branch. In case the bank does not exist, the branch creation will fail.
			
			IF NVL(ln_bank_num_exists,0) = 0 THEN 
				BEGIN
				
					SELECT DISTINCT bank_party_id
					INTO   l_bank_id
					FROM   ce_banks_v
					WHERE  bank_name              =  lt_bank_branch_tbl(i).bank_name
					  AND  NVL(bank_number,0)     =  NVL(lt_bank_branch_tbl(i).bank_number,0)
					  AND  NVL(END_DATE,SYSDATE) >= SYSDATE ;
				
				exception
					WHEN NO_DATA_FOUND THEN
						log_debug_msg( 'Bank has not been defined hence Branch creation will fail for bank  name ' || lt_bank_branch_tbl(i).bank_name
									   || ' and bank number ' || NVL(lt_bank_branch_tbl(i).bank_number,0));
					WHEN OTHERS THEN
						log_debug_msg( 'Error while reading bank details for bank name ' || lt_bank_branch_tbl(i).bank_name
									   || ' and bank number ' || NVL(lt_bank_branch_tbl(i).bank_number,0));
				end;
				
				l_extbank_recbranch_rec.bank_party_id := l_bank_id;			
				l_extbank_recbranch_rec.branch_name   := lt_bank_branch_tbl(i).bank_branch_name;
				l_extbank_recbranch_rec.branch_number := lt_bank_branch_tbl(i).bank_num;
				l_extbank_recbranch_rec.branch_type   := 'ABA';	
				l_extbank_recbranch_rec.description   := lt_bank_branch_tbl(i).bank_branch_description;
				l_extbank_recbranch_rec.attribute_category := lt_bank_branch_tbl(i).bank_branch_att_category;
				l_extbank_recbranch_rec.attribute1    := lt_bank_branch_tbl(i).bank_branch_attribute1;
				l_extbank_recbranch_rec.attribute2    := lt_bank_branch_tbl(i).bank_branch_attribute2;
				l_extbank_recbranch_rec.attribute3    := lt_bank_branch_tbl(i).bank_branch_attribute3;
				l_extbank_recbranch_rec.attribute4    := lt_bank_branch_tbl(i).bank_branch_attribute4;
				l_extbank_recbranch_rec.attribute5    := lt_bank_branch_tbl(i).bank_branch_attribute5;
				l_extbank_recbranch_rec.attribute6    := lt_bank_branch_tbl(i).bank_branch_attribute6;
				l_extbank_recbranch_rec.attribute7    := lt_bank_branch_tbl(i).bank_branch_attribute7;
				l_extbank_recbranch_rec.attribute8    := lt_bank_branch_tbl(i).bank_branch_attribute8;
				l_extbank_recbranch_rec.attribute9    := lt_bank_branch_tbl(i).bank_branch_attribute9;
				l_extbank_recbranch_rec.attribute10   := lt_bank_branch_tbl(i).bank_branch_attribute10;
				l_extbank_recbranch_rec.attribute11   := lt_bank_branch_tbl(i).bank_branch_attribute11;
				l_extbank_recbranch_rec.attribute12   := lt_bank_branch_tbl(i).bank_branch_attribute12;
				l_extbank_recbranch_rec.attribute13   := lt_bank_branch_tbl(i).bank_branch_attribute13;
				l_extbank_recbranch_rec.attribute14   := lt_bank_branch_tbl(i).bank_branch_attribute14;
				l_extbank_recbranch_rec.attribute15   := lt_bank_branch_tbl(i).bank_branch_attribute15;
				l_extbank_recbranch_rec.eft_number    := lt_bank_branch_tbl(i).bank_branch_eft_user_number;

				/* Below block has been added for r12 retrofit changes */
				-- Step 1 : Create a bank branch using passing Bank Party ID.
				begin
				
					iby_ext_bankacct_pub.create_ext_bank_branch
										  (p_api_version           => 1.0									  
										  ,p_ext_bank_branch_rec   => l_extbank_recbranch_rec
										  ,x_branch_id             => l_bank_branch_id
										  ,x_return_status         => l_return_status
										  ,x_msg_count             => l_msg_count
										  ,x_msg_data              => l_msg_data
										  ,x_response              => lr_result_rec
										  );
				
					if l_bank_branch_id > 0 AND l_return_status = FND_API.G_RET_STS_SUCCESS then
						log_debug_msg( 'Bank Branch Created Successfully with ID = ' || l_bank_branch_id);		
						lt_bank_branch_tbl(i).bank_branch_interface_status := 7;	
						ln_bank_num_exists := l_bank_branch_id;						
					else
						log_debug_msg( 'Bank Branch Creation Failed for Bank ' || lt_bank_branch_tbl(i).bank_name ||
						' And Branch ' || NVL(lt_bank_branch_tbl(i).bank_branch_name,0));
						
						log_debug_msg('Branch creation error ' || l_msg_data); 					
						lt_bank_branch_tbl(i).bank_branch_interface_status := 6;
						ROLLBACK;
						RAISE le_skip_loop;
					end if;				
				EXCEPTION
					WHEN OTHERS THEN
						log_debug_msg('Error while calling iby_ext_bankacct_pub.create_ext_bank_branch - ' || sqlerrm);
						ROLLBACK;
				END;
			
				-- Step 2 : Create a Location which will later be associated to the bank party site.
				BEGIN
					--Not sure where this information must be saved. lt_bank_branch_tbl(i).bank_branch_area_code 
					l_location_rec.address1     := lt_bank_branch_tbl(i).bank_branch_address1;
					l_location_rec.address2     := lt_bank_branch_tbl(i).bank_branch_address2;
					l_location_rec.address3     := lt_bank_branch_tbl(i).bank_branch_address3;
					l_location_rec.address4     := lt_bank_branch_tbl(i).bank_branch_address4;
					l_location_rec.city         := lt_bank_branch_tbl(i).bank_branch_city;
					l_location_rec.county       := lt_bank_branch_tbl(i).bank_branch_county;
					l_location_rec.state        := lt_bank_branch_tbl(i).bank_branch_state;
					l_location_rec.postal_code  := lt_bank_branch_tbl(i).bank_branch_zip;
					l_location_rec.province     := lt_bank_branch_tbl(i).bank_branch_province;
					l_location_rec.country      := lt_bank_branch_tbl(i).bank_branch_country;
					l_location_rec.created_by_module := lt_bank_branch_tbl(i).created_by_module;
					
					hz_location_v2pub.create_location 
						(						
							p_location_rec        => l_location_rec,						
							x_location_id         => l_location_id,						
							x_return_status       => l_return_status,
							x_msg_count           => l_msg_count,
							x_msg_data            => l_msg_data
						);			
					
					IF NVL(l_location_id,0) > 0 AND l_return_status = FND_API.G_RET_STS_SUCCESS then
						log_debug_msg( 'Bank Branch Location Created Successfully with location ID = ' || l_location_id);												
						--COMMIT;
					ELSE
						log_debug_msg( 'Bank Branch Location Failed for bank ' || lt_bank_branch_tbl(i).bank_name ||
						' And Branch ' || NVL(lt_bank_branch_tbl(i).bank_branch_name,0));
						log_debug_msg('Location creation error ' || l_msg_data); 
						lt_bank_branch_tbl(i).bank_branch_interface_status := 6;
						ROLLBACK;
						RAISE le_skip_loop;
					END IF;								
					
				EXCEPTION
					WHEN OTHERS THEN
						log_debug_msg('Error while calling hz_location_v2pub.create_location - ' || sqlerrm);
						ROLLBACK;
						RAISE le_skip_loop;
				END;
					
					
				
				-- Step 3 : Create a party site using party ID from step 1 and location ID from step 2
				BEGIN
					l_party_site_rec.party_id                 := ln_bank_num_exists;
					l_party_site_rec.location_id              := l_location_id;        
					l_party_site_rec.identifying_address_flag := 'Y';
					SELECT HZ_PARTY_SITE_NUMBER_S.NEXTVAL 
					INTO l_party_site_rec.party_site_number
					FROM DUAL;
					l_party_site_rec.created_by_module		  := lt_bank_branch_tbl(i).created_by_module;
				
					hz_party_site_v2pub.create_party_site (
										p_party_site_rec      => l_party_site_rec,
										x_party_site_id       => l_party_site_id,
										x_party_site_number   => l_party_site_number,											
										x_return_status       => l_return_status,
										x_msg_count           => l_msg_count,
										x_msg_data            => l_msg_data
									  );
									  
					IF l_party_site_id > 0 AND l_return_status = FND_API.G_RET_STS_SUCCESS then
						log_debug_msg( 'Bank Branch site Created Successfully with Site ID = ' || l_party_site_id);							
						--COMMIT;
					ELSE
						log_debug_msg( 'Bank Branch Site Creation Failed For branch ID ' || ln_bank_num_exists ||
						' And Lcation ' || l_location_id);
						lt_bank_branch_tbl(i).bank_branch_interface_status := 6;
						log_debug_msg('Branch site creation error ' || l_msg_data); 
						ROLLBACK;
						RAISE le_skip_loop;
					END IF;	

				EXCEPTION
					WHEN OTHERS THEN
						log_debug_msg('Error while calling hz_party_site_v2pub.create_party_site - ' || sqlerrm);
						RAISE le_skip_loop;
				END;					
			
				-- Step 4 : Create a contact Point for the branch.
				BEGIN
					l_contact_point_rec.contact_point_type    := 'PHONE';
					l_contact_point_rec.owner_table_name      := 'HZ_PARTY_SITES';
					l_contact_point_rec.owner_table_id        := l_party_site_id;
					l_contact_point_rec.primary_flag          := 'Y';
					l_contact_point_rec.contact_point_purpose := 'BUSINESS';
					l_contact_point_rec.created_by_module     := lt_bank_branch_tbl(i).created_by_module;

					l_phone_rec.phone_area_code               :=  NULL;
					l_phone_rec.phone_country_code            :=  NULL;
					l_phone_rec.phone_number                  :=  lt_bank_branch_tbl(i).bank_branch_phone;
					l_phone_rec.phone_line_type               := 'GEN';
					
					HZ_CONTACT_POINT_V2PUB.CREATE_CONTACT_POINT (
																 p_init_msg_list      => FND_API.G_TRUE,
																 p_contact_point_rec  => l_contact_point_rec,
																 p_phone_rec          => l_phone_rec,
																 p_edi_rec            => l_edi_rec,
																 p_email_rec          => l_email_rec,
																 p_telex_rec          => l_telex_rec,
																 p_web_rec            => l_web_rec,
																 x_contact_point_id   => l_contact_point_id,
																 x_return_status      => l_return_status,
																 x_msg_count          => l_msg_count,
																 x_msg_data           => l_msg_data
																);
					
					IF l_contact_point_id > 0 AND l_return_status = FND_API.G_RET_STS_SUCCESS then
						log_debug_msg( 'Bank Branch contact point Created Successfully with Site ID = ' || l_contact_point_id);		
						lt_bank_branch_tbl(i).bank_branch_interface_status := 7;										
					ELSE
						log_debug_msg( 'Bank Branch Contact Point Failed for Bank Site ID ' || l_party_site_id);
						lt_bank_branch_tbl(i).bank_branch_interface_status := 6;
						log_debug_msg('Contact point creation error ' || l_msg_data); 
						ROLLBACK;
						RAISE le_skip_loop;
					END IF;
								
					COMMIT;
				EXCEPTION
					WHEN OTHERS THEN
						log_debug_msg( 'Error while calling HZ_CONTACT_POINT_V2PUB.CREATE_CONTACT_POINT '|| sqlerrm);
				END;
			ELSE
				lt_bank_branch_tbl(i).bank_branch_interface_status := 5;	
			END IF; --End of loop for bank branch exists
		    /* END of addition for r12 retrofit changes */
         EXCEPTION
            WHEN le_skip_loop THEN
               NULL;
            WHEN OTHERS THEN
               log_debug_msg( 'Error while creating Bank - Another Bank exists with same Bank Number and bank Branch Number');
               lt_bank_branch_tbl(i).bank_branch_interface_status := 6;
               log_exception
                     (   p_conversion_id          => ln_conversion_id
                        ,p_record_control_id      => lt_bank_branch_tbl(i).record_id
                        ,p_procedure_name         => 'CREATE_BANK_BRANCH'
                        ,p_staging_table_name     => 'XXOD_HZ_IMP_CUSTOMER_BANKS_STG'
                        ,p_staging_column_name    => 'RECORD_ID'
                        ,p_staging_column_value   => lt_bank_branch_tbl(i).record_id
                        ,p_batch_id               => p_batch_id
                        ,p_exception_log          => 'Unexpected error while inserting bank branch - '||SQLERRM
                        ,p_oracle_error_msg       => NULL
                        ,p_source_system_code     => lt_bank_branch_tbl(i).party_orig_system
                        ,p_source_system_ref      => lt_bank_branch_tbl(i).party_orig_system_reference
                        ,p_oracle_error_code      => NULL       
                     );
         
         END;
		 
		 IF lt_bank_branch_tbl(i).bank_branch_interface_status = 7 THEN
			ln_records_success := ln_records_success + 1;
		 ELSE
			ln_records_failed  := ln_records_failed + 1;
		 END IF;
         
         lt_upd_record_tbl(i)    := lt_bank_branch_tbl(i).record_id;
         lt_upd_interface_tbl(i) := lt_bank_branch_tbl(i).bank_branch_interface_status;
         
      END LOOP;
      
      IF lt_bank_branch_tbl.LAST > 0 THEN
      
         FORALL i IN 1 .. lt_bank_branch_tbl.last
         UPDATE xxod_hz_imp_customer_banks_stg
         SET    bank_branch_interface_status     = lt_upd_interface_tbl(i)
         WHERE  record_id                        = lt_upd_record_tbl(i);

         COMMIT;
      
      END IF;
      --------------------
      -- Clear the tables
      --------------------
      lt_upd_interface_tbl.DELETE;
      lt_upd_record_tbl.DELETE;
      lt_bank_branch_tbl.DELETE;
      EXIT WHEN lc_fetch_bank_branch_cur%NOTFOUND;
      
   END LOOP;
   
   CLOSE lc_fetch_bank_branch_cur;
   
   ln_records_failed := ln_records_read - ln_records_success; 
   
   log_debug_msg( ' ');
   log_debug_msg( ' ');
   log_debug_msg( 'Record Statistics after Processing Bank Branches ');
   log_debug_msg( '-------------------------------------------------------------');
   log_debug_msg( 'Staging Table - XXOD_HZ_IMP_CUSTOMER_BANKS_STG ');
   log_debug_msg( 'No Of Records Read                   - '||ln_records_read);
   log_debug_msg( 'No Of Records Processesd Succesfully - '||ln_records_success);
   log_debug_msg( 'No Of Records Failed                 - '||ln_records_failed);
   log_debug_msg( '-------------------------------------------------------------');
   log_debug_msg( ' ');
   log_debug_msg( ' ');
   
   
   fnd_file.put_line(fnd_file.output, ' ');
   fnd_file.put_line(fnd_file.output, ' ');
   fnd_file.put_line(fnd_file.output, 'Record Statistics after Processing Bank Branches ');
   fnd_file.put_line(fnd_file.output, '-------------------------------------------------------------');
   fnd_file.put_line(fnd_file.output, 'Staging Table - XXOD_HZ_IMP_CUSTOMER_BANKS_STG ');
   fnd_file.put_line(fnd_file.output, 'No Of Records Read                   - '||ln_records_read);
   fnd_file.put_line(fnd_file.output, 'No Of Records Processesd Succesfully - '||ln_records_success);
   fnd_file.put_line(fnd_file.output, 'No Of Records Failed                 - '||ln_records_failed);
   fnd_file.put_line(fnd_file.output, '-------------------------------------------------------------');
   fnd_file.put_line(fnd_file.output, ' ');
   fnd_file.put_line(fnd_file.output, ' ');

EXCEPTION
   WHEN le_skip_procedure THEN
      NULL;
   WHEN OTHERS THEN
      log_debug_msg( 'Unexpected Error in procedure create_bank_branch - '||SQLERRM);
      x_retcode := 2;
      x_errbuf  := 'Unexpected Error in procedure create_bank_branch - '||SQLERRM;
END create_bank_branch;

END XX_CDH_CUST_BANK_PAYMENT_PKG;
/
SHOW ERRORS;
