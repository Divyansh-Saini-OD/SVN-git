SET VERIFY OFF;
WHENEVER SQLERROR CONTINUE;
WHENEVER OSERROR EXIT FAILURE ROLLBACK;

-- +============================================================================================+
-- |                  Office Depot - Project Simplify						|
-- +============================================================================================+
-- | Name        : XX_CRM_EXP_TASKS_PKG.pkb                                                     |
-- | Description : SFDC Conversion                                                              |
-- |                                                                                            |
-- |                                                                                            |
-- |Change Record:                                                                              |
-- |===============                                                                             |
-- |Version     Date           Author               Remarks                                     |
-- |=======    ==========      ================     ============================================|
-- |1.0        08/07/11       Devendra Petkar        Initial version                            |
-- +============================================================================================+

CREATE OR REPLACE PACKAGE BODY xx_crm_exp_tasks_pkg
-- +===================================================================+
-- |                  Office Depot -  Ebiz to SFDC Conversion.         |
-- +===================================================================+
-- | Name       :  XX_CRM_EXP_TASKS_PKG                                |
-- | Description: This Package is to performed to create csv file from |
-- |          staging table and send this file to the SFDC.            |
-- |          SFDC will load exception table and then this process     |
-- |          will update staging table with exceptions.               |
-- |                                       |
-- |Change Record:                                                     |
-- |===============                                                    |
-- |Version   Date        Author           Remarks                     |
-- |=======   ==========  =============    ============================|
-- |V 1.0    08/07/11   Devendra Petkar                       |
-- +===================================================================+
AS
-- +===================================================================+
-- | Name             : Copy_File                                      |
-- | Description      : This procedure copy the file generated by      |
-- |                    Generate_File procedure from Outbound directory|
-- |                    to FTP out directory.                          |
-- |                                                                   |
-- | parameters :      p_sourcepath                                    |
-- |                   p_destpath                                      |
-- |                                                                   |
-- +===================================================================+


   PROCEDURE generate_file_tasks (
      x_errbuf        OUT NOCOPY      VARCHAR2,
      x_retcode       OUT NOCOPY      NUMBER,
      p_entity_name   IN              xx_crm_exp_batch.entity_name%TYPE,
      p_exp_param     IN              VARCHAR2 DEFAULT 'I',
      p_source_batch_id   IN              VARCHAR2 DEFAULT ''
   )
   IS
      lc_batch_id     xx_crm_exp_batch.batch_id%TYPE;
      lc_batch_id_update     xx_crm_exp_batch.batch_id%TYPE;
      lc_entity_name_update   xx_crm_exp_batch.entity_name%TYPE;
      lc_message1      VARCHAR2 (3000);
      lc_start_date   VARCHAR2 (2000)
                          := fnd_profile.VALUE ('XX_CRM_SFDC_CUST_CONV_START_DATE');
      lc_end_date     VARCHAR2 (2000)
                            := fnd_profile.VALUE ('XX_CRM_SFDC_CUST_CONV_END_DATE');
--      lc_conv_date	VARCHAR2 (2000)
--                            := TO_DATE(NVL(fnd_profile.value('XX_CRM_SFDC_PROS_ST_DATE'),SYSDATE-400),'MM/DD/YYYY HH24:MI:SS');
      lc_task_conv_date	VARCHAR2 (2000)
                            := NVL(fnd_profile.value('XX_CRM_SFDC_TASKS_ST_DATE'),'01/01/2012 00:00:00');


   BEGIN
      -- Initialize the out Parameters
      x_errbuf := NULL;
      x_retcode := 0;

      fnd_file.put_line (fnd_file.LOG, 'Tasks Feed Generation Process start');
      fnd_file.put_line (fnd_file.LOG, ' ');

--- Generate new Batch id
      xx_crm_exp_batch_pkg.generate_batch_id (lc_batch_id, '', p_entity_name);

	IF p_exp_param='I' THEN
		lc_entity_name_update:=p_entity_name||'_UPDATE';
		      xx_crm_exp_batch_pkg.generate_batch_id (lc_batch_id_update, '', lc_entity_name_update);

	END IF;


      fnd_file.put_line (fnd_file.LOG, 'Generated Batch Id');
      fnd_file.put_line (fnd_file.LOG, ' ');

      IF p_entity_name = 'TASKS_PARTY' AND p_exp_param = 'F'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         INSERT INTO xx_crm_exp_tasks_party
                     (record_id, batch_id, task_id, task_name, description,
                      task_number, source_object_id, source_object_type_code,
                      owner_id, address_id, cust_account_id, customer_id,
                      task_priority_id, task_status_id, task_type_id,
		      call_disposition, disposition_code, disposition_date,
                      creation_date, created_by, last_update_date,
                      last_updated_by, planned_end_date,deleted_flag)
            SELECT ROWNUM, lc_batch_id, task_id, task_name, description,
                   task_number, source_object_id, source_object_type_code,
                   fnc_owner_id (owner_id), address_id, cust_account_id,
                   customer_id, fnc_priorities_id (task_priority_id),
                   fnc_status_id (task_status_id),
                   fnc_type_id (task_type_id,1), fnc_type_id (task_type_id,2), fnc_type_id (task_type_id,3),
                   TO_CHAR (COALESCE (scheduled_end_date, last_update_date),'yyyy-mm-dd'),
                   TO_CHAR (creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (created_by),
                   TO_CHAR (last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (last_updated_by),
                   TO_CHAR (COALESCE (scheduled_end_date,
					last_update_date
                            ),'yyyy-mm-dd'), DECODE(deleted_flag,'N','false','Y','true')
		FROM apps.jtf_tasks_vl a , ( SELECT /*+ PARALLEL (AA,4) PARALLEL (BB,4) */ DISTINCT bb.PARTY_ID
						FROM xxcrm.xx_crm_exp_site_master AA, apps.hz_party_sites BB
						WHERE aa.party_site_id = bb.party_site_id   ) b
		     WHERE a.source_object_id = b.party_id
			AND a.deleted_flag = 'N' AND a.source_object_type_code = 'PARTY'
		       AND (   a.creation_date <
					  TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			    OR a.last_update_date <
					  TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			)
			AND a.last_update_date >=
					  TO_DATE (lc_task_conv_date, 'MM/DD/RRRR HH24:MI:SS');


      lc_message1 := p_entity_name || ' records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

	 COMMIT;

         INSERT INTO apps.xx_crm_exp_tasks_party_master
		(task_id, source_object_id, last_update_date)
			SELECT task_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_tasks_party WHERE batch_id=lc_batch_id;

	COMMIT;

	DELETE FROM apps.xx_crm_exp_tasks_party_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_tasks_party_master GROUP BY task_id, source_object_id ) A, apps.xx_crm_exp_tasks_party_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      ELSIF p_entity_name = 'TASKS_PARTY_SITE' AND p_exp_param = 'F'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         INSERT INTO xx_crm_exp_tasks_party_site
                     (record_id, batch_id, task_id, task_name, description,
                      task_number, source_object_id, source_object_type_code,
                      owner_id, address_id, cust_account_id, customer_id,
                      task_priority_id, task_status_id, task_type_id,
		      call_disposition, disposition_code, disposition_date,
                      creation_date, created_by, last_update_date,
                      last_updated_by, planned_end_date,deleted_flag)
            SELECT ROWNUM, lc_batch_id, task_id, task_name, description,
                   task_number, source_object_id, source_object_type_code,
                   fnc_owner_id (owner_id), address_id, cust_account_id,
                   customer_id, fnc_priorities_id (task_priority_id),
                   fnc_status_id (task_status_id),
                   fnc_type_id (task_type_id,1), fnc_type_id (task_type_id,2), fnc_type_id (task_type_id,3),
                   TO_CHAR (COALESCE (scheduled_end_date, last_update_date),'yyyy-mm-dd'),
                   TO_CHAR (creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (created_by),
                   TO_CHAR (last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (last_updated_by),
                   TO_CHAR (COALESCE (scheduled_end_date,
					last_update_date
                            ),'yyyy-mm-dd'), DECODE(deleted_flag,'N','false','Y','true')
		FROM apps.jtf_tasks_vl a , (SELECT DISTINCT party_site_id FROM xxcrm.xx_crm_exp_site_master  ) b
		     WHERE a.source_object_id = b.party_site_id
			AND a.deleted_flag = 'N' AND a.source_object_type_code = 'OD_PARTY_SITE'
		       AND (   a.creation_date <
					  TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			    OR a.last_update_date <
					  TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			 )
			AND a.last_update_date >=
					  TO_DATE (lc_task_conv_date, 'MM/DD/RRRR HH24:MI:SS');

      lc_message1 := p_entity_name || ' records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');
         COMMIT;


         INSERT INTO apps.xx_crm_exp_tasks_site_master
		(task_id, source_object_id, last_update_date)
			SELECT task_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_tasks_party_site WHERE batch_id=lc_batch_id;

	COMMIT;

	DELETE FROM apps.xx_crm_exp_tasks_site_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_tasks_site_master GROUP BY task_id, source_object_id ) A, apps.xx_crm_exp_tasks_site_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      ELSIF p_entity_name = 'TASKS_LEAD' AND p_exp_param = 'F'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         INSERT INTO xx_crm_exp_tasks_lead
                     (record_id, batch_id, task_id, task_name, description,
                      task_number, source_object_id, source_object_type_code,
                      owner_id, address_id, cust_account_id, customer_id,
                      task_priority_id, task_status_id, task_type_id,
		      call_disposition, disposition_code, disposition_date,
                      creation_date, created_by, last_update_date,
                      last_updated_by, planned_end_date,deleted_flag)
            SELECT ROWNUM, lc_batch_id, task_id, task_name, description,
                   task_number, oracle_entity_id, source_object_type_code,
                   fnc_owner_id (owner_id), address_id, cust_account_id,
                   customer_id, fnc_priorities_id (task_priority_id),
                   fnc_status_id (task_status_id),
                   fnc_type_id (task_type_id,1), fnc_type_id (task_type_id,2), fnc_type_id (task_type_id,3),
                   TO_CHAR (COALESCE (scheduled_end_date, last_update_date),'yyyy-mm-dd'),
                   TO_CHAR (creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (created_by),
                   TO_CHAR (last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (last_updated_by),
                   TO_CHAR (COALESCE (scheduled_end_date,
					last_update_date
                            ),'yyyy-mm-dd'), DECODE(deleted_flag,'N','false','Y','true')
		FROM apps.jtf_tasks_vl a , (SELECT DISTINCT attribute1, oracle_entity_id FROM xxcrm.xx_crm_exp_lead  WHERE batch_id = NVL(p_source_batch_id,batch_id) ) b
		     WHERE a.source_object_id = b.attribute1
			AND a.deleted_flag = 'N' AND a.source_object_type_code = 'LEAD'
		       AND (   a.creation_date <
					  TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			    OR a.last_update_date <
					  TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			 )
			AND a.last_update_date >=
					  TO_DATE (lc_task_conv_date, 'MM/DD/RRRR HH24:MI:SS');

      lc_message1 := p_entity_name || ' records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');
         COMMIT;

         INSERT INTO apps.xx_crm_exp_tasks_lead_master
		(task_id, source_object_id, last_update_date)
			SELECT task_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_tasks_lead WHERE batch_id=lc_batch_id;

	COMMIT;

	DELETE FROM apps.xx_crm_exp_tasks_lead_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_tasks_lead_master GROUP BY task_id, source_object_id ) A, apps.xx_crm_exp_tasks_lead_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;

      ELSIF p_entity_name = 'TASKS_OPPORTUNITY' AND p_exp_param = 'F'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         INSERT INTO XX_CRM_EXP_TASKS_OPPORTUNITY
                     (record_id, batch_id, task_id, task_name, description,
                      task_number, source_object_id, source_object_type_code,
                      owner_id, address_id, cust_account_id, customer_id,
                      task_priority_id, task_status_id, task_type_id,
		      call_disposition, disposition_code, disposition_date,
                      creation_date, created_by, last_update_date,
                      last_updated_by, planned_end_date,deleted_flag)
            SELECT ROWNUM, lc_batch_id, task_id, task_name, description,
                   task_number, oracle_entity_id, source_object_type_code,
                   fnc_owner_id (owner_id), address_id, cust_account_id,
                   customer_id, fnc_priorities_id (task_priority_id),
                   fnc_status_id (task_status_id),
                   fnc_type_id (task_type_id,1), fnc_type_id (task_type_id,2), fnc_type_id (task_type_id,3),
                   TO_CHAR (COALESCE (scheduled_end_date, last_update_date),'yyyy-mm-dd'),
                   TO_CHAR (creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (created_by),
                   TO_CHAR (last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (last_updated_by),
                   TO_CHAR (COALESCE (scheduled_end_date,
					last_update_date
                            ),'yyyy-mm-dd'), DECODE(deleted_flag,'N','false','Y','true')
		FROM  apps.jtf_tasks_vl a , ( SELECT DISTINCT attribute1,oracle_entity_id FROM xxcrm.xx_crm_exp_opportunity  WHERE batch_id = NVL(p_source_batch_id,batch_id) ) b
		     WHERE a.source_object_id = b.attribute1
			AND a.deleted_flag = 'N' AND a.source_object_type_code = 'OPPORTUNITY'
		       AND (   a.creation_date <
					  TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			    OR a.last_update_date <
					  TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			 )
			AND a.last_update_date >=
					  TO_DATE (lc_task_conv_date, 'MM/DD/RRRR HH24:MI:SS');


      lc_message1 := p_entity_name || ' records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

         COMMIT;



         INSERT INTO apps.xx_crm_exp_tasks_opp_master
		(task_id, source_object_id, last_update_date)
			SELECT task_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_tasks_opportunity WHERE batch_id=lc_batch_id;

	COMMIT;

	DELETE FROM apps.xx_crm_exp_tasks_opp_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_tasks_opp_master GROUP BY task_id, source_object_id ) A, apps.xx_crm_exp_tasks_opp_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      ELSIF p_entity_name = 'TASKS_TASK' AND p_exp_param = 'F'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

         INSERT INTO xx_crm_exp_tasks_task
                     (record_id, batch_id, task_id, task_name, description,
                      task_number, source_object_id, source_object_type_code,
                      owner_id, address_id, cust_account_id, customer_id,
                      task_priority_id, task_status_id, task_type_id,
		      call_disposition, disposition_code, disposition_date,
                      creation_date, created_by, last_update_date,
                      last_updated_by, planned_end_date,deleted_flag)
            SELECT ROWNUM, lc_batch_id, task_id, task_name, description,
                   task_number, source_object_id, source_object_type_code,
                   fnc_owner_id (owner_id), address_id, cust_account_id,
                   customer_id, fnc_priorities_id (task_priority_id),
                   fnc_status_id (task_status_id),
                   fnc_type_id (task_type_id,1), fnc_type_id (task_type_id,2), fnc_type_id (task_type_id,3),
                   TO_CHAR (COALESCE (scheduled_end_date, last_update_date),'yyyy-mm-dd'),
                   TO_CHAR (creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (created_by),
                   TO_CHAR (last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (last_updated_by),
                   TO_CHAR (COALESCE (scheduled_end_date,
					last_update_date
                            ),'yyyy-mm-dd'), DECODE(deleted_flag,'N','false','Y','true')
              FROM apps.jtf_tasks_vl a
             WHERE deleted_flag = 'N'
               AND source_object_type_code = 'TASK'
		       AND (   a.creation_date <
					  TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			    OR a.last_update_date <
					  TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			 )
			AND a.last_update_date >=
					  TO_DATE (lc_task_conv_date, 'MM/DD/RRRR HH24:MI:SS');

      lc_message1 := p_entity_name || ' records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

         COMMIT;

         INSERT INTO apps.xx_crm_exp_tasks_task_master
		(task_id, source_object_id, last_update_date)
			SELECT task_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_tasks_task WHERE batch_id=lc_batch_id;

	COMMIT;

	DELETE FROM apps.xx_crm_exp_tasks_task_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_tasks_task_master GROUP BY task_id, source_object_id ) A, apps.xx_crm_exp_tasks_task_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      ELSIF p_entity_name = 'TASKS_PARTY' AND p_exp_param = 'I'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

         INSERT INTO xx_crm_exp_tasks_party
                     (record_id, batch_id, task_id, task_name, description,
                      task_number, source_object_id, source_object_type_code,
                      owner_id, address_id, cust_account_id, customer_id,
                      task_priority_id, task_status_id, task_type_id,
		      call_disposition, disposition_code, disposition_date,
                      creation_date, created_by, last_update_date,
                      last_updated_by, planned_end_date,deleted_flag)
            SELECT ROWNUM, lc_batch_id, tasks_final.task_id, tasks_final.task_name, tasks_final.description,
                   tasks_final.task_number, delta.source_object_id, tasks_final.source_object_type_code,
                   fnc_owner_id (tasks_final.owner_id), tasks_final.address_id, tasks_final.cust_account_id,
                   tasks_final.customer_id, fnc_priorities_id (tasks_final.task_priority_id),
                   fnc_status_id (tasks_final.task_status_id),
                   fnc_type_id (tasks_final.task_type_id,1), fnc_type_id (tasks_final.task_type_id,2), fnc_type_id (tasks_final.task_type_id,3),
                   TO_CHAR (COALESCE (tasks_final.scheduled_end_date, tasks_final.last_update_date),'yyyy-mm-dd'),
                   TO_CHAR (tasks_final.creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (tasks_final.created_by),
                   TO_CHAR (tasks_final.last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (tasks_final.last_updated_by),
                   TO_CHAR (COALESCE (tasks_final.scheduled_end_date,
					tasks_final.last_update_date
                            ),'yyyy-mm-dd'), DECODE(tasks_final.deleted_flag,'N','false','Y','true')
	FROM
	(
	-- Checking Delta
		    SELECT a.task_id, a.source_object_id
		      FROM apps.jtf_tasks_vl a, apps.hz_parties b
		     WHERE a.source_object_id = b.party_id
			AND b.party_type = 'ORGANIZATION'
			AND a.source_object_type_code = 'PARTY'
		       AND (   a.last_update_date  BETWEEN TO_DATE (lc_start_date,'MM/DD/RRRR HH24:MI:SS' )
				      AND TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			   )
		     UNION
			SELECT a.task_id, a.source_object_id
			      FROM apps.jtf_tasks_vl a, ( SELECT /*+ PARALLEL (AA,4) PARALLEL (BB,4) */ DISTINCT bb.PARTY_ID
							FROM xxcrm.xx_crm_exp_site_master AA, apps.hz_party_sites BB
							WHERE aa.party_site_id = bb.party_site_id and aa.last_update_date BETWEEN TO_DATE (lc_start_date, 'MM/DD/RRRR HH24:MI:SS') AND TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')  ) b
			     WHERE a.source_object_id = b.party_id
				AND a.source_object_type_code = 'PARTY'
	-- Checking Delta end
	) DELTA,
	-- Checking already sent
	 apps.jtf_tasks_vl tasks_final
	WHERE tasks_final.task_id = delta.task_id
	      AND tasks_final.source_object_type_code = 'PARTY'
			AND tasks_final.last_update_date >=
					  TO_DATE (lc_task_conv_date, 'MM/DD/RRRR HH24:MI:SS');

      lc_message1 := p_entity_name || ' New records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         COMMIT;


	DELETE FROM apps.xx_crm_exp_tasks_party WHERE ROWID IN
	(
	SELECT b.ROWID_B FROM
	(SELECT MAX(rowid) rowid_a FROM apps.xx_crm_exp_tasks_party WHERE batch_id = lc_batch_id GROUP BY task_id, source_object_id ) A,
		(SELECT ROWID rowid_B FROM apps.xx_crm_exp_tasks_party WHERE batch_id = lc_batch_id) B
	WHERE a.ROWID_A(+) = b.ROWID_B AND a.ROWID_A IS NULL
	);

		IF sql%rowcount <> 0 THEN
		      lc_message1 := p_entity_name || ' Dulicate  records deleted are '||sql%rowcount||' .';
		      fnd_file.put_line (fnd_file.LOG, lc_message1);
		      fnd_file.put_line (fnd_file.LOG, ' ');
		END IF;

	COMMIT;


	UPDATE xx_crm_exp_tasks_party set batch_id=lc_batch_id_update
	WHERE rowid IN
	(
	select delta.rowid from xx_crm_exp_tasks_party delta, apps.xx_crm_exp_tasks_party_master master
	where delta.batch_id = lc_batch_id and delta.task_id = master.task_id
	      and delta.source_object_id = master.source_object_id
	);

	lc_message1 := p_entity_name || ' Modified records inserted are '||sql%rowcount||' .';
	fnd_file.put_line (fnd_file.LOG, lc_message1);
	fnd_file.put_line (fnd_file.LOG, ' ');

         COMMIT;

         INSERT INTO apps.xx_crm_exp_tasks_party_master
		(task_id, source_object_id, last_update_date)
			SELECT task_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_tasks_party WHERE batch_id=lc_batch_id;

	COMMIT;

	DELETE FROM apps.xx_crm_exp_tasks_party_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_tasks_party_master GROUP BY task_id, source_object_id ) A, apps.xx_crm_exp_tasks_party_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      ELSIF p_entity_name = 'TASKS_PARTY_SITE' AND p_exp_param = 'I'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

         INSERT INTO xx_crm_exp_tasks_party_site
                     (record_id, batch_id, task_id, task_name, description,
                      task_number, source_object_id, source_object_type_code,
                      owner_id, address_id, cust_account_id, customer_id,
                      task_priority_id, task_status_id, task_type_id,
		      call_disposition, disposition_code, disposition_date,
                      creation_date, created_by, last_update_date,
                      last_updated_by, planned_end_date,deleted_flag)
            SELECT ROWNUM, lc_batch_id, tasks_final.task_id, tasks_final.task_name, tasks_final.description,
                   tasks_final.task_number, delta.source_object_id, tasks_final.source_object_type_code,
                   fnc_owner_id (tasks_final.owner_id), tasks_final.address_id, tasks_final.cust_account_id,
                   tasks_final.customer_id, fnc_priorities_id (tasks_final.task_priority_id),
                   fnc_status_id (tasks_final.task_status_id),
                   fnc_type_id (tasks_final.task_type_id,1), fnc_type_id (tasks_final.task_type_id,2), fnc_type_id (tasks_final.task_type_id,3),
                   TO_CHAR (COALESCE (tasks_final.scheduled_end_date, tasks_final.last_update_date),'yyyy-mm-dd'),
                   TO_CHAR (tasks_final.creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (tasks_final.created_by),
                   TO_CHAR (tasks_final.last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (tasks_final.last_updated_by),
                   TO_CHAR (COALESCE (tasks_final.scheduled_end_date,
					tasks_final.last_update_date
                            ),'yyyy-mm-dd'), DECODE(tasks_final.deleted_flag,'N','false','Y','true')
	FROM
	(
	-- Checking Delta
		    SELECT a.task_id, a.source_object_id
		      FROM apps.jtf_tasks_vl a
		     WHERE a.source_object_type_code = 'OD_PARTY_SITE'
		       AND (   a.last_update_date  BETWEEN TO_DATE (lc_start_date,'MM/DD/RRRR HH24:MI:SS' )
				      AND TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			   )
		     UNION
			SELECT a.task_id, a.source_object_id
			      FROM apps.jtf_tasks_vl a, ( SELECT DISTINCT aa.party_site_id  FROM xxcrm.xx_crm_exp_site_master AA
							WHERE aa.last_update_date BETWEEN TO_DATE (lc_start_date, 'MM/DD/RRRR HH24:MI:SS') AND TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')  ) b
			     WHERE a.source_object_id = b.party_site_id
				AND a.source_object_type_code = 'OD_PARTY_SITE'
	-- Checking Delta end
	) DELTA,
	-- Checking already sent
	 apps.jtf_tasks_vl tasks_final
	WHERE tasks_final.task_id = delta.task_id
	      AND tasks_final.source_object_type_code = 'OD_PARTY_SITE'
			AND tasks_final.last_update_date >=
					  TO_DATE (lc_task_conv_date, 'MM/DD/RRRR HH24:MI:SS');


      lc_message1 := p_entity_name || ' New records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         COMMIT;


	DELETE FROM apps.xx_crm_exp_tasks_party_site WHERE ROWID IN
	(
	SELECT b.ROWID_B FROM
	(SELECT MAX(rowid) rowid_a FROM apps.xx_crm_exp_tasks_party_site WHERE batch_id = lc_batch_id GROUP BY task_id, source_object_id ) A,
		(SELECT ROWID rowid_B FROM apps.xx_crm_exp_tasks_party_site WHERE batch_id = lc_batch_id) B
	WHERE a.ROWID_A(+) = b.ROWID_B AND a.ROWID_A IS NULL
	);



		IF sql%rowcount <> 0 THEN
		      lc_message1 := p_entity_name || ' Dulicate  records deleted are '||sql%rowcount||' .';
		      fnd_file.put_line (fnd_file.LOG, lc_message1);
		      fnd_file.put_line (fnd_file.LOG, ' ');
		END IF;

	COMMIT;


	UPDATE xx_crm_exp_tasks_party_site set batch_id=lc_batch_id_update
	WHERE rowid IN
	(
	SELECT delta.rowid from xx_crm_exp_tasks_party_site delta, apps.xx_crm_exp_tasks_site_master master
	WHERE delta.batch_id = lc_batch_id AND delta.task_id = master.task_id
	      AND delta.source_object_id = master.source_object_id
	);

	lc_message1 := p_entity_name || ' Modified records inserted are '||sql%rowcount||' .';
	fnd_file.put_line (fnd_file.LOG, lc_message1);
	fnd_file.put_line (fnd_file.LOG, ' ');

         COMMIT;

         INSERT INTO apps.xx_crm_exp_tasks_site_master
		(task_id, source_object_id, last_update_date)
			SELECT task_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_tasks_party_site WHERE batch_id=lc_batch_id;

	COMMIT;

	DELETE FROM apps.xx_crm_exp_tasks_site_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_tasks_site_master GROUP BY task_id, source_object_id ) A, apps.xx_crm_exp_tasks_site_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      ELSIF p_entity_name = 'TASKS_LEAD' AND p_exp_param = 'I'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

         INSERT INTO xx_crm_exp_tasks_lead
                     (record_id, batch_id, task_id, task_name, description,
                      task_number, source_object_id, source_object_type_code,
                      owner_id, address_id, cust_account_id, customer_id,
                      task_priority_id, task_status_id, task_type_id,
		      call_disposition, disposition_code, disposition_date,
                      creation_date, created_by, last_update_date,
                      last_updated_by, planned_end_date,deleted_flag)
            SELECT ROWNUM, lc_batch_id, tasks_final.task_id, tasks_final.task_name, tasks_final.description,
                   tasks_final.task_number, delta.source_object_id, tasks_final.source_object_type_code,
                   fnc_owner_id (tasks_final.owner_id), tasks_final.address_id, tasks_final.cust_account_id,
                   tasks_final.customer_id, fnc_priorities_id (tasks_final.task_priority_id),
                   fnc_status_id (tasks_final.task_status_id),
                   fnc_type_id (tasks_final.task_type_id,1), fnc_type_id (tasks_final.task_type_id,2), fnc_type_id (tasks_final.task_type_id,3),
                   TO_CHAR (COALESCE (tasks_final.scheduled_end_date, tasks_final.last_update_date),'yyyy-mm-dd'),
                   TO_CHAR (tasks_final.creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (tasks_final.created_by),
                   TO_CHAR (tasks_final.last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (tasks_final.last_updated_by),
                   TO_CHAR (COALESCE (tasks_final.scheduled_end_date,
					tasks_final.last_update_date
                            ),'yyyy-mm-dd'), DECODE(tasks_final.deleted_flag,'N','false','Y','true')
	FROM
	(
-- Checking Delta
--new notes
		SELECT a.task_id, NVL(b.oracle_entity_id,'L-'||a.source_object_id||'-') source_object_id
		      FROM apps.jtf_tasks_vl a, (SELECT  DISTINCT 'L-'  ||m.sales_lead_id  ||'-'  ||ll.sales_lead_line_id oracle_entity_id, m.sales_lead_id
							FROM apps.as_sales_lead_lines ll, apps.as_sales_leads m
							WHERE m.sales_lead_id  =ll.sales_lead_id) b
		     WHERE a.source_object_type_code = 'LEAD'
			 AND a.source_object_id = b.sales_lead_id(+)
		       AND (   a.last_update_date BETWEEN TO_DATE (lc_start_date,'MM/DD/RRRR HH24:MI:SS')
				      AND TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			   )
	         UNION
-- new product
			SELECT a.task_id, b.oracle_entity_id source_object_id
			      FROM apps.jtf_tasks_vl a, (SELECT  DISTINCT 'L-'  ||m.sales_lead_id  ||'-'  ||ll.sales_lead_line_id oracle_entity_id, m.sales_lead_id
								FROM apps.as_sales_lead_lines ll, apps.as_sales_leads m
								WHERE m.sales_lead_id  =ll.sales_lead_id
								AND ll.creation_date  BETWEEN TO_DATE (lc_start_date,'MM/DD/RRRR HH24:MI:SS')
									      AND TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
								) b
		     WHERE a.source_object_type_code = 'LEAD'
			 AND a.source_object_id = b.sales_lead_id
		UNION
-- Sites modified
			SELECT a.task_id, NVL(b.oracle_entity_id,'L-'||a.source_object_id||'-') source_object_id
			      FROM apps.jtf_tasks_vl a, (SELECT  DISTINCT 'L-'  ||m.sales_lead_id  ||'-' || ll.sales_lead_line_id oracle_entity_id, m.sales_lead_id
								FROM apps.as_sales_lead_lines ll, apps.as_sales_leads m, xxcrm.xx_crm_exp_site_master master
								WHERE m.sales_lead_id  =ll.sales_lead_id(+)
								     AND master.party_site_id = m.address_id
								     AND master.last_update_date BETWEEN TO_DATE (lc_start_date, 'MM/DD/RRRR HH24:MI:SS')
											AND TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
							) b
			     WHERE a.source_object_type_code = 'LEAD'
				 AND a.source_object_id = b.sales_lead_id
	-- Checking Delta end
	) DELTA,
	-- Checking already sent
	 apps.jtf_tasks_vl tasks_final
	WHERE tasks_final.task_id = delta.task_id
	      AND tasks_final.source_object_type_code = 'LEAD'
			AND tasks_final.last_update_date >=
					  TO_DATE (lc_task_conv_date, 'MM/DD/RRRR HH24:MI:SS');


      lc_message1 := p_entity_name || ' New records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         COMMIT;


	DELETE FROM apps.xx_crm_exp_tasks_lead WHERE ROWID IN
	(
	SELECT b.ROWID_B FROM
	(SELECT MAX(rowid) rowid_a FROM apps.xx_crm_exp_tasks_lead WHERE batch_id = lc_batch_id GROUP BY task_id, source_object_id ) A,
		(SELECT ROWID rowid_B FROM apps.xx_crm_exp_tasks_lead WHERE batch_id = lc_batch_id) B
	WHERE a.ROWID_A(+) = b.ROWID_B AND a.ROWID_A IS NULL
	);


		IF sql%rowcount <> 0 THEN
		      lc_message1 := p_entity_name || ' Dulicate  records deleted are '||sql%rowcount||' .';
		      fnd_file.put_line (fnd_file.LOG, lc_message1);
		      fnd_file.put_line (fnd_file.LOG, ' ');
		END IF;

	COMMIT;


	UPDATE xx_crm_exp_tasks_lead set batch_id=lc_batch_id_update
	WHERE rowid IN
	(
	select delta.rowid from xx_crm_exp_tasks_lead delta, apps.xx_crm_exp_tasks_lead_master master
	where delta.batch_id = lc_batch_id and delta.task_id = master.task_id
	      and delta.source_object_id = master.source_object_id
	);

	lc_message1 := p_entity_name || ' Modified records inserted are '||sql%rowcount||' .';
	fnd_file.put_line (fnd_file.LOG, lc_message1);
	fnd_file.put_line (fnd_file.LOG, ' ');

         COMMIT;

         INSERT INTO apps.xx_crm_exp_tasks_lead_master
		(task_id, source_object_id, last_update_date)
			SELECT task_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_tasks_lead WHERE batch_id=lc_batch_id;

	COMMIT;

	DELETE FROM apps.xx_crm_exp_tasks_lead_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_tasks_lead_master GROUP BY task_id, source_object_id ) A, apps.xx_crm_exp_tasks_lead_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;



      ELSIF p_entity_name = 'TASKS_OPPORTUNITY' AND p_exp_param = 'I'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


	 INSERT INTO xx_crm_exp_tasks_opportunity
                     (record_id, batch_id, task_id, task_name, description,
                      task_number, source_object_id, source_object_type_code,
                      owner_id, address_id, cust_account_id, customer_id,
                      task_priority_id, task_status_id, task_type_id,
		      call_disposition, disposition_code, disposition_date,
                      creation_date, created_by, last_update_date,
                      last_updated_by, planned_end_date,deleted_flag)
            SELECT ROWNUM, lc_batch_id, tasks_final.task_id, tasks_final.task_name, tasks_final.description,
                   tasks_final.task_number, delta.source_object_id, tasks_final.source_object_type_code,
                   fnc_owner_id (tasks_final.owner_id), tasks_final.address_id, tasks_final.cust_account_id,
                   tasks_final.customer_id, fnc_priorities_id (tasks_final.task_priority_id),
                   fnc_status_id (tasks_final.task_status_id),
                   fnc_type_id (tasks_final.task_type_id,1), fnc_type_id (tasks_final.task_type_id,2), fnc_type_id (tasks_final.task_type_id,3),
                   TO_CHAR (COALESCE (tasks_final.scheduled_end_date, tasks_final.last_update_date),'yyyy-mm-dd'),
                   TO_CHAR (tasks_final.creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (tasks_final.created_by),
                   TO_CHAR (tasks_final.last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (tasks_final.last_updated_by),
                   TO_CHAR (COALESCE (tasks_final.scheduled_end_date,
					tasks_final.last_update_date
                            ),'yyyy-mm-dd'), DECODE(tasks_final.deleted_flag,'N','false','Y','true')
	FROM
	(
	-- Checking Delta
--new notes
		SELECT a.task_id, NVL(b.oracle_entity_id,'O-'||a.source_object_id||'-') source_object_id
		      FROM apps.jtf_tasks_vl a, (SELECT  DISTINCT 'O-'  ||m.lead_id  ||'-'  ||ll.lead_line_id oracle_entity_id, m.lead_id
							FROM apps.as_lead_lines ll, apps.as_leads_all m
							WHERE m.lead_id  =ll.lead_id) b
		     WHERE a.source_object_type_code = 'OPPORTUNITY'
			 AND a.source_object_id = b.lead_id(+)
		       AND (   a.creation_date BETWEEN TO_DATE (lc_start_date,'MM/DD/RRRR HH24:MI:SS')
				      AND TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
			   )
	         UNION
-- new product
			SELECT a.task_id, b.oracle_entity_id source_object_id
			      FROM apps.jtf_tasks_vl a, (SELECT  DISTINCT 'O-'  ||m.lead_id  ||'-'  ||ll.lead_line_id oracle_entity_id, m.lead_id
								FROM apps.as_lead_lines ll, apps.as_leads_all m
								WHERE m.lead_id  =ll.lead_id
								AND ll.creation_date  BETWEEN TO_DATE (lc_start_date,'MM/DD/RRRR HH24:MI:SS')
									      AND TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
								) b
		     WHERE a.source_object_type_code = 'OPPORTUNITY'
			 AND a.source_object_id = b.lead_id
		UNION
-- Sites modified
			SELECT a.task_id, NVL(b.oracle_entity_id,'O-'||a.source_object_id||'-') source_object_id
			      FROM apps.jtf_tasks_vl a, (SELECT  DISTINCT 'O-'  ||m.lead_id  ||'-' || ll.lead_line_id oracle_entity_id, m.lead_id
								FROM apps.as_lead_lines ll, apps.as_leads_all m, xxcrm.xx_crm_exp_site_master master
								WHERE m.lead_id  =ll.lead_id(+)
								     AND master.party_site_id = m.address_id
								     AND master.last_update_date BETWEEN TO_DATE (lc_start_date, 'MM/DD/RRRR HH24:MI:SS')
											AND TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
							) b
			     WHERE a.source_object_type_code = 'OPPORTUNITY'
				 AND a.source_object_id = b.lead_id

	-- Checking Delta end
	) DELTA,
	-- Checking already sent
	 apps.jtf_tasks_vl tasks_final
	WHERE tasks_final.task_id = delta.task_id
	      AND tasks_final.source_object_type_code = 'OPPORTUNITY'
			AND tasks_final.last_update_date >=
					  TO_DATE (lc_task_conv_date, 'MM/DD/RRRR HH24:MI:SS');


      lc_message1 := p_entity_name || ' New records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         COMMIT;


	DELETE FROM apps.xx_crm_exp_tasks_opportunity WHERE ROWID IN
	(
	SELECT b.ROWID_B FROM
	(SELECT MAX(rowid) rowid_a FROM apps.xx_crm_exp_tasks_opportunity WHERE batch_id = lc_batch_id GROUP BY task_id, source_object_id ) A,
		(SELECT ROWID rowid_B FROM apps.xx_crm_exp_tasks_opportunity WHERE batch_id = lc_batch_id) B
	WHERE a.ROWID_A(+) = b.ROWID_B AND a.ROWID_A IS NULL
	);



		IF sql%rowcount <> 0 THEN
		      lc_message1 := p_entity_name || ' Dulicate  records deleted are '||sql%rowcount||' .';
		      fnd_file.put_line (fnd_file.LOG, lc_message1);
		      fnd_file.put_line (fnd_file.LOG, ' ');
		END IF;

	COMMIT;


	UPDATE xx_crm_exp_tasks_opportunity set batch_id=lc_batch_id_update
	WHERE rowid IN
	(
	select delta.rowid from xx_crm_exp_tasks_opportunity delta, apps.xx_crm_exp_tasks_opp_master master
	where delta.batch_id = lc_batch_id and delta.task_id = master.task_id
	      and delta.source_object_id = master.source_object_id
	);

	lc_message1 := p_entity_name || ' Modified records inserted are '||sql%rowcount||' .';
	fnd_file.put_line (fnd_file.LOG, lc_message1);
	fnd_file.put_line (fnd_file.LOG, ' ');

         COMMIT;

         INSERT INTO apps.xx_crm_exp_tasks_opp_master
		(task_id, source_object_id, last_update_date)
			SELECT task_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_tasks_opportunity WHERE batch_id=lc_batch_id;

	COMMIT;

	DELETE FROM apps.xx_crm_exp_tasks_opp_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_tasks_opp_master GROUP BY task_id, source_object_id ) A, apps.xx_crm_exp_tasks_opp_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      ELSIF p_entity_name = 'TASKS_TASK' AND p_exp_param = 'I'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


	 INSERT INTO xx_crm_exp_tasks_task
                     (record_id, batch_id, task_id, task_name, description,
                      task_number, source_object_id, source_object_type_code,
                      owner_id, address_id, cust_account_id, customer_id,
                      task_priority_id, task_status_id, task_type_id,
		      call_disposition, disposition_code, disposition_date,
                      creation_date, created_by, last_update_date,
                      last_updated_by, planned_end_date,deleted_flag)
            SELECT ROWNUM, lc_batch_id, tasks_final.task_id, tasks_final.task_name, tasks_final.description,
                   tasks_final.task_number, tasks_final.source_object_id, tasks_final.source_object_type_code,
                   fnc_owner_id (tasks_final.owner_id), tasks_final.address_id, tasks_final.cust_account_id,
                   tasks_final.customer_id, fnc_priorities_id (tasks_final.task_priority_id),
                   fnc_status_id (tasks_final.task_status_id),
                   fnc_type_id (tasks_final.task_type_id,1), fnc_type_id (tasks_final.task_type_id,2), fnc_type_id (tasks_final.task_type_id,3),
                   TO_CHAR (COALESCE (tasks_final.scheduled_end_date, tasks_final.last_update_date),'yyyy-mm-dd'),
                   TO_CHAR (tasks_final.creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (tasks_final.created_by),
                   TO_CHAR (tasks_final.last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (tasks_final.last_updated_by),
                   TO_CHAR (COALESCE (tasks_final.scheduled_end_date,
					tasks_final.last_update_date
                            ),'yyyy-mm-dd'), DECODE(tasks_final.deleted_flag,'N','false','Y','true')
	FROM
	 apps.jtf_tasks_vl tasks_final
	WHERE source_object_type_code = 'TASK'
               AND (  last_update_date BETWEEN TO_DATE (lc_start_date,'MM/DD/RRRR HH24:MI:SS')
                              AND TO_DATE (lc_end_date, 'MM/DD/RRRR HH24:MI:SS')
                   )
			AND tasks_final.last_update_date >=
					  TO_DATE (lc_task_conv_date, 'MM/DD/RRRR HH24:MI:SS');


      lc_message1 := p_entity_name || ' New records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         COMMIT;


	DELETE FROM apps.xx_crm_exp_tasks_task WHERE ROWID IN
	(
	SELECT b.ROWID_B FROM
	(SELECT MAX(rowid) rowid_a FROM apps.xx_crm_exp_tasks_task WHERE batch_id = lc_batch_id GROUP BY task_id, source_object_id ) A,
		(SELECT ROWID rowid_B FROM apps.xx_crm_exp_tasks_task WHERE batch_id = lc_batch_id) B
	WHERE a.ROWID_A(+) = b.ROWID_B AND a.ROWID_A IS NULL
	);



		IF sql%rowcount <> 0 THEN
		      lc_message1 := p_entity_name || ' Dulicate  records deleted are '||sql%rowcount||' .';
		      fnd_file.put_line (fnd_file.LOG, lc_message1);
		      fnd_file.put_line (fnd_file.LOG, ' ');
		END IF;

	COMMIT;


	UPDATE xx_crm_exp_tasks_task set batch_id=lc_batch_id_update
	WHERE rowid IN
	(
	select delta.rowid from xx_crm_exp_tasks_task delta, apps.xx_crm_exp_tasks_task_master master
	where delta.batch_id = lc_batch_id and delta.task_id = master.task_id
	      and delta.source_object_id = master.source_object_id
	);

	lc_message1 := p_entity_name || ' Modified records inserted are '||sql%rowcount||' .';
	fnd_file.put_line (fnd_file.LOG, lc_message1);
	fnd_file.put_line (fnd_file.LOG, ' ');

         COMMIT;

         INSERT INTO apps.xx_crm_exp_tasks_task_master
		(task_id, source_object_id, last_update_date)
			SELECT task_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_tasks_task WHERE batch_id=lc_batch_id;

	COMMIT;

	DELETE FROM apps.xx_crm_exp_tasks_task_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_tasks_task_master GROUP BY task_id, source_object_id ) A, apps.xx_crm_exp_tasks_task_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      END IF;

-- Create csv file
      xx_crm_exp_batch_pkg.generate_file (x_errbuf, x_retcode, lc_batch_id);

	IF p_exp_param = 'I' THEN
		xx_crm_exp_batch_pkg.generate_file (x_errbuf, x_retcode, lc_batch_id_update);
	END IF;


   END generate_file_tasks;

   FUNCTION fnc_owner_id (p_owner_id NUMBER)
      RETURN VARCHAR2
   IS
      lc_employee_number   VARCHAR2 (30);
   BEGIN
      SELECT user_name
        INTO lc_employee_number
--        FROM apps.jtf_rs_emp_dtls_vl
	FROM apps.xx_crm_emp_resources_v
       WHERE resource_id = p_owner_id
         AND user_name IS NOT NULL
	 AND USER_NAME NOT IN ('ODCDH', 'ODSFA', 'ODCRMBPEL')
	 AND STATUS='A'
         AND ROWNUM = 1;

      RETURN lc_employee_number;
   EXCEPTION
      WHEN OTHERS
      THEN
         lc_employee_number:='000000';
	 RETURN lc_employee_number;
   END fnc_owner_id;

   FUNCTION fnc_priorities_id (p_task_priority_id NUMBER)
      RETURN VARCHAR2
   IS
      lc_name   VARCHAR2 (30);
   BEGIN
--      SELECT NAME
--        INTO lc_name
--        FROM jtf.jtf_task_priorities_tl
--       WHERE task_priority_id = p_task_priority_id
--         AND NAME IS NOT NULL
--         AND ROWNUM = 1;

      RETURN 'Normal';
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 'Normal';
   END fnc_priorities_id;

   FUNCTION fnc_status_id (p_task_status_id NUMBER)
      RETURN VARCHAR2
   IS
      lc_name   VARCHAR2 (30);
   BEGIN


      SELECT source_value4
        INTO lc_name
        FROM apps.xx_fin_translatedefinition a,
             apps.xx_fin_translatevalues b,
             apps.jtf_task_statuses_vl c
       WHERE a.translate_id = b.translate_id
	 AND c.task_status_id = p_task_status_id
         AND b.source_value3 = c.name
         AND a.translation_name = 'XXCRM_SFDC_SALES_LOV'
	 AND b.SOURCE_VALUE1 IN ('TASK_STATUS')
         AND b.enabled_flag     = 'Y'
         AND SYSDATE BETWEEN b.START_DATE_ACTIVE AND nvl(b.END_DATE_ACTIVE, SYSDATE +1)	 ;

-- Need to confirm on default status 'Completed'
      RETURN lc_name;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 'Completed';
   END fnc_status_id;

   FUNCTION fnc_type_id (p_task_type_id NUMBER, id NUMBER)
      RETURN VARCHAR2
   IS
      lc_type VARCHAR2(30);
      lc_call_disposition VARCHAR2(30);
      lc_disposition_code  VARCHAR2(30);
   BEGIN

   -- 1 - type
   -- 2 - Call Disposition
   -- 3 - Disposition Code

      SELECT source_value4, source_value5, source_value6
        INTO lc_type, lc_call_disposition, lc_disposition_code
        FROM apps.xx_fin_translatedefinition a,
             apps.xx_fin_translatevalues b,
             apps.jtf_task_types_vl c
       WHERE a.translate_id = b.translate_id
	 AND c.task_type_id = p_task_type_id
         AND b.source_value3 = c.name
         AND a.translation_name = 'XXCRM_SFDC_SALES_LOV'
	 AND b.SOURCE_VALUE1 IN ('TASK_TYPE')
         AND b.enabled_flag     = 'Y'
         AND SYSDATE BETWEEN b.START_DATE_ACTIVE AND nvl(b.END_DATE_ACTIVE, SYSDATE +1)	 ;


	  IF id=1 THEN
		RETURN lc_type;
	  ELSIF  id=2 THEN
		RETURN lc_call_disposition;
	  ELSIF  id=3 THEN
		RETURN lc_disposition_code;
	  ELSE
		RETURN NULL;
	  END IF;

-- Need to discuss on if not found
   EXCEPTION
      WHEN OTHERS
      THEN
	  IF id=1 THEN
		RETURN 'Other';
	  ELSIF  id=2 THEN
		RETURN 'Sales Related';
	  ELSIF  id=3 THEN
		RETURN 'Share of Wallet';
	  ELSE
		RETURN NULL;
	  END IF;
   END fnc_type_id;

   FUNCTION fnc_created_by (p_created_by VARCHAR2)
      RETURN VARCHAR2
   IS
      lc_employee_number   VARCHAR2 (30);
   BEGIN

      SELECT user_name
        INTO lc_employee_number
--        FROM apps.jtf_rs_emp_dtls_vl
	FROM apps.xx_crm_emp_resources_v
       WHERE user_id = p_created_by
         AND user_name IS NOT NULL
	 AND USER_NAME NOT IN ('ODCDH', 'ODSFA', 'ODCRMBPEL')
	 AND STATUS='A'
         AND ROWNUM = 1;

      RETURN lc_employee_number;
   EXCEPTION
      WHEN OTHERS
      THEN
         lc_employee_number:='000000';
	 RETURN lc_employee_number;
   END fnc_created_by;

END xx_crm_exp_tasks_pkg;
/

SHOW ERRORS;

EXIT;
