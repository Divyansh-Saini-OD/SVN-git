-- Declare the SQL type for the PL/SQL type XX_VALIDATE_CRM_OSR.T_OSR_REC
CREATE OR REPLACE TYPE XX_VALIDATE_CRM_OSR_T_OSR_REC AS OBJECT (
      OSR VARCHAR2(30),
      TABLE_NAME VARCHAR2(255)
);
/
show errors
CREATE OR REPLACE TYPE XX_VALIDATE_CRM_OSR_T_OSR_TAB AS TABLE OF XX_VALIDATE_CRM_OSR_T_OSR_REC; 
/
show errors
-- Declare package containing conversion functions between SQL and PL/SQL types
CREATE OR REPLACE PACKAGE XX_BPEL_GETOSRVALUES AS
	-- Declare the conversion functions the PL/SQL type XX_VALIDATE_CRM_OSR.T_OSR_REC
	FUNCTION PL_TO_SQL0(aPlsqlItem XX_VALIDATE_CRM_OSR.T_OSR_REC)
 	RETURN XX_VALIDATE_CRM_OSR_T_OSR_REC;
	FUNCTION SQL_TO_PL1(aSqlItem XX_VALIDATE_CRM_OSR_T_OSR_REC)
	RETURN XX_VALIDATE_CRM_OSR.T_OSR_REC;
	-- Declare the conversion functions the PL/SQL type XX_VALIDATE_CRM_OSR.T_OSR_TABLE
	FUNCTION PL_TO_SQL1(aPlsqlItem XX_VALIDATE_CRM_OSR.T_OSR_TABLE)
 	RETURN XX_VALIDATE_CRM_OSR_T_OSR_TAB;
	FUNCTION SQL_TO_PL0(aSqlItem XX_VALIDATE_CRM_OSR_T_OSR_TAB)
	RETURN XX_VALIDATE_CRM_OSR.T_OSR_TABLE;
   PROCEDURE XX_VALIDATE_CRM_OSR$GET_ENTIT (P_ORIG_SYSTEM VARCHAR2,P_OSR_RECORD XX_VALIDATE_CRM_OSR_T_OSR_TAB,X_OWNER_TABLE_ID OUT NUMBER,X_NO_OSR OUT VARCHAR2,X_NO_OSR_TABLE OUT VARCHAR2,X_RETURN_STATUS OUT VARCHAR2,X_MSG_COUNT OUT NUMBER,X_MSG_DATA OUT VARCHAR2);
END XX_BPEL_GETOSRVALUES;
/
show errors
CREATE OR REPLACE PACKAGE BODY XX_BPEL_GETOSRVALUES IS
	FUNCTION PL_TO_SQL0(aPlsqlItem XX_VALIDATE_CRM_OSR.T_OSR_REC)
 	RETURN XX_VALIDATE_CRM_OSR_T_OSR_REC IS 
	aSqlItem XX_VALIDATE_CRM_OSR_T_OSR_REC; 
	BEGIN 
		-- initialize the object
		aSqlItem := XX_VALIDATE_CRM_OSR_T_OSR_REC(NULL, NULL);
		aSqlItem.OSR := aPlsqlItem.OSR;
		aSqlItem.TABLE_NAME := aPlsqlItem.TABLE_NAME;
		RETURN aSqlItem;
	END PL_TO_SQL0;
	FUNCTION SQL_TO_PL1(aSqlItem XX_VALIDATE_CRM_OSR_T_OSR_REC) 
	RETURN XX_VALIDATE_CRM_OSR.T_OSR_REC IS 
	aPlsqlItem XX_VALIDATE_CRM_OSR.T_OSR_REC; 
	BEGIN 
		aPlsqlItem.OSR := aSqlItem.OSR;
		aPlsqlItem.TABLE_NAME := aSqlItem.TABLE_NAME;
		RETURN aPlsqlItem;
	END SQL_TO_PL1;
	FUNCTION PL_TO_SQL1(aPlsqlItem XX_VALIDATE_CRM_OSR.T_OSR_TABLE)
 	RETURN XX_VALIDATE_CRM_OSR_T_OSR_TAB IS 
	aSqlItem XX_VALIDATE_CRM_OSR_T_OSR_TAB; 
	BEGIN 
		-- initialize the table 
		aSqlItem := XX_VALIDATE_CRM_OSR_T_OSR_TAB();
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := PL_TO_SQL0(aPlsqlItem(I));
		END LOOP; 
		RETURN aSqlItem;
	END PL_TO_SQL1;
	FUNCTION SQL_TO_PL0(aSqlItem XX_VALIDATE_CRM_OSR_T_OSR_TAB) 
	RETURN XX_VALIDATE_CRM_OSR.T_OSR_TABLE IS 
	aPlsqlItem XX_VALIDATE_CRM_OSR.T_OSR_TABLE; 
	BEGIN 
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := SQL_TO_PL1(aSqlItem(I));
		END LOOP; 
		RETURN aPlsqlItem;
	END SQL_TO_PL0;

   PROCEDURE XX_VALIDATE_CRM_OSR$GET_ENTIT (P_ORIG_SYSTEM VARCHAR2,P_OSR_RECORD XX_VALIDATE_CRM_OSR_T_OSR_TAB,X_OWNER_TABLE_ID OUT NUMBER,X_NO_OSR OUT VARCHAR2,X_NO_OSR_TABLE OUT VARCHAR2,X_RETURN_STATUS OUT VARCHAR2,X_MSG_COUNT OUT NUMBER,X_MSG_DATA OUT VARCHAR2) IS
      P_OSR_RECORD_ APPS.XX_VALIDATE_CRM_OSR.T_OSR_TABLE;
   BEGIN
      P_OSR_RECORD_ := XX_BPEL_GETOSRVALUES.SQL_TO_PL0(P_OSR_RECORD);
      APPS.XX_VALIDATE_CRM_OSR.GET_ENTITY_ID(P_ORIG_SYSTEM,P_OSR_RECORD_,X_OWNER_TABLE_ID,X_NO_OSR,X_NO_OSR_TABLE,X_RETURN_STATUS,X_MSG_COUNT,X_MSG_DATA);
   END XX_VALIDATE_CRM_OSR$GET_ENTIT;

END XX_BPEL_GETOSRVALUES;
/
show errors
exit
