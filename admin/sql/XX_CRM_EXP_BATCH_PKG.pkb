SET VERIFY OFF;
WHENEVER SQLERROR CONTINUE;
WHENEVER OSERROR EXIT FAILURE ROLLBACK;

-- +============================================================================================+
-- |                  Office Depot - Ebiz to SFDC conversion                                    |
-- +============================================================================================+
-- | Name        : XX_CRM_EXP_BATCH_PKG.pkb                                                     |
-- | Description : SFDC Conversion                                                              |
-- |                                                                                            |
-- |                                                                                            |
-- |Change Record:                                                                              |
-- |===============                                                                             |
-- |Version     Date           Author               Remarks                                     |
-- |=======    ==========      ================     ============================================|
-- |1.0        08/07/11       Devendra Petkar        Initial version                            |
-- |1.1       18-May-2016   Shubashree R     Removed the schema reference for GSCC compliance QC#37898|
-- +============================================================================================+

CREATE OR REPLACE PACKAGE BODY xx_crm_exp_batch_pkg
-- +===================================================================+
-- |                  Office Depot -  Ebiz to SFDC Conversion.         |
-- +===================================================================+
-- | Name       :  XX_CRM_EXP_BATCH_PKG                                |
-- | Description: This Package is to performed to create csv file from |
-- |          staging table and send this file to the SFDC.            |
-- |          SFDC will load exception table and then this process     |
-- |          will update staging table with exceptions.               |
-- |								       |
-- |Change Record:                                                     |
-- |===============                                                    |
-- |Version   Date        Author           Remarks                     |
-- |=======   ==========  =============    ============================|
-- |V 1.0    08/07/11   Devendra Petkar				       |
-- +===================================================================+
AS
-- +===================================================================+
-- | Name             : Copy_File                                      |
-- | Description      : This procedure copy the file generated by      |
-- |                    Generate_File procedure from Outbound directory|
-- |                    to FTP out directory.                          |
-- |                                                                   |
-- | parameters :      p_sourcepath                                    |
-- |                   p_destpath                                      |
-- |                                                                   |
-- +===================================================================+
   PROCEDURE copy_file (
      p_sourcepath    IN   VARCHAR2,
      p_destpath      IN   VARCHAR2,
      p_archivepath   IN   VARCHAR2
   )
   IS
      ln_req_id        NUMBER;
      lc_sourcepath    VARCHAR2 (1000);
      lc_destpath      VARCHAR2 (1000);
      lc_archivepath   VARCHAR2 (1000);
      lb_result        BOOLEAN;
      lc_phase         VARCHAR2 (1000);
      lc_status        VARCHAR2 (1000);
      lc_dev_phase     VARCHAR2 (1000);
      lc_dev_status    VARCHAR2 (1000);
      lc_message       VARCHAR2 (1000);
      lc_token         VARCHAR2 (4000);
      ln_request_id    NUMBER          DEFAULT 0;
   BEGIN
      ln_request_id := fnd_global.conc_request_id ();
      lc_sourcepath := p_sourcepath;
      lc_destpath := p_destpath;
      lc_archivepath := p_archivepath;
      ln_req_id :=
         apps.fnd_request.submit_request ('XXFIN'
                         ,'XXCOMFILCOPY','',''
                         ,FALSE ,lc_sourcepath
                         ,lc_destpath,'','','',lc_archivepath,'','','',
                         '','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,''
                         );
      COMMIT;
      lb_result :=
         apps.fnd_concurrent.wait_for_request (ln_req_id,
                                               1,
                                               0,
                                               lc_phase,
                                               lc_status,
                                               lc_dev_phase,
                                               lc_dev_status,
                                               lc_message
                                              );
   EXCEPTION
      WHEN OTHERS
      THEN
         fnd_message.set_name ('XXCRM', 'XX_CRM_EXP_OTHER_ERROR_MSG');
         lc_token := SQLCODE || ':' || SUBSTR (SQLERRM, 1, 256);
         fnd_message.set_token ('MESSAGE', lc_token);
         lc_message := fnd_message.get;
         fnd_file.put_line (fnd_file.LOG, ' ');
         fnd_file.put_line (fnd_file.LOG,
                            'An error occured. Details : ' || lc_message
                           );
         fnd_file.put_line (fnd_file.LOG, ' ');
   END copy_file;

-- +===================================================================+
-- | Name             : Zip_File                                       |
-- | Description      : This procedure ZIP the file generated by       |
-- |                    Generate_File procedure                        |
-- |                                                                   |
-- | parameters :      p_sourcepath                                    |
-- |                   p_destpath                                      |
-- |                                                                   |
-- +===================================================================+
   PROCEDURE zip_file (p_sourcepath IN VARCHAR2, p_destpath IN VARCHAR2)
   IS
      ln_req_id       NUMBER;
      lc_sourcepath   VARCHAR2 (1000);
      lc_destpath     VARCHAR2 (1000);
      lb_result       BOOLEAN;
      lc_phase        VARCHAR2 (1000);
      lc_status       VARCHAR2 (1000);
      lc_dev_phase    VARCHAR2 (1000);
      lc_dev_status   VARCHAR2 (1000);
      lc_message      VARCHAR2 (1000);
      lc_token        VARCHAR2 (4000);
      ln_request_id   NUMBER          DEFAULT 0;
   BEGIN
      ln_request_id := fnd_global.conc_request_id ();
      lc_sourcepath := p_sourcepath;
      lc_destpath := p_destpath;
      ln_req_id :=
         apps.fnd_request.submit_request ('XXCRM',
                                          'XXODCRZIPNOPATH',
                                          '',
                                          '',
                                          FALSE,
                                          lc_sourcepath,
                                          lc_destpath
                                         );
      COMMIT;
      lb_result :=
         apps.fnd_concurrent.wait_for_request (ln_req_id,
                                               1,
                                               0,
                                               lc_phase,
                                               lc_status,
                                               lc_dev_phase,
                                               lc_dev_status,
                                               lc_message
                                              );
   EXCEPTION
      WHEN OTHERS
      THEN
         fnd_message.set_name ('XXCRM', 'XX_CRM_EXP_OTHER_ERROR_MSG');
         lc_token := SQLCODE || ':' || SUBSTR (SQLERRM, 1, 256);
         fnd_message.set_token ('MESSAGE', lc_token);
         lc_message := fnd_message.get;
         fnd_file.put_line (fnd_file.LOG, ' ');
         fnd_file.put_line (fnd_file.LOG,
                            'An error occured. Details : ' || lc_message
                           );
         fnd_file.put_line (fnd_file.LOG, ' ');
   END zip_file;

-- +===================================================================+
-- | Name             : GENERATE_CRM_EXP_FILE                          |
-- | Description      : This procedure extracts feed and FTP           |
-- |                    it over to Salesforce.                         |
-- |                                                                   |
-- | parameters :      x_errbuf                                        |
-- |                   x_retcode                                       |
-- |                                                                   |
-- +===================================================================+
   PROCEDURE generate_crm_exp_file (
      x_errbuf      OUT NOCOPY      VARCHAR2,
      x_retcode     OUT NOCOPY      NUMBER,
      p_batch_id    IN              NUMBER,
      p_delimiter   IN              VARCHAR2 DEFAULT ','
   )
   IS
----------------------------------------------------------------------
---                Variable Declaration                            ---
----------------------------------------------------------------------
      v_file           UTL_FILE.file_type;
      ln_total_cnt     NUMBER                              := 0;
      lc_file_name     VARCHAR2 (60);
      lc_table_name    VARCHAR2 (30);
      lc_entity_name   xx_crm_exp_batch.entity_name%TYPE;
--      lc_file_loc      VARCHAR2 (60) := 'XXCRM_SFDC_EXTRACTS';
      lc_file_loc      VARCHAR2 (60) := fnd_profile.VALUE ('XX_CRM_EXP_FEED_UTL_NAME');
      lc_token         VARCHAR2 (4000);
      ln_request_id    NUMBER                              DEFAULT 0;
      lc_message       VARCHAR2 (3000);
      lc_message1      VARCHAR2 (3000);
      lc_heading       VARCHAR2 (2000);
      lc_stmt_str      VARCHAR2 (4000);
      lc_stmt_exp_str      VARCHAR2 (4000);
      lc_exp_record    LONG;
      lc_sourcepath    VARCHAR2 (2000)
          := fnd_profile.VALUE ('XX_CRM_EXP_FEED_SOURCE_PATH')
             || lc_file_name;
      lc_destpath      VARCHAR2 (2000)
            := fnd_profile.VALUE ('XX_CRM_EXP_FEED_DEST_PATH')
               || lc_file_name;
      lc_archivepath   VARCHAR2 (2000)
                           := fnd_profile.VALUE ('XX_CRM_EXP_FEED_ARCH_PATH');
      lc_zip_path      VARCHAR2 (2000)
                         := fnd_profile.VALUE ('XX_CRM_EXP_FEED_SOURCE_PATH');
      lc_exp_cursor    sys_refcursor;
      lc_record_id     VARCHAR2 (60);
      lc_batch_id      VARCHAR2 (60);
   BEGIN
      SELECT b.source_value2 || '.csv', b.source_value3, c.entity_name
        INTO lc_file_name, lc_table_name, lc_entity_name
        FROM xx_fin_translatedefinition a,
             xx_fin_translatevalues b,
             xx_crm_exp_batch c
       WHERE a.translate_id = b.translate_id
         AND b.source_value1 = c.entity_name
         AND a.translation_name = 'XX_CRM_EXP_ENTITY_FILENAM'
         AND c.batch_id = p_batch_id
         AND b.enabled_flag     = 'Y'
         AND SYSDATE BETWEEN b.START_DATE_ACTIVE AND nvl(b.END_DATE_ACTIVE, SYSDATE +1)	 ;

-- We are not using XX_CRM_EXP_FEED_SOURCE_PATH, XX_CRM_EXP_FEED_DEST_PATH, XX_CRM_EXP_FEED_ARCH_PATH
--      lc_sourcepath :=
--              fnd_profile.VALUE ('XX_CRM_EXP_FEED_SOURCE_PATH')
--              || lc_file_name;
--      lc_destpath :=
--                fnd_profile.VALUE ('XX_CRM_EXP_FEED_DEST_PATH')
--                || lc_file_name;
--      lc_archivepath := fnd_profile.VALUE ('XX_CRM_EXP_FEED_ARCH_PATH');




      lc_message1 := lc_entity_name || ' Feed Generate Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

	BEGIN
		SELECT TRIM(' ' FROM directory_path||'/'||lc_file_name) INTO lc_sourcepath FROM all_directories WHERE directory_name= lc_file_loc ;
--		SELECT TRIM (' ' FROM directory_path) INTO lc_zip_path FROM all_directories WHERE directory_name='XXCRM_SFDC_ARCHIVE';
--		SELECT TRIM (' ' FROM directory_path) INTO lc_archivepath FROM all_directories WHERE directory_name='XXCRM_SFDC_ARCHIVE';

		      lc_message1 :=  ' File creating is '||lc_sourcepath ;
		      fnd_file.put_line (fnd_file.LOG, lc_message1);
		      fnd_file.put_line (fnd_file.LOG, ' ');

	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		lc_message1 :=  ' File Path is Invalid. File will not create. ' ;
		fnd_file.put_line (fnd_file.LOG, lc_message1);
		fnd_file.put_line (fnd_file.LOG, ' ');

	WHEN OTHERS THEN
		NULL;
	END;

----------------------------------------------------------------------
---                Get Request ID                                  ---
----------------------------------------------------------------------
      ln_request_id := fnd_global.conc_request_id ();
      v_file :=
         UTL_FILE.fopen (LOCATION       => lc_file_loc,
                         filename       => lc_file_name,
                         open_mode      => 'w'
			 ,MAX_LINESIZE   => 32767
                        );

     lc_stmt_str:='''';
     lc_heading:='';
--dbms_output.put_line(lc_entity_name);
      FOR i IN (SELECT   b.source_value3 sourcefieldname,
                         b.source_value4 exportfieldname
                    FROM xx_fin_translatedefinition a,
                         xx_fin_translatevalues b,
                         xx_crm_exp_batch c
                   WHERE a.translate_id = b.translate_id
                     AND b.source_value1 = c.entity_name
                     AND a.translation_name = 'XX_CRM_EXP_FILE_FORMAT'
		     AND c.batch_id = p_batch_id
		     AND b.enabled_flag     = 'Y'
                     AND SYSDATE BETWEEN b.START_DATE_ACTIVE AND nvl(b.END_DATE_ACTIVE, SYSDATE +1)
                ORDER BY TO_NUMBER (source_value2))
      LOOP
         lc_heading :=
                 lc_heading || '"' || i.exportfieldname || '"' || p_delimiter;
--        dbms_output.put_line(lc_stmt_str);
         lc_stmt_str :=
--                  lc_stmt_str || '"''||' || i.sourcefieldname || '||''"'|| p_delimiter;
                  lc_stmt_str || '"''||replace(' || i.sourcefieldname || ',''"'',''""'')||''"'|| p_delimiter;
      END LOOP;

      lc_heading := TRIM (p_delimiter FROM lc_heading);

--CHECK how TO remove last commma
      lc_stmt_str := RTRIM (lc_stmt_str,',''''')||'''';

      lc_stmt_str :=
            'SELECT '
         || lc_stmt_str
         || ' , record_id, batch_id FROM APPS.'
         || lc_table_name
         || ' WHERE UPPER(NVL(load_status,''NEW''))=''NEW''  AND  BATCH_ID='||p_batch_id;
      -- Add the Header Record
      UTL_FILE.put_line (v_file, lc_heading);
      ln_total_cnt := 1;

--      fnd_file.put_line (fnd_file.LOG, lc_stmt_str);

--OPEN lc_exp_cursor FOR lc_stmt_str USING P_BATCH_ID;
      OPEN lc_exp_cursor FOR lc_stmt_str;

      -- Fetch rows from result set one at a time:
      LOOP

	      BEGIN
		 FETCH lc_exp_cursor
		  INTO lc_exp_record, lc_record_id, lc_batch_id;

		 EXIT WHEN lc_exp_cursor%NOTFOUND;
		 UTL_FILE.put_line (v_file, lc_exp_record);
		 ln_total_cnt := ln_total_cnt + 1;
	      EXCEPTION
	      WHEN OTHERS
	      THEN
		 fnd_message.set_name ('XXCRM', 'XX_CRM_EXP_OTHER_ERROR_MSG');
		 lc_token := 'RECORD NUMBER '||lc_record_id ||' BATCH NUMBER '||lc_batch_id || ' Error -'||SQLCODE || ':' || SUBSTR (SQLERRM, 1, 256);
		 fnd_message.set_token ('MESSAGE', lc_token);
		 lc_message := fnd_message.get;
		 fnd_file.put_line (fnd_file.LOG, ' ');
		 fnd_file.put_line (fnd_file.LOG,
				    'An error occured. Details : ' || lc_message
				   );
		 fnd_file.put_line (fnd_file.LOG, ' ');
		      BEGIN
			       lc_stmt_exp_str :=
				    'UPDATE  APPS.'
				 || lc_table_name
				 || ' A SET ( a.load_status , a.error_msg ) = (SELECT ''Error'', a.error_msg||'''||lc_token||''' FROM DUAL ) WHERE batch_id = '||lc_batch_id||' AND a.record_id = '||lc_record_id;

				      EXECUTE IMMEDIATE lc_stmt_exp_str;
				COMMIT;
		      EXCEPTION
		      WHEN OTHERS
		      THEN
			fnd_file.put_line (fnd_file.LOG,
					    'An error occured during Update exception for RECORD NUMBER '||lc_record_id ||' BATCH NUMBER '||lc_batch_id||' Oracle Error '||SUBSTR (SQLERRM, 1, 256)
					   );
		      END;
	      END;
      END LOOP;

      -- Close cursor:
      CLOSE lc_exp_cursor;

      UTL_FILE.fclose (v_file);
      lc_message1 := lc_entity_name || ' Feed Generate Complete.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


----ln_total_cnt

  ----------------------------------------------------------------------
  ---         Printing summary report in the LOG file                ---
  ----------------------------------------------------------------------
      lc_message1 :=
         'Total number of ' || lc_entity_name || ' Records including Header: ';
      fnd_file.put_line (fnd_file.LOG, lc_message1 || TO_CHAR (ln_total_cnt));
      fnd_file.put_line (fnd_file.LOG, ' ');
----------------------------------------------------------------------
---                Compressing File (ZIP)                          ---
----------------------------------------------------------------------
      lc_message1 := lc_entity_name || ' File ZIP Init';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, '');
--      xx_crm_exp_batch_pkg.zip_file (p_sourcepath      => lc_sourcepath,
--                                     p_destpath        => lc_zip_path
--                                    );
      COMMIT;
      lc_message1 := lc_entity_name || ' File ZIP Complete';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, '');
------------------------------------------------------------------------
-----                Copying File                                    ---
-----  File is generated in $XXCRM/outbound directory. The file has  ---
-----  to be moved to $XXCRM/FTP/Out directory. As per OD standard   ---
-----  any external process should not poll any EBS directory.       ---
------------------------------------------------------------------------
--      lc_message1 := lc_entity_name || ' File Copy Init';
--      fnd_file.put_line (fnd_file.LOG, lc_message1);
--      fnd_file.put_line (fnd_file.LOG, '');
--      xx_crm_exp_batch_pkg.copy_file (p_sourcepath       =>    RTRIM(lc_sourcepath,'.csv')
--                                                            || '.zip',
--                                      p_destpath         =>    RTRIM(lc_destpath,'.csv')
--                                                            || '.zip',
--                                      p_archivepath      => lc_archivepath
--                                     );
--      COMMIT;
--      lc_message1 := lc_entity_name || ' File Copy Complete';
--      fnd_file.put_line (fnd_file.LOG, lc_message1);
--      fnd_file.put_line (fnd_file.LOG, '');

		update_batch_record_cnt (
		      x_error	  => x_errbuf ,
		      p_batch_id  => p_batch_id,
		      p_total_record    => ln_total_cnt -1 ,
		      p_total_success_record   => '',
		      p_total_failed_record    => ''
		   ) ;


	COMMIT;

   EXCEPTION
      WHEN UTL_FILE.invalid_path
      THEN
         UTL_FILE.fclose (v_file);
         fnd_message.set_name ('XXCRM', 'XX_CRM_EXP_INVALID_FND_DIR');
         lc_token := lc_file_loc;
         fnd_message.set_token ('MESSAGE', lc_token);
         lc_message := fnd_message.get;
         fnd_file.put_line (fnd_file.LOG, ' ');
         fnd_file.put_line (fnd_file.LOG,
                            'An error occured. Details : ' || lc_message
                           );
         fnd_file.put_line (fnd_file.LOG, ' ');
         x_retcode := 2;
      WHEN UTL_FILE.write_error
      THEN
         UTL_FILE.fclose (v_file);
         fnd_message.set_name ('XXCRM', 'XX_CRM_EXP_FILE_WRITE_ERROR');
         lc_token := lc_file_loc;
         fnd_message.set_token ('MESSAGE1', lc_token);
         lc_token := lc_file_name;
         fnd_message.set_token ('MESSAGE2', lc_token);
         lc_message := fnd_message.get;
         fnd_file.put_line (fnd_file.LOG, ' ');
         fnd_file.put_line (fnd_file.LOG,
                            'An error occured. Details : ' || lc_message
                           );
         fnd_file.put_line (fnd_file.LOG, ' ');
         x_retcode := 2;
      WHEN UTL_FILE.access_denied
      THEN
         UTL_FILE.fclose (v_file);
         fnd_message.set_name ('XXCRM', 'XX_CRM_EXP_FILE_ACCESS_DENIED');
         lc_token := lc_file_loc;
         fnd_message.set_token ('MESSAGE1', lc_token);
         lc_token := lc_file_name;
         fnd_message.set_token ('MESSAGE2', lc_token);
         lc_message := fnd_message.get;
         fnd_file.put_line (fnd_file.LOG, ' ');
         fnd_file.put_line (fnd_file.LOG,
                            'An error occured. Details : ' || lc_message
                           );
         fnd_file.put_line (fnd_file.LOG, ' ');
         x_retcode := 2;
      WHEN OTHERS
      THEN
         UTL_FILE.fclose (v_file);
         fnd_message.set_name ('XXCRM', 'XX_CRM_EXP_OTHER_ERROR_MSG');
         lc_token := SQLCODE || ':' || SUBSTR (SQLERRM, 1, 256);
         fnd_message.set_token ('MESSAGE', lc_token);
         lc_message := fnd_message.get;
         fnd_file.put_line (fnd_file.LOG, ' ');
         fnd_file.put_line (fnd_file.LOG,
                            'An error occured. Details : ' || lc_message
                           );
         fnd_file.put_line (fnd_file.LOG, ' ');
         x_retcode := 2;
   END generate_crm_exp_file;

-- +===================================================================+
-- | Name             : Generate_File                                  |
-- | Description      : This procedure extracts feeds                   |
-- |                                                   |
-- |                                                                   |
-- | parameters :      x_errbuf                                        |
-- |                   x_retcode                                       |
-- |                                                                   |
-- +===================================================================+
   PROCEDURE generate_file (
      x_errbuf      OUT NOCOPY      VARCHAR2,
      x_retcode     OUT NOCOPY      NUMBER,
      p_batch_id    IN              NUMBER,
      p_delimiter   IN              VARCHAR2 DEFAULT ','
   )
   IS
      ld_succ_update_date   DATE;
   BEGIN
      -- Initialize the out Parameters
      x_errbuf := NULL;
      x_retcode := 0;
      -- Generate and export File
      generate_crm_exp_file (x_errbuf, x_retcode, p_batch_id, p_delimiter);
   END generate_file;

   PROCEDURE generate_batch_id (
      x_batch_id      OUT NOCOPY      xx_crm_exp_batch.batch_id%TYPE,
      p_batch_name    IN              xx_crm_exp_batch.batch_name%TYPE,
      p_entity_name   IN              xx_crm_exp_batch.entity_name%TYPE
   )
   IS
   BEGIN
      INSERT INTO xx_crm_exp_batch
                  (batch_id, batch_name, entity_name
                  )
           VALUES (xx_crm_exp_batch_seq.NEXTVAL, p_batch_name, p_entity_name
                  )
        RETURNING batch_id
             INTO x_batch_id;

      COMMIT;
   END generate_batch_id;

   PROCEDURE update_batch_status (
      x_error      OUT NOCOPY      NUMBER,
      p_batch_id   IN              xx_crm_exp_batch.batch_id%TYPE,
      p_status     IN              xx_crm_exp_batch.batch_status%TYPE
   )
   IS
   BEGIN
      x_error := 0;

      UPDATE xx_crm_exp_batch
         SET batch_status = p_status,
             last_updated_date = SYSDATE
       WHERE batch_id = p_batch_id;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         x_error := 1;
-- add error logs
   END update_batch_status;

   PROCEDURE update_batch_record_cnt (
      x_error                  OUT NOCOPY      NUMBER,
      p_batch_id               IN              xx_crm_exp_batch.batch_id%TYPE,
      p_total_record           IN              xx_crm_exp_batch.total_record%TYPE,
      p_total_success_record   IN              xx_crm_exp_batch.total_success_record%TYPE,
      p_total_failed_record    IN              xx_crm_exp_batch.total_failed_record%TYPE
   )
   IS
   BEGIN
      x_error := 0;

      UPDATE xx_crm_exp_batch
         SET total_record = NVL (p_total_record, total_record),
             total_success_record =
                            NVL (p_total_success_record, total_success_record),
             total_failed_record =
                              NVL (p_total_failed_record, total_failed_record),
             last_updated_date = SYSDATE
       WHERE batch_id = p_batch_id;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         x_error := 1;
-- add error logs
   END update_batch_record_cnt;

   PROCEDURE update_exception (
      x_error      OUT NOCOPY      NUMBER,
      p_batch_id   IN              xx_crm_exp_batch.batch_id%TYPE
   )
   IS
      lc_table_name   VARCHAR2 (30);
      lc_stmt_str     VARCHAR2 (4000);
   BEGIN
      SELECT b.source_value3
        INTO lc_table_name
        FROM xx_fin_translatedefinition a,
             xx_fin_translatevalues b,
             xx_crm_exp_batch c
       WHERE a.translate_id = b.translate_id
         AND b.source_value1 = c.entity_name
         AND a.translation_name = 'XX_CRM_EXP_ENTITY_FILENAM'
         AND c.batch_id = p_batch_id
         AND ROWNUM = 1;

-- exception not handled
      lc_stmt_str :=
            'UPDATE  APPS.'
         || lc_table_name
         || ' A SET ( a.load_status , a.error_msg ) = ( SELECT ''Error'', MAX(b.error_msg)  FROM XX_CRM_EXP_DATALOADER_ERROR B WHERE a.batch_id = b.batch_id AND a.record_id =b.record_id GROUP BY b.batch_id, b.record_id) WHERE a.batch_id = '
         || p_batch_id;

      EXECUTE IMMEDIATE lc_stmt_str;

-- using
      COMMIT;
--CHECK COUNT OF both table for verification
   END update_exception;


   PROCEDURE purge_table (
      x_errbuf      OUT NOCOPY      VARCHAR2,
      x_retcode     OUT NOCOPY      NUMBER,
      p_table_name	VARCHAR2,
      p_batch_id   IN              xx_crm_exp_batch.batch_id%TYPE DEFAULT '0',
      p_truncate   IN		VARCHAR2 DEFAULT 'N'
   )
   IS

      lc_stmt_str     VARCHAR2 (4000);
      lc_message1      VARCHAR2 (3000);
   BEGIN
      x_errbuf := NULL;
      x_retcode := 0;


	IF p_table_name NOT IN ('XX_CRM_EXP_ACCOUNT', 'XX_CRM_EXP_ASSIGNMENTS', 'XX_CRM_EXP_CONTACT', 'XX_CRM_EXP_CUST_HIER',
	'XX_CRM_EXP_LEAD', 'XX_CRM_EXP_NOTES_LEAD', 'XX_CRM_EXP_NOTES_OPPORTUNITY', 'XX_CRM_EXP_NOTES_PARTY',
	'XX_CRM_EXP_NOTES_PARTY_SITE', 'XX_CRM_EXP_OPP_CONTACT', 'XX_CRM_EXP_OPPORTUNITY', 'XX_CRM_EXP_SITE', 'XX_CRM_EXP_SPID',
	'XX_CRM_EXP_TASKS_LEAD', 'XX_CRM_EXP_TASKS_OPPORTUNITY', 'XX_CRM_EXP_TASKS_PARTY', 'XX_CRM_EXP_TASKS_PARTY_SITE',
	'XX_CRM_EXP_TASKS_TASK', 'XX_CRM_EXP_USER', 'XX_CRM_EXP_TASKS_ALL', 'XX_CRM_EXP_NOTES_ALL','XX_CRM_EXP_TASKS_PARTY_MASTER',
	'XX_CRM_EXP_TASKS_SITE_MASTER', 'XX_CRM_EXP_TASKS_LEAD_MASTER', 'XX_CRM_EXP_TASKS_OPP_MASTER', 'XX_CRM_EXP_TASKS_TASK_MASTER',
	'XX_CRM_EXP_NOTES_PARTY_MASTER', 'XX_CRM_EXP_NOTES_SITE_MASTER', 'XX_CRM_EXP_NOTES_LEAD_MASTER', 'XX_CRM_EXP_NOTES_OPP_MASTER',
	'XX_CRM_EXP_SITE_MASTER','XX_CRM_EXP_ACCOUNT_MASTER') THEN

	      fnd_file.put_line (fnd_file.LOG, 'Purge will not process for table_name ::'||p_table_name);
	      fnd_file.put_line (fnd_file.LOG, ' ');
	      RETURN;
	END IF;


      fnd_file.put_line (fnd_file.LOG, 'Purge is started for SFDC Conversion');
      fnd_file.put_line (fnd_file.LOG, ' ');

      lc_message1 := ' Deleting record from table ' || p_table_name ;
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

	IF NVL(p_truncate,'N')='N' THEN
	      lc_stmt_str :=
		    'DELETE /*+ PARALLEL (A,4) */ FROM  APPS.'
		 || p_table_name
		 || ' A  WHERE a.batch_id = '
		 || p_batch_id;
	      fnd_file.put_line (fnd_file.LOG, lc_stmt_str);
	      fnd_file.put_line (fnd_file.LOG, ' ');
	END IF;


	IF p_truncate='Y' THEN
	      lc_stmt_str :=
		    'TRUNCATE TABLE XXCRM.'
		 || p_table_name
		;
	      fnd_file.put_line (fnd_file.LOG, lc_stmt_str);
	      fnd_file.put_line (fnd_file.LOG, ' ');

	END IF;

      EXECUTE IMMEDIATE lc_stmt_str;

      lc_message1 := ' Records deleted from '||p_table_name||' for batch_id '||p_batch_id ||' are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

	 COMMIT;

   END purge_table;

END xx_crm_exp_batch_pkg;
/
SHOW ERRORS;

EXIT;
