create or replace 
PACKAGE BODY XX_CRM_INCENTCOMP_FEED_PKG

-- +===================================================================+
-- |                  Office Depot - Varicent Project                  |
-- +===================================================================+
-- | Name       :  XX_CRM_INCENTCOMP_FEED_PKG                          |
-- | Description:  This package contains procedures to extract Resource|
-- |               manager data and FTP flat files with those          |
-- |               data to Varicent                                    |
-- |Change Record:                                                     |
-- |===============                                                    |
-- |Version   Date        Author           Remarks                     |
-- |=======   ==========  =============    ============================|
-- |V 1.0     18-JAN-2011 Kishore Jena     Initial draft version       |
-- |v 2.0     05-MAR-2012 Dheeraj V        QC 16211: Updated all 4 cursors|
-- |                                       to handle retro termination |
-- |                                       scenario, save prog start date|
-- |                                       in the profile option       |
-- |v2.1	  20-Aug-2015 Pooja Mehra	   Added a clause in proc      |
-- |									   Generate_Quota_File to pick |
-- |									   active roles.               |
-- +===================================================================+

AS
-- +===================================================================+
-- | Name             : Copy_File                                      |
-- | Description      : This procedure copy the file generated by      |
-- |                    Generate_File procedure from Outbound directory|
-- |                    to FTP out directory.                          |
-- |                                                                   |
-- | parameters :      p_sourcepath                                    |
-- |                   p_destpath                                      |
-- |                                                                   |
-- +===================================================================+

PROCEDURE Copy_File(p_sourcepath  IN VARCHAR2,
                    p_destpath    IN VARCHAR2,
                    p_archivepath IN VARCHAR2
                    )
IS

  ln_req_id        NUMBER;
  lc_sourcepath    VARCHAR2(1000);
  lc_destpath      VARCHAR2(1000);
  lc_archivepath   VARCHAR2(1000);
  lb_result        BOOLEAN;
  lc_phase         VARCHAR2(1000);
  lc_status        VARCHAR2(1000);
  lc_dev_phase     VARCHAR2(1000);
  lc_dev_status    VARCHAR2(1000);
  lc_message       VARCHAR2(1000);
  lc_token         VARCHAR2(4000);
  ln_request_id    NUMBER DEFAULT 0;

BEGIN
  ln_request_id  := fnd_global.conc_request_id();
  lc_sourcepath  := p_sourcepath;
  lc_destpath    := p_destpath;
  lc_archivepath := p_archivepath;

  ln_req_id := apps.fnd_request.submit_request
                        ('XXFIN'
                         ,'XXCOMFILCOPY'
                         ,''
                         ,''
                         ,FALSE
                         ,lc_sourcepath
                         ,lc_destpath,'','','',lc_archivepath,'','','',
                         '','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,'','','','','','','','',''
                         ,''
                         );

  commit;

  lb_result:=apps.fnd_concurrent.wait_for_request(ln_req_id,1,0,
       lc_phase      ,
       lc_status     ,
       lc_dev_phase  ,
       lc_dev_status ,
       lc_message    );
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0178_OTHER_ERROR_MSG');
    lc_token   := SQLCODE||':'|| SUBSTR(SQLERRM,1,256);
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : '||lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
END Copy_File;

-- +===================================================================+
-- | Name             : Zip_File                                       |
-- | Description      : This procedure ZIP the file generated by       |
-- |                    Generate_File procedure                        |
-- |                                                                   |
-- | parameters :      p_sourcepath                                    |
-- |                   p_destpath                                      |
-- |                                                                   |
-- +===================================================================+

PROCEDURE Zip_File(p_sourcepath  IN VARCHAR2,
                   p_destpath    IN VARCHAR2
                  )
IS

  ln_req_id        NUMBER;
  lc_sourcepath    VARCHAR2(1000);
  lc_destpath      VARCHAR2(1000);
  lb_result        BOOLEAN;
  lc_phase         VARCHAR2(1000);
  lc_status        VARCHAR2(1000);
  lc_dev_phase     VARCHAR2(1000);
  lc_dev_status    VARCHAR2(1000);
  lc_message       VARCHAR2(1000);
  lc_token         VARCHAR2(4000);
  ln_request_id    NUMBER DEFAULT 0;

BEGIN
  ln_request_id  := fnd_global.conc_request_id();
  lc_sourcepath  := p_sourcepath;
  lc_destpath    := p_destpath;

  ln_req_id := apps.fnd_request.submit_request
                        ('XXCRM'
                         ,'XXODCRZIPNOPATH'
                         ,''
                         ,''
                         ,FALSE
                         ,lc_sourcepath
                         ,lc_destpath
                         );


  commit;

  lb_result:=apps.fnd_concurrent.wait_for_request(ln_req_id,1,0,
       lc_phase      ,
       lc_status     ,
       lc_dev_phase  ,
       lc_dev_status ,
       lc_message    );

EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0178_OTHER_ERROR_MSG');
    lc_token   := SQLCODE||':'|| SUBSTR(SQLERRM,1,256);
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : '||lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
END Zip_File;

-- +===================================================================+
-- | Name             : TRNSFR_File                                    |
-- | Description      : This procedure tranfers the file generated by  |
-- |                    Generate_File procedure from Outbound directory|
-- |                    to VARICENT directory.                         |
-- |                                                                   |
-- | parameters :     p_host_dest                                      |
-- |                  p_from_dir                                       |
-- |                  p_from_file                                      |
-- |                  p_to_dir                                         |
-- |                  p_to_file                                        |
-- |                                                                   |
-- +===================================================================+

PROCEDURE TRNSFR_File(p_host_dest VARCHAR2,
                      p_from_dir  VARCHAR2,
                      p_from_file VARCHAR2,
                      p_to_dir    VARCHAR2,
                      p_to_file   VARCHAR2
                     ) IS

  ln_req_id        NUMBER;
  lc_host_dest VARCHAR2(1000);
  lc_from_dir VARCHAR2(1000);
  lc_from_file VARCHAR2(1000);
  lc_to_dir VARCHAR2(1000);
  lc_to_file VARCHAR2(1000);
  lb_result        BOOLEAN;
  lc_phase         VARCHAR2(1000);
  lc_status        VARCHAR2(1000);
  lc_dev_phase     VARCHAR2(1000);
  lc_dev_status    VARCHAR2(1000);
  lc_message       VARCHAR2(1000);
  lc_token         VARCHAR2(4000);
  ln_request_id    NUMBER DEFAULT 0;

BEGIN
  ln_request_id := fnd_global.conc_request_id();

  lc_host_dest := p_host_dest;
  lc_from_dir  := p_from_dir;
  lc_from_file := p_from_file;
  lc_to_dir    := p_to_dir;
  lc_to_file   := p_to_file;

  ln_req_id:= apps.fnd_request.submit_request
                        ('xxcrm',
                         'XXCRMFTP',
                         '',
                         '',
                         FALSE,
                         lc_host_dest,
                         lc_from_dir,
                         lc_from_file,
                         lc_to_dir,
                         lc_to_file
                         );
  commit;

  lb_result := apps.fnd_concurrent.wait_for_request(ln_req_id,
                                                    1,
                                                    0,
                                                    lc_phase,
                                                    lc_status,
                                                    lc_dev_phase,
                                                    lc_dev_status,
                                                    lc_message
                                                   );
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0178_OTHER_ERROR_MSG');
    lc_token   := SQLCODE||':'|| SUBSTR(SQLERRM,1,256);
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : '||lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
END TRNSFR_File;


-- +===================================================================+
-- | Name             : Generate_Payee_File                            |
-- | Description      : This procedure extracts Payee feed and FTP     |
-- |                    it over to VARICENT.                           |
-- |                                                                   |
-- | parameters :      x_errbuf                                        |
-- |                   x_retcode                                       |
-- |                                                                   |
-- +===================================================================+
PROCEDURE Generate_Payee_File(x_errbuf              OUT NOCOPY VARCHAR2,
                              x_retcode             OUT NOCOPY NUMBER,
                              p_as_of_date          IN         DATE,
                              p_enable_ftp          IN         VARCHAR2
                             ) IS

  -- Cursor to extract all the payee data
  CURSOR c_payee_data IS
  SELECT DISTINCT
         DECODE(d.attribute14, 'OT', TO_NUMBER(a.source_number) || d.role_name,
                'HSE', TO_NUMBER(a.source_number) || d.role_name, TO_NUMBER(a.source_number)
                ) || '|' ||
         DECODE(d.attribute14, 'OT', TO_NUMBER(a.source_number) || d.role_name,
                'HSE', TO_NUMBER(a.source_number) || d.role_name, a.source_name
                ) || '|' ||
         TO_CHAR(a.start_date_active, 'MM/DD/YYYY')  || '|' ||
         TO_CHAR(a.end_date_active,   'MM/DD/YYYY')  || '|' ||
         DECODE(d.attribute14, 'OT', NULL,
                'HSE', NULL, a.source_email
                ) payee_record
  FROM   apps.jtf_rs_resource_extns_vl a,
         apps.jtf_rs_group_mbr_role_vl b,
         apps.jtf_rs_role_relations    c,
         apps.jtf_rs_roles_vl d
  WHERE  ((a.start_date_active <= trunc(p_as_of_date) and
           nvl(a.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(a.start_date_active, sysdate-1) and nvl(a.end_date_active, sysdate+1) or
          trunc(a.end_date_active) >= trunc(p_as_of_date) or
          a.last_update_date > p_as_of_date
         )
    AND  a.source_number IS NOT NULL
    AND  b.resource_id = a.resource_id
    AND  ((b.start_date_active <= trunc(p_as_of_date) and
           nvl(b.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(b.start_date_active, sysdate-1) and nvl(b.end_date_active, sysdate+1) or
          trunc(b.end_date_active) >= trunc(p_as_of_date) or
          c.last_update_date > p_as_of_date
         )
    AND  c.role_relate_id = b.role_relate_id
    AND  ((c.start_date_active <= trunc(p_as_of_date) and
           nvl(c.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(c.start_date_active, sysdate-1) and nvl(c.end_date_active, sysdate+1) or
          trunc(c.end_date_active) >= trunc(p_as_of_date) or
          c.last_update_date > p_as_of_date
         )
    AND  UPPER(NVL(c.attribute15, 'setup')) <> 'SETUP'
    AND  d.role_id = b.role_id
    AND  d.role_type_code = 'SALES'
    AND  nvl(d.active_flag, 'N') = 'Y'
    AND  nvl(d.admin_flag, 'N') = 'N'
  UNION
  -- Union to make sure all managers in Manager feed are selected as Payee
  SELECT DISTINCT
         DECODE(d.manager_flag, 'Y', TO_NUMBER(i.source_number), TO_NUMBER(f.source_number)) || '|' ||
         DECODE(d.manager_flag, 'Y', i.source_name, f.source_name) || '|' ||
         TO_CHAR(DECODE(d.manager_flag, 'Y', i.start_date_active, f.start_date_active), 'MM/DD/YYYY')  || '|' ||
         TO_CHAR(DECODE(d.manager_flag, 'Y', i.end_date_active, f.end_date_active),   'MM/DD/YYYY')  || '|' ||
         DECODE(d.manager_flag, 'Y', i.source_email, f.source_email)  payee_record
  FROM   apps.jtf_rs_resource_extns a,
         apps.jtf_rs_group_mbr_role_vl b,
         apps.jtf_rs_role_relations    c,
         apps.jtf_rs_roles_vl d,
         apps.jtf_rs_groups_b e,
         apps.jtf_rs_resource_extns f,
         apps.jtf_rs_grp_relations_vl g,
         apps.jtf_rs_groups_b h,
         apps.jtf_rs_resource_extns i
  WHERE  ((a.start_date_active <= trunc(p_as_of_date) and
           nvl(a.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(a.start_date_active, sysdate-1) and nvl(a.end_date_active, sysdate+1) or
          trunc(a.end_date_active) >= trunc(p_as_of_date) or
          a.last_update_date > p_as_of_date
         )
    AND  a.source_number IS NOT NULL
    AND  b.resource_id = a.resource_id
    AND  ((b.start_date_active <= trunc(p_as_of_date) and
           nvl(b.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(b.start_date_active, sysdate-1) and nvl(b.end_date_active, sysdate+1) or
          trunc(b.end_date_active) >= trunc(p_as_of_date) or
          c.last_update_date > p_as_of_date
         )
    AND  c.role_relate_id = b.role_relate_id
    AND  ((c.start_date_active <= trunc(p_as_of_date) and
           nvl(c.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(c.start_date_active, sysdate-1) and nvl(c.end_date_active, sysdate+1) or
          trunc(c.end_date_active) >= trunc(p_as_of_date) or
          c.last_update_date > p_as_of_date
         )
    AND  UPPER(NVL(c.attribute15, 'setup')) <> 'SETUP'
    AND  d.role_id = b.role_id
    AND  d.role_type_code = 'SALES'
    AND  nvl(d.active_flag, 'N') = 'Y'
    AND  nvl(d.admin_flag, 'N') = 'N'
    AND  e.group_id = b.group_id
    AND  ((e.start_date_active <= trunc(p_as_of_date) and
           nvl(e.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(e.start_date_active, sysdate-1) and nvl(e.end_date_active, sysdate+1) or
          trunc(e.end_date_active) >= trunc(p_as_of_date) or
          e.last_update_date > p_as_of_date
         )
    AND  f.source_id = e.attribute15
    AND  ((f.start_date_active <= trunc(p_as_of_date) and
           nvl(f.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(f.start_date_active, sysdate-1) and nvl(f.end_date_active, sysdate+1) or
          trunc(f.end_date_active) >= trunc(p_as_of_date) or
          f.last_update_date > p_as_of_date
         )
    AND  g.group_id(+) = e.group_id
    AND  g.relation_type(+) = 'PARENT_GROUP'
    AND  ((nvl(g.start_date_active, p_as_of_date-1) <= trunc(p_as_of_date) and
           nvl(g.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(g.start_date_active, sysdate-1) and nvl(g.end_date_active, sysdate+1) or
          trunc(g.end_date_active) >= trunc(p_as_of_date) or
          g.last_update_date > p_as_of_date
         )
    AND  NVL(g.delete_flag, 'N') <> 'Y'
    AND  h.group_id(+)  = g.related_group_id
    AND  ((nvl(h.start_date_active, p_as_of_date-1) <= trunc(p_as_of_date) and
           nvl(h.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(h.start_date_active, sysdate-1) and nvl(h.end_date_active, sysdate+1) or
          trunc(h.end_date_active) >= trunc(p_as_of_date) or
          h.last_update_date > p_as_of_date
         )
    AND  i.source_id(+) = h.attribute15
    AND  ((nvl(i.start_date_active, p_as_of_date-1) <= trunc(p_as_of_date) and
           nvl(i.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(i.start_date_active, sysdate-1) and nvl(i.end_date_active, sysdate+1) or
          trunc(i.end_date_active) >= trunc(p_as_of_date) or
          i.last_update_date > p_as_of_date
         )
    AND DECODE(d.manager_flag, 'Y', TO_NUMBER(i.source_number), TO_NUMBER(f.source_number)) IS NOT NULL
  ORDER BY 1;

  --Commented below cursor for QC 16211
  /*
    CURSOR c_payee_data IS
  SELECT DISTINCT
         DECODE(d.attribute14, 'OT', TO_NUMBER(a.source_number) || d.role_name,
                'HSE', TO_NUMBER(a.source_number) || d.role_name, TO_NUMBER(a.source_number)
                ) || '|' ||
         DECODE(d.attribute14, 'OT', TO_NUMBER(a.source_number) || d.role_name,
                'HSE', TO_NUMBER(a.source_number) || d.role_name, a.source_name
                ) || '|' ||
         TO_CHAR(a.start_date_active, 'MM/DD/YYYY')  || '|' ||
         TO_CHAR(a.end_date_active,   'MM/DD/YYYY')  || '|' ||
         DECODE(d.attribute14, 'OT', NULL,
                'HSE', NULL, a.source_email
                ) payee_record
  FROM   apps.jtf_rs_resource_extns_vl a,
         apps.jtf_rs_group_mbr_role_vl b,
         apps.jtf_rs_role_relations    c,
         apps.jtf_rs_roles_vl d
  WHERE  ((a.start_date_active <= trunc(p_as_of_date) and
           nvl(a.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(a.start_date_active, sysdate-1) and nvl(a.end_date_active, sysdate+1) or
          trunc(a.end_date_active) >= trunc(p_as_of_date)
         )
    AND  a.source_number IS NOT NULL
    AND  b.resource_id = a.resource_id
    AND  ((b.start_date_active <= trunc(p_as_of_date) and
           nvl(b.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(b.start_date_active, sysdate-1) and nvl(b.end_date_active, sysdate+1) or
          trunc(b.end_date_active) >= trunc(p_as_of_date)
         )
    AND  c.role_relate_id = b.role_relate_id
    AND  ((c.start_date_active <= trunc(p_as_of_date) and
           nvl(c.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(c.start_date_active, sysdate-1) and nvl(c.end_date_active, sysdate+1) or
          trunc(c.end_date_active) >= trunc(p_as_of_date)
         )
    AND  UPPER(NVL(c.attribute15, 'setup')) <> 'SETUP'
    AND  d.role_id = b.role_id
    AND  d.role_type_code = 'SALES'
    AND  nvl(d.active_flag, 'N') = 'Y'
    AND  nvl(d.admin_flag, 'N') = 'N'
  UNION
  -- Union to make sure all managers in Manager feed are selected as Payee
  SELECT DISTINCT
         DECODE(d.manager_flag, 'Y', TO_NUMBER(i.source_number), TO_NUMBER(f.source_number)) || '|' ||
         DECODE(d.manager_flag, 'Y', i.source_name, f.source_name) || '|' ||
         TO_CHAR(DECODE(d.manager_flag, 'Y', i.start_date_active, f.start_date_active), 'MM/DD/YYYY')  || '|' ||
         TO_CHAR(DECODE(d.manager_flag, 'Y', i.end_date_active, f.end_date_active),   'MM/DD/YYYY')  || '|' ||
         DECODE(d.manager_flag, 'Y', i.source_email, f.source_email)  payee_record
  FROM   apps.jtf_rs_resource_extns a,
         apps.jtf_rs_group_mbr_role_vl b,
         apps.jtf_rs_role_relations    c,
         apps.jtf_rs_roles_vl d,
         apps.jtf_rs_groups_b e,
         apps.jtf_rs_resource_extns f,
         apps.jtf_rs_grp_relations_vl g,
         apps.jtf_rs_groups_b h,
         apps.jtf_rs_resource_extns i
  WHERE  ((a.start_date_active <= trunc(p_as_of_date) and
           nvl(a.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(a.start_date_active, sysdate-1) and nvl(a.end_date_active, sysdate+1) or
          trunc(a.end_date_active) >= trunc(p_as_of_date)
         )
    AND  a.source_number IS NOT NULL
    AND  b.resource_id = a.resource_id
    AND  ((b.start_date_active <= trunc(p_as_of_date) and
           nvl(b.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(b.start_date_active, sysdate-1) and nvl(b.end_date_active, sysdate+1) or
          trunc(b.end_date_active) >= trunc(p_as_of_date)
         )
    AND  c.role_relate_id = b.role_relate_id
    AND  ((c.start_date_active <= trunc(p_as_of_date) and
           nvl(c.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(c.start_date_active, sysdate-1) and nvl(c.end_date_active, sysdate+1) or
          trunc(c.end_date_active) >= trunc(p_as_of_date)
         )
    AND  UPPER(NVL(c.attribute15, 'setup')) <> 'SETUP'
    AND  d.role_id = b.role_id
    AND  d.role_type_code = 'SALES'
    AND  nvl(d.active_flag, 'N') = 'Y'
    AND  nvl(d.admin_flag, 'N') = 'N'
    AND  e.group_id = b.group_id
    AND  ((e.start_date_active <= trunc(p_as_of_date) and
           nvl(e.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(e.start_date_active, sysdate-1) and nvl(e.end_date_active, sysdate+1) or
          trunc(e.end_date_active) >= trunc(p_as_of_date)
         )
    AND  f.source_id = e.attribute15
    AND  ((f.start_date_active <= trunc(p_as_of_date) and
           nvl(f.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(f.start_date_active, sysdate-1) and nvl(f.end_date_active, sysdate+1) or
          trunc(f.end_date_active) >= trunc(p_as_of_date)
         )
    AND  g.group_id(+) = e.group_id
    AND  g.relation_type(+) = 'PARENT_GROUP'
    AND  ((nvl(g.start_date_active, p_as_of_date-1) <= trunc(p_as_of_date) and
           nvl(g.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(g.start_date_active, sysdate-1) and nvl(g.end_date_active, sysdate+1) or
          trunc(g.end_date_active) >= trunc(p_as_of_date)
         )
    AND  NVL(g.delete_flag, 'N') <> 'Y'
    AND  h.group_id(+)  = g.related_group_id
    AND  ((nvl(h.start_date_active, p_as_of_date-1) <= trunc(p_as_of_date) and
           nvl(h.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(h.start_date_active, sysdate-1) and nvl(h.end_date_active, sysdate+1) or
          trunc(h.end_date_active) >= trunc(p_as_of_date)
         )
    AND  i.source_id(+) = h.attribute15
    AND  ((nvl(i.start_date_active, p_as_of_date-1) <= trunc(p_as_of_date) and
           nvl(i.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(i.start_date_active, sysdate-1) and nvl(i.end_date_active, sysdate+1) or
          trunc(i.end_date_active) >= trunc(p_as_of_date)
         )
    AND DECODE(d.manager_flag, 'Y', TO_NUMBER(i.source_number), TO_NUMBER(f.source_number)) IS NOT NULL
  ORDER BY 1;
  */


  ----------------------------------------------------------------------
  ---                Variable Declaration                            ---
  ----------------------------------------------------------------------

  v_file              UTL_FILE.FILE_TYPE;
  ln_total_cnt        NUMBER := 0;

  lc_file_name        VARCHAR2(60) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_PAYEE_FILE_NAME');
  lc_file_loc         VARCHAR2(60) := 'XXCRM_OUTBOUND';
  lc_token            VARCHAR2(4000);
  ln_request_id       NUMBER DEFAULT 0;
  lc_message          VARCHAR2(3000);


  lc_sourcepath       VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_SOURCE_PATH') || lc_file_name;
  lc_destpath         VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_DEST_PATH')   || lc_file_name;
  lc_archivepath      VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_ARCH_PATH');
  lc_host_dest        VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_HOST_DEST_PATH');
  lc_to_dir           VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_TO_DIR_PATH');
  lc_zip_path         VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_SOURCE_PATH');

BEGIN
  fnd_file.put_line (fnd_file.LOG,
                     'Payee Feed Generate Init.'
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---                Get Request ID                                  ---
  ----------------------------------------------------------------------

  ln_request_id := fnd_global.conc_request_id();


  v_file := UTL_FILE.FOPEN(location     => lc_file_loc,
                           filename     => lc_file_name || '.txt',
                           open_mode    => 'w'
                          );

  -- Add the Header Record
  UTL_FILE.PUT_LINE(v_file,
                    'PayeeId|' || 'Name|' || 'Date of Hire|' ||
                    'Termination Date|' || 'Email'
                   );

  ln_total_cnt := 1;


  -- Add detail records
  FOR cur_rec IN c_payee_data LOOP
    UTL_FILE.PUT_LINE(v_file,
                      cur_rec.payee_record
                     );
    ln_total_cnt := ln_total_cnt + 1;
  END LOOP;


  UTL_FILE.FCLOSE(v_file);


  fnd_file.put_line (fnd_file.LOG,
                     'Payee Feed Generate Complete'
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---         Printing summary report in the LOG file                ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG,
                     'Total number of Payee Records including Header: ' || TO_CHAR (ln_total_cnt)
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---                Compressing File (ZIP)                          ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG, 'Payee File ZIP Init');
  fnd_file.put_line (fnd_file.LOG,  '');

  XX_CRM_INCENTCOMP_FEED_PKG.Zip_File(p_sourcepath    => lc_sourcepath || '.txt',
                                      p_destpath      => lc_zip_path
                                     );
  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'Payee File ZIP Complete');
  fnd_file.put_line (fnd_file.LOG,   '');



  ----------------------------------------------------------------------
  ---                Copying File                                    ---
  ---  File is generated in $XXCRM/outbound directory. The file has  ---
  ---  to be moved to $XXCRM/FTP/Out directory. As per OD standard   ---
  ---  any external process should not poll any EBS directory.       ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG, 'Payee File Copy Init');
  fnd_file.put_line (fnd_file.LOG,  '');

  XX_CRM_INCENTCOMP_FEED_PKG.Copy_File(p_sourcepath    => lc_sourcepath || '.zip',
                                       p_destpath      => lc_destpath || '.zip',
                                       p_archivepath   => lc_archivepath
                                      );
  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'Payee File Copy Complete');
  fnd_file.put_line (fnd_file.LOG,   '');


  --------------------------------------------------------------------------------
  -- Added new procedures to Transfer the file and raise the BE on Jan 23 2009  --
  --------------------------------------------------------------------------------
  IF  (upper(p_enable_ftp) ='Y' ) THEN
    fnd_file.put_line (fnd_file.LOG, 'Payee Tranfer FTP file Init');
    fnd_file.put_line (fnd_file.LOG,  '');

    lc_destpath := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_DEST_PATH');

    XX_CRM_INCENTCOMP_FEED_PKG.TRNSFR_File(p_host_dest => lc_host_dest,
                                           p_from_dir  => lc_destpath,
                                           p_from_file => lc_file_name,
                                           p_to_dir    => lc_to_dir,
                                           p_to_file   => lc_file_name
                                          );

    COMMIT;
    fnd_file.put_line (fnd_file.LOG, 'Payee Tranfer FTP file Complete');
    fnd_file.put_line (fnd_file.LOG,  '');
  END IF;

EXCEPTION
  WHEN UTL_FILE.INVALID_PATH THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0175_INVALID_FND_DIR');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN UTL_FILE.WRITE_ERROR THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0176_FILE_WRITE_ERROR');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE1', lc_token);
    lc_token   := lc_file_name;
    FND_MESSAGE.SET_TOKEN('MESSAGE2', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN UTL_FILE.ACCESS_DENIED THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0177_FILE_ACCESS_DENIED');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE1', lc_token);
    lc_token   := lc_file_name;
    FND_MESSAGE.SET_TOKEN('MESSAGE2', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN OTHERS THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0178_OTHER_ERROR_MSG');
    lc_token   := SQLCODE||':'|| SUBSTR(SQLERRM,1,256);
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : '||lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
END Generate_Payee_File;

-- +===================================================================+
-- | Name             : Generate_Mgr_File                              |
-- | Description      : This procedure extracts Manager feed and FTP   |
-- |                    it over to VARICENT.                           |
-- |                                                                   |
-- | parameters :      x_errbuf                                        |
-- |                   x_retcode                                       |
-- |                                                                   |
-- +===================================================================+

PROCEDURE Generate_Mgr_File(x_errbuf              OUT NOCOPY VARCHAR2,
                            x_retcode             OUT NOCOPY NUMBER,
                            p_as_of_date          IN         DATE,
                            p_enable_ftp          IN         VARCHAR2
                           ) IS

  -- Cursor to extract all the payee manager data
  CURSOR c_mgr_data IS
  SELECT DISTINCT
         DECODE(d.attribute14, 'OT', TO_NUMBER(a.source_number) || d.role_name,
                'HSE', TO_NUMBER(a.source_number) || d.role_name, TO_NUMBER(a.source_number)
                ) || '|' ||
         DECODE(d.manager_flag, 'Y', TO_NUMBER(i.source_number),
                TO_NUMBER(f.source_number)
               )  || '|' ||
         DECODE(d.manager_flag, 'Y', to_char(g.start_date_active, 'MM/DD/YYYY'), to_char(c.start_date_active, 'MM/DD/YYYY')) || '|' ||
         DECODE(d.manager_flag, 'Y', to_char(g.end_date_active, 'MM/DD/YYYY'), to_char(c.end_date_active, 'MM/DD/YYYY')) mgr_record
  FROM   apps.jtf_rs_resource_extns a,
         apps.jtf_rs_group_mbr_role_vl b,
         apps.jtf_rs_role_relations    c,
         apps.jtf_rs_roles_vl d,
         apps.jtf_rs_groups_b e,
         apps.jtf_rs_resource_extns f,
         apps.jtf_rs_grp_relations_vl g,
         apps.jtf_rs_groups_b h,
         apps.jtf_rs_resource_extns i
  WHERE  ((a.start_date_active <= trunc(p_as_of_date) and
           nvl(a.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(a.start_date_active, sysdate-1) and nvl(a.end_date_active, sysdate+1) or
          trunc(a.end_date_active) >= trunc(p_as_of_date) or
          a.last_update_date > p_as_of_date
         )
    AND  a.source_number IS NOT NULL
    AND  b.resource_id = a.resource_id
    AND  ((b.start_date_active <= trunc(p_as_of_date) and
           nvl(b.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(b.start_date_active, sysdate-1) and nvl(b.end_date_active, sysdate+1) or
          trunc(b.end_date_active) >= trunc(p_as_of_date) or
          c.last_update_date > p_as_of_date
         )
    AND  c.role_relate_id = b.role_relate_id
    AND  ((c.start_date_active <= trunc(p_as_of_date) and
           nvl(c.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(c.start_date_active, sysdate-1) and nvl(c.end_date_active, sysdate+1) or
          trunc(c.end_date_active) >= trunc(p_as_of_date) or
          c.last_update_date > p_as_of_date
         )
    AND  UPPER(NVL(c.attribute15, 'setup')) <> 'SETUP'
    AND  d.role_id = b.role_id
    AND  d.role_type_code = 'SALES'
    AND  nvl(d.active_flag, 'N') = 'Y'
    AND  nvl(d.admin_flag, 'N') = 'N'
    AND  e.group_id = b.group_id
    AND  ((e.start_date_active <= trunc(p_as_of_date) and
           nvl(e.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(e.start_date_active, sysdate-1) and nvl(e.end_date_active, sysdate+1) or
          trunc(e.end_date_active) >= trunc(p_as_of_date) or
          e.last_update_date > p_as_of_date
         )
    AND  f.source_id = e.attribute15
    AND  ((f.start_date_active <= trunc(p_as_of_date) and
           nvl(f.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(f.start_date_active, sysdate-1) and nvl(f.end_date_active, sysdate+1) or
          trunc(f.end_date_active) >= trunc(p_as_of_date) or
          f.last_update_date > p_as_of_date
         )
    AND  g.group_id(+) = e.group_id
    AND  g.relation_type(+) = 'PARENT_GROUP'
    AND  ((nvl(g.start_date_active, p_as_of_date-1) <= trunc(p_as_of_date) and
           nvl(g.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(g.start_date_active, sysdate-1) and nvl(g.end_date_active, sysdate+1) or
          trunc(g.end_date_active) >= trunc(p_as_of_date) or
          g.last_update_date > p_as_of_date
         )
    AND  NVL(g.delete_flag, 'N') <> 'Y'
    AND  h.group_id(+)  = g.related_group_id
    AND  ((nvl(h.start_date_active, p_as_of_date-1) <= trunc(p_as_of_date) and
           nvl(h.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(h.start_date_active, sysdate-1) and nvl(h.end_date_active, sysdate+1) or
          trunc(h.end_date_active) >= trunc(p_as_of_date) or
          h.last_update_date > p_as_of_date
         )
    AND  i.source_id(+) = h.attribute15
    AND  ((nvl(i.start_date_active, p_as_of_date-1) <= trunc(p_as_of_date) and
           nvl(i.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(i.start_date_active, sysdate-1) and nvl(i.end_date_active, sysdate+1) or
          trunc(i.end_date_active) >= trunc(p_as_of_date) or
          i.last_update_date > p_as_of_date
         )
    AND DECODE(d.manager_flag, 'Y', TO_NUMBER(i.source_number), TO_NUMBER(f.source_number)) IS NOT NULL
  ORDER BY 1;

    --Commented below cursor for QC 16211
  /*
    CURSOR c_mgr_data IS
  SELECT DISTINCT
         DECODE(d.attribute14, 'OT', TO_NUMBER(a.source_number) || d.role_name,
                'HSE', TO_NUMBER(a.source_number) || d.role_name, TO_NUMBER(a.source_number)
                ) || '|' ||
         DECODE(d.manager_flag, 'Y', TO_NUMBER(i.source_number),
                TO_NUMBER(f.source_number)
               )  || '|' ||
         DECODE(d.manager_flag, 'Y', to_char(g.start_date_active, 'MM/DD/YYYY'), to_char(c.start_date_active, 'MM/DD/YYYY')) || '|' ||
         DECODE(d.manager_flag, 'Y', to_char(g.end_date_active, 'MM/DD/YYYY'), to_char(c.end_date_active, 'MM/DD/YYYY')) mgr_record
  FROM   apps.jtf_rs_resource_extns a,
         apps.jtf_rs_group_mbr_role_vl b,
         apps.jtf_rs_role_relations    c,
         apps.jtf_rs_roles_vl d,
         apps.jtf_rs_groups_b e,
         apps.jtf_rs_resource_extns f,
         apps.jtf_rs_grp_relations_vl g,
         apps.jtf_rs_groups_b h,
         apps.jtf_rs_resource_extns i
  WHERE  ((a.start_date_active <= trunc(p_as_of_date) and
           nvl(a.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(a.start_date_active, sysdate-1) and nvl(a.end_date_active, sysdate+1) or
          trunc(a.end_date_active) >= trunc(p_as_of_date)
         )
    AND  a.source_number IS NOT NULL
    AND  b.resource_id = a.resource_id
    AND  ((b.start_date_active <= trunc(p_as_of_date) and
           nvl(b.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(b.start_date_active, sysdate-1) and nvl(b.end_date_active, sysdate+1) or
          trunc(b.end_date_active) >= trunc(p_as_of_date)
         )
    AND  c.role_relate_id = b.role_relate_id
    AND  ((c.start_date_active <= trunc(p_as_of_date) and
           nvl(c.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(c.start_date_active, sysdate-1) and nvl(c.end_date_active, sysdate+1) or
          trunc(c.end_date_active) >= trunc(p_as_of_date)
         )
    AND  UPPER(NVL(c.attribute15, 'setup')) <> 'SETUP'
    AND  d.role_id = b.role_id
    AND  d.role_type_code = 'SALES'
    AND  nvl(d.active_flag, 'N') = 'Y'
    AND  nvl(d.admin_flag, 'N') = 'N'
    AND  e.group_id = b.group_id
    AND  ((e.start_date_active <= trunc(p_as_of_date) and
           nvl(e.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(e.start_date_active, sysdate-1) and nvl(e.end_date_active, sysdate+1) or
          trunc(e.end_date_active) >= trunc(p_as_of_date)
         )
    AND  f.source_id = e.attribute15
    AND  ((f.start_date_active <= trunc(p_as_of_date) and
           nvl(f.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(f.start_date_active, sysdate-1) and nvl(f.end_date_active, sysdate+1) or
          trunc(f.end_date_active) >= trunc(p_as_of_date)
         )
    AND  g.group_id(+) = e.group_id
    AND  g.relation_type(+) = 'PARENT_GROUP'
    AND  ((nvl(g.start_date_active, p_as_of_date-1) <= trunc(p_as_of_date) and
           nvl(g.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(g.start_date_active, sysdate-1) and nvl(g.end_date_active, sysdate+1) or
          trunc(g.end_date_active) >= trunc(p_as_of_date)
         )
    AND  NVL(g.delete_flag, 'N') <> 'Y'
    AND  h.group_id(+)  = g.related_group_id
    AND  ((nvl(h.start_date_active, p_as_of_date-1) <= trunc(p_as_of_date) and
           nvl(h.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(h.start_date_active, sysdate-1) and nvl(h.end_date_active, sysdate+1) or
          trunc(h.end_date_active) >= trunc(p_as_of_date)
         )
    AND  i.source_id(+) = h.attribute15
    AND  ((nvl(i.start_date_active, p_as_of_date-1) <= trunc(p_as_of_date) and
           nvl(i.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(i.start_date_active, sysdate-1) and nvl(i.end_date_active, sysdate+1) or
          trunc(i.end_date_active) >= trunc(p_as_of_date)
         )
    AND DECODE(d.manager_flag, 'Y', TO_NUMBER(i.source_number), TO_NUMBER(f.source_number)) IS NOT NULL
  ORDER BY 1;
  */

  ----------------------------------------------------------------------
  ---                Variable Declaration                            ---
  ----------------------------------------------------------------------

  v_file              UTL_FILE.FILE_TYPE;
  ln_total_cnt        NUMBER := 0;

  lc_file_name        VARCHAR2(60) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_PAYEE_MGR_FILE_NAME');
  lc_file_loc         VARCHAR2(60) := 'XXCRM_OUTBOUND';
  lc_token            VARCHAR2(4000);
  ln_request_id       NUMBER DEFAULT 0;
  lc_message          VARCHAR2(3000);


  lc_sourcepath       VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_SOURCE_PATH') || lc_file_name;
  lc_destpath         VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_DEST_PATH')   || lc_file_name;
  lc_archivepath      VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_ARCH_PATH');
  lc_host_dest        VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_HOST_DEST_PATH');
  lc_to_dir           VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_TO_DIR_PATH');
  lc_zip_path         VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_SOURCE_PATH');
BEGIN
  -- Generate Manager Feed
  fnd_file.put_line (fnd_file.LOG,
                     'Manager Feed Generate Init.'
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');


  ----------------------------------------------------------------------
  ---                Get Request ID                                  ---
  ----------------------------------------------------------------------

  ln_request_id := fnd_global.conc_request_id();


  v_file := UTL_FILE.FOPEN(location     => lc_file_loc,
                           filename     => lc_file_name || '.txt',
                           open_mode    => 'w'
                          );

  -- Add the Header Record
  UTL_FILE.PUT_LINE(v_file,
                    'PayeeId|Reports To|Reports To Start Date|Reports To End Date'
                   );

  ln_total_cnt := 1;


  -- Add detail records
  FOR cur_rec IN c_mgr_data LOOP
    UTL_FILE.PUT_LINE(v_file,
                      cur_rec.mgr_record
                     );
    ln_total_cnt := ln_total_cnt + 1;
  END LOOP;


  UTL_FILE.FCLOSE(v_file);


  fnd_file.put_line (fnd_file.LOG,
                     'Manager Feed Generate Complete'
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---         Printing summary report in the LOG file                ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG,
                     'Total number of Manager Records including Header: ' || TO_CHAR (ln_total_cnt)
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---                Compressing File (ZIP)                          ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG, 'Manager File ZIP Init');
  fnd_file.put_line (fnd_file.LOG,  '');

  XX_CRM_INCENTCOMP_FEED_PKG.Zip_File(p_sourcepath    => lc_sourcepath || '.txt',
                                      p_destpath      => lc_zip_path
                                     );
  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'Manager File ZIP Complete');
  fnd_file.put_line (fnd_file.LOG,   '');


  ----------------------------------------------------------------------
  ---                Copying File                                    ---
  ---  File is generated in $XXCRM/outbound directory. The file has  ---
  ---  to be moved to $XXCRM/FTP/Out directory. As per OD standard   ---
  ---  any external process should not poll any EBS directory.       ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG, 'Manager File Copy Init');
  fnd_file.put_line (fnd_file.LOG,  '');

  XX_CRM_INCENTCOMP_FEED_PKG.Copy_File(p_sourcepath    => lc_sourcepath || '.zip',
                                       p_destpath      => lc_destpath || '.zip',
                                       p_archivepath   => lc_archivepath
                                      );
  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'Manager File Copy Complete');
  fnd_file.put_line (fnd_file.LOG,   '');


  --------------------------------------------------------------------------------
  -- Added new procedures to Transfer the file and raise the BE on Jan 23 2009  --
  --------------------------------------------------------------------------------
  IF  (upper(p_enable_ftp) ='Y' ) THEN
    fnd_file.put_line (fnd_file.LOG, 'Manager Tranfer FTP file Init');
    fnd_file.put_line (fnd_file.LOG,  '');

    lc_destpath := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_DEST_PATH');

    XX_CRM_INCENTCOMP_FEED_PKG.TRNSFR_File(p_host_dest => lc_host_dest,
                                           p_from_dir  => lc_destpath,
                                           p_from_file => lc_file_name,
                                           p_to_dir    => lc_to_dir,
                                           p_to_file   => lc_file_name
                                          );

    COMMIT;
    fnd_file.put_line (fnd_file.LOG, 'Manager Tranfer FTP file Complete');
    fnd_file.put_line (fnd_file.LOG,  '');
  END IF;
EXCEPTION
  WHEN UTL_FILE.INVALID_PATH THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0175_INVALID_FND_DIR');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN UTL_FILE.WRITE_ERROR THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0176_FILE_WRITE_ERROR');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE1', lc_token);
    lc_token   := lc_file_name;
    FND_MESSAGE.SET_TOKEN('MESSAGE2', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN UTL_FILE.ACCESS_DENIED THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0177_FILE_ACCESS_DENIED');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE1', lc_token);
    lc_token   := lc_file_name;
    FND_MESSAGE.SET_TOKEN('MESSAGE2', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN OTHERS THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0178_OTHER_ERROR_MSG');
    lc_token   := SQLCODE||':'|| SUBSTR(SQLERRM,1,256);
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : '||lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
END Generate_Mgr_File;

-- +===================================================================+
-- | Name             : Generate_SalesID_File                          |
-- | Description      : This procedure extracts SalesID feed and FTP   |
-- |                    it over to VARICENT.                           |
-- |                                                                   |
-- | parameters :      x_errbuf                                        |
-- |                   x_retcode                                       |
-- |                                                                   |
-- +===================================================================+

PROCEDURE Generate_SalesID_File(x_errbuf              OUT NOCOPY VARCHAR2,
                                x_retcode             OUT NOCOPY NUMBER,
                                p_as_of_date          IN         DATE,
                                p_enable_ftp          IN         VARCHAR2
                               ) IS


  -- Cursor to extract all the payee salesid data
  CURSOR c_salesid_data IS
  SELECT DISTINCT
         DECODE(d.attribute14, 'OT', TO_NUMBER(a.source_number) || d.role_name,
                'HSE', TO_NUMBER(a.source_number) || d.role_name, TO_NUMBER(a.source_number)
                ) || '|' ||
         c.attribute15  || '|' ||
         to_char(c.start_date_active, 'MM/DD/YYYY') || '|' ||
         to_char(c.end_date_active, 'MM/DD/YYYY') salesid_record
  FROM   apps.jtf_rs_resource_extns_vl a,
         apps.jtf_rs_group_mbr_role_vl b,
         apps.jtf_rs_role_relations c,
         apps.jtf_rs_roles_vl d
  WHERE  ((a.start_date_active <= trunc(p_as_of_date) and
           nvl(a.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(a.start_date_active, sysdate-1) and nvl(a.end_date_active, sysdate+1) or
          trunc(a.end_date_active) >= trunc(p_as_of_date) or
          a.last_update_date > p_as_of_date
         )
    AND  a.source_number IS NOT NULL
    AND  b.resource_id = a.resource_id
    AND  ((b.start_date_active <= trunc(p_as_of_date) and
           nvl(b.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(b.start_date_active, sysdate-1) and nvl(b.end_date_active, sysdate+1) or
          trunc(b.end_date_active) >= trunc(p_as_of_date) or
          c.last_update_date > p_as_of_date
         )
    AND  c.role_relate_id = b.role_relate_id
    AND  ((c.start_date_active <= trunc(p_as_of_date) and
           nvl(c.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(c.start_date_active, sysdate-1) and nvl(c.end_date_active, sysdate+1) or
          trunc(c.end_date_active) >= trunc(p_as_of_date) or
          c.last_update_date > p_as_of_date
         )
    AND  UPPER(NVL(c.attribute15, 'setup')) <> 'SETUP'
    AND  d.role_id = b.role_id
    AND  d.role_type_code = 'SALES'
    AND  nvl(d.active_flag, 'N') = 'Y'
    AND  nvl(d.admin_flag, 'N') = 'N'
  ORDER BY 1;

      --Commented below cursor for QC 16211
  /*
    CURSOR c_salesid_data IS
  SELECT DISTINCT
         DECODE(d.attribute14, 'OT', TO_NUMBER(a.source_number) || d.role_name,
                'HSE', TO_NUMBER(a.source_number) || d.role_name, TO_NUMBER(a.source_number)
                ) || '|' ||
         c.attribute15  || '|' ||
         to_char(c.start_date_active, 'MM/DD/YYYY') || '|' ||
         to_char(c.end_date_active, 'MM/DD/YYYY') salesid_record
  FROM   apps.jtf_rs_resource_extns_vl a,
         apps.jtf_rs_group_mbr_role_vl b,
         apps.jtf_rs_role_relations c,
         apps.jtf_rs_roles_vl d
  WHERE  ((a.start_date_active <= trunc(p_as_of_date) and
           nvl(a.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(a.start_date_active, sysdate-1) and nvl(a.end_date_active, sysdate+1) or
          trunc(a.end_date_active) >= trunc(p_as_of_date)
         )
    AND  a.source_number IS NOT NULL
    AND  b.resource_id = a.resource_id
    AND  ((b.start_date_active <= trunc(p_as_of_date) and
           nvl(b.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(b.start_date_active, sysdate-1) and nvl(b.end_date_active, sysdate+1) or
          trunc(b.end_date_active) >= trunc(p_as_of_date)
         )
    AND  c.role_relate_id = b.role_relate_id
    AND  ((c.start_date_active <= trunc(p_as_of_date) and
           nvl(c.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(c.start_date_active, sysdate-1) and nvl(c.end_date_active, sysdate+1) or
          trunc(c.end_date_active) >= trunc(p_as_of_date)
         )
    AND  UPPER(NVL(c.attribute15, 'setup')) <> 'SETUP'
    AND  d.role_id = b.role_id
    AND  d.role_type_code = 'SALES'
    AND  nvl(d.active_flag, 'N') = 'Y'
    AND  nvl(d.admin_flag, 'N') = 'N'
  ORDER BY 1;
  */
  ----------------------------------------------------------------------
  ---                Variable Declaration                            ---
  ----------------------------------------------------------------------

  v_file              UTL_FILE.FILE_TYPE;
  ln_total_cnt        NUMBER := 0;

  lc_file_name        VARCHAR2(60) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_PAYEE_SALESID_FILE_NAME');
  lc_file_loc         VARCHAR2(60) := 'XXCRM_OUTBOUND';
  lc_token            VARCHAR2(4000);
  ln_request_id       NUMBER DEFAULT 0;
  lc_message          VARCHAR2(3000);


  lc_sourcepath       VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_SOURCE_PATH') || lc_file_name;
  lc_destpath         VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_DEST_PATH')   || lc_file_name;
  lc_archivepath      VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_ARCH_PATH');
  lc_host_dest        VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_HOST_DEST_PATH');
  lc_to_dir           VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_TO_DIR_PATH');
  lc_zip_path         VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_SOURCE_PATH');
BEGIN
  fnd_file.put_line (fnd_file.LOG,
                     'SalesID Feed Generate Init.'
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---                Get Request ID                                  ---
  ----------------------------------------------------------------------

  ln_request_id := fnd_global.conc_request_id();


  v_file := UTL_FILE.FOPEN(location     => lc_file_loc,
                           filename     => lc_file_name || '.txt',
                           open_mode    => 'w'
                          );

  -- Add the Header Record
  UTL_FILE.PUT_LINE(v_file,
                    'PayeeId|SalesID|Effective Start Date|Effective End Date'
                   );

  ln_total_cnt := 1;


  -- Add detail records
  FOR cur_rec IN c_salesid_data LOOP
    UTL_FILE.PUT_LINE(v_file,
                      cur_rec.salesid_record
                     );
    ln_total_cnt := ln_total_cnt + 1;
  END LOOP;


  UTL_FILE.FCLOSE(v_file);


  fnd_file.put_line (fnd_file.LOG,
                     'SalesID Feed Generate Complete'
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---         Printing summary report in the LOG file                ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG,
                     'Total number of SalesID Records including Header: ' || TO_CHAR (ln_total_cnt)
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');


  ----------------------------------------------------------------------
  ---                Compressing File (ZIP)                          ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG, 'SalesID File ZIP Init');
  fnd_file.put_line (fnd_file.LOG,  '');

  XX_CRM_INCENTCOMP_FEED_PKG.Zip_File(p_sourcepath    => lc_sourcepath || '.txt',
                                      p_destpath      => lc_zip_path
                                     );
  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'SalesID File ZIP Complete');
  fnd_file.put_line (fnd_file.LOG,   '');

  ----------------------------------------------------------------------
  ---                Copying File                                    ---
  ---  File is generated in $XXCRM/outbound directory. The file has  ---
  ---  to be moved to $XXCRM/FTP/Out directory. As per OD standard   ---
  ---  any external process should not poll any EBS directory.       ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG, 'SalesID File Copy Init');
  fnd_file.put_line (fnd_file.LOG,  '');

  XX_CRM_INCENTCOMP_FEED_PKG.Copy_File(p_sourcepath    => lc_sourcepath || '.zip',
                                       p_destpath      => lc_destpath || '.zip',
                                       p_archivepath   => lc_archivepath
                                      );
  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'SalesID File Copy Complete');
  fnd_file.put_line (fnd_file.LOG,   '');


  --------------------------------------------------------------------------------
  -- Added new procedures to Transfer the file   --
  --------------------------------------------------------------------------------
  IF  (upper(p_enable_ftp) ='Y' ) THEN
    fnd_file.put_line (fnd_file.LOG, 'SalesID Tranfer FTP file Init');
    fnd_file.put_line (fnd_file.LOG,  '');

    lc_destpath := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_DEST_PATH');

    XX_CRM_INCENTCOMP_FEED_PKG.TRNSFR_File(p_host_dest => lc_host_dest,
                                           p_from_dir  => lc_destpath,
                                           p_from_file => lc_file_name,
                                           p_to_dir    => lc_to_dir,
                                           p_to_file   => lc_file_name
                                          );

    COMMIT;
    fnd_file.put_line (fnd_file.LOG, 'SalesID Tranfer FTP file Complete');
    fnd_file.put_line (fnd_file.LOG,  '');
  END IF;

EXCEPTION
  WHEN UTL_FILE.INVALID_PATH THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0175_INVALID_FND_DIR');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN UTL_FILE.WRITE_ERROR THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0176_FILE_WRITE_ERROR');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE1', lc_token);
    lc_token   := lc_file_name;
    FND_MESSAGE.SET_TOKEN('MESSAGE2', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN UTL_FILE.ACCESS_DENIED THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0177_FILE_ACCESS_DENIED');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE1', lc_token);
    lc_token   := lc_file_name;
    FND_MESSAGE.SET_TOKEN('MESSAGE2', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN OTHERS THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0178_OTHER_ERROR_MSG');
    lc_token   := SQLCODE||':'|| SUBSTR(SQLERRM,1,256);
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : '||lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
END Generate_SalesID_File;

-- +===================================================================+
-- | Name             : Generate_Title_File                            |
-- | Description      : This procedure extracts Title feed and FTP     |
-- |                    it over to VARICENT.                           |
-- |                                                                   |
-- | parameters :      x_errbuf                                        |
-- |                   x_retcode                                       |
-- |                                                                   |
-- +===================================================================+

PROCEDURE Generate_Title_File(x_errbuf              OUT NOCOPY VARCHAR2,
                              x_retcode             OUT NOCOPY NUMBER,
                              p_as_of_date          IN         DATE,
                              p_enable_ftp          IN         VARCHAR2
                             ) IS


  -- Cursor to extract all the payee title data
  CURSOR c_title_data IS
  SELECT DISTINCT
         DECODE(d.attribute14, 'OT', TO_NUMBER(a.source_number) || d.role_name,
                'HSE', TO_NUMBER(a.source_number) || d.role_name, TO_NUMBER(a.source_number)
                ) || '|' ||
         d.role_name  || '|' ||
         to_char(b.start_date_active, 'MM/DD/YYYY') || '|' ||
         to_char(b.end_date_active, 'MM/DD/YYYY')  || '|' ||
         to_char(to_date(e.attribute14), 'MM/DD/YYYY') title_record
  FROM   apps.jtf_rs_resource_extns_vl a,
         apps.jtf_rs_role_relations    b,
         apps.jtf_rs_group_mbr_role_vl c,
         apps.jtf_rs_roles_vl          d,
         apps.jtf_rs_role_relations    e
  WHERE  ((a.start_date_active <= trunc(p_as_of_date) and
           nvl(a.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(a.start_date_active, sysdate-1) and nvl(a.end_date_active, sysdate+1) or
          trunc(a.end_date_active) >= trunc(p_as_of_date) or
          a.last_update_date > p_as_of_date
         )
    AND  a.source_number IS NOT NULL
    AND  b.role_resource_id = a.resource_id
    AND  b.role_resource_type = 'RS_INDIVIDUAL'
    AND  ((b.start_date_active <= trunc(p_as_of_date) and
           nvl(b.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(b.start_date_active, sysdate-1) and nvl(b.end_date_active, sysdate+1) or
          trunc(b.end_date_active) >= trunc(p_as_of_date) or
          b.last_update_date > p_as_of_date
         )
    AND  NVL(b.delete_flag, 'N') <> 'Y'
    AND  c.resource_id = b.role_resource_id
    AND  c.role_id     = b.role_id
    AND  ((c.start_date_active <= trunc(p_as_of_date) and
           nvl(c.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(c.start_date_active, sysdate-1) and nvl(c.end_date_active, sysdate+1) or
          trunc(c.end_date_active) >= trunc(p_as_of_date) or
          e.last_update_date > p_as_of_date
         )
    AND  d.role_id = b.role_id
    AND  d.role_type_code = 'SALES'
    AND  nvl(d.active_flag, 'N') = 'Y'
    AND  nvl(d.admin_flag, 'N') = 'N'
    AND  e.role_relate_id = c.role_relate_id
    AND  UPPER(NVL(e.attribute15, 'setup')) <> 'SETUP'
    AND  ((e.start_date_active <= trunc(p_as_of_date) and
           nvl(e.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(e.start_date_active, sysdate-1) and nvl(e.end_date_active, sysdate+1) or
          trunc(e.end_date_active) >= trunc(p_as_of_date) or
          e.last_update_date > p_as_of_date
         )
  ORDER BY 1;

  --Commented below cursor for QC 16211
  /*
    SELECT DISTINCT
         DECODE(d.attribute14, 'OT', TO_NUMBER(a.source_number) || d.role_name,
                'HSE', TO_NUMBER(a.source_number) || d.role_name, TO_NUMBER(a.source_number)
                ) || '|' ||
         d.role_name  || '|' ||
         to_char(b.start_date_active, 'MM/DD/YYYY') || '|' ||
         to_char(b.end_date_active, 'MM/DD/YYYY')  || '|' ||
         to_char(to_date(e.attribute14), 'MM/DD/YYYY') title_record
  FROM   apps.jtf_rs_resource_extns_vl a,
         apps.jtf_rs_role_relations    b,
         apps.jtf_rs_group_mbr_role_vl c,
         apps.jtf_rs_roles_vl          d,
         apps.jtf_rs_role_relations    e
  WHERE  ((a.start_date_active <= trunc(p_as_of_date) and
           nvl(a.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(a.start_date_active, sysdate-1) and nvl(a.end_date_active, sysdate+1) or
          trunc(a.end_date_active) >= trunc(p_as_of_date)
         )
    AND  a.source_number IS NOT NULL
    AND  b.role_resource_id = a.resource_id
    AND  b.role_resource_type = 'RS_INDIVIDUAL'
    AND  ((b.start_date_active <= trunc(p_as_of_date) and
           nvl(b.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(b.start_date_active, sysdate-1) and nvl(b.end_date_active, sysdate+1) or
          trunc(b.end_date_active) >= trunc(p_as_of_date)
         )
    AND  NVL(b.delete_flag, 'N') <> 'Y'
    AND  c.resource_id = b.role_resource_id
    AND  c.role_id     = b.role_id
    AND  ((c.start_date_active <= trunc(p_as_of_date) and
           nvl(c.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(c.start_date_active, sysdate-1) and nvl(c.end_date_active, sysdate+1) or
          trunc(c.end_date_active) >= trunc(p_as_of_date)
         )
    AND  d.role_id = b.role_id
    AND  d.role_type_code = 'SALES'
    AND  nvl(d.active_flag, 'N') = 'Y'
    AND  nvl(d.admin_flag, 'N') = 'N'
    AND  e.role_relate_id = c.role_relate_id
    AND  UPPER(NVL(e.attribute15, 'setup')) <> 'SETUP'
    AND  ((e.start_date_active <= trunc(p_as_of_date) and
           nvl(e.end_date_active, p_as_of_date+1) >= trunc(p_as_of_date)
          ) or
          sysdate between nvl(e.start_date_active, sysdate-1) and nvl(e.end_date_active, sysdate+1) or
          trunc(e.end_date_active) >= trunc(p_as_of_date)
         )
  ORDER BY 1;
  */



  ----------------------------------------------------------------------
  ---                Variable Declaration                            ---
  ----------------------------------------------------------------------

  v_file              UTL_FILE.FILE_TYPE;
  ln_total_cnt        NUMBER := 0;

  lc_file_name        VARCHAR2(60) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_PAYEE_TITLE_FILE_NAME');
  lc_file_loc         VARCHAR2(60) := 'XXCRM_OUTBOUND';
  lc_token            VARCHAR2(4000);
  ln_request_id       NUMBER DEFAULT 0;
  lc_message          VARCHAR2(3000);

  lc_sourcepath       VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_SOURCE_PATH') || lc_file_name;
  lc_destpath         VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_DEST_PATH')   || lc_file_name;
  lc_archivepath      VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_ARCH_PATH');
  lc_host_dest        VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_HOST_DEST_PATH');
  lc_to_dir           VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_TO_DIR_PATH');
  lc_zip_path         VARCHAR2(2000) := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_SOURCE_PATH');
BEGIN
  fnd_file.put_line (fnd_file.LOG,
                     'Payee Title Feed Generate Init.'
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---                Get Request ID                                  ---
  ----------------------------------------------------------------------

  ln_request_id := fnd_global.conc_request_id();


  v_file := UTL_FILE.FOPEN(location     => lc_file_loc,
                           filename     => lc_file_name || '.txt',
                           open_mode    => 'w'
                          );

  -- Add the Header Record
  UTL_FILE.PUT_LINE(v_file,
                    'PayeeId|TitleId|Title Start Date|Title End Date|Bonus Eligibilty Date'
                   );

  ln_total_cnt := 1;


  -- Add detail records
  FOR cur_rec IN c_title_data LOOP
    UTL_FILE.PUT_LINE(v_file,
                      cur_rec.title_record
                     );
    ln_total_cnt := ln_total_cnt + 1;
  END LOOP;


  UTL_FILE.FCLOSE(v_file);


  fnd_file.put_line (fnd_file.LOG,
                     'Payee Title Feed Generate Complete'
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---         Printing summary report in the LOG file                ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG,
                     'Total number of Title Records including Header: ' || TO_CHAR (ln_total_cnt)
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---                Compressing File (ZIP)                          ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG, 'Payee Title File ZIP Init');
  fnd_file.put_line (fnd_file.LOG,  '');

  XX_CRM_INCENTCOMP_FEED_PKG.Zip_File(p_sourcepath    => lc_sourcepath || '.txt',
                                      p_destpath      => lc_zip_path
                                     );
  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'Payee Title File ZIP Complete');
  fnd_file.put_line (fnd_file.LOG,   '');

  ----------------------------------------------------------------------
  ---                Copying File                                    ---
  ---  File is generated in $XXCRM/outbound directory. The file has  ---
  ---  to be moved to $XXCRM/FTP/Out directory. As per OD standard   ---
  ---  any external process should not poll any EBS directory.       ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG, 'Paye Title File Copy Init');
  fnd_file.put_line (fnd_file.LOG,  '');

  XX_CRM_INCENTCOMP_FEED_PKG.Copy_File(p_sourcepath    => lc_sourcepath || '.zip',
                                       p_destpath      => lc_destpath || '.zip',
                                       p_archivepath   => lc_archivepath
                                      );
  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'Paye Title File Copy Complete');
  fnd_file.put_line (fnd_file.LOG,   '');


  --------------------------------------------------------------------------------
  -- Added new procedures to Transfer the file and raise the BE on Jan 23 2009  --
  --------------------------------------------------------------------------------
  IF  (upper(p_enable_ftp) ='Y' ) THEN
    fnd_file.put_line (fnd_file.LOG, 'Paye Title Tranfer FTP file Init');
    fnd_file.put_line (fnd_file.LOG,  '');

    lc_destpath := FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_DEST_PATH');

    XX_CRM_INCENTCOMP_FEED_PKG.TRNSFR_File(p_host_dest => lc_host_dest,
                                           p_from_dir  => lc_destpath,
                                           p_from_file => lc_file_name,
                                           p_to_dir    => lc_to_dir,
                                           p_to_file   => lc_file_name
                                          );

    COMMIT;
    fnd_file.put_line (fnd_file.LOG, 'Paye Title Tranfer FTP file Complete');
    fnd_file.put_line (fnd_file.LOG,  '');
  END IF;
EXCEPTION
  WHEN UTL_FILE.INVALID_PATH THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0175_INVALID_FND_DIR');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN UTL_FILE.WRITE_ERROR THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0176_FILE_WRITE_ERROR');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE1', lc_token);
    lc_token   := lc_file_name;
    FND_MESSAGE.SET_TOKEN('MESSAGE2', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN UTL_FILE.ACCESS_DENIED THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0177_FILE_ACCESS_DENIED');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE1', lc_token);
    lc_token   := lc_file_name;
    FND_MESSAGE.SET_TOKEN('MESSAGE2', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN OTHERS THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0178_OTHER_ERROR_MSG');
    lc_token   := SQLCODE||':'|| SUBSTR(SQLERRM,1,256);
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : '||lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
END Generate_Title_File;

-- +===================================================================+
-- | Name             : Generate_File                                  |
-- | Description      : This procedure extracts feeds and FTP          |
-- |                    it over to VARICENT.                           |
-- |                                                                   |
-- | parameters :      x_errbuf                                        |
-- |                   x_retcode                                       |
-- |                                                                   |
-- +===================================================================+
PROCEDURE Generate_File(x_errbuf              OUT NOCOPY VARCHAR2,
                        x_retcode             OUT NOCOPY NUMBER,
                        p_enable_ftp          IN         VARCHAR2,
                        p_as_of_date          IN         DATE
                       ) IS

  ld_succ_update_date date;
  ld_start_time VARCHAR2(1000);

BEGIN

  -- Initialize the out Parameters
  x_errbuf  := NULL;
  x_retcode := 0;
  ld_start_time := TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS');


  -- Set the as of date
  IF p_as_of_date IS NULL THEN
    BEGIN
      SELECT to_date(FPOV.profile_option_value,'DD-MON-YYYY HH24:MI:SS')
      INTO   ld_succ_update_date
      FROM   fnd_profile_option_values FPOV
             , fnd_profile_options FPO
      WHERE  FPO.profile_option_id = FPOV.profile_option_id
        AND    FPO.application_id = FPOV.application_id
        AND    FPOV.level_id = G_LEVEL_ID
        AND    FPOV.level_value = G_LEVEL_VALUE
        AND    FPOV.profile_option_value IS NOT NULL
        AND    FPO.profile_option_name = 'XX_CRM_INCENTCOMP_FILE_AS_OF_DATE';
     EXCEPTION
       WHEN OTHERS THEN
         ld_succ_update_date := NULL;
     END;
  ELSE
    ld_succ_update_date := p_as_of_date;
  END IF;



  -- Generate and FTP Payee File
  Generate_Payee_File(x_errbuf,
                      x_retcode,
                      ld_succ_update_date,
                      p_enable_ftp
                     );

  IF NVL(x_retcode, 0) = 0 THEN
    -- Initialize the out Parameters
    x_errbuf  := NULL;
    x_retcode := 0;

    -- Generate and FTP Manager File
    Generate_Mgr_File(x_errbuf,
                      x_retcode,
                      ld_succ_update_date,
                      p_enable_ftp
                     );
  END IF;

  IF NVL(x_retcode, 0) = 0 THEN
    -- Initialize the out Parameters
    x_errbuf  := NULL;
    x_retcode := 0;

    -- Generate and FTP SalesID File
    Generate_SalesID_File(x_errbuf,
                          x_retcode,
                          ld_succ_update_date,
                          p_enable_ftp
                         );
  END IF;

  IF NVL(x_retcode, 0) = 0 THEN
    -- Initialize the out Parameters
    x_errbuf  := NULL;
    x_retcode := 0;

    -- Generate and FTP Title File
    Generate_Title_File(x_errbuf,
                        x_retcode,
                        ld_succ_update_date,
                        p_enable_ftp
                       );
  END IF;

  -- On success set the profile option to save current date time
  IF NVL(x_retcode, 0) = 0 THEN
--Commented below for QC 16211
--  IF FND_PROFILE.SAVE('XX_CRM_INCENTCOMP_FILE_AS_OF_DATE',TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS'),'SITE') THEN
--Added below line for QC 16211
    IF FND_PROFILE.SAVE('XX_CRM_INCENTCOMP_FILE_AS_OF_DATE',NVL(ld_start_time,TO_CHAR(SYSDATE,'DD-MON-YYYY HH24:MI:SS')),'SITE') THEN
      COMMIT;
    END IF;
  END IF;

END Generate_File;
-- +===================================================================+
-- | Name             : Generate_Quota_File                            |
-- | Description      : This procedure extracts Quota feed and FTP     |
-- |                    it over to SYNYGY.                           |
-- |                                                                   |
-- | parameters :      x_errbuf                                        |
-- |                   x_retcode                                       |
-- |                                                                   |
-- +===================================================================+

PROCEDURE Generate_Quota_File(x_errbuf              OUT NOCOPY VARCHAR2,
                              x_retcode             OUT NOCOPY NUMBER
                             ) IS


  -- Cursor to extract all the quota data
  CURSOR c_quota_data IS
  select sales_rep_id|| ',' ||import_date|| ',' ||period|| ',' ||sales_goal|| ',' ||(sales_goal-margin_goal) as qrecord from (
WITH
      T
AS
(
    SELECT
res.legacy_sales_id as sales_rep_id, to_char((trunc(sysdate)),'MM/DD/YYYY') import_date,
   DECODE(jrol.attribute14,'DSM',xmg.jan_mgr_component_of_sales,'RSD',xmg.jan_dir_component_of_sales,xmg.jan_sales) JAN_SALES_TARGET,
   DECODE(jrol.attribute14,'DSM',xmg.feb_mgr_component_of_sales,'RSD',xmg.feb_dir_component_of_sales,xmg.feb_sales) FEB_SALES_TARGET,
   DECODE(jrol.attribute14,'DSM',xmg.mar_mgr_component_of_sales,'RSD',xmg.mar_dir_component_of_sales,xmg.mar_sales) MAR_SALES_TARGET,
   DECODE(jrol.attribute14,'DSM',xmg.apr_mgr_component_of_sales,'RSD',xmg.apr_dir_component_of_sales,xmg.apr_sales) APR_SALES_TARGET,
   DECODE(jrol.attribute14,'DSM',xmg.may_mgr_component_of_sales,'RSD',xmg.may_dir_component_of_sales,xmg.may_sales) MAY_SALES_TARGET,
   DECODE(jrol.attribute14,'DSM',xmg.jun_mgr_component_of_sales,'RSD',xmg.jun_dir_component_of_sales,xmg.jun_sales) JUN_SALES_TARGET,
   DECODE(jrol.attribute14,'DSM',xmg.jul_mgr_component_of_sales,'RSD',xmg.jul_dir_component_of_sales,xmg.jul_sales) JUL_SALES_TARGET,
   DECODE(jrol.attribute14,'DSM',xmg.aug_mgr_component_of_sales,'RSD',xmg.aug_dir_component_of_sales,xmg.aug_sales) AUG_SALES_TARGET,
   DECODE(jrol.attribute14,'DSM',xmg.sep_mgr_component_of_sales,'RSD',xmg.sep_dir_component_of_sales,xmg.sep_sales) SEP_SALES_TARGET,
   DECODE(jrol.attribute14,'DSM',xmg.oct_mgr_component_of_sales,'RSD',xmg.oct_dir_component_of_sales,xmg.oct_sales) OCT_SALES_TARGET,
   DECODE(jrol.attribute14,'DSM',xmg.nov_mgr_component_of_sales,'RSD',xmg.nov_dir_component_of_sales,xmg.nov_sales) NOV_SALES_TARGET,
   DECODE(jrol.attribute14,'DSM',xmg.dec_mgr_component_of_sales,'RSD',xmg.dec_dir_component_of_sales,xmg.dec_sales) DEC_SALES_TARGET,
     DECODE(jrol.attribute14,'DSM',XMG.jan_COST_USED_FOR_mgr_MARGIN,'RSD',XMG.jan_COST_USED_FOR_dir_MARGIN,XMG.jan_COST_USED_FOR_MARGIN) jan_COST_MARGIN,
   DECODE(jrol.attribute14,'DSM',XMG.feb_COST_USED_FOR_mgr_MARGIN,'RSD',XMG.feb_COST_USED_FOR_dir_MARGIN,XMG.feb_COST_USED_FOR_MARGIN) feb_COST_MARGIN,
   DECODE(jrol.attribute14,'DSM',XMG.mar_COST_USED_FOR_mgr_MARGIN,'RSD',XMG.mar_COST_USED_FOR_dir_MARGIN,XMG.mar_COST_USED_FOR_MARGIN) mar_COST_MARGIN,
   DECODE(jrol.attribute14,'DSM',XMG.apr_COST_USED_FOR_mgr_MARGIN,'RSD',XMG.apr_COST_USED_FOR_dir_MARGIN,XMG.apr_COST_USED_FOR_MARGIN) apr_COST_MARGIN,
   DECODE(jrol.attribute14,'DSM',XMG.may_COST_USED_FOR_mgr_MARGIN,'RSD',XMG.may_COST_USED_FOR_dir_MARGIN,XMG.may_COST_USED_FOR_MARGIN) may_COST_MARGIN,
   DECODE(jrol.attribute14,'DSM',XMG.jun_COST_USED_FOR_mgr_MARGIN,'RSD',XMG.jun_COST_USED_FOR_dir_MARGIN,XMG.jun_COST_USED_FOR_MARGIN) jun_COST_MARGIN,
   DECODE(jrol.attribute14,'DSM',XMG.jul_COST_USED_FOR_mgr_MARGIN,'RSD',XMG.jul_COST_USED_FOR_dir_MARGIN,XMG.jul_COST_USED_FOR_MARGIN) jul_COST_MARGIN,
   DECODE(jrol.attribute14,'DSM',XMG.aug_COST_USED_FOR_mgr_MARGIN,'RSD',XMG.aug_COST_USED_FOR_dir_MARGIN,XMG.aug_COST_USED_FOR_MARGIN) aug_COST_MARGIN,
   DECODE(jrol.attribute14,'DSM',XMG.sep_COST_USED_FOR_mgr_MARGIN,'RSD',XMG.sep_COST_USED_FOR_dir_MARGIN,XMG.sep_COST_USED_FOR_MARGIN) sep_COST_MARGIN,
   DECODE(jrol.attribute14,'DSM',XMG.oct_COST_USED_FOR_mgr_MARGIN,'RSD',XMG.oct_COST_USED_FOR_dir_MARGIN,XMG.oct_COST_USED_FOR_MARGIN) oct_COST_MARGIN,
   DECODE(jrol.attribute14,'DSM',XMG.nov_COST_USED_FOR_mgr_MARGIN,'RSD',XMG.nov_COST_USED_FOR_dir_MARGIN,XMG.nov_COST_USED_FOR_MARGIN) nov_COST_MARGIN,
   DECODE(jrol.attribute14,'DSM',XMG.dec_COST_USED_FOR_mgr_MARGIN,'RSD',XMG.dec_COST_USED_FOR_dir_MARGIN,XMG.dec_COST_USED_FOR_MARGIN) dec_COST_MARGIN
FROM
   APPS.XXTPS_RS_GOAL_DETAILS XGD,
   APPS.XXTPS_RS_GOALCOMP_GOALS_V XMG,
   APPS.jtf_rs_resource_extns_vl REP,
   APPS.JTF_RS_ROLES_VL JROL,
   APPS.XXTPS_GOALCALC_LINE_ITEMS_VL GLI,
   XXTPS.XXTPS_SALES_TERMS_ALL T,
   XXTPS.XXTPS_GOAL_COMPONENTS GC,
   XXTPS.XXTPS_GOALS_ALL G,
     ( select mv.legacy_sales_id,resource_id,role_id,group_id from  APPS.xxbi_group_mbr_info_mv mv ,  XXTPS.XXTPS_GOALS_ALL  GoL where 
GoL.curr_goal_year='Y' 
and nvl(mv.end_date_active,sysdate+100)> gol.start_date 
group by mv.legacy_sales_id,resource_id,role_id,group_id ) res
WHERE
       XGD.GOALCALC_RUN_ID IN
 (SELECT MAX(XGCR.GOALCALC_RUN_ID)  FROM
 APPS.XXTPS_GOAL_CALC_RUNCONTROL  XGCR,
 XXTPS.XXTPS_GOALS_ALL  GL
  WHERE XGCR.RUN_STATUS='COMPLETE'
 AND GL.GOAL_ID = XGCR.GOAL_ID
-- AND GL.GOAL_YEAR =   '2015' commented by john
 and GL.curr_goal_year='Y'  -- added by john
 )
  AND apps.xxtps_util_pub.check_overlay(xgd.goalcalc_run_id,xgd.rs_goal_detail_id,xgd.resource_id,xgd.role_id,xgd.managed_by_group_id,xgd.sc_flag)
    IN ('REPOV','REP')
  AND XGD.RS_GOAL_DETAIL_ID = XMG.RS_GOAL_DETAIL_ID
   AND XGD.RESOURCE_ID = REP.RESOURCE_ID
   AND GC.SALES_TERM_ID = T.SALES_TERM_ID
   AND XMG.GOAL_COMPONENT_ID = GC.GOAL_COMPONENT_ID
   AND XGD.ROLE_ID = JROL.ROLE_ID
   AND GLI.CODE = XGD.GOALCALC_LINE_ITEM
   AND GLI.ACTIVE_FLAG = 'Y'
   AND GC.GOAL_ID = G.GOAL_ID
   and xgd.goalcalc_line_item ='TOTALBEGINGOAL'
     and res.role_id=xgd.role_id
      and res.group_id=nvl(xgd.managing_group_id,xgd.managed_by_group_id)
       and    res.resource_id= xgd.resource_id
       and res.legacy_sales_id is not null
   --AND G.GOAL_YEAR = '2015'  -- commented by john 
   and G.curr_goal_year='Y'  -- added by john
  -- and SYSDATE < nvl(xgd.role_end_date, SYSDATE+1)
   )
SELECT
   *
FROM
   T
UNPIVOT
INCLUDE NULLS
 ((sales_goal, margin_goal) FOR period
   IN
   (
      (JAN_SALES_TARGET,jan_COST_MARGIN) as to_char(to_date('12/28/14','MM/DD/YY'),'MM/DD/YYYY')  ,
(FEB_SALES_TARGET,feb_COST_MARGIN) as to_char(to_date('01/25/15','MM/DD/YY'),'MM/DD/YYYY')  ,
(MAR_SALES_TARGET,mar_COST_MARGIN) as to_char(to_date('02/22/15','MM/DD/YY'),'MM/DD/YYYY')  ,
(APR_SALES_TARGET,apr_COST_MARGIN) as to_char(to_date('03/29/15','MM/DD/YY'),'MM/DD/YYYY')  ,
(MAY_SALES_TARGET,may_COST_MARGIN) as to_char(to_date('04/26/15','MM/DD/YY'),'MM/DD/YYYY')  ,
(JUN_SALES_TARGET,jun_COST_MARGIN) as to_char(to_date('05/24/15','MM/DD/YY'),'MM/DD/YYYY')  ,
(JUL_SALES_TARGET,jul_COST_MARGIN) as to_char(to_date('06/28/15','MM/DD/YY'),'MM/DD/YYYY')  ,
(AUG_SALES_TARGET,aug_COST_MARGIN) as to_char(to_date('07/26/15','MM/DD/YY'),'MM/DD/YYYY')  ,
(SEP_SALES_TARGET,sep_COST_MARGIN) as to_char(to_date('08/23/15','MM/DD/YY'),'MM/DD/YYYY')  ,
(OCT_SALES_TARGET,oct_COST_MARGIN) as to_char(to_date('09/27/15','MM/DD/YY'),'MM/DD/YYYY')  ,
(NOV_SALES_TARGET,nov_COST_MARGIN) as to_char(to_date('10/25/15','MM/DD/YY'),'MM/DD/YYYY')  ,
(DEC_SALES_TARGET,dec_COST_MARGIN) as to_char(to_date('11/22/15','MM/DD/YY'),'MM/DD/YYYY')
   )
)) where sales_rep_id is not null ;



  ----------------------------------------------------------------------
  ---                Variable Declaration                            ---
  ----------------------------------------------------------------------

  v_file              UTL_FILE.FILE_TYPE;
  v_filec              UTL_FILE.FILE_TYPE;
  ln_total_cnt        NUMBER := 0;

  lc_file_name        VARCHAR2(60) := FND_PROFILE.VALUE('XX_CRM_SYNYGY_QUOTA_FILE_NAME');
  lc_file_loc         VARCHAR2(60) := 'XXCRM_OUTBOUND';
  lc_token            VARCHAR2(4000);
  ln_request_id       NUMBER DEFAULT 0;
  lc_message          VARCHAR2(3000);

  lc_sourcepath       VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_SOURCE_PATH') || lc_file_name;
  lc_destpath         VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_SYNYGY_FEED_DEST_PATH')   || lc_file_name;
--  lc_archivepath      VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_ARCH_PATH');
  lc_archivepath      VARCHAR2(2000):= null;


BEGIN
  fnd_file.put_line (fnd_file.LOG,
                     'Quota Feed Generate Init.'
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---                Get Request ID                                  ---
  ----------------------------------------------------------------------

  ln_request_id := fnd_global.conc_request_id();


  v_file := UTL_FILE.FOPEN(location     => lc_file_loc,
                           filename     => lc_file_name || '.csv',
                           open_mode    => 'w'
                          );

  -- Add the Header Record
  UTL_FILE.PUT_LINE(v_file,
                    'sales_rep_id,import_date,period,sales_goal,margin_goal '
                   );

  ln_total_cnt := 0;


  -- Add detail records
  FOR cur_rec IN c_quota_data LOOP
    UTL_FILE.PUT_LINE(v_file,
                      cur_rec.qrecord
                     );
    ln_total_cnt := ln_total_cnt + 1;
  END LOOP;

  fnd_file.put_line (fnd_file.LOG,
                     'Total Lines ' || ln_total_cnt
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  UTL_FILE.FCLOSE(v_file);
  v_filec := UTL_FILE.FOPEN(location     => lc_file_loc,
                           filename     => lc_file_name || '.counts.txt',
                           open_mode    => 'w'
                          );

  -- Add the Header Record
  UTL_FILE.PUT_LINE(v_filec,
                    ln_total_cnt ||''
                   );
  UTL_FILE.FCLOSE(v_filec);

  fnd_file.put_line (fnd_file.LOG,
                     'Quota File Complete'
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---         Printing summary report in the LOG file                ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG,
                     'Total number of Title Records including Header: ' || TO_CHAR (ln_total_cnt)
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');



  COMMIT;
  ----------------------------------------------------------------------
  ---                Copying File                                    ---
  ---  File is generated in $XXCRM/outbound directory. The file has  ---
  ---  to be moved to $XXCRM/FTP/Out directory. As per OD standard   ---
  ---  any external process should not poll any EBS directory.       ---
  ----------------------------------------------------------------------

  xx_crm_incentcomp_feed_pkg.copy_file(p_sourcepath    => lc_sourcepath || '.counts.txt',
                                       p_destpath      => lc_destpath || '.counts.txt',p_archivepath => lc_archivepath
                                      );
  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'Quota  File Copy Complete');
  fnd_file.put_line (fnd_file.LOG,   '');

 xx_crm_incentcomp_feed_pkg.copy_file(p_sourcepath    => lc_sourcepath || '.csv',
                                       p_destpath      => lc_destpath || '.csv',p_archivepath => lc_archivepath
                                      );
  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'Quota  File Copy Complete');
  fnd_file.put_line (fnd_file.LOG,   '');

EXCEPTION
  WHEN UTL_FILE.INVALID_PATH THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0175_INVALID_FND_DIR');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN UTL_FILE.WRITE_ERROR THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0176_FILE_WRITE_ERROR');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE1', lc_token);
    lc_token   := lc_file_name;
    FND_MESSAGE.SET_TOKEN('MESSAGE2', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN UTL_FILE.ACCESS_DENIED THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0177_FILE_ACCESS_DENIED');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE1', lc_token);
    lc_token   := lc_file_name;
    FND_MESSAGE.SET_TOKEN('MESSAGE2', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN OTHERS THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0178_OTHER_ERROR_MSG');
    lc_token   := SQLCODE||':'|| SUBSTR(SQLERRM,1,256);
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : '||lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
END Generate_Quota_File;


-- +===================================================================+
-- | Name             : Generate_Overlay_File                            |
-- | Description      : This procedure extracts Overlay feed and FTP     |
-- |                    it over to SYNYGY.                           |
-- |                                                                   |
-- | parameters :      x_errbuf                                        |
-- |                   x_retcode                                       |
-- |                                                                   |
-- +===================================================================+

PROCEDURE Generate_Overlay_File(x_errbuf              OUT NOCOPY VARCHAR2,
                              x_retcode             OUT NOCOPY NUMBER
                             ) IS


  -- Cursor to extract all the Overlay data
  CURSOR c_overlay_data IS
  select '"'||customer_id||'","'||
decode(SHIP_TO_SEQ,-1,'',SHIP_TO_SEQ) ||'","'||
decode(INSTR(OMX_CONSIGNEE_SEQ, 'OMX002'),0,OMX_CONSIGNEE_SEQ,SUBSTR (OMX_CONSIGNEE_SEQ, 0,INSTR(OMX_CONSIGNEE_SEQ, 'OMX002')-1) ) ||'","'||
ovrl_sp_id ||'","'||
primary_div ||'","'||
start_date||'","'||
end_date ||'"' as orecord
from
xxtps.xxtps_ovrl_assgnment_stg where to_date(end_date,'YYYY-MM-DD') > to_date('2014-12-27','YYYY-MM-DD')
and OMX_CONSIGNEE_SEQ not in (select OMX_CONSIGNEE_SEQ from xxtps.xxtps_ovrl_assgnment_stg where OMX_CONSIGNEE_SEQ  like '%OMX001' ) ;



  ----------------------------------------------------------------------
  ---                Variable Declaration                            ---
  ----------------------------------------------------------------------

  v_file              UTL_FILE.FILE_TYPE;
  v_filec              UTL_FILE.FILE_TYPE;
  ln_total_cnt        NUMBER := 0;

  lc_file_name        VARCHAR2(60) := FND_PROFILE.VALUE('XX_CRM_SYNYGY_OVRLY_FILE_NAME');
  lc_file_loc         VARCHAR2(60) := 'XXCRM_OUTBOUND';
  lc_token            VARCHAR2(4000);
  ln_request_id       NUMBER DEFAULT 0;
  lc_message          VARCHAR2(3000);

  lc_sourcepath       VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_SOURCE_PATH') || lc_file_name;
  lc_destpath         varchar2(2000):= fnd_profile.value('XX_CRM_SYNYGY_FEED_DEST_PATH')   || lc_file_name;
  --lc_archivepath      VARCHAR2(2000):= FND_PROFILE.VALUE('XX_CRM_INCENTCOMP_FEED_ARCH_PATH');
  lc_archivepath varchar2(2000):=null;

BEGIN
  fnd_file.put_line (fnd_file.LOG,
                     'Quota Feed Generate Init.'
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---                Get Request ID                                  ---
  ----------------------------------------------------------------------

  ln_request_id := fnd_global.conc_request_id();


  v_file := UTL_FILE.FOPEN(location     => lc_file_loc,
                           filename     => lc_file_name || '.csv',
                           open_mode    => 'w'
                          );

  -- Add the Header Record
  UTL_FILE.PUT_LINE(v_file,
                    '"CUSTOMER_ID","SHIP_TO_SEQ","OMX_CONSIGNEE_SEQ","OVRL_SP_ID","PRIMARY_DIV","START_DATE","END_DATE"'
                   );

  ln_total_cnt := 0;


  -- Add detail records
  FOR cur_rec IN c_overlay_data LOOP
    UTL_FILE.PUT_LINE(v_file,
                      cur_rec.orecord
                     );
    ln_total_cnt := ln_total_cnt + 1;
  END LOOP;


  UTL_FILE.FCLOSE(v_file);
  v_filec := UTL_FILE.FOPEN(location     => lc_file_loc,
                           filename     => lc_file_name || '.counts.txt',
                           open_mode    => 'w'
                          );

  -- Add the Header Record
  UTL_FILE.PUT_LINE(v_filec,
                    ln_total_cnt ||''
                   );
  UTL_FILE.FCLOSE(v_filec);


  fnd_file.put_line (fnd_file.LOG,
                     'Payee Title Feed Generate Complete'
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---         Printing summary report in the LOG file                ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG,
                     'Total number of Title Records including Header: ' || TO_CHAR (ln_total_cnt)
                    );
  fnd_file.put_line (fnd_file.LOG, ' ');

  ----------------------------------------------------------------------
  ---                Compressing File (ZIP)                          ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG, 'Payee Title File ZIP Init');
  fnd_file.put_line (fnd_file.LOG,  '');


  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'Payee Title File ZIP Complete');
  fnd_file.put_line (fnd_file.LOG,   '');

  ----------------------------------------------------------------------
  ---                Copying File                                    ---
  ---  File is generated in $XXCRM/outbound directory. The file has  ---
  ---  to be moved to $XXCRM/FTP/Out directory. As per OD standard   ---
  ---  any external process should not poll any EBS directory.       ---
  ----------------------------------------------------------------------
  fnd_file.put_line (fnd_file.LOG, 'Paye Title File Copy Init');
  fnd_file.put_line (fnd_file.LOG,  '');

 xx_crm_incentcomp_feed_pkg.copy_file(p_sourcepath    => lc_sourcepath || '.counts.txt',
                                       p_destpath      => lc_destpath || '.counts.txt', p_archivepath => lc_archivepath
                                      );
  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'Quota  File Copy Complete');
  fnd_file.put_line (fnd_file.LOG,   '');

 xx_crm_incentcomp_feed_pkg.copy_file(p_sourcepath    => lc_sourcepath || '.csv',
                                       p_destpath      => lc_destpath || '.csv', p_archivepath => lc_archivepath
                                      );
  COMMIT;
  fnd_file.put_line (fnd_file.LOG, 'Paye Title File Copy Complete');
  fnd_file.put_line (fnd_file.LOG,   '');



EXCEPTION
  WHEN UTL_FILE.INVALID_PATH THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0175_INVALID_FND_DIR');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN UTL_FILE.WRITE_ERROR THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0176_FILE_WRITE_ERROR');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE1', lc_token);
    lc_token   := lc_file_name;
    FND_MESSAGE.SET_TOKEN('MESSAGE2', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN UTL_FILE.ACCESS_DENIED THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0177_FILE_ACCESS_DENIED');
    lc_token   := lc_file_loc;
    FND_MESSAGE.SET_TOKEN('MESSAGE1', lc_token);
    lc_token   := lc_file_name;
    FND_MESSAGE.SET_TOKEN('MESSAGE2', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : ' || lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
  WHEN OTHERS THEN
    UTL_FILE.FCLOSE(v_file);
    FND_MESSAGE.SET_NAME('XXCRM','XX_TM_0178_OTHER_ERROR_MSG');
    lc_token   := SQLCODE||':'|| SUBSTR(SQLERRM,1,256);
    FND_MESSAGE.SET_TOKEN('MESSAGE', lc_token);
    lc_message    := FND_MESSAGE.GET;
    fnd_file.put_line (fnd_file.LOG, ' ');
    fnd_file.put_line (fnd_file.LOG, 'An error occured. Details : '||lc_message);
    fnd_file.put_line (fnd_file.LOG, ' ');
    x_retcode := 2;
END Generate_Overlay_File;

end XX_CRM_INCENTCOMP_FEED_PKG;

/
