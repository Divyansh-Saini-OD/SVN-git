SET VERIFY OFF;
WHENEVER SQLERROR CONTINUE;
WHENEVER OSERROR EXIT FAILURE ROLLBACK;

-- +============================================================================================+
-- |                  Office Depot - Project Simplify						|
-- +============================================================================================+
-- | Name        : XX_CRM_EXP_NOTES_PKG.pkb                                                     |
-- | Description : SFDC Conversion                                                              |
-- |                                                                                            |
-- |                                                                                            |
-- |Change Record:                                                                              |
-- |===============                                                                             |
-- |Version     Date           Author               Remarks                                     |
-- |=======    ==========      ================     ============================================|
-- |1.0        08/07/11       Devendra Petkar        Initial version                            |
-- +============================================================================================+

CREATE OR REPLACE PACKAGE BODY xx_crm_exp_notes_pkg
-- +===================================================================+
-- |                  Office Depot -  Ebiz to SFDC Conversion.         |
-- +===================================================================+
-- | Name       :  xx_crm_exp_notes_pkg                                |
-- | Description: This Package is to performed to create csv file from |
-- |          staging table and send this file to the SFDC.            |
-- |          SFDC will load exception table and then this process     |
-- |          will update staging table with exceptions.               |
-- |                                       |
-- |Change Record:                                                     |
-- |===============                                                    |
-- |Version   Date        Author           Remarks                     |
-- |=======   ==========  =============    ============================|
-- |V 1.0    08/07/11   Devendra Petkar                       |
-- +===================================================================+
AS
-- +===================================================================+
-- | Name             : Copy_File                                      |
-- | Description      : This procedure copy the file generated by      |
-- |                    Generate_File procedure from Outbound directory|
-- |                    to FTP out directory.                          |
-- |                                                                   |
-- | parameters :      p_sourcepath                                    |
-- |                   p_destpath                                      |
-- |                                                                   |
-- +===================================================================+
   PROCEDURE generate_file_notes (
      x_errbuf        OUT NOCOPY      VARCHAR2,
      x_retcode       OUT NOCOPY      NUMBER,
      p_entity_name   IN              xx_crm_exp_batch.entity_name%TYPE,
      p_exp_param     IN              VARCHAR2 DEFAULT 'I',
      p_source_batch_id   IN              VARCHAR2 DEFAULT ''
   )
   IS
      lc_batch_id     xx_crm_exp_batch.batch_id%TYPE;
      lc_message1      VARCHAR2 (3000);
      lc_start_date   VARCHAR2 (2000)
                          := fnd_profile.VALUE ('XX_CRM_SFDC_CUST_CONV_START_DATE');
      lc_end_date     VARCHAR2 (2000)
                            := fnd_profile.VALUE ('XX_CRM_SFDC_CUST_CONV_END_DATE');
   BEGIN
      -- Initialize the out Parameters
      x_errbuf := NULL;
      x_retcode := 0;

      fnd_file.put_line (fnd_file.LOG, 'Notes Feed Generation Process start');
      fnd_file.put_line (fnd_file.LOG, ' ');
--- Generate new Batch id
      xx_crm_exp_batch_pkg.generate_batch_id (lc_batch_id, '', p_entity_name);

      fnd_file.put_line (fnd_file.LOG, 'Generated Batch Id');
      fnd_file.put_line (fnd_file.LOG, ' ');

      IF p_entity_name = 'NOTES_PARTY' AND p_exp_param = 'F'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');




         INSERT INTO apps.xx_crm_exp_notes_party
                     (record_id, batch_id, jtf_note_id, source_object_id,
                      source_object_code, status, creation_date, created_by,
                      last_update_date, last_updated_by, notes, notes_detail)
            SELECT ROWNUM, lc_batch_id, jtf_note_id, source_object_id,
                   source_object_code,
                   DECODE (note_status_meaning, 'Public', '0', '1'),
                   TO_CHAR (creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (created_by),
                   TO_CHAR (last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (last_updated_by), SUBSTR (NVL(notes,DBMS_LOB.SUBSTR(notes_detail,70,1)), 1, 70),
                   fnc_note_heading(creation_date,created_by,note_status_meaning)|| notes ||chr(13)||chr(13)||notes_detail
		      FROM apps.jtf_notes_vl a, ( SELECT /*+ PARALLEL (AA,4) PARALLEL (BB,4) */ DISTINCT bb.PARTY_ID
						FROM xxcrm.xx_crm_exp_site_master AA, apps.hz_party_sites BB
						WHERE aa.party_site_id = bb.party_site_id ) b
		     WHERE a.source_object_id = b.party_id
			AND a.source_object_code = 'PARTY'
			;



      lc_message1 := p_entity_name || ' records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

         COMMIT;

         INSERT INTO apps.xx_crm_exp_notes_party_master
		(jtf_note_id, source_object_id, last_update_date)
			SELECT jtf_note_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_notes_party WHERE batch_id=lc_batch_id;

	COMMIT;

	DELETE FROM apps.xx_crm_exp_notes_party_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_notes_party_master GROUP BY jtf_note_id, source_object_id ) A, apps.xx_crm_exp_notes_party_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;

      ELSIF p_entity_name = 'NOTES_PARTY_SITE' AND p_exp_param = 'F'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         INSERT INTO apps.xx_crm_exp_notes_party_site
                     (record_id, batch_id, jtf_note_id, source_object_id,
                      source_object_code, status, creation_date, created_by,
                      last_update_date, last_updated_by, notes, notes_detail)
            SELECT ROWNUM, lc_batch_id, jtf_note_id, source_object_id,
                   source_object_code,
                   DECODE (note_status_meaning, 'Public', '0', '1'),
                   TO_CHAR (creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (created_by),
                   TO_CHAR (last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (last_updated_by), SUBSTR (NVL(notes,DBMS_LOB.SUBSTR(notes_detail,70,1)), 1, 70),
                   fnc_note_heading(creation_date,created_by,note_status_meaning)|| notes ||chr(13)||chr(13)||notes_detail
		      FROM apps.jtf_notes_vl a, (SELECT DISTINCT party_site_id FROM xxcrm.xx_crm_exp_site_master) b
		     WHERE a.source_object_id = b.party_site_id
		       AND a.source_object_code = 'PARTY_SITE'
			;


      lc_message1 := p_entity_name || ' records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         COMMIT;


         INSERT INTO apps.xx_crm_exp_notes_site_master
		(jtf_note_id, source_object_id, last_update_date)
			SELECT jtf_note_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_notes_party_site WHERE batch_id=lc_batch_id;

	COMMIT;


	DELETE FROM apps.xx_crm_exp_notes_site_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_notes_site_master GROUP BY jtf_note_id, source_object_id ) A, apps.xx_crm_exp_notes_site_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;

      ELSIF p_entity_name = 'NOTES_LEAD' AND p_exp_param = 'F'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


	 INSERT INTO apps.xx_crm_exp_notes_lead
                     (record_id, batch_id, jtf_note_id, source_object_id,
                      source_object_code, status, creation_date, created_by,
                      last_update_date, last_updated_by, notes, notes_detail)
            SELECT ROWNUM, lc_batch_id, jtf_note_id, b.oracle_entity_id,
                   source_object_code,
                   DECODE (note_status_meaning, 'Public', '0', '1'),
                   TO_CHAR (creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (created_by),
                   TO_CHAR (last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (last_updated_by), SUBSTR (NVL(notes,DBMS_LOB.SUBSTR(notes_detail,70,1)), 1, 70),
                   fnc_note_heading(creation_date,created_by,note_status_meaning)|| notes ||chr(13)||chr(13)||notes_detail
		      FROM apps.jtf_notes_vl a,  (SELECT DISTINCT attribute1, oracle_entity_id FROM xxcrm.xx_crm_exp_lead WHERE batch_id = NVL(p_source_batch_id,batch_id)) b
		     WHERE a.source_object_id = b.attribute1
		       AND a.source_object_code = 'LEAD'
			;



      lc_message1 := p_entity_name || ' records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         COMMIT;


         INSERT INTO apps.xx_crm_exp_notes_lead_master
		(jtf_note_id, source_object_id, last_update_date)
			SELECT jtf_note_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_notes_lead WHERE batch_id=lc_batch_id;

	COMMIT;



	DELETE FROM apps.xx_crm_exp_notes_lead_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_notes_lead_master GROUP BY jtf_note_id, source_object_id ) A, apps.xx_crm_exp_notes_lead_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      ELSIF p_entity_name = 'NOTES_OPPORTUNITY' AND p_exp_param = 'F'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         INSERT INTO apps.xx_crm_exp_notes_opportunity
                     (record_id, batch_id, jtf_note_id, source_object_id,
                      source_object_code, status, creation_date, created_by,
                      last_update_date, last_updated_by, notes, notes_detail)
            SELECT ROWNUM, lc_batch_id, jtf_note_id, b.oracle_entity_id,
                   source_object_code,
                   DECODE (note_status_meaning, 'Public', '0', '1'),
                   TO_CHAR (creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (created_by),
                   TO_CHAR (last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (last_updated_by), SUBSTR (NVL(notes,DBMS_LOB.SUBSTR(notes_detail,70,1)), 1, 70),
                   fnc_note_heading(creation_date,created_by,note_status_meaning)|| notes ||chr(13)||chr(13)||notes_detail
		      FROM apps.jtf_notes_vl a, ( SELECT DISTINCT attribute1,oracle_entity_id FROM  xxcrm.xx_crm_exp_opportunity WHERE batch_id = NVL(p_source_batch_id,batch_id)) b
		     WHERE a.source_object_id = b.attribute1
		       AND a.source_object_code = 'OPPORTUNITY'
			;


      lc_message1 := p_entity_name || ' records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         COMMIT;

         INSERT INTO apps.xx_crm_exp_notes_opp_master
		(jtf_note_id, source_object_id, last_update_date)
			SELECT jtf_note_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_notes_opportunity WHERE batch_id=lc_batch_id;

	COMMIT;


	DELETE FROM apps.xx_crm_exp_notes_opp_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_notes_opp_master GROUP BY jtf_note_id, source_object_id ) A, apps.xx_crm_exp_notes_opp_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      ELSIF p_entity_name = 'NOTES_PARTY' AND p_exp_param = 'I'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


        INSERT INTO apps.xx_crm_exp_notes_party
                     (record_id, batch_id, jtf_note_id, source_object_id,
                      source_object_code, status, creation_date, created_by,
                      last_update_date, last_updated_by, notes, notes_detail)
            SELECT ROWNUM, lc_batch_id, notes_final.jtf_note_id, delta.source_object_id,
                   notes_final.source_object_code,
                   DECODE (notes_final.note_status_meaning, 'Public', '0', '1'),
                   TO_CHAR (notes_final.creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (notes_final.created_by),
                   TO_CHAR (notes_final.last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (notes_final.last_updated_by), SUBSTR (NVL(notes_final.notes,DBMS_LOB.SUBSTR(notes_final.notes_detail,70,1)), 1, 70),
                   fnc_note_heading(notes_final.creation_date,notes_final.created_by,notes_final.note_status_meaning)|| notes_final.notes ||chr(13)||chr(13)||notes_final.notes_detail
	FROM
	(
	-- Checking Delta
		    SELECT a.jtf_note_id, a.source_object_id
		      FROM apps.jtf_notes_vl a, apps.hz_parties b
		     WHERE a.source_object_id = b.party_id
			AND b.party_type = 'ORGANIZATION'
			AND a.source_object_code = 'PARTY'
		       AND (   a.creation_date  BETWEEN TO_DATE (lc_start_date,'MM/DD/YYYY HH24:MI:SS' )
				      AND TO_DATE (lc_end_date, 'MM/DD/YYYY HH24:MI:SS')
			   )
		     UNION
			SELECT a.jtf_note_id, a.source_object_id
			      FROM apps.jtf_notes_vl a, ( SELECT /*+ PARALLEL (AA,4) PARALLEL (BB,4) */ DISTINCT bb.PARTY_ID
							FROM xxcrm.xx_crm_exp_site_master AA, apps.hz_party_sites BB
							WHERE aa.party_site_id = bb.party_site_id and aa.last_update_date BETWEEN TO_DATE (lc_start_date, 'MM/DD/YYYY HH24:MI:SS') AND TO_DATE (lc_end_date, 'MM/DD/YYYY HH24:MI:SS')  ) b
			     WHERE a.source_object_id = b.party_id
				AND a.source_object_code = 'PARTY'
	-- Checking Delta end
	) DELTA,
	-- Checking already sent
	apps.xx_crm_exp_notes_party_master master, apps.jtf_notes_vl notes_final
	WHERE delta.jtf_note_id = master.jtf_note_id(+)
	      AND to_char(delta.source_object_id) = master.source_object_id(+)
	      AND master.jtf_note_id is NULL AND master.source_object_id is NULL
	      AND notes_final.jtf_note_id = delta.jtf_note_id
	      AND notes_final.source_object_code = 'PARTY';

      lc_message1 := p_entity_name || ' New records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         COMMIT;


		DELETE FROM xx_crm_exp_notes_party A WHERE a.batch_id=lc_batch_id AND rowid <>
		(SELECT max(rowid) FROM xx_crm_exp_notes_party B
			WHERE b.batch_id=lc_batch_id AND b.jtf_note_id = a.jtf_note_id
				AND b.source_object_id = a.source_object_id   )
		;

		IF sql%rowcount <> 0 THEN
		      lc_message1 := p_entity_name || ' Dulicate  records deleted are '||sql%rowcount||' .';
		      fnd_file.put_line (fnd_file.LOG, lc_message1);
		      fnd_file.put_line (fnd_file.LOG, ' ');
		END IF;

	COMMIT;


         INSERT INTO apps.xx_crm_exp_notes_party_master
		(jtf_note_id, source_object_id, last_update_date)
			SELECT jtf_note_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_notes_party WHERE batch_id=lc_batch_id;

	COMMIT;

	DELETE FROM apps.xx_crm_exp_notes_party_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_notes_party_master GROUP BY jtf_note_id, source_object_id ) A, apps.xx_crm_exp_notes_party_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      ELSIF p_entity_name = 'NOTES_PARTY_SITE' AND p_exp_param = 'I'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         INSERT INTO apps.xx_crm_exp_notes_party_site
                     (record_id, batch_id, jtf_note_id, source_object_id,
                      source_object_code, status, creation_date, created_by,
                      last_update_date, last_updated_by, notes, notes_detail)
            SELECT ROWNUM, lc_batch_id, notes_final.jtf_note_id, delta.source_object_id,
                   notes_final.source_object_code,
                   DECODE (notes_final.note_status_meaning, 'Public', '0', '1'),
                   TO_CHAR (notes_final.creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (notes_final.created_by),
                   TO_CHAR (notes_final.last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (notes_final.last_updated_by), SUBSTR (NVL(notes_final.notes,DBMS_LOB.SUBSTR(notes_final.notes_detail,70,1)), 1, 70),
                   fnc_note_heading(notes_final.creation_date,notes_final.created_by,notes_final.note_status_meaning)|| notes_final.notes ||chr(13)||chr(13)||notes_final.notes_detail
	FROM
	(
	-- Checking Delta
		    SELECT a.jtf_note_id, a.source_object_id
		      FROM apps.jtf_notes_vl a
			WHERE a.source_object_code = 'PARTY_SITE'
		       AND (   a.creation_date  BETWEEN TO_DATE (lc_start_date,'MM/DD/YYYY HH24:MI:SS' )
				      AND TO_DATE (lc_end_date, 'MM/DD/YYYY HH24:MI:SS')
			   )
		     UNION
			SELECT a.jtf_note_id, a.source_object_id
			      FROM apps.jtf_notes_vl a, ( SELECT DISTINCT AA.PARTY_SITE_ID  FROM xxcrm.xx_crm_exp_site_master AA
							WHERE  aa.last_update_date BETWEEN TO_DATE (lc_start_date, 'MM/DD/YYYY HH24:MI:SS') AND TO_DATE (lc_end_date, 'MM/DD/YYYY HH24:MI:SS')  ) b
			     WHERE a.source_object_id = b.party_site_id
				AND a.source_object_code = 'PARTY_SITE'
	-- Checking Delta end
	) DELTA,
	-- Checking already sent
	apps.xx_crm_exp_notes_site_master master, apps.jtf_notes_vl notes_final
	WHERE delta.jtf_note_id = master.jtf_note_id(+)
	      AND to_char(delta.source_object_id) = master.source_object_id(+)
	      AND master.jtf_note_id is NULL AND master.source_object_id is NULL
	      AND notes_final.jtf_note_id = delta.jtf_note_id
	      AND notes_final.source_object_code = 'PARTY_SITE';

      lc_message1 := p_entity_name || ' New records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         COMMIT;


		DELETE FROM xx_crm_exp_notes_party_site A WHERE a.batch_id=lc_batch_id AND rowid <>
		(SELECT max(rowid) FROM xx_crm_exp_notes_party_site B
			WHERE b.batch_id=lc_batch_id AND b.jtf_note_id = a.jtf_note_id
				AND b.source_object_id = a.source_object_id   )
		;

		IF sql%rowcount <> 0 THEN
		      lc_message1 := p_entity_name || ' Dulicate  records deleted are '||sql%rowcount||' .';
		      fnd_file.put_line (fnd_file.LOG, lc_message1);
		      fnd_file.put_line (fnd_file.LOG, ' ');
		END IF;

	COMMIT;

-- Add note_id index
         INSERT INTO apps.xx_crm_exp_notes_site_master
		(jtf_note_id, source_object_id, last_update_date)
			SELECT jtf_note_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_notes_party_site WHERE batch_id=lc_batch_id;

	COMMIT;


	DELETE FROM apps.xx_crm_exp_notes_site_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_notes_site_master GROUP BY jtf_note_id, source_object_id ) A, apps.xx_crm_exp_notes_site_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      ELSIF p_entity_name = 'NOTES_LEAD' AND p_exp_param = 'I'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         INSERT INTO apps.xx_crm_exp_notes_lead
                     (record_id, batch_id, jtf_note_id, source_object_id,
                      source_object_code, status, creation_date, created_by,
                      last_update_date, last_updated_by, notes, notes_detail)
            SELECT ROWNUM, lc_batch_id, notes_final.jtf_note_id, delta.source_object_id,
                   notes_final.source_object_code,
                   DECODE (notes_final.note_status_meaning, 'Public', '0', '1'),
                   TO_CHAR (notes_final.creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (notes_final.created_by),
                   TO_CHAR (notes_final.last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (notes_final.last_updated_by), SUBSTR (NVL(notes_final.notes,DBMS_LOB.SUBSTR(notes_final.notes_detail,70,1)), 1, 70),
                   fnc_note_heading(notes_final.creation_date,notes_final.created_by,notes_final.note_status_meaning)|| notes_final.notes ||chr(13)||chr(13)||notes_final.notes_detail
	FROM
	(
	-- Checking Delta
--new notes
		SELECT a.jtf_note_id, NVL(b.oracle_entity_id,'L-'||a.source_object_id||'-') source_object_id
		      FROM apps.jtf_notes_vl a, (SELECT  DISTINCT 'L-'  ||m.sales_lead_id  ||'-'  ||ll.sales_lead_line_id oracle_entity_id, m.sales_lead_id
							FROM apps.as_sales_lead_lines ll, apps.as_sales_leads m
							WHERE m.sales_lead_id  =ll.sales_lead_id) b
		     WHERE a.source_object_code = 'LEAD'
			 AND a.source_object_id = b.sales_lead_id(+)
		       AND (   a.creation_date BETWEEN TO_DATE (lc_start_date,'MM/DD/YYYY HH24:MI:SS')
				      AND TO_DATE (lc_end_date, 'MM/DD/YYYY HH24:MI:SS')
			   )
	         UNION
-- new product
			SELECT a.jtf_note_id, b.oracle_entity_id source_object_id
			      FROM apps.jtf_notes_vl a, (SELECT  DISTINCT 'L-'  ||m.sales_lead_id  ||'-'  ||ll.sales_lead_line_id oracle_entity_id, m.sales_lead_id
								FROM apps.as_sales_lead_lines ll, apps.as_sales_leads m
								WHERE m.sales_lead_id  =ll.sales_lead_id
								AND ll.creation_date  BETWEEN TO_DATE (lc_start_date,'MM/DD/YYYY HH24:MI:SS')
									      AND TO_DATE (lc_end_date, 'MM/DD/YYYY HH24:MI:SS')
								) b
		     WHERE a.source_object_code = 'LEAD'
			 AND a.source_object_id = b.sales_lead_id

		UNION
-- Sites modified
			SELECT a.jtf_note_id, NVL(b.oracle_entity_id,'L-'||a.source_object_id||'-') source_object_id
			      FROM apps.jtf_notes_vl a, (SELECT  DISTINCT 'L-'  ||m.sales_lead_id  ||'-' || ll.sales_lead_line_id oracle_entity_id, m.sales_lead_id
								FROM apps.as_sales_lead_lines ll, apps.as_sales_leads m, xxcrm.xx_crm_exp_site_master master
								WHERE m.sales_lead_id  =ll.sales_lead_id(+)
								     AND master.party_site_id = m.address_id
								     AND master.last_update_date BETWEEN TO_DATE (lc_start_date, 'MM/DD/YYYY HH24:MI:SS')
											AND TO_DATE (lc_end_date, 'MM/DD/YYYY HH24:MI:SS')
							) b
			     WHERE a.source_object_code = 'LEAD'
				 AND a.source_object_id = b.sales_lead_id

	-- Checking Delta end
	) DELTA,
	-- Checking already sent
	apps.xx_crm_exp_notes_lead_master master, apps.jtf_notes_vl notes_final
	WHERE delta.jtf_note_id = master.jtf_note_id(+)
	      AND to_char(delta.source_object_id) = master.source_object_id(+)
	      AND master.jtf_note_id is NULL AND master.source_object_id is NULL
	      AND notes_final.jtf_note_id = delta.jtf_note_id
	      AND notes_final.source_object_code = 'LEAD';

      lc_message1 := p_entity_name || ' New records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

         COMMIT;

		DELETE FROM xx_crm_exp_notes_lead A WHERE a.batch_id=lc_batch_id AND rowid <>
		(SELECT max(rowid) FROM xx_crm_exp_notes_lead B
			WHERE b.batch_id=lc_batch_id AND b.jtf_note_id = a.jtf_note_id
				AND b.source_object_id = a.source_object_id   )
		;

		IF sql%rowcount <> 0 THEN
		      lc_message1 := p_entity_name || ' Dulicate  records deleted are '||sql%rowcount||' .';
		      fnd_file.put_line (fnd_file.LOG, lc_message1);
		      fnd_file.put_line (fnd_file.LOG, ' ');
		END IF;

	COMMIT;


         INSERT INTO apps.xx_crm_exp_notes_lead_master
		(jtf_note_id, source_object_id, last_update_date)
			SELECT jtf_note_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_notes_lead WHERE batch_id=lc_batch_id;

	COMMIT;



	DELETE FROM apps.xx_crm_exp_notes_lead_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_notes_lead_master GROUP BY jtf_note_id, source_object_id ) A, apps.xx_crm_exp_notes_lead_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      ELSIF p_entity_name = 'NOTES_OPPORTUNITY' AND p_exp_param = 'I'
      THEN

      lc_message1 := p_entity_name || ' Insertion into staging Init.';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');


         INSERT INTO apps.xx_crm_exp_notes_opportunity
                     (record_id, batch_id, jtf_note_id, source_object_id,
                      source_object_code, status, creation_date, created_by,
                      last_update_date, last_updated_by, notes, notes_detail)
            SELECT ROWNUM, lc_batch_id, notes_final.jtf_note_id, delta.source_object_id,
                   notes_final.source_object_code,
                   DECODE (notes_final.note_status_meaning, 'Public', '0', '1'),
                   TO_CHAR (notes_final.creation_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (notes_final.created_by),
                   TO_CHAR (notes_final.last_update_date, 'yyyy-mm-dd"T"hh24:mi:ss'),
                   fnc_created_by (notes_final.last_updated_by), SUBSTR (NVL(notes_final.notes,DBMS_LOB.SUBSTR(notes_final.notes_detail,70,1)), 1, 70),
                   fnc_note_heading(notes_final.creation_date,notes_final.created_by,notes_final.note_status_meaning)|| notes_final.notes ||chr(13)||chr(13)||notes_final.notes_detail
	FROM
	(
	-- Checking Delta
--new notes
		SELECT a.jtf_note_id, NVL(b.oracle_entity_id,'O-'||a.source_object_id||'-') source_object_id
		      FROM apps.jtf_notes_vl a, (SELECT  DISTINCT 'O-'  ||m.lead_id  ||'-'  ||ll.lead_line_id oracle_entity_id, m.lead_id
							FROM apps.as_lead_lines ll, apps.as_leads_all m
							WHERE m.lead_id  =ll.lead_id) b
		     WHERE a.source_object_code = 'OPPORTUNITY'
			 AND a.source_object_id = b.lead_id(+)
		       AND (   a.creation_date BETWEEN TO_DATE (lc_start_date,'MM/DD/YYYY HH24:MI:SS')
				      AND TO_DATE (lc_end_date, 'MM/DD/YYYY HH24:MI:SS')
			   )
	         UNION
-- new product
			SELECT a.jtf_note_id, b.oracle_entity_id source_object_id
			      FROM apps.jtf_notes_vl a, (SELECT  DISTINCT 'O-'  ||m.lead_id  ||'-'  ||ll.lead_line_id oracle_entity_id, m.lead_id
								FROM apps.as_lead_lines ll, apps.as_leads_all m
								WHERE m.lead_id  =ll.lead_id
								AND ll.creation_date  BETWEEN TO_DATE (lc_start_date,'MM/DD/YYYY HH24:MI:SS')
									      AND TO_DATE (lc_end_date, 'MM/DD/YYYY HH24:MI:SS')
								) b
		     WHERE a.source_object_code = 'OPPORTUNITY'
			 AND a.source_object_id = b.lead_id

		UNION
-- Sites modified
			SELECT a.jtf_note_id, NVL(b.oracle_entity_id,'O-'||a.source_object_id||'-') source_object_id
			      FROM apps.jtf_notes_vl a, (SELECT  DISTINCT 'O-'  ||m.lead_id  ||'-' || ll.lead_line_id oracle_entity_id, m.lead_id
								FROM apps.as_lead_lines ll, apps.as_leads_all m, xxcrm.xx_crm_exp_site_master master
								WHERE m.lead_id  =ll.lead_id(+)
								     AND master.party_site_id = m.address_id
								     AND master.last_update_date BETWEEN TO_DATE (lc_start_date, 'MM/DD/YYYY HH24:MI:SS')
											AND TO_DATE (lc_end_date, 'MM/DD/YYYY HH24:MI:SS')
							) b
			     WHERE a.source_object_code = 'OPPORTUNITY'
				 AND a.source_object_id = b.lead_id

	-- Checking Delta end
	) DELTA,
	-- Checking already sent
	apps.xx_crm_exp_notes_opp_master master, apps.jtf_notes_vl notes_final
	WHERE delta.jtf_note_id = master.jtf_note_id(+)
	      AND to_char(delta.source_object_id) = master.source_object_id(+)
	      AND master.jtf_note_id is NULL AND master.source_object_id is NULL
	      AND notes_final.jtf_note_id = delta.jtf_note_id
	      AND notes_final.source_object_code = 'OPPORTUNITY';

      lc_message1 := p_entity_name || ' New records inserted are '||sql%rowcount||' .';
      fnd_file.put_line (fnd_file.LOG, lc_message1);
      fnd_file.put_line (fnd_file.LOG, ' ');

         COMMIT;

		DELETE FROM xx_crm_exp_notes_opportunity A WHERE a.batch_id=lc_batch_id AND rowid <>
		(SELECT max(rowid) FROM xx_crm_exp_notes_opportunity B
			WHERE b.batch_id=lc_batch_id AND b.jtf_note_id = a.jtf_note_id
				AND b.source_object_id = a.source_object_id   )
		;

		IF sql%rowcount <> 0 THEN
		      lc_message1 := p_entity_name || ' Dulicate  records deleted are '||sql%rowcount||' .';
		      fnd_file.put_line (fnd_file.LOG, lc_message1);
		      fnd_file.put_line (fnd_file.LOG, ' ');
		END IF;

	COMMIT;


         INSERT INTO apps.xx_crm_exp_notes_opp_master
		(jtf_note_id, source_object_id, last_update_date)
			SELECT jtf_note_id, source_object_id, to_date(replace(last_update_date,'T',' '),'yyyy-mm-dd hh24:mi:ss')
			FROM apps.xx_crm_exp_notes_opportunity WHERE batch_id=lc_batch_id;

	COMMIT;



	DELETE FROM apps.xx_crm_exp_notes_opp_master WHERE ROWID IN
	(
	SELECT b.ROWID FROM
	(SELECT MAX(rowid) rowid_1 FROM apps.xx_crm_exp_notes_opp_master GROUP BY jtf_note_id, source_object_id ) A, apps.xx_crm_exp_notes_opp_master B
	WHERE a.ROWID_1(+) = b.ROWID AND a.ROWID_1 IS NULL
	);

	COMMIT;


      END IF;

-- Create csv file
      xx_crm_exp_batch_pkg.generate_file (x_errbuf, x_retcode, lc_batch_id);

   END generate_file_notes;

   FUNCTION fnc_created_by (p_created_by VARCHAR2)
      RETURN VARCHAR2
   IS
      lc_employee_number   VARCHAR2 (30);
   BEGIN

      SELECT user_name
        INTO lc_employee_number
--        FROM apps.jtf_rs_emp_dtls_vl
	FROM apps.xx_crm_emp_resources_v
       WHERE user_id = p_created_by
         AND user_name IS NOT NULL
	 AND USER_NAME NOT IN ('ODCDH', 'ODSFA', 'ODCRMBPEL')
	 AND status='A'
         AND ROWNUM = 1;

      RETURN lc_employee_number;
   EXCEPTION
      WHEN OTHERS
      THEN
         lc_employee_number:='000000';
	 RETURN lc_employee_number;
   END fnc_created_by;


   FUNCTION fnc_note_heading (p_created_date date,p_created_by VARCHAR2, p_note_status_meaning VARCHAR2 )
      RETURN VARCHAR2
      IS
            lc_note_heading   VARCHAR2 (100) :=null;
	    lc_employee_name  VARCHAR2 (100) :=null;
   BEGIN
	     lc_note_heading := TO_CHAR (p_created_date, 'DD-MON-YYYY  hh:mm AM')||', ';

		BEGIN
			SELECT full_name||' ('||employee_number||','||employee_number||'),'
				INTO lc_employee_name
			FROM apps.jtf_rs_emp_dtls_vl
		       WHERE user_id = p_created_by
				 AND employee_number IS NOT NULL
				 AND ROWNUM = 1;
		EXCEPTION
	          WHEN OTHERS
	          THEN
		  NULL;
		END;
	lc_note_heading := lc_note_heading||lc_employee_name||chr(13)||p_note_status_meaning||chr(13);

      RETURN lc_note_heading;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END fnc_note_heading;

END xx_crm_exp_notes_pkg;
/
SHOW ERRORS;
EXIT;
